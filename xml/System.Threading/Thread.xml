<Type Name="Thread" FullName="System.Threading.Thread">
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="476fe-101">Crea y controla un subproceso, establece su prioridad y obtiene su estado.</span><span class="sxs-lookup"><span data-stu-id="476fe-101">Creates and controls a thread, sets its priority, and gets its status.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-102">Cuando se inicia un proceso, common language runtime crea automáticamente un subproceso único de primer plano para ejecutar código de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="476fe-103">Junto con este subproceso principal en primer plano, un proceso puede crear uno o varios subprocesos para ejecutar una parte del código de programa asociado al proceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="476fe-104">Estos subprocesos pueden ejecutar en primer plano o en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="476fe-105">Además, puede usar el <xref:System.Threading.ThreadPool> clase para ejecutar código en subprocesos de trabajo administrados por common language runtime.</span><span class="sxs-lookup"><span data-stu-id="476fe-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="476fe-106">En esta sección</span><span class="sxs-lookup"><span data-stu-id="476fe-106">In this section</span></span>  
  
 <span data-ttu-id="476fe-107">[A partir de un subproceso](#Starting) </span><span class="sxs-lookup"><span data-stu-id="476fe-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="476fe-108">[Al recuperar objetos de subproceso](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="476fe-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="476fe-109">[Subprocesos de primer plano y fondo](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="476fe-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="476fe-110">[Referencia cultural y subprocesos](#Culture) </span><span class="sxs-lookup"><span data-stu-id="476fe-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="476fe-111">Obtener información sobre y controlar subprocesos</span><span class="sxs-lookup"><span data-stu-id="476fe-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="476fe-112">A partir de un subproceso</span><span class="sxs-lookup"><span data-stu-id="476fe-112">Starting a thread</span></span>  
 <span data-ttu-id="476fe-113">Iniciar un subproceso proporcionando un delegado que representa el método que el subproceso está en ejecución en su constructor de clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="476fe-114">A continuación, llame a la <xref:System.Threading.Thread.Start%2A> método para comenzar la ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="476fe-115">El <xref:System.Threading.Thread> constructores pueden aceptar cualquiera de los tipos de delegado dos, dependiendo de si se puede pasar un argumento al método que se ejecute:</span><span class="sxs-lookup"><span data-stu-id="476fe-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="476fe-116">Si el método no tiene ningún argumento, se pasa un <xref:System.Threading.ThreadStart> delegar en el constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="476fe-117">Tiene la firma:</span><span class="sxs-lookup"><span data-stu-id="476fe-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="476fe-118">En el ejemplo siguiente se crea e inicia un subproceso que ejecuta el `ExecuteInForeground` método.</span><span class="sxs-lookup"><span data-stu-id="476fe-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="476fe-119">El método muestra información acerca de algunas propiedades de subproceso y, a continuación, ejecuta un bucle en el que se pone en pausa durante medio segundo y se muestra el número de segundos transcurrido.</span><span class="sxs-lookup"><span data-stu-id="476fe-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="476fe-120">Cuando el subproceso ha ejecutado durante al menos cinco segundos, finaliza el bucle y el subproceso termina la ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="476fe-121">Si el método tiene un argumento, se pasa un <xref:System.Threading.ParameterizedThreadStart> delegar en el constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="476fe-122">Tiene la firma:</span><span class="sxs-lookup"><span data-stu-id="476fe-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="476fe-123">El método ejecutado por el delegado, a continuación, puede convertir (en C#) o convertir el parámetro (en Visual Basic) al tipo adecuado.</span><span class="sxs-lookup"><span data-stu-id="476fe-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="476fe-124">En el siguiente ejemplo es idéntico al anterior, salvo que lo llama el <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="476fe-125">Esta versión de la `ExecuteInForeground` método tiene un parámetro único que representa el número aproximado de milisegundos el bucle que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="476fe-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="476fe-126">No es necesario conservar una referencia a un <xref:System.Threading.Thread> objeto una vez que se ha iniciado el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="476fe-127">El subproceso continúa ejecutándose hasta que se complete el procedimiento de subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="476fe-128">Al recuperar objetos de subproceso</span><span class="sxs-lookup"><span data-stu-id="476fe-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="476fe-129">Puede usar el método estático (`Shared` en Visual Basic) <xref:System.Threading.Thread.CurrentThread%2A> propiedad para recuperar una referencia para el subproceso actualmente en ejecución desde el código que se está ejecutando el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="476fe-130">En el ejemplo siguiente se usa el <xref:System.Threading.Thread.CurrentThread%2A> propiedad para mostrar información sobre el subproceso de aplicación principal, otro subproceso en primer plano, un subproceso en segundo plano y un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="476fe-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="476fe-131">Subprocesos de primer plano y fondo</span><span class="sxs-lookup"><span data-stu-id="476fe-131">Foreground and background threads</span></span>  
 <span data-ttu-id="476fe-132">Instancias de la <xref:System.Threading.Thread> clase representan los subprocesos de primer plano o en subprocesos en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="476fe-133">Subprocesos en segundo plano son idénticos a los subprocesos de primer plano con una excepción: un subproceso en segundo plano no mantiene un proceso que se ejecuta si han finalizado todos los subprocesos de primer plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="476fe-134">Una vez que se han detenido todos los subprocesos de primer plano, el tiempo de ejecución detiene todos los subprocesos en segundo plano y se cierra.</span><span class="sxs-lookup"><span data-stu-id="476fe-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="476fe-135">De forma predeterminada, los siguientes subprocesos se ejecutan en primer plano:</span><span class="sxs-lookup"><span data-stu-id="476fe-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="476fe-136">El subproceso de aplicación principal.</span><span class="sxs-lookup"><span data-stu-id="476fe-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="476fe-137">Todos los subprocesos creados mediante una llamada a un <xref:System.Threading.Thread> constructor de clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="476fe-138">Ejecutan los siguientes subprocesos en segundo plano de forma predeterminada:</span><span class="sxs-lookup"><span data-stu-id="476fe-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="476fe-139">El subproceso del grupo de subprocesos, que son un grupo de subprocesos de trabajo mantenida por el tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="476fe-140">Puede configurar el trabajo de grupo y la programación de subprocesos en el grupo de subprocesos mediante el <xref:System.Threading.ThreadPool> clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="476fe-141">Operaciones asincrónicas basadas en tareas se ejecutan automáticamente en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="476fe-142">Usan operaciones asincrónicas basadas en tareas del <xref:System.Threading.Tasks.Task> y <xref:System.Threading.Tasks.Task%601> las clases para implementar el [modelo asincrónico basado en tareas](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="476fe-143">Todos los subprocesos que entran en el entorno de ejecución administrado desde código no administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="476fe-144">Puede cambiar un subproceso para ejecutar en segundo plano mediante el establecimiento del <xref:System.Threading.Thread.IsBackground%2A> propiedad en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="476fe-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="476fe-145">Subprocesos en segundo plano son útiles para cualquier operación que debe continuar mientras que una aplicación se ejecuta, pero debe impedir que la aplicación finalice, como la supervisión de cambios del sistema de archivos o las conexiones de socket entrante.</span><span class="sxs-lookup"><span data-stu-id="476fe-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="476fe-146">En el ejemplo siguiente se ilustra la diferencia entre los subprocesos de primer plano y fondo.</span><span class="sxs-lookup"><span data-stu-id="476fe-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="476fe-147">Es como el primer ejemplo de la [a partir de un subproceso](#Starting) sección, salvo que establece el subproceso para ejecutar en segundo plano antes de iniciarlo.</span><span class="sxs-lookup"><span data-stu-id="476fe-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="476fe-148">Como se muestra en la salida, el bucle se interrumpió antes de ejecutar durante cinco segundos.</span><span class="sxs-lookup"><span data-stu-id="476fe-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="476fe-149">Referencia cultural y subprocesos</span><span class="sxs-lookup"><span data-stu-id="476fe-149">Culture and threads</span></span>  
 <span data-ttu-id="476fe-150">Cada subproceso tiene una referencia cultural, representada por la <xref:System.Threading.Thread.CurrentCulture%2A> propiedad y una referencia cultural de interfaz de usuario, representan por la <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="476fe-151">La referencia cultural actual admite operaciones dependientes de la referencia cultural como análisis y formato, comparación de cadenas y ordenación y también controla el sistema de escritura y el calendario utilizado por un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="476fe-152">Proporciona la referencia cultural de interfaz de usuario actual para la recuperación de cuenta de la referencia cultural de los recursos en archivos de recursos.</span><span class="sxs-lookup"><span data-stu-id="476fe-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  
  
 <span data-ttu-id="476fe-153">Cuando se crea una instancia de un nuevo subproceso, su referencia cultural y la referencia cultural de interfaz de usuario se definen por la referencia cultural del sistema actual y la referencia cultural de interfaz de usuario y no por la referencia cultural y la referencia cultural de interfaz de usuario del subproceso desde el que se creó el nuevo subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-153">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="476fe-154">Esto significa, por ejemplo, que si la referencia cultural del sistema actual es inglés (Estados Unidos) y la referencia cultural actual del subproceso principal de la aplicación es el francés (Francia), la referencia cultural de un nuevo subproceso creado mediante una llamada a la <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor desde el subproceso principal es inglés (Estados Unidos) y no francés (Francia).</span><span class="sxs-lookup"><span data-stu-id="476fe-154">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="476fe-155">Para obtener más información, vea la sección "Referencia cultural y subprocesos" de la <xref:System.Globalization.CultureInfo> tema de la clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-155">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-156">Esto no es así de subprocesos que se ejecutan las operaciones asincrónicas para aplicaciones que tienen como destino el [!INCLUDE[net_v46](~/includes/net-v46-md.md)] y versiones posteriores, en este caso, la referencia cultural y la referencia cultural de interfaz de usuario es parte del contexto de un operaciones asincrónicas; el subproceso en el que una operación asincrónica se ejecuta de forma predeterminada hereda la referencia cultural y la referencia cultural de interfaz de usuario del subproceso desde que se inició la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="476fe-156">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="476fe-157">Para obtener más información, vea la sección "Referencia cultural y operaciones asincrónicas basadas en tareas" del tema sobre la clase <xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="476fe-157">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="476fe-158">Puede realizar cualquiera de las siguientes acciones para asegurarse de que todos los subprocesos de ejecución en una aplicación comparten la misma referencia cultural y la referencia cultural de interfaz de usuario:</span><span class="sxs-lookup"><span data-stu-id="476fe-158">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="476fe-159">Puede pasar un <xref:System.Globalization.CultureInfo> objeto que representa esa referencia cultural a la <xref:System.Threading.ParameterizedThreadStart> delegar o <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="476fe-159">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="476fe-160">Para aplicaciones que se ejecutan el [!INCLUDE[net_v45](~/includes/net-v45-md.md)] y versiones posteriores, puede definir la referencia cultural y la referencia cultural de interfaz de usuario que se asigna a todos los subprocesos que se creó en un dominio de aplicación estableciendo el valor de la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> y <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> propiedades.</span><span class="sxs-lookup"><span data-stu-id="476fe-160">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="476fe-161">Tenga en cuenta que esta es una configuración de dominio por aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-161">Note that this is a per-application domain setting.</span></span>  
  
 <span data-ttu-id="476fe-162">Para obtener más información y ejemplos, vea la sección "Referencia cultural y subprocesos" de la <xref:System.Globalization.CultureInfo> tema de la clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-162">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="476fe-163">Obtener información sobre y controlar subprocesos</span><span class="sxs-lookup"><span data-stu-id="476fe-163">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="476fe-164">Puede recuperar un número de valores de propiedad que proporcionan información sobre un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-164">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="476fe-165">En algunos casos, también puede establecer estos valores de propiedad para controlar el funcionamiento del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-165">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="476fe-166">Estas propiedades de subproceso incluyen:</span><span class="sxs-lookup"><span data-stu-id="476fe-166">These thread properties include:</span></span>  
  
-   <span data-ttu-id="476fe-167">Un nombre.</span><span class="sxs-lookup"><span data-stu-id="476fe-167">A name.</span></span> <span data-ttu-id="476fe-168"><xref:System.Threading.Thread.Name%2A> es una operación de escritura: propiedad de una vez que puede usar para identificar un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-168"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="476fe-169">Su valor predeterminado es `null`.</span><span class="sxs-lookup"><span data-stu-id="476fe-169">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="476fe-170">Un código hash, que puede recuperar mediante una llamada a la <xref:System.Threading.Thread.GetHashCode%2A> método.</span><span class="sxs-lookup"><span data-stu-id="476fe-170">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="476fe-171">El código hash puede utilizarse para identificar de forma exclusiva un subproceso; la duración de su subproceso, el código hash no coincidirá con el valor de ningún otro subproceso, independientemente del dominio de aplicación desde el que obtener el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-171">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="476fe-172">Un identificador de subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-172">A thread ID.</span></span> <span data-ttu-id="476fe-173">El valor de solo lectura <xref:System.Threading.Thread.ManagedThreadId%2A> propiedad se asigna en tiempo de ejecución y se identifica de forma única un subproceso dentro de su proceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-173">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="476fe-174">Un [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) de sistema operativo no tiene una relación fija con un subproceso administrado, ya que un host no administrado puede controlar la relación entre subprocesos administrados y no administrados.</span><span class="sxs-lookup"><span data-stu-id="476fe-174">An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="476fe-175">En concreto, un host sofisticado puede usar el [API de hospedaje de CLR](https://msdn.microsoft.com/library/ms404385.aspx) para programar muchos subprocesos administrados en el mismo subproceso de sistema operativo, o para mover un subproceso administrado entre los subprocesos de sistema operativo diferente.</span><span class="sxs-lookup"><span data-stu-id="476fe-175">Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="476fe-176">El estado del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-176">The thread's current state.</span></span> <span data-ttu-id="476fe-177">Durante la duración de su existencia, un subproceso está siempre en uno o varios de los estados definidos por el <xref:System.Threading.ThreadState> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-177">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="476fe-178">Un nivel de prioridad de programación, que es definido por el <xref:System.Threading.ThreadPriority> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-178">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="476fe-179">Aunque puede establecer este valor para solicitar la prioridad de un subproceso, no se garantiza que se respete el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-179">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="476fe-180">Sólo lectura <xref:System.Threading.Thread.IsThreadPoolThread%2A> propiedad, que indica si un subproceso es un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="476fe-180">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="476fe-181">Propiedad <xref:System.Threading.Thread.IsBackground%2A></span><span class="sxs-lookup"><span data-stu-id="476fe-181">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="476fe-182">Para obtener más información, consulte el [subprocesos de primer plano y fondo](#Foreground) sección.</span><span class="sxs-lookup"><span data-stu-id="476fe-182">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="476fe-183">En el ejemplo siguiente se muestra la funcionalidad de subproceso simple.</span><span class="sxs-lookup"><span data-stu-id="476fe-183">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="476fe-184">Este código produce un resultado similar al siguiente:</span><span class="sxs-lookup"><span data-stu-id="476fe-184">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="476fe-185">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-185">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-186">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-186">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="476fe-187">Delegado que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-187">A delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="476fe-188">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />, especificando un delegado que permite pasar un objeto al subproceso cuando este último se inicia.</span><span class="sxs-lookup"><span data-stu-id="476fe-188">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-189">Un subproceso no comienza a ejecutarse cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-189">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="476fe-190">Para programar el subproceso de ejecución, llame a la <xref:System.Threading.Thread.Start%2A> método.</span><span class="sxs-lookup"><span data-stu-id="476fe-190">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="476fe-191">Para pasar un objeto de datos al subproceso, utilice el <xref:System.Threading.Thread.Start%28System.Object%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="476fe-191">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-192">Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.ThreadStart> constructor al crear un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-192">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="476fe-193">Use la `AddressOf` operador al pasar el método, por ejemplo `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="476fe-193">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="476fe-194">Visual Basic llama automáticamente el <xref:System.Threading.ThreadStart> constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-194">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-195">En el ejemplo siguiente se muestra la sintaxis para crear y usar un <xref:System.Threading.ParameterizedThreadStart> delegado con un método estático y un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="476fe-195">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="476fe-196"><paramref name="start" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-196"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="476fe-197">Delegado <see cref="T:System.Threading.ThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-197">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="476fe-198">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-198">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-199">Un subproceso no comienza a ejecutarse cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-199">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="476fe-200">Para programar el subproceso de ejecución, llame a la <xref:System.Threading.Thread.Start%2A> método.</span><span class="sxs-lookup"><span data-stu-id="476fe-200">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-201">Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.ThreadStart> constructor al crear un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-201">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="476fe-202">Use la `AddressOf` operador cuando se pasa al método como `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="476fe-202">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="476fe-203">Visual Basic llama automáticamente el <xref:System.Threading.ThreadStart> constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-203">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-204">En el ejemplo de código siguiente se muestra cómo crear un subproceso que ejecuta un método estático.</span><span class="sxs-lookup"><span data-stu-id="476fe-204">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="476fe-205">En el ejemplo de código siguiente se muestra cómo crear un subproceso que ejecuta un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="476fe-205">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="476fe-206">El parámetro <paramref name="start" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-206">The <paramref name="start" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="476fe-207">Delegado <see cref="T:System.Threading.ParameterizedThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-207">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="476fe-208">Tamaño de pila máximo, en bytes, que va a usar el subproceso, o 0 para usar el tamaño de pila máximo predeterminado especificado en el encabezado del ejecutable.</span><span class="sxs-lookup"><span data-stu-id="476fe-208">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
 <span data-ttu-id="476fe-209">Importante   En el caso de código de confianza parcial, se pasa por alto <c>maxStackSize</c> si es mayor que el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-209">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="476fe-210">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="476fe-210">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="476fe-211">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" /> y, para ello, especifica un delegado que permite pasar un objeto al subproceso cuando este último se inicia; además, especifica el tamaño de pila máximo para el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-211">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-212">Evite utilizar esta sobrecarga del constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-212">Avoid using this constructor overload.</span></span> <span data-ttu-id="476fe-213">El tamaño de pila predeterminado utilizado por el <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> sobrecarga del constructor es el tamaño de pila recomendado para los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-213">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="476fe-214">Si un subproceso tiene problemas de memoria, la causa más probable es un error de programación, como recursividad infinita.</span><span class="sxs-lookup"><span data-stu-id="476fe-214">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-215">A partir del [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], solo de plena confianza puede establecer código `maxStackSize` en un valor que es mayor que el tamaño de pila predeterminado (1 megabyte).</span><span class="sxs-lookup"><span data-stu-id="476fe-215">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="476fe-216">Si se especifica un valor mayor para `maxStackSize` cuando se ejecuta el código con confianza parcial, `maxStackSize` se omite y se utiliza el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-216">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="476fe-217">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="476fe-217">No exception is thrown.</span></span> <span data-ttu-id="476fe-218">El código en cualquier nivel de confianza puede establecer `maxStackSize` en un valor que es menor que el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-218">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-219">Si está desarrollando una biblioteca de plena confianza que se usará en el código de confianza parcial, y necesita iniciar un subproceso que requiere una pila grande, debe imponer plena confianza antes de crear el subproceso o se utilizará el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-219">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="476fe-220">No lo haga, a menos que controla totalmente el código que se ejecuta en el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-220">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="476fe-221">Si `maxStackSize` es menor que el tamaño de pila mínimo, se utiliza el tamaño de pila mínimo.</span><span class="sxs-lookup"><span data-stu-id="476fe-221">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="476fe-222">Si `maxStackSize` no es un múltiplo del tamaño de página, se redondea al múltiplo mayor siguiente del tamaño de página.</span><span class="sxs-lookup"><span data-stu-id="476fe-222">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="476fe-223">Por ejemplo, si está utilizando la versión 2.0 de .NET Framework en Windows Vista, 256KB (262.144 bytes) es el tamaño de pila mínimo y el tamaño de página es 64KB (65.536 bytes).</span><span class="sxs-lookup"><span data-stu-id="476fe-223">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-224">En las versiones de Microsoft Windows anteriores a Windows XP y Windows Server 2003, `maxStackSize` se omite, y se utiliza el tamaño de pila especificado en el encabezado del ejecutable.</span><span class="sxs-lookup"><span data-stu-id="476fe-224">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="476fe-225">Si especifica un tamaño de pila muy pequeño, debe deshabilitar el sondeo de desbordamiento de pila.</span><span class="sxs-lookup"><span data-stu-id="476fe-225">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="476fe-226">Cuando la pila está muy limitada, el propio sondeo puede provocar un desbordamiento de pila.</span><span class="sxs-lookup"><span data-stu-id="476fe-226">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="476fe-227">Para deshabilitar el sondeo de desbordamiento de pila, agregue lo siguiente al archivo de configuración de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-227">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="476fe-228"><paramref name="start" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-228"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="476fe-229"><paramref name="maxStackSize" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="476fe-229"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="476fe-230">Delegado <see cref="T:System.Threading.ThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-230">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="476fe-231">Tamaño de pila máximo, en bytes, que va a usar el subproceso, o 0 para usar el tamaño de pila máximo predeterminado especificado en el encabezado del ejecutable.</span><span class="sxs-lookup"><span data-stu-id="476fe-231">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
 <span data-ttu-id="476fe-232">Importante   En el caso de código de confianza parcial, se pasa por alto <c>maxStackSize</c> si es mayor que el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-232">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="476fe-233">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="476fe-233">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="476fe-234">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />, especificando el tamaño de pila máximo para el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-234">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-235">Evite utilizar esta sobrecarga del constructor.</span><span class="sxs-lookup"><span data-stu-id="476fe-235">Avoid using this constructor overload.</span></span> <span data-ttu-id="476fe-236">El tamaño de pila predeterminado utilizado por el <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> sobrecarga del constructor es el tamaño de pila recomendado para los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-236">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="476fe-237">Si un subproceso tiene problemas de memoria, la causa más probable es un error de programación, como recursividad infinita.</span><span class="sxs-lookup"><span data-stu-id="476fe-237">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-238">A partir del [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], solo de plena confianza puede establecer código `maxStackSize` en un valor que es mayor que el tamaño de pila predeterminado (1 megabyte).</span><span class="sxs-lookup"><span data-stu-id="476fe-238">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="476fe-239">Si se especifica un valor mayor para `maxStackSize` cuando se ejecuta el código con confianza parcial, `maxStackSize` se omite y se utiliza el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-239">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="476fe-240">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="476fe-240">No exception is thrown.</span></span> <span data-ttu-id="476fe-241">El código en cualquier nivel de confianza puede establecer `maxStackSize` en un valor que es menor que el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-241">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-242">Si está desarrollando una biblioteca de plena confianza que se usará en el código de confianza parcial, y necesita iniciar un subproceso que requiere una pila grande, debe imponer plena confianza antes de crear el subproceso o se utilizará el tamaño de pila predeterminado.</span><span class="sxs-lookup"><span data-stu-id="476fe-242">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="476fe-243">No lo haga, a menos que controla totalmente el código que se ejecuta en el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-243">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="476fe-244">Si `maxStackSize` es menor que el tamaño de pila mínimo, se utiliza el tamaño de pila mínimo.</span><span class="sxs-lookup"><span data-stu-id="476fe-244">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="476fe-245">Si `maxStackSize` no es un múltiplo del tamaño de página, se redondea al múltiplo mayor siguiente del tamaño de página.</span><span class="sxs-lookup"><span data-stu-id="476fe-245">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="476fe-246">Por ejemplo, si está utilizando la versión 2.0 de .NET Framework en Windows Vista, 256KB (262.144 bytes) es el tamaño de pila mínimo y el tamaño de página es 64KB (65.536 bytes).</span><span class="sxs-lookup"><span data-stu-id="476fe-246">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-247">En las versiones de Microsoft Windows anteriores a Windows XP y Windows Server 2003, `maxStackSize` se omite, y se utiliza el tamaño de pila especificado en el encabezado del ejecutable.</span><span class="sxs-lookup"><span data-stu-id="476fe-247">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="476fe-248">Si especifica un tamaño de pila muy pequeño, debe deshabilitar el sondeo de desbordamiento de pila.</span><span class="sxs-lookup"><span data-stu-id="476fe-248">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="476fe-249">Cuando la pila está muy limitada, el propio sondeo puede provocar un desbordamiento de pila.</span><span class="sxs-lookup"><span data-stu-id="476fe-249">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="476fe-250">Para deshabilitar el sondeo de desbordamiento de pila, agregue lo siguiente al archivo de configuración de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-250">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="476fe-251"><paramref name="start" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-251"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="476fe-252"><paramref name="maxStackSize" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="476fe-252"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-253">Produce una excepción <see cref="T:System.Threading.ThreadAbortException" /> en el subproceso en el que se invoca, para iniciar el proceso de finalización del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-253">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="476fe-254">Normalmente, una llamada a este método finaliza el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-254">Calling this method usually terminates the thread.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-255">Produce una excepción <see cref="T:System.Threading.ThreadAbortException" /> en el subproceso en el que se invoca, para iniciar el proceso de finalización del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-255">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="476fe-256">Normalmente, una llamada a este método finaliza el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-256">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-257">Cuando se invoca este método en un subproceso, el sistema produce una <xref:System.Threading.ThreadAbortException> en el subproceso para interrumpirlo.</span><span class="sxs-lookup"><span data-stu-id="476fe-257">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="476fe-258">`ThreadAbortException` es una excepción especial que puede detectar mediante código de la aplicación, pero se vuelve a producir al final de la `catch` bloquear a menos que <xref:System.Threading.Thread.ResetAbort%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-258">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="476fe-259">`ResetAbort` cancela la solicitud para anular la operación y evita la `ThreadAbortException` de finalización del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-259">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="476fe-260">Haber `finally` los bloques se ejecutan antes de que el subproceso se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-260">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-261">Cuando un subproceso llama `Abort` en sí mismo, el efecto es similar a producir una excepción; el <xref:System.Threading.ThreadAbortException> ocurre inmediatamente, y el resultado es predecible.</span><span class="sxs-lookup"><span data-stu-id="476fe-261">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="476fe-262">Sin embargo, si un subproceso llama a `Abort` en otro subproceso, la anulación interrumpe el código que esté en ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-262">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="476fe-263">También es probable que un constructor estático puede anularse.</span><span class="sxs-lookup"><span data-stu-id="476fe-263">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="476fe-264">En raras ocasiones, esto podría evitar que las instancias de esa clase se crea en ese dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-264">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="476fe-265">En las versiones 1.0 y 1.1 de .NET Framework, es probable que el subproceso podría interrumpirse mientras un `finally` bloque se está ejecutando, en cuyo caso el `finally` bloque se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-265">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="476fe-266">El subproceso no se garantiza para anular la operación inmediatamente, o en absoluto.</span><span class="sxs-lookup"><span data-stu-id="476fe-266">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="476fe-267">Esta situación puede producirse si un subproceso realice una cantidad ilimitada de operaciones en el `finally` bloques que se llaman como parte del procedimiento de anulación, indefinidamente, por tanto, la instrucción abort.</span><span class="sxs-lookup"><span data-stu-id="476fe-267">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="476fe-268">Para esperar hasta que un subproceso se ha anulado, puede llamar a la <xref:System.Threading.Thread.Join%2A> método en el subproceso después de llamar a la <xref:System.Threading.Thread.Abort%2A> método, pero no hay ninguna garantía de la espera finalizará.</span><span class="sxs-lookup"><span data-stu-id="476fe-268">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-269">El subproceso que llama <xref:System.Threading.Thread.Abort%2A> podría bloquear si el subproceso que se va a anular está en una región protegida de código, como un `catch` bloque, `finally` bloque o región de ejecución restringidas.</span><span class="sxs-lookup"><span data-stu-id="476fe-269">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="476fe-270">Si el subproceso que llama <xref:System.Threading.Thread.Abort%2A> mantiene un bloqueo que el subproceso anulado requiere, puede producirse un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-270">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="476fe-271">Si `Abort` se llama en un subproceso que no se ha iniciado, el subproceso anulará cuando <xref:System.Threading.Thread.Start%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-271">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="476fe-272">Si `Abort` se llama en un subproceso que está bloqueado o en modo de suspensión, el subproceso se interrumpe y, a continuación, se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-272">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="476fe-273">Si `Abort` se llama en un subproceso que se ha suspendido, un <xref:System.Threading.ThreadStateException> se produce en el subproceso que llamó a <xref:System.Threading.Thread.Abort%2A>, y <xref:System.Threading.ThreadState.AbortRequested> se agrega a la <xref:System.Threading.Thread.ThreadState%2A> propiedad del subproceso que se va a anular.</span><span class="sxs-lookup"><span data-stu-id="476fe-273">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="476fe-274">A <xref:System.Threading.ThreadAbortException> no se produce en el subproceso suspendido hasta que <xref:System.Threading.Thread.Resume%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-274">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="476fe-275">Si `Abort` se llama en un subproceso administrado mientras se ejecuta el código no administrado, un `ThreadAbortException` no se produce hasta que el subproceso vuelve al código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-275">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="476fe-276">Si dos llamadas a `Abort` proceder al mismo tiempo, es posible que una llamada establecer la información de estado y la otra llamada a ejecutar la `Abort`.</span><span class="sxs-lookup"><span data-stu-id="476fe-276">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="476fe-277">Sin embargo, una aplicación no puede detectar esta situación.</span><span class="sxs-lookup"><span data-stu-id="476fe-277">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="476fe-278">Después de `Abort` se invoca en un subproceso, el estado del subproceso incluye <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="476fe-278">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="476fe-279">Después de que el subproceso ha terminado debido a una llamada correcta a `Abort`, se cambia el estado del subproceso a <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="476fe-279">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="476fe-280">Con los permisos suficientes, un subproceso que constituye el destino de un `Abort` puede cancelar la anulación utilizando el `ResetAbort` método.</span><span class="sxs-lookup"><span data-stu-id="476fe-280">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="476fe-281">Para obtener un ejemplo que muestra cómo llamar a la `ResetAbort` método, consulte la `ThreadAbortException` clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-281">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-282">Solo .NET Core: este miembro no se admite.</span><span class="sxs-lookup"><span data-stu-id="476fe-282">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-283">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="476fe-283">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-284">Actualmente se suspende el subproceso que se está anulando.</span><span class="sxs-lookup"><span data-stu-id="476fe-284">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-285">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-285">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-286">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-286">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stateInfo"><span data-ttu-id="476fe-287">Objeto que contiene información específica de la aplicación como, por ejemplo, su estado, y que el subproceso anulado puede utilizar.</span><span class="sxs-lookup"><span data-stu-id="476fe-287">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span></span></param>
        <summary><span data-ttu-id="476fe-288">Produce una excepción <see cref="T:System.Threading.ThreadAbortException" /> en el subproceso en el que se invoca, para iniciar el proceso de finalización del subproceso, proporcionando al mismo tiempo información sobre excepciones relativa a la terminación del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-288">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span></span> <span data-ttu-id="476fe-289">Normalmente, una llamada a este método finaliza el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-289">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-290">Cuando se invoca este método en un subproceso, el sistema produce una <xref:System.Threading.ThreadAbortException> en el subproceso para interrumpirlo.</span><span class="sxs-lookup"><span data-stu-id="476fe-290">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="476fe-291">`ThreadAbortException` es una excepción especial que puede detectar mediante código de la aplicación, pero se vuelve a producir al final de la `catch` bloquear a menos que <xref:System.Threading.Thread.ResetAbort%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-291">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="476fe-292">`ResetAbort` cancela la solicitud para anular la operación y evita la `ThreadAbortException` de finalización del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-292">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="476fe-293">Haber `finally` los bloques se ejecutan antes de que el subproceso se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-293">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-294">Cuando un subproceso llama `Abort` en sí mismo, el efecto es similar a producir una excepción; el <xref:System.Threading.ThreadAbortException> ocurre inmediatamente, y el resultado es predecible.</span><span class="sxs-lookup"><span data-stu-id="476fe-294">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="476fe-295">Sin embargo, si un subproceso llama a `Abort` en otro subproceso, la anulación interrumpe el código que esté en ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-295">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="476fe-296">Es probable que un constructor estático puede anularse.</span><span class="sxs-lookup"><span data-stu-id="476fe-296">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="476fe-297">En raras ocasiones, esto podría evitar que las instancias de esa clase se crea en ese dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-297">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="476fe-298">En las versiones 1.0 y 1.1 de .NET Framework, es probable que el subproceso podría interrumpirse mientras un `finally` bloque se está ejecutando, en cuyo caso el `finally` bloque se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-298">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="476fe-299">El subproceso no se garantiza para anular la operación inmediatamente, o en absoluto.</span><span class="sxs-lookup"><span data-stu-id="476fe-299">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="476fe-300">Esta situación puede producirse si un subproceso realice una cantidad ilimitada de operaciones en el `finally` bloques que se llaman como parte del procedimiento de anulación, indefinidamente, por tanto, la instrucción abort.</span><span class="sxs-lookup"><span data-stu-id="476fe-300">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="476fe-301">Para esperar hasta que un subproceso se ha anulado, puede llamar a la <xref:System.Threading.Thread.Join%2A> método en el subproceso después de llamar a la <xref:System.Threading.Thread.Abort%2A> método, pero no hay ninguna garantía de que se va a finalizar la espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-301">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-302">El subproceso que llama <xref:System.Threading.Thread.Abort%2A> podría bloquear si el subproceso que se va a anular está en una región protegida de código, como un `catch` bloque, `finally` bloque o región de ejecución restringidas.</span><span class="sxs-lookup"><span data-stu-id="476fe-302">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="476fe-303">Si el subproceso que llama <xref:System.Threading.Thread.Abort%2A> mantiene un bloqueo que el subproceso anulado requiere, puede producirse un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-303">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="476fe-304">Si `Abort` se llama en un subproceso que no se ha iniciado, el subproceso anulará cuando <xref:System.Threading.Thread.Start%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-304">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="476fe-305">Si `Abort` se llama en un subproceso que está bloqueado o en modo de suspensión, el subproceso se interrumpe y, a continuación, se anula.</span><span class="sxs-lookup"><span data-stu-id="476fe-305">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="476fe-306">Si `Abort` se llama en un subproceso que se ha suspendido, un <xref:System.Threading.ThreadStateException> se produce en el subproceso que llamó a <xref:System.Threading.Thread.Abort%2A>, y <xref:System.Threading.ThreadState.AbortRequested> se agrega a la <xref:System.Threading.Thread.ThreadState%2A> propiedad del subproceso que se va a anular.</span><span class="sxs-lookup"><span data-stu-id="476fe-306">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="476fe-307">A <xref:System.Threading.ThreadAbortException> no se produce en el subproceso suspendido hasta que <xref:System.Threading.Thread.Resume%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-307">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="476fe-308">Si `Abort` se llama en un subproceso administrado mientras se ejecuta el código no administrado, un `ThreadAbortException` no se produce hasta que el subproceso vuelve al código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-308">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="476fe-309">Si dos llamadas a `Abort` proceder al mismo tiempo, es posible que una llamada establecer la información de estado y la otra llamada a ejecutar la `Abort`.</span><span class="sxs-lookup"><span data-stu-id="476fe-309">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="476fe-310">Sin embargo, una aplicación no puede detectar esta situación.</span><span class="sxs-lookup"><span data-stu-id="476fe-310">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="476fe-311">Después de `Abort` se invoca en un subproceso, el estado del subproceso incluye <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="476fe-311">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="476fe-312">Después de que el subproceso ha terminado debido a una llamada correcta a `Abort`, se cambia el estado del subproceso a <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="476fe-312">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="476fe-313">Con los permisos suficientes, un subproceso que constituye el destino de un `Abort` puede cancelar la anulación utilizando el `ResetAbort` método.</span><span class="sxs-lookup"><span data-stu-id="476fe-313">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="476fe-314">Para obtener un ejemplo que muestra cómo llamar a la `ResetAbort` método, consulte la `ThreadAbortException` clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-314">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-315">En el ejemplo de código siguiente se muestra cómo pasar información a un subproceso que se va a anular.</span><span class="sxs-lookup"><span data-stu-id="476fe-315">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-316">Solo .NET Core: este miembro no se admite.</span><span class="sxs-lookup"><span data-stu-id="476fe-316">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-317">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="476fe-317">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-318">Actualmente se suspende el subproceso que se está anulando.</span><span class="sxs-lookup"><span data-stu-id="476fe-318">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-319">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-319">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-320">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-320">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-321">Asigna una ranura de datos sin nombre en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-321">Allocates an unnamed data slot on all the threads.</span></span> <span data-ttu-id="476fe-322">Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-322">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="476fe-323">Ranura de datos con nombre asignada en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-323">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-324">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-324">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-325">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-325">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-326">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-326">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-327">Se asigna la ranura en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-327">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="476fe-328">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-328">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-329">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-329">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-330">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar cuando el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-330">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="476fe-331">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-331">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-332">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-332">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-333">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-333">This section contains two code examples.</span></span> <span data-ttu-id="476fe-334">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-334">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-335">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-335">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-336">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-336">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-337">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-337">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-338">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-338">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-339">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-339">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-340">En el ejemplo de código siguiente se muestra cómo usar una ranura de datos para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-340">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="476fe-341">Nombre de la ranura de datos que se va a asignar.</span><span class="sxs-lookup"><span data-stu-id="476fe-341">The name of the data slot to be allocated.</span></span></param>
        <summary><span data-ttu-id="476fe-342">Asigna una ranura de datos con nombre en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-342">Allocates a named data slot on all threads.</span></span> <span data-ttu-id="476fe-343">Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-343">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="476fe-344">Ranura de datos con nombre asignada en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-344">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-345">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-345">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-346">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-346">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-347">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-347">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-348">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-348">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-349">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-349">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-350">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar cuando el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-350">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="476fe-351">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-351">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-352">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-352">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="476fe-353">No es necesario utilizar la <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> método para asignar una ranura de datos con nombre, porque el <xref:System.Threading.Thread.GetNamedDataSlot%2A> método asigna la ranura si todavía no se ha asignado.</span><span class="sxs-lookup"><span data-stu-id="476fe-353">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-354">Si el <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> se utiliza el método, debe llamarse en el subproceso principal al inicio del programa, porque produce una excepción si ya se ha asignado una ranura con el nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="476fe-354">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="476fe-355">No hay ninguna manera de probar si ya se ha asignado una ranura.</span><span class="sxs-lookup"><span data-stu-id="476fe-355">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="476fe-356">Las ranuras asignadas con este método se deben liberar con <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-356">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-357">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-357">This section contains two code examples.</span></span> <span data-ttu-id="476fe-358">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-358">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-359">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-359">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-360">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-360">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-361">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-361">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-362">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-362">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-363">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-363">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-364">En el ejemplo siguiente se muestra cómo usar una ranura de datos con nombre para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-364">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-365">El código de ejemplo no utiliza la <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> método, porque la <xref:System.Threading.Thread.GetNamedDataSlot%2A> método asigna la ranura si todavía no se ha asignado.</span><span class="sxs-lookup"><span data-stu-id="476fe-365">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="476fe-366">Si el <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> se utiliza el método, se debe llamar en el subproceso principal al inicio del programa.</span><span class="sxs-lookup"><span data-stu-id="476fe-366">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="476fe-367">Ya existe una ranura para datos con el nombre especificado</span><span class="sxs-lookup"><span data-stu-id="476fe-367">A named data slot with the specified name already exists.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-368">Obtiene o establece el estado de apartamento de este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-368">Gets or sets the apartment state of this thread.</span></span></summary>
        <value><span data-ttu-id="476fe-369">Uno de los valores de <see cref="T:System.Threading.ApartmentState" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-369">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span></span> <span data-ttu-id="476fe-370">El valor inicial es <see langword="Unknown" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-370">The initial value is <see langword="Unknown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-371">**El <xref:System.Threading.Thread.ApartmentState%2A> propiedad está obsoleta.**</span><span class="sxs-lookup"><span data-stu-id="476fe-371">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="476fe-372">Las alternativas no obsoleta son el <xref:System.Threading.Thread.GetApartmentState%2A> método para recuperar el estado del apartamento y <xref:System.Threading.Thread.SetApartmentState%2A> método para establecer el estado del apartamento.</span><span class="sxs-lookup"><span data-stu-id="476fe-372">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="476fe-373">En las versiones de .NET Framework 1.0 y 1.1, la `ApartmentState` propiedad marca un subproceso para indicar que se ejecutará en un apartamento de un único subproceso o multiproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-373">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="476fe-374">Esta propiedad puede establecerse cuando el subproceso está en el `Unstarted` o `Running` subprocesos estado; sin embargo, puede establecerse una sola vez para un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-374">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="476fe-375">Si no se estableció la propiedad, devuelve `Unknown`.</span><span class="sxs-lookup"><span data-stu-id="476fe-375">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="476fe-376">Un intento de usar el <xref:System.Threading.Thread.ApartmentState%2A> se omite la propiedad para establecer el estado de apartamento de un subproceso cuyo estado de apartamento ya se estableció.</span><span class="sxs-lookup"><span data-stu-id="476fe-376">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="476fe-377">Sin embargo, el <xref:System.Threading.Thread.SetApartmentState%2A> método produce un <xref:System.InvalidOperationException> en este caso.</span><span class="sxs-lookup"><span data-stu-id="476fe-377">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-378">En la versión 2.0 de .NET Framework, los nuevos subprocesos se inicializan como <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si no se ha establecido su estado de apartamento antes de que se inicien.</span><span class="sxs-lookup"><span data-stu-id="476fe-378">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="476fe-379">El subproceso de aplicación principal se inicializa en <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="476fe-379">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="476fe-380">Ya no se puede establecer el subproceso de aplicación principal en <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> estableciendo el <xref:System.Threading.ApartmentState?displayProperty=nameWithType> propiedad en la primera línea de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-380">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="476fe-381">Utilice el <xref:System.STAThreadAttribute> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="476fe-381">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="476fe-382">En la versión 2.0 de .NET Framework, puede especificar el modelo para una aplicación de C++ utilizando de subprocesos de COM el [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) opción del vinculador.</span><span class="sxs-lookup"><span data-stu-id="476fe-382">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-383">En el ejemplo de código siguiente se muestra cómo establecer el estado del apartamento de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-383">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="476fe-384">Se realiza un intento de establecer esta propiedad en un estado que no es un estado de contenedor válido (un estado distinto de contenedor uniproceso (<see langword="STA" />) o contenedor multiproceso (<see langword="MTA" />)).</span><span class="sxs-lookup"><span data-stu-id="476fe-384">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-385">Notifica a un host que la ejecución está a punto de entrar en una región del código donde los efectos de una anulación del subproceso o de una excepción no controlada podrían constituir un riesgo para otras tareas del dominio de aplicaciones.</span><span class="sxs-lookup"><span data-stu-id="476fe-385">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-386">Los hosts de common language runtime (CLR), como Microsoft SQL Server 2005, pueden establecer directivas diferentes para los errores en las regiones críticas y no críticas de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-386">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="476fe-387">Una región crítica es aquella en la que los efectos de una anulación del subproceso o una excepción no controlada podrían no limitarse a la tarea actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-387">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="476fe-388">Por el contrario, una anulación o un error en una región no crítica del código afecta solo a la tarea en la que se produce el error.</span><span class="sxs-lookup"><span data-stu-id="476fe-388">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="476fe-389">Por ejemplo, considere la posibilidad de una tarea que intenta asignar memoria mientras se mantiene un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-389">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="476fe-390">Si se produce un error en la asignación de memoria, la anulación de la tarea actual no es suficiente para garantizar la estabilidad de la <xref:System.AppDomain>, porque puede haber otras tareas en el dominio esperando el mismo bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-390">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="476fe-391">Si se termina la tarea actual, otras tareas podrían sufrir un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-391">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="476fe-392">Cuando se produce un error en una región crítica, el host puede optar por descargar todo el <xref:System.AppDomain> en lugar de correr el riesgo de continuar la ejecución en un estado potencialmente inestable.</span><span class="sxs-lookup"><span data-stu-id="476fe-392">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="476fe-393">Para informar al host que el código está entrando en una región crítica, llame a <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-393">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="476fe-394">Llamar a <xref:System.Threading.Thread.EndCriticalRegion%2A> cuando la ejecución vuelve a una región no crítica del código.</span><span class="sxs-lookup"><span data-stu-id="476fe-394">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="476fe-395">Usar este método en el código que se ejecuta SQL Server 2005 requiere que el código se ejecute en el nivel más alto de protección de host.</span><span class="sxs-lookup"><span data-stu-id="476fe-395">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-396">En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Thread.BeginCriticalRegion%2A> y <xref:System.Threading.Thread.EndCriticalRegion%2A> métodos para dividir un bloque de código en regiones críticas y no críticas.</span><span class="sxs-lookup"><span data-stu-id="476fe-396">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-397">Notifica a un host que el código administrado está a punto de ejecutar instrucciones que dependen de la identidad del subproceso del sistema operativo físico actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-397">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-398">Algunos de los hosts de common language runtime, como Microsoft SQL Server 2005, proporcionan su propia administración de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-398">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="476fe-399">Un host que proporciona su propia administración de subprocesos puede mover una tarea que se ejecuta desde un subproceso de sistema operativo físico a otro en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="476fe-399">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="476fe-400">Mayoría de las tareas no se ven afectada por este cambio.</span><span class="sxs-lookup"><span data-stu-id="476fe-400">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="476fe-401">Sin embargo, algunas tareas tienen afinidad de subprocesos, es decir, que dependen de la identidad de un subproceso físico del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-401">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="476fe-402">Estas tareas deben informar al host cuando ejecuta código que no se debe cambiar.</span><span class="sxs-lookup"><span data-stu-id="476fe-402">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="476fe-403">Por ejemplo, si el aplicación llama una API del sistema para adquirir un sistema operativo de bloqueo que tiene afinidad de subprocesos, como CRITICAL_SECTION de Win32, se debe llamar a <xref:System.Threading.Thread.BeginThreadAffinity%2A> antes de adquirir el bloqueo, y <xref:System.Threading.Thread.EndThreadAffinity%2A> tras liberar el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-403">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="476fe-404">Usar este método en el código que se ejecuta SQL Server 2005 requiere que el código se ejecute en el nivel más alto de protección de host.</span><span class="sxs-lookup"><span data-stu-id="476fe-404">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-405">En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Thread.BeginThreadAffinity%2A> y <xref:System.Threading.Thread.EndThreadAffinity%2A> métodos para notificar a un host que un bloque de código depende de la identidad de un subproceso físico del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-405">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-406">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="476fe-406">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-407">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-407">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-408">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-408">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-409">Obtiene el contexto actual donde se está ejecutando el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-409">Gets the current context in which the thread is executing.</span></span></summary>
        <value><span data-ttu-id="476fe-410"><see cref="T:System.Runtime.Remoting.Contexts.Context" /> que representa el contexto del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-410">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-411">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="476fe-411">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-412">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-412">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-413">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-413">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-414">Obtiene o establece la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-414">Gets or sets the culture for the current thread.</span></span></summary>
        <value><span data-ttu-id="476fe-415">Objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-415">An object that represents the culture for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-416">La <xref:System.Globalization.CultureInfo> objeto devuelto por esta propiedad, junto con sus objetos asociados, determinar el formato predeterminado para las fechas, horas, números, valores de moneda, el criterio de ordenación de texto, convenciones las mayúsculas y minúsculas y comparaciones de cadenas.</span><span class="sxs-lookup"><span data-stu-id="476fe-416">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="476fe-417">Consulte la <xref:System.Globalization.CultureInfo> clase para obtener información acerca de los nombres de referencia cultural y los identificadores, las diferencias entre según la referencia cultural invariable, neutra y específica, y la información de referencia cultural de manera afecta a los dominios de aplicación y subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-417">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="476fe-418">Consulte la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propiedad para obtener información sobre cómo se determina la referencia cultural predeterminada de un subproceso y cómo los usuarios establecer información de referencia cultural para sus equipos.</span><span class="sxs-lookup"><span data-stu-id="476fe-418">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  
  
 <span data-ttu-id="476fe-419">A partir del [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], puede establecer el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad a una referencia cultural neutra.</span><span class="sxs-lookup"><span data-stu-id="476fe-419">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="476fe-420">Esto es porque el comportamiento de la <xref:System.Globalization.CultureInfo> la clase ha cambiado: cuando representa una referencia cultural neutra, sus valores de propiedad (en concreto, el <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, y <xref:System.Globalization.CultureInfo.TextInfo%2A> propiedades) ahora reflejar la referencia cultural específica que está asociada a la referencia cultural neutra.</span><span class="sxs-lookup"><span data-stu-id="476fe-420">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="476fe-421">En versiones anteriores de .NET Framework, el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad produjo una <xref:System.NotSupportedException> excepción cuando se asigna una referencia cultural neutra.</span><span class="sxs-lookup"><span data-stu-id="476fe-421">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-422">En el ejemplo de código siguiente se muestra la instrucción de subprocesamiento que permite a la interfaz de usuario de Windows Forms para mostrar de la referencia cultural que se establece en el Panel de Control.</span><span class="sxs-lookup"><span data-stu-id="476fe-422">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="476fe-423">Se necesita código adicional.</span><span class="sxs-lookup"><span data-stu-id="476fe-423">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="476fe-424">La propiedad se establece en <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-424">The property is set to <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-425">Para establecer la propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-425">for setting the property.</span></span> <span data-ttu-id="476fe-426">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="476fe-426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-427">Obtiene o establece la entidad de seguridad actual del subproceso (de la seguridad basada en roles).</span><span class="sxs-lookup"><span data-stu-id="476fe-427">Gets or sets the thread's current principal (for role-based security).</span></span></summary>
        <value><span data-ttu-id="476fe-428">Valor de <see cref="T:System.Security.Principal.IPrincipal" /> que representa el contexto de seguridad.</span><span class="sxs-lookup"><span data-stu-id="476fe-428">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="476fe-429">En el ejemplo de código siguiente se muestra cómo establecer y recuperar la entidad de seguridad de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-429">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-430">El autor de llamada no tiene el permiso necesario para establecer la entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="476fe-430">The caller does not have the permission required to set the principal.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-431">para manipular el objeto principal.</span><span class="sxs-lookup"><span data-stu-id="476fe-431">to manipulate the principal object.</span></span> <span data-ttu-id="476fe-432">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-432">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-433">Obtiene el subproceso actualmente en ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-433">Gets the currently running thread.</span></span></summary>
        <value><span data-ttu-id="476fe-434"><see cref="T:System.Threading.Thread" /> que representa el subproceso actualmente en ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-434">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="476fe-435">En el ejemplo siguiente se crea una tarea que a su vez crea 20 tareas secundarias.</span><span class="sxs-lookup"><span data-stu-id="476fe-435">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="476fe-436">Llama a la propia aplicación, como también de cada tarea, la `ShowThreadInformation` método, que usa el <xref:System.Threading.Thread.CurrentThread%2A> propiedad para mostrar información sobre el subproceso en el que se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="476fe-436">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="476fe-437">Cada tarea secundaria genera números aleatorios de 1 millón entre 1 y 1 millón y devuelve su Media.</span><span class="sxs-lookup"><span data-stu-id="476fe-437">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="476fe-438">Las llamadas de la tarea primaria la <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> método para asegurarse de que las tareas secundarias se han completado antes de mostrar la media devuelta por cada tarea y calcular la media de medios.</span><span class="sxs-lookup"><span data-stu-id="476fe-438">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="476fe-439">Tenga en cuenta que mientras la aplicación se ejecuta en un subproceso en primer plano, cada tarea se ejecuta en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="476fe-439">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-440">Obtiene o establece la referencia cultural actual utilizada por el administrador de recursos para buscar recursos específicos de la referencia cultural en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-440">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span></span></summary>
        <value><span data-ttu-id="476fe-441">Objeto que representa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-441">An object that represents the current culture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-442">La referencia cultural de interfaz de usuario especifica los recursos de una aplicación debe admitir proporcionados por el usuario y la salida y de forma predeterminada, es el mismo que la referencia cultural del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-442">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="476fe-443">Consulte la <xref:System.Globalization.CultureInfo> clase para obtener información acerca de los nombres de referencia cultural y los identificadores, las diferencias entre según la referencia cultural invariable, neutra y específica, y la información de referencia cultural de manera afecta a los dominios de aplicación y subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-443">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="476fe-444">Consulte la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad para obtener información sobre cómo se determina la referencia cultural de interfaz de usuario de valor predeterminado de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-444">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  
  
 <span data-ttu-id="476fe-445">La <xref:System.Globalization.CultureInfo> devuelta por esta propiedad puede ser una referencia cultural neutra.</span><span class="sxs-lookup"><span data-stu-id="476fe-445">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="476fe-446">Las referencias culturales neutras no deben usarse con métodos de formato como <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, y <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-446">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-447">Utilice la <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> método para obtener una referencia cultural específica, o use el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-447">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-448">El <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> método inicie una excepción <xref:System.ArgumentException> para las referencias culturales neutras "zh-Hant" ("zh-CHT") y "zh-Hans" ("zh-CHS").</span><span class="sxs-lookup"><span data-stu-id="476fe-448">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-449">En el ejemplo siguiente se determina si el idioma de la referencia cultural de interfaz de usuario del subproceso actual es el francés.</span><span class="sxs-lookup"><span data-stu-id="476fe-449">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="476fe-450">Si no es así, Establece la referencia cultural de interfaz de usuario del subproceso actual para inglés (Estados Unidos).</span><span class="sxs-lookup"><span data-stu-id="476fe-450">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="476fe-451">En el ejemplo de código siguiente se muestra la instrucción de subprocesamiento que permite a la interfaz de usuario de Windows Forms para mostrar de la referencia cultural que se establece en el Panel de Control.</span><span class="sxs-lookup"><span data-stu-id="476fe-451">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="476fe-452">Se necesita código adicional.</span><span class="sxs-lookup"><span data-stu-id="476fe-452">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="476fe-453">La propiedad se establece en <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-453">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="476fe-454">La propiedad se establece en un nombre de referencia cultural que no se puede usar para buscar un archivo de recursos.</span><span class="sxs-lookup"><span data-stu-id="476fe-454">The property is set to a culture name that cannot be used to locate a resource file.</span></span> <span data-ttu-id="476fe-455">Los nombres de archivo de recursos deben incluir solo letras, números, guiones o caracteres de subrayado.</span><span class="sxs-lookup"><span data-stu-id="476fe-455">Resource filenames must include only letters, numbers, hyphens or underscores.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-456">Desactiva la limpieza automática de contenedores RCW (Runtime Callable Wrappers) para el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-456">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-457">De forma predeterminada, common language runtime (CLR) limpia los contenedores RCW automáticamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-457">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="476fe-458">El CLR bombea los mensajes durante la limpieza, lo que podría producir problemas de reentrada para algunas aplicaciones que cumplen los siguientes criterios inusuales:</span><span class="sxs-lookup"><span data-stu-id="476fe-458">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="476fe-459">La aplicación hace su propia distribución de mensajes.</span><span class="sxs-lookup"><span data-stu-id="476fe-459">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="476fe-460">La aplicación necesita controlar con precisión cuando se produce la distribución de mensajes.</span><span class="sxs-lookup"><span data-stu-id="476fe-460">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="476fe-461">Tales aplicaciones pueden utilizar el <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> método para evitar que el CLR realice contenedores RCW de recuperación automática de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-461">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="476fe-462">Cuando este método se ha llamado en un subproceso, la limpieza automática no puede habilitarse de nuevo para ese subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-462">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="476fe-463">Cuando la aplicación está lista para limpiar los contenedores RCW, use la <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> método para indicar el tiempo de ejecución para limpiar todos los contenedores que se puede llamar en tiempo de ejecución en el contexto actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-463">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="476fe-464">Distribución de mensajes tiene lugar mientras se ejecuta el método.</span><span class="sxs-lookup"><span data-stu-id="476fe-464">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-465">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-465">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-466">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-466">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-467">Notifica a un host que la ejecución está a punto de entrar en una región de código donde los efectos de una anulación del subproceso o de una excepción no controlada se limitan a la tarea actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-467">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-468">Los hosts de common language runtime (CLR), como Microsoft SQL Server 2005, pueden establecer directivas diferentes para los errores en las regiones críticas y no críticas de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-468">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="476fe-469">Una región crítica es aquella en la que los efectos de una anulación del subproceso o una excepción no controlada podrían no limitarse a la tarea actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-469">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="476fe-470">Por el contrario, una anulación o un error en una región no crítica del código afecta solo a la tarea en la que se produce el error.</span><span class="sxs-lookup"><span data-stu-id="476fe-470">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="476fe-471">Por ejemplo, considere la posibilidad de una tarea que intenta asignar memoria mientras se mantiene un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-471">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="476fe-472">Si se produce un error en la asignación de memoria, la anulación de la tarea actual no es suficiente para garantizar la estabilidad de la <xref:System.AppDomain>, porque puede haber otras tareas en el dominio esperando el mismo bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-472">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="476fe-473">Si se termina la tarea actual, otras tareas podrían sufrir un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-473">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="476fe-474">Cuando se produce un error en una región crítica, el host puede optar por descargar todo el <xref:System.AppDomain> en lugar de correr el riesgo de continuar la ejecución en un estado potencialmente inestable.</span><span class="sxs-lookup"><span data-stu-id="476fe-474">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="476fe-475">Para informar al host que el código está entrando en una región crítica, llame a <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-475">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="476fe-476">Llamar a <xref:System.Threading.Thread.EndCriticalRegion%2A> cuando la ejecución vuelve a una región no crítica del código.</span><span class="sxs-lookup"><span data-stu-id="476fe-476">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="476fe-477">Usar este método en el código que se ejecuta SQL Server 2005 requiere que el código se ejecute en el nivel más alto de protección de host.</span><span class="sxs-lookup"><span data-stu-id="476fe-477">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-478">En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Thread.BeginCriticalRegion%2A> y <xref:System.Threading.Thread.EndCriticalRegion%2A> métodos para dividir un bloque de código en regiones críticas y no críticas.</span><span class="sxs-lookup"><span data-stu-id="476fe-478">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-479">Notifica a un host que el código administrado ha terminado de ejecutar instrucciones que dependen de la identidad del subproceso del sistema operativo físico actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-479">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-480">Algunos de los hosts de common language runtime, como Microsoft SQL Server 2005, proporcionan su propia administración de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-480">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="476fe-481">Un host que proporciona su propia administración de subprocesos puede mover una tarea que se ejecuta desde un subproceso de sistema operativo físico a otro en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="476fe-481">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="476fe-482">Mayoría de las tareas no se ven afectada por este cambio.</span><span class="sxs-lookup"><span data-stu-id="476fe-482">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="476fe-483">Sin embargo, algunas tareas tienen afinidad de subprocesos, es decir, que dependen de la identidad de un subproceso físico del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-483">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="476fe-484">Estas tareas deben informar al host cuando ejecuta código que no se debe cambiar.</span><span class="sxs-lookup"><span data-stu-id="476fe-484">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="476fe-485">Por ejemplo, si el aplicación llama una API del sistema para adquirir un sistema operativo de bloqueo que tiene afinidad de subprocesos, como CRITICAL_SECTION de Win32, se debe llamar a <xref:System.Threading.Thread.BeginThreadAffinity%2A> antes de adquirir el bloqueo, y <xref:System.Threading.Thread.EndThreadAffinity%2A> tras liberar el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="476fe-485">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="476fe-486">Usar este método en el código que se ejecuta SQL Server 2005 requiere que el código se ejecute en el nivel más alto de protección de host.</span><span class="sxs-lookup"><span data-stu-id="476fe-486">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-487">En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Thread.BeginThreadAffinity%2A> y <xref:System.Threading.Thread.EndThreadAffinity%2A> métodos para notificar a un host que un bloque de código depende de la identidad de un subproceso físico del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="476fe-487">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-488">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="476fe-488">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-489">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-489">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-490">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-490">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-491">Obtiene un objeto <see cref="T:System.Threading.ExecutionContext" /> que contiene información sobre los distintos contextos del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-491">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span></span></summary>
        <value><span data-ttu-id="476fe-492">Objeto <see cref="T:System.Threading.ExecutionContext" /> que consolida la información de contexto del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-492">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-493">La <xref:System.Threading.ExecutionContext> clase proporciona un contenedor único para toda la información relevante para un subproceso lógico de ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-493">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="476fe-494">Esto incluye el contexto de seguridad, contexto de llamada, el contexto de sincronización, el contexto de localización y contexto de transacción.</span><span class="sxs-lookup"><span data-stu-id="476fe-494">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-495">Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-495">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-496">El recolector de elementos no utilizados llame <xref:System.Threading.Thread.Finalize%2A> cuando el objeto actual está preparado para finalizarse.</span><span class="sxs-lookup"><span data-stu-id="476fe-496">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="476fe-497">Nombre de la ranura de datos que se va a liberar.</span><span class="sxs-lookup"><span data-stu-id="476fe-497">The name of the data slot to be freed.</span></span></param>
        <summary><span data-ttu-id="476fe-498">Elimina la asociación entre un nombre y una ranura en todos los subprocesos del proceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-498">Eliminates the association between a name and a slot, for all threads in the process.</span></span> <span data-ttu-id="476fe-499">Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-499">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-500">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-500">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-501">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-501">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-502">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-502">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-503">Después de cualquier subproceso llama `FreeNamedDataSlot`, ningún otro subproceso que llama a <xref:System.Threading.Thread.GetNamedDataSlot%2A> con el mismo nombre asignará una nueva ranura asociada al nombre.</span><span class="sxs-lookup"><span data-stu-id="476fe-503">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="476fe-504">Las llamadas subsiguientes a `GetNamedDataSlot` ningún subproceso devolverá la nueva ranura.</span><span class="sxs-lookup"><span data-stu-id="476fe-504">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="476fe-505">Sin embargo, cualquier subproceso que aún un <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> devuelto por una llamada anterior a `GetNamedDataSlot` puede seguir usando la ranura anterior.</span><span class="sxs-lookup"><span data-stu-id="476fe-505">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="476fe-506">Se libera una ranura que se ha asociado con un nombre solamente cuando cada `LocalDataStoreSlot` que obtuvo antes de la llamada a `FreeNamedDataSlot` se ha liberado y recolección.</span><span class="sxs-lookup"><span data-stu-id="476fe-506">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="476fe-507">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-507">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-508">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-508">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-509">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar cuando el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-509">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="476fe-510">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-510">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-511">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-511">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-512">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-512">This section contains two code examples.</span></span> <span data-ttu-id="476fe-513">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-513">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-514">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-514">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-515">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-515">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-516">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-516">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-517">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-517">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-518">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-518">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-519">En el ejemplo siguiente se muestra cómo usar una ranura de datos con nombre para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-519">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-520">Devuelve un valor <see cref="T:System.Threading.ApartmentState" /> que indica el estado del apartamento.</span><span class="sxs-lookup"><span data-stu-id="476fe-520">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span></span></summary>
        <returns><span data-ttu-id="476fe-521">Uno de los valores de <see cref="T:System.Threading.ApartmentState" /> que indica el estado del apartamento del subproceso administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-521">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span></span> <span data-ttu-id="476fe-522">El valor predeterminado es <see cref="F:System.Threading.ApartmentState.Unknown" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-522">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-523">Este método, junto con el <xref:System.Threading.Thread.SetApartmentState%2A> método y la <xref:System.Threading.Thread.TrySetApartmentState%2A> método, reemplaza el <xref:System.Threading.Thread.ApartmentState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-523">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-524">En el ejemplo de código siguiente se muestra la <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, y <xref:System.Threading.Thread.TrySetApartmentState%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="476fe-524">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="476fe-525">El ejemplo de código crea un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-525">The code example creates a thread.</span></span> <span data-ttu-id="476fe-526">Antes de inicia el subproceso, <xref:System.Threading.Thread.GetApartmentState%2A> muestra inicial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> estado y <xref:System.Threading.Thread.SetApartmentState%2A> cambia el estado a <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-526">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-527">El <xref:System.Threading.Thread.TrySetApartmentState%2A> , a continuación, devuelve el método `false` al intentar cambiar el estado a <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> porque el estado de apartamento ya está establecido.</span><span class="sxs-lookup"><span data-stu-id="476fe-527">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="476fe-528">Si hubiera intentado la misma operación <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> habría iniciado.</span><span class="sxs-lookup"><span data-stu-id="476fe-528">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="476fe-529">Una vez iniciado el subproceso, la <xref:System.Threading.Thread.TrySetApartmentState%2A> método se vuelve a usar.</span><span class="sxs-lookup"><span data-stu-id="476fe-529">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="476fe-530">Esta vez produce <xref:System.Threading.ThreadStateException> porque ya se haya iniciado el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-530">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-531">Devuelve un objeto <see cref="T:System.Threading.CompressedStack" /> que se puede utilizar para capturar la pila correspondiente al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-531">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span></span></summary>
        <returns><span data-ttu-id="476fe-532">Ninguno.</span><span class="sxs-lookup"><span data-stu-id="476fe-532">None.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-533">Ya no se admite este método.</span><span class="sxs-lookup"><span data-stu-id="476fe-533">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="476fe-534">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="476fe-534">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-535">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-535">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-536">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-536">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="476fe-537">La <see cref="T:System.LocalDataStoreSlot" /> de donde se va a obtener el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-537">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span></span></param>
        <summary><span data-ttu-id="476fe-538">Recupera el valor de la ranura especificada en el subproceso actual, dentro del dominio actual del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-538">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span></span> <span data-ttu-id="476fe-539">Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-539">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="476fe-540">El valor recuperado.</span><span class="sxs-lookup"><span data-stu-id="476fe-540">The retrieved value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-541">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-541">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-542">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-542">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-543">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-543">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-544">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-544">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-545">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-545">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-546">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar cuando el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-546">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="476fe-547">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-547">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-548">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-548">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-549"><xref:System.Threading.Thread.GetData%2A> es un `Shared` método que se aplica siempre al subproceso actualmente en ejecución, incluso si se le llama utilizando una variable que hace referencia a otro subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-549"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="476fe-550">Para evitar confusiones, utilice el nombre de clase al llamar a `Shared` métodos: `Dim test As Object = Thread.GetData(testSlot)`.</span><span class="sxs-lookup"><span data-stu-id="476fe-550">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-551">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-551">This section contains two code examples.</span></span> <span data-ttu-id="476fe-552">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-552">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-553">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-553">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-554">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-554">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-555">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-555">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-556">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-556">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-557">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-557">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-558">En el ejemplo siguiente se muestra cómo usar una ranura de datos para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-558">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-559">Devuelve el dominio en el que se está ejecutando el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-559">Returns the current domain in which the current thread is running.</span></span></summary>
        <returns><span data-ttu-id="476fe-560">Un <see cref="T:System.AppDomain" /> que representa el dominio de la aplicación actual del subproceso en ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-560">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="476fe-561">En el ejemplo de código siguiente se muestra cómo recuperar el nombre e identificador de la `AppDomain` en que se está ejecutando el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-561">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-562">Devuelve un identificador único del dominio de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-562">Returns a unique application domain identifier.</span></span></summary>
        <returns><span data-ttu-id="476fe-563">Entero de 32 bits con signo que identifica de forma unívoca el dominio de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-563">A 32-bit signed integer uniquely identifying the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="476fe-564">En el ejemplo de código siguiente se muestra cómo recuperar el nombre e identificador de la `AppDomain` en que se está ejecutando el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-564">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-565">Devuelve un código hash para el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-565">Returns a hash code for the current thread.</span></span></summary>
        <returns><span data-ttu-id="476fe-566">Valor de código hash entero.</span><span class="sxs-lookup"><span data-stu-id="476fe-566">An integer hash code value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-567">No se garantiza que el código hash sea único.</span><span class="sxs-lookup"><span data-stu-id="476fe-567">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="476fe-568">Use la <xref:System.Threading.Thread.ManagedThreadId%2A> propiedad si necesita un identificador único para un subproceso administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-568">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="476fe-569">Nombre de la ranura de datos local.</span><span class="sxs-lookup"><span data-stu-id="476fe-569">The name of the local data slot.</span></span></param>
        <summary><span data-ttu-id="476fe-570">Busca una ranura de datos con nombre.</span><span class="sxs-lookup"><span data-stu-id="476fe-570">Looks up a named data slot.</span></span> <span data-ttu-id="476fe-571">Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-571">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="476fe-572">Una <see cref="T:System.LocalDataStoreSlot" /> asignada para este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-572">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-573">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-573">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-574">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-574">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-575">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-575">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-576">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-576">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-577">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-577">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-578">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar cuando el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-578">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="476fe-579">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-579">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-580">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-580">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="476fe-581">Si el espacio con nombre no existe, se asigna un nuevo espacio.</span><span class="sxs-lookup"><span data-stu-id="476fe-581">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="476fe-582">Las ranuras de datos con nombre son públicas y se pueden manipular cualquier usuario.</span><span class="sxs-lookup"><span data-stu-id="476fe-582">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-583">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-583">This section contains two code examples.</span></span> <span data-ttu-id="476fe-584">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-584">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-585">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-585">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-586">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-586">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-587">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-587">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-588">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-588">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-589">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-589">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-590">En el ejemplo siguiente se muestra cómo usar una ranura de datos con nombre para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-590">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-591">Interrumpe un subproceso que se encuentra en estado de subproceso <see langword="WaitSleepJoin" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-591">Interrupts a thread that is in the <see langword="WaitSleepJoin" /> thread state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-592">Si este subproceso no está actualmente bloqueado en una espera, la suspensión o el estado de unión, se interrumpirá cuando empieza a continuación a bloquear.</span><span class="sxs-lookup"><span data-stu-id="476fe-592">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="476fe-593"><xref:System.Threading.ThreadInterruptedException> se produce en el subproceso interrumpido, pero no hasta que el subproceso se bloquea.</span><span class="sxs-lookup"><span data-stu-id="476fe-593"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="476fe-594">Si el subproceso nunca se bloquea, nunca se produce la excepción y, por tanto, el subproceso podría finalizar sin ser interrumpido.</span><span class="sxs-lookup"><span data-stu-id="476fe-594">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-595">En el ejemplo de código siguiente se muestra el comportamiento de un subproceso en ejecución cuando se interrumpe y posteriormente se bloquee.</span><span class="sxs-lookup"><span data-stu-id="476fe-595">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-596">El llamador no tiene el permiso <see cref="T:System.Security.Permissions.SecurityPermission" /> apropiado.</span><span class="sxs-lookup"><span data-stu-id="476fe-596">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-597">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-597">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-598">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-598">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-599">Obtiene un valor que indica el estado de ejecución del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-599">Gets a value indicating the execution status of the current thread.</span></span></summary>
        <value>
          <span data-ttu-id="476fe-600"><see langword="true" /> si el subproceso se ha iniciado y no ha terminado con normalidad o se ha anulado; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-600"><see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-601">Obtiene o establece un valor que indica si un subproceso es o no un subproceso en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-601">Gets or sets a value indicating whether or not a thread is a background thread.</span></span></summary>
        <value>
          <span data-ttu-id="476fe-602"><see langword="true" /> si el subproceso es un subproceso en segundo plano o va a convertirse en un subproceso en segundo plano; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-602"><see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-603">Un subproceso es un subproceso en segundo plano o en un subproceso en primer plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-603">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="476fe-604">Subprocesos en segundo plano son idénticos a los subprocesos de primer plano, salvo que los subprocesos en segundo plano no impiden que un proceso de terminación.</span><span class="sxs-lookup"><span data-stu-id="476fe-604">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="476fe-605">Una vez terminados todos los subprocesos de primer plano que pertenecen a un proceso, common language runtime termina el proceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-605">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="476fe-606">Los subprocesos en segundo plano restantes se detienen y no se completan.</span><span class="sxs-lookup"><span data-stu-id="476fe-606">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="476fe-607">De forma predeterminada, los siguientes subprocesos se ejecutan en primer plano (es decir, su <xref:System.Threading.Thread.IsBackground%2A> propiedad devuelve `false`):</span><span class="sxs-lookup"><span data-stu-id="476fe-607">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="476fe-608">El subproceso principal (o subproceso de aplicación principal).</span><span class="sxs-lookup"><span data-stu-id="476fe-608">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="476fe-609">Todos los subprocesos creados mediante una llamada a un <xref:System.Threading.Thread> constructor de clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-609">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="476fe-610">De forma predeterminada, ejecuten los siguientes subprocesos en segundo plano (es decir, su <xref:System.Threading.Thread.IsBackground%2A> propiedad devuelve `true`):</span><span class="sxs-lookup"><span data-stu-id="476fe-610">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="476fe-611">El subproceso del grupo de subprocesos, que son un grupo de subprocesos de trabajo mantenida por el tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-611">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="476fe-612">Puede configurar el trabajo de grupo y la programación de subprocesos en el grupo de subprocesos mediante el <xref:System.Threading.ThreadPool> clase.</span><span class="sxs-lookup"><span data-stu-id="476fe-612">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="476fe-613">Operaciones asincrónicas basadas en tareas se ejecutan automáticamente en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-613">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="476fe-614">Todos los subprocesos que entran en el entorno de ejecución administrado desde código no administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-614">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-615">En el ejemplo siguiente se compara el comportamiento de los subprocesos de primer plano y fondo.</span><span class="sxs-lookup"><span data-stu-id="476fe-615">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="476fe-616">Crea un subproceso en primer plano y un subproceso en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="476fe-616">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="476fe-617">El subproceso en primer plano mantiene el proceso se ejecuta hasta que finalice su `for` bucle y finaliza.</span><span class="sxs-lookup"><span data-stu-id="476fe-617">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="476fe-618">Sin embargo, como se muestra en el resultado del ejemplo, dado que el subproceso en primer plano ha terminado de ejecutarse, el proceso se termina antes de que el subproceso en segundo plano ha completado su ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-618">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-619">El proceso está inactivo.</span><span class="sxs-lookup"><span data-stu-id="476fe-619">The thread is dead.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-620">Obtiene un valor que indica si un subproceso pertenece al grupo de subprocesos administrados o no.</span><span class="sxs-lookup"><span data-stu-id="476fe-620">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span></span></summary>
        <value>
          <span data-ttu-id="476fe-621"><see langword="true" /> si el subproceso pertenece al grupo de subprocesos administrados; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-621"><see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-622">Para obtener más información, consulte [el grupo de subprocesos administrado](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-622">For more information see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-623">En el ejemplo de código siguiente se muestra cómo determinar si es un subproceso del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-623">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-624">Bloquea el subproceso de llamada hasta que finaliza el subproceso representado por esta instancia.</span><span class="sxs-lookup"><span data-stu-id="476fe-624">Blocks the calling thread until the thread represented by this instance terminates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-625">Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza, pero continúa bombeando <see langword="SendMessage" /> y COM estándar.</span><span class="sxs-lookup"><span data-stu-id="476fe-625">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-626"><xref:System.Threading.Thread.Join%2A> es un método de sincronización que bloquea el subproceso que realiza la llamada (es decir, el subproceso que llama al método) hasta que el subproceso cuyo <xref:System.Threading.Thread.Join%2A> se llama al método se ha completado.</span><span class="sxs-lookup"><span data-stu-id="476fe-626"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="476fe-627">Utilice este método para asegurarse de que un subproceso ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="476fe-627">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="476fe-628">El llamador se bloqueará indefinidamente si el subproceso no termina.</span><span class="sxs-lookup"><span data-stu-id="476fe-628">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="476fe-629">En el ejemplo siguiente, la `Thread1` subproceso llama el <xref:System.Threading.Thread.Join> método `Thread2`, lo que hace que `Thread1` al bloque hasta que `Thread2` se ha completado.</span><span class="sxs-lookup"><span data-stu-id="476fe-629">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="476fe-630">Si el subproceso ya ha terminado cuando <xref:System.Threading.Thread.Join%2A> se llama, el método vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-630">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="476fe-631">Nunca se debería llamar a la <xref:System.Threading.Thread.Join%2A> método de la <xref:System.Threading.Thread> objeto que representa el subproceso actual del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-631">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="476fe-632">Esto hace que la aplicación que deja de responder porque el subproceso actual espera indefinidamente, en sí misma</span><span class="sxs-lookup"><span data-stu-id="476fe-632">This causes your app to hang because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="476fe-633">Este método cambia el estado del subproceso que realiza la llamada debe incluir <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-633">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-634">No se puede invocar `Join` en un subproceso que se encuentra en la <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> estado.</span><span class="sxs-lookup"><span data-stu-id="476fe-634">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-635">El autor de la llamada ha intentado combinar un subproceso que se encuentra en el estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-635">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="476fe-636">El subproceso se interrumpe mientras espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-636">The thread is interrupted while waiting.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="476fe-637">Número de milisegundos durante los que se va a esperar a que el subproceso finalice.</span><span class="sxs-lookup"><span data-stu-id="476fe-637">The number of milliseconds to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="476fe-638">Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza o transcurre el tiempo especificado, pero continúa bombeando SendMessage y COM estándar.</span><span class="sxs-lookup"><span data-stu-id="476fe-638">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns>
          <span data-ttu-id="476fe-639"><see langword="true" /> si el subproceso ha terminado; <see langword="false" /> si el subproceso no ha terminado una vez transcurrido el período de tiempo especificado por el parámetro <paramref name="millisecondsTimeout" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-639"><see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-640"><xref:System.Threading.Thread.Join%28System.Int32%29> es un método de sincronización que bloquea el subproceso que realiza la llamada (es decir, el subproceso que llama al método) hasta que el subproceso de cualquier cuyo <xref:System.Threading.Thread.Join%2A> se llama al método se ha completado o ha transcurrido el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-640"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="476fe-641">En el ejemplo siguiente, la `Thread1` subproceso llama el <xref:System.Threading.Thread.Join> método `Thread2`, lo que hace `Thread1` para bloquear hasta que `Thread2` se ha completado o 2 segundos transcurridos.</span><span class="sxs-lookup"><span data-stu-id="476fe-641">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="476fe-642">Si <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> se especifica para el `millisecondsTimeout` parámetro, este método se comporta igual que el <xref:System.Threading.Thread.Join> sobrecarga del método, excepto para el valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="476fe-642">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="476fe-643">Si el subproceso ya ha terminado cuando <xref:System.Threading.Thread.Join%2A> se llama, el método vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-643">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="476fe-644">Este método cambia el estado del subproceso que realiza la llamada debe incluir <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-644">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-645">No se puede invocar `Join` en un subproceso que se encuentra en la <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> estado.</span><span class="sxs-lookup"><span data-stu-id="476fe-645">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="476fe-646">El valor de <paramref name="millisecondsTimeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos.</span><span class="sxs-lookup"><span data-stu-id="476fe-646">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-647">No se ha iniciado el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-647">The thread has not been started.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="476fe-648">Un <see cref="T:System.TimeSpan" /> establecido en el período de tiempo durante el que se esperará a que espere el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-648">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="476fe-649">Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza o transcurre el tiempo especificado, pero continúa bombeando SendMessage y COM estándar.</span><span class="sxs-lookup"><span data-stu-id="476fe-649">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns>
          <span data-ttu-id="476fe-650"><see langword="true" /> si el subproceso ha terminado; <see langword="false" /> si el subproceso no ha terminado una vez transcurrido el período de tiempo especificado por el parámetro <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-650"><see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> es un método de sincronización que bloquea el subproceso que realiza la llamada (es decir, el subproceso que llama al método) hasta que el subproceso de cualquier cuyo <xref:System.Threading.Thread.Join%2A> se llama al método se ha completado o ha transcurrido el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="476fe-652">En el ejemplo siguiente, la `Thread1` subproceso llama el <xref:System.Threading.Thread.Join> método `Thread2`, lo que hace `Thread1` para bloquear hasta que `Thread2` se ha completado o 2 segundos transcurridos.</span><span class="sxs-lookup"><span data-stu-id="476fe-652">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="476fe-653">Si <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> especificado para `timeout`, este método se comporta igual que el <xref:System.Threading.Thread.Join> sobrecarga del método, excepto para el valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="476fe-653">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="476fe-654">Si el subproceso ya ha terminado cuando <xref:System.Threading.Thread.Join%2A> se llama, el método vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-654">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="476fe-655">Este método cambia el estado del subproceso actual para incluir <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="476fe-655">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="476fe-656">No se puede invocar `Join` en un subproceso que se encuentra en la <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> estado.</span><span class="sxs-lookup"><span data-stu-id="476fe-656">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-657">En el ejemplo de código siguiente se muestra cómo utilizar un `TimeSpan` valor con el `Join` método.</span><span class="sxs-lookup"><span data-stu-id="476fe-657">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="476fe-658">El valor de <paramref name="timeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos, o es superior a <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="476fe-658">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-659">El autor de la llamada ha intentado combinar un subproceso que se encuentra en el estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-659">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-660">Obtiene un identificador único para el actual subproceso administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-660">Gets a unique identifier for the current managed thread.</span></span></summary>
        <value><span data-ttu-id="476fe-661">Entero que representa un identificador único para este subproceso administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-661">An integer that represents a unique identifier for this managed thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-662">Un subproceso <xref:System.Threading.Thread.ManagedThreadId%2A> valor de la propiedad sirve para identificar ese subproceso dentro de su proceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-662">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="476fe-663">El valor de la <xref:System.Threading.Thread.ManagedThreadId%2A> propiedad no varía con el tiempo, incluso si el código no administrado que hospeda common language runtime implemente el subproceso como una fibra.</span><span class="sxs-lookup"><span data-stu-id="476fe-663">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-664">Sincroniza el acceso a la memoria de la siguiente forma: el procesador que ejecuta el subproceso actual no puede reordenar las instrucciones de forma que los accesos a la memoria anteriores a la llamada a <see cref="M:System.Threading.Thread.MemoryBarrier" /> se ejecuten después de los accesos a memoria que siguen a la llamada a <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-664">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-665"><xref:System.Threading.Thread.MemoryBarrier%2A> solo es necesario en sistemas multiprocesador con ordenación (por ejemplo, un sistema que utilice varios procesadores Intel Itanium) de memoria débil.</span><span class="sxs-lookup"><span data-stu-id="476fe-665"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="476fe-666">Para la mayoría de los propósitos, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción), o la <xref:System.Threading.Monitor> clase proporcionan formas más sencillas de sincronizar los datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-666">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-667">Obtiene o establece el nombre del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-667">Gets or sets the name of the thread.</span></span></summary>
        <value><span data-ttu-id="476fe-668">Cadena que contiene el nombre del subproceso o <see langword="null" /> si no se ha establecido ningún nombre.</span><span class="sxs-lookup"><span data-stu-id="476fe-668">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-669">Esta propiedad es de escritura-una vez.</span><span class="sxs-lookup"><span data-stu-id="476fe-669">This property is write-once.</span></span> <span data-ttu-id="476fe-670">Dado que el valor predeterminado de un subproceso <xref:System.Threading.Thread.Name%2A> propiedad es `null`, puede determinar si un nombre ha ya asignado explícitamente al subproceso comparándolo con `null`.</span><span class="sxs-lookup"><span data-stu-id="476fe-670">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="476fe-671">La cadena asignada a la <xref:System.Threading.Thread.Name%2A> propiedad puede incluir cualquier carácter Unicode.</span><span class="sxs-lookup"><span data-stu-id="476fe-671">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-672">En el ejemplo siguiente se muestra cómo denominar un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-672">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="476fe-673">Se solicitó una operación Set, pero ya se ha establecido la propiedad <see langword="Name" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-673">A set operation was requested, but the <see langword="Name" /> property has already been set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-674">Obtiene o establece un valor que indica la prioridad de programación de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-674">Gets or sets a value indicating the scheduling priority of a thread.</span></span></summary>
        <value><span data-ttu-id="476fe-675">Uno de los valores de <see cref="T:System.Threading.ThreadPriority" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-675">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span></span> <span data-ttu-id="476fe-676">El valor predeterminado es <see cref="F:System.Threading.ThreadPriority.Normal" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-676">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-677">Un subproceso se puede asignar cualquiera de la siguiente prioridad <xref:System.Threading.ThreadPriority> valores:</span><span class="sxs-lookup"><span data-stu-id="476fe-677">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="476fe-678">Sistemas operativos no se debe respetar la prioridad de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-678">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-679">En el ejemplo siguiente se muestra el resultado de cambiar la prioridad de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-679">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="476fe-680">Se crean tres subprocesos, se establece la prioridad de un subproceso en <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, y la prioridad de segundo se establece en <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-680">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-681">Cada subproceso incrementa una variable en un `while` bucle y se ejecuta durante un tiempo establecido.</span><span class="sxs-lookup"><span data-stu-id="476fe-681">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-682">El subproceso ha alcanzado un estado final, como <see cref="F:System.Threading.ThreadState.Aborted" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-682">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="476fe-683">El valor especificado para una operación de establecimiento no es un valor de <see cref="T:System.Threading.ThreadPriority" /> valido.</span><span class="sxs-lookup"><span data-stu-id="476fe-683">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-684">Cancela un método <see cref="M:System.Threading.Thread.Abort(System.Object)" /> solicitado para el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-684">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-685">Este método solo puede llamarse mediante código con los permisos adecuados.</span><span class="sxs-lookup"><span data-stu-id="476fe-685">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="476fe-686">Cuando se realiza una llamada a `Abort` para terminar un subproceso, el sistema produce una <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="476fe-686">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="476fe-687">`ThreadAbortException` es una excepción especial que puede detectar mediante código de la aplicación, pero se vuelve a producir al final del bloque catch a menos que `ResetAbort` se llama.</span><span class="sxs-lookup"><span data-stu-id="476fe-687">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="476fe-688">`ResetAbort` cancela la solicitud para anular la operación y evita la `ThreadAbortException` de finalización del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-688">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="476fe-689">Vea <xref:System.Threading.ThreadAbortException> para obtener un ejemplo que muestra cómo llamar a la `ResetAbort` método.</span><span class="sxs-lookup"><span data-stu-id="476fe-689">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-690">Solo .NET Core: este miembro no se admite.</span><span class="sxs-lookup"><span data-stu-id="476fe-690">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="476fe-691"><see langword="Abort" /> no se invocó en el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-691"><see langword="Abort" /> was not invoked on the current thread.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-692">El autor de la llamada no tiene el permiso de seguridad necesario para el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-692">The caller does not have the required security permission for the current thread.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-693">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-693">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-694">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-694">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-695">Reanuda un subproceso que se ha suspendido.</span><span class="sxs-lookup"><span data-stu-id="476fe-695">Resumes a thread that has been suspended.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="476fe-696">No utilice la <xref:System.Threading.Thread.Suspend%2A> y <xref:System.Threading.Thread.Resume%2A> métodos para sincronizar las actividades de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-696">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="476fe-697">No tener ninguna manera de saber qué código un subproceso se ejecuta cuando se lo suspenderá.</span><span class="sxs-lookup"><span data-stu-id="476fe-697">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="476fe-698">Si se suspende un subproceso mientras contiene los bloqueos durante una evaluación de permisos de seguridad, otros subprocesos en la <xref:System.AppDomain> podría bloquearse.</span><span class="sxs-lookup"><span data-stu-id="476fe-698">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="476fe-699">Si se suspende un subproceso mientras se ejecuta un constructor de clase, otros subprocesos en la <xref:System.AppDomain> que intentan usar que clase están bloqueadas.</span><span class="sxs-lookup"><span data-stu-id="476fe-699">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="476fe-700">Pueden producirse interbloqueos muy fácilmente.</span><span class="sxs-lookup"><span data-stu-id="476fe-700">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-701">Solo .NET Core: este miembro no se admite.</span><span class="sxs-lookup"><span data-stu-id="476fe-701">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-702">El subproceso no se ha iniciado, está inactivo o no está en estado suspendido.</span><span class="sxs-lookup"><span data-stu-id="476fe-702">The thread has not been started, is dead, or is not in the suspended state.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-703">El llamador no tiene el permiso <see cref="T:System.Security.Permissions.SecurityPermission" /> apropiado.</span><span class="sxs-lookup"><span data-stu-id="476fe-703">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-704">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-704">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-705">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="476fe-705">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="476fe-706">Nuevo estado del apartamento.</span><span class="sxs-lookup"><span data-stu-id="476fe-706">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="476fe-707">Establece el estado del apartamento de un subproceso antes de iniciarse.</span><span class="sxs-lookup"><span data-stu-id="476fe-707">Sets the apartment state of a thread before it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-708">Los subprocesos nuevos se inicializan como <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si no se ha establecido su estado de apartamento antes de que se inicien.</span><span class="sxs-lookup"><span data-stu-id="476fe-708">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="476fe-709">Estado del apartamento se debe establecer antes de que se inicia un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-709">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-710">El subproceso de aplicación principal se inicializa en <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="476fe-710">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="476fe-711">La única manera de establecer el estado de apartamento del subproceso de aplicación principal en <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> es aplicar el <xref:System.STAThreadAttribute> atributo al método de punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="476fe-711">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="476fe-712">El <xref:System.Threading.Thread.SetApartmentState%2A> método, junto con el <xref:System.Threading.Thread.GetApartmentState%2A> método y <xref:System.Threading.Thread.TrySetApartmentState%2A> reemplaza el método, el <xref:System.Threading.Thread.ApartmentState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-712">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-713">En el ejemplo de código siguiente se muestra la <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, y <xref:System.Threading.Thread.TrySetApartmentState%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="476fe-713">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="476fe-714">El ejemplo de código crea un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-714">The code example creates a thread.</span></span> <span data-ttu-id="476fe-715">Antes de inicia el subproceso, <xref:System.Threading.Thread.GetApartmentState%2A> muestra inicial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> estado y <xref:System.Threading.Thread.SetApartmentState%2A> cambia el estado a <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-715">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-716">El <xref:System.Threading.Thread.TrySetApartmentState%2A> , a continuación, devuelve el método `false` al intentar cambiar el estado a <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> porque el estado de apartamento ya está establecido.</span><span class="sxs-lookup"><span data-stu-id="476fe-716">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="476fe-717">Si hubiera intentado la misma operación <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> habría iniciado.</span><span class="sxs-lookup"><span data-stu-id="476fe-717">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="476fe-718">Una vez iniciado el subproceso, la <xref:System.Threading.Thread.TrySetApartmentState%2A> método se vuelve a usar.</span><span class="sxs-lookup"><span data-stu-id="476fe-718">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="476fe-719">Esta vez produce <xref:System.Threading.ThreadStateException> porque ya se haya iniciado el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-719">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-720">Solo .NET Core: este miembro no se admite en las plataformas macOS y Linux.</span><span class="sxs-lookup"><span data-stu-id="476fe-720">.NET Core only: This member is not supported on the macOS and Linux platforms.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="476fe-721"><paramref name="state" /> no es un estado de tipo apartamento válido.</span><span class="sxs-lookup"><span data-stu-id="476fe-721"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-722">Ya se inició el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-722">The thread has already been started.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="476fe-723">El estado de apartamento ya se inicializó.</span><span class="sxs-lookup"><span data-stu-id="476fe-723">The apartment state has already been initialized.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" />
      </Parameters>
      <Docs>
        <param name="stack"><span data-ttu-id="476fe-724">Objeto <see cref="T:System.Threading.CompressedStack" /> que va a aplicarse al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-724">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span></span></param>
        <summary><span data-ttu-id="476fe-725">Aplica un objeto <see cref="T:System.Threading.CompressedStack" /> capturado al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-725">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-726">Ya no se admite este método.</span><span class="sxs-lookup"><span data-stu-id="476fe-726">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="476fe-727">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="476fe-727">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="476fe-728">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="476fe-728">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="476fe-729">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="476fe-729">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="476fe-730">La <see cref="T:System.LocalDataStoreSlot" /> donde se va a establecer el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-730">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span></span></param>
        <param name="data"><span data-ttu-id="476fe-731">Valor que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="476fe-731">The value to be set.</span></span></param>
        <summary><span data-ttu-id="476fe-732">Establece los datos de la ranura especificada en el subproceso actualmente en ejecución, para el dominio actual de dicho subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-732">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span></span> <span data-ttu-id="476fe-733">Para obtener un mejor rendimiento, utilice en su lugar los campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-733">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-734">.NET Framework proporciona dos mecanismos para usar el almacenamiento local de subprocesos (TLS): campos estáticos relacionados con subprocesos (es decir, los campos marcados con el <xref:System.ThreadStaticAttribute> atributo) y ranuras de datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-734">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="476fe-735">Campos estáticos relacionados con subprocesos proporcionan un rendimiento mucho mejor que las ranuras de datos y habilita la comprobación de tipos en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="476fe-735">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="476fe-736">Para obtener más información sobre el uso de TLS, consulte [almacenamiento Local de subprocesos: campos estáticos relacionados con subprocesos y ranuras de datos](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-736">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="476fe-737">Los subprocesos usan un mecanismo de memoria de almacenamiento local para almacenar datos específicos del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-737">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="476fe-738">Common language runtime asigna una matriz de almacenamiento de datos de varias ranuras a cada proceso cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="476fe-738">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="476fe-739">El subproceso puede asignar una ranura de datos en el almacén de datos, almacenar y recuperar datos de un valor en la ranura y liberar la ranura para volver a usar una vez finalizado el procedimiento de subproceso y <xref:System.Threading.Thread> objeto ha sido reclamado por la recolección de elementos.</span><span class="sxs-lookup"><span data-stu-id="476fe-739">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="476fe-740">Las ranuras de datos son únicas para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-740">Data slots are unique per thread.</span></span> <span data-ttu-id="476fe-741">Ningún otro subproceso (ni siquiera un subproceso secundario) puede obtener esos datos.</span><span class="sxs-lookup"><span data-stu-id="476fe-741">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-742"><xref:System.Threading.Thread.SetData%2A> es un `Shared` método que se aplica siempre al subproceso actualmente en ejecución, incluso si se le llama utilizando una variable que hace referencia a otro subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-742"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="476fe-743">Para evitar confusiones, utilice el nombre de clase al llamar a `Shared` métodos: `Thread.SetData(testSlot, "test data")`.</span><span class="sxs-lookup"><span data-stu-id="476fe-743">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-744">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="476fe-744">This section contains two code examples.</span></span> <span data-ttu-id="476fe-745">El primer ejemplo muestra cómo utilizar un campo que se marca con el <xref:System.ThreadStaticAttribute> atributo para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-745">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="476fe-746">El segundo ejemplo muestra cómo usar una ranura de datos para hacer lo mismo.</span><span class="sxs-lookup"><span data-stu-id="476fe-746">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="476fe-747">**Primer ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-747">**First Example**</span></span>  
  
 <span data-ttu-id="476fe-748">En el ejemplo siguiente se muestra cómo utilizar un campo que se marca con <xref:System.ThreadStaticAttribute> para almacenar información específica de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-748">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="476fe-749">Esta técnica proporciona mejor rendimiento que la técnica que se muestra en el segundo ejemplo.</span><span class="sxs-lookup"><span data-stu-id="476fe-749">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="476fe-750">**Segundo ejemplo**</span><span class="sxs-lookup"><span data-stu-id="476fe-750">**Second Example**</span></span>  
  
 <span data-ttu-id="476fe-751">En el ejemplo siguiente se muestra cómo usar una ranura de datos con nombre para almacenar información específica del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-751">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-752">Suspende el subproceso actual durante la cantidad de tiempo especificada.</span><span class="sxs-lookup"><span data-stu-id="476fe-752">Suspends the current thread for the specified amount of time.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="476fe-753">Número de milisegundos durante los que el subproceso está suspendido.</span><span class="sxs-lookup"><span data-stu-id="476fe-753">The number of milliseconds for which the thread is suspended.</span></span> <span data-ttu-id="476fe-754">Si el valor del argumento <c>millisecondsTimeout</c> es cero, el subproceso cede el resto de su porción de tiempo a cualquier subproceso de idéntica prioridad que esté listo para ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="476fe-754">If the value of the <c>millisecondsTimeout</c> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="476fe-755">Si no hay ningún otro subproceso de igual prioridad que está listo para ejecutarse, no se suspende la ejecución del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-755">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="476fe-756">Suspende el subproceso actual durante el número de milisegundos especificado.</span><span class="sxs-lookup"><span data-stu-id="476fe-756">Suspends the current thread for the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-757">El subproceso no se programará para su ejecución por el sistema operativo durante el tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="476fe-757">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="476fe-758">Este método cambia el estado del subproceso para incluir <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="476fe-758">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="476fe-759">Puede especificar <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> para el `millisecondsTimeout` parámetro para suspender el subproceso indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-759">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="476fe-760">Sin embargo, se recomienda utilizar otros <xref:System.Threading?displayProperty=nameWithType> las clases como <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, o <xref:System.Threading.Semaphore> en su lugar para sincronizar subprocesos o administrar los recursos.</span><span class="sxs-lookup"><span data-stu-id="476fe-760">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="476fe-761">Los ciclos de reloj del sistema a un ritmo específico llama a la resolución del reloj.</span><span class="sxs-lookup"><span data-stu-id="476fe-761">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="476fe-762">El tiempo de espera real podría no ser exactamente el tiempo de espera, ya que el tiempo de espera especificado se ajustarán para que coincida con los ciclos de reloj.</span><span class="sxs-lookup"><span data-stu-id="476fe-762">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="476fe-763">Para obtener más información sobre la resolución del reloj y el tiempo de espera, vea el [suspensión función](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) tema.</span><span class="sxs-lookup"><span data-stu-id="476fe-763">For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic.</span></span> <span data-ttu-id="476fe-764">Este método llama a la [suspensión función](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) desde las API del sistema de Windows.</span><span class="sxs-lookup"><span data-stu-id="476fe-764">This method calls the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="476fe-765">Este método no realiza suministro de SendMessage y COM estándar.</span><span class="sxs-lookup"><span data-stu-id="476fe-765">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-766">Si necesita en modo de suspensión en un subproceso que tiene <xref:System.STAThreadAttribute>, pero desea realizar pero continúa bombeando SendMessage y COM estándar, puede usar una de las sobrecargas de los <xref:System.Threading.Thread.Join%2A> método que especifica un intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-766">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-767">En el ejemplo siguiente se usa el <xref:System.Threading.Thread.Sleep%2A> método para bloquear el subproceso principal de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="476fe-767">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="476fe-768">El valor de tiempo de espera es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-768">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="476fe-769">Cantidad de tiempo durante la que el subproceso está suspendido.</span><span class="sxs-lookup"><span data-stu-id="476fe-769">The amount of time for which the thread is suspended.</span></span> <span data-ttu-id="476fe-770">Si el valor del argumento <c>millisecondsTimeout</c> es <see cref="F:System.TimeSpan.Zero" />, el subproceso cede el resto de su porción de tiempo a cualquier subproceso de idéntica prioridad que esté listo para ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="476fe-770">If the value of the <c>millisecondsTimeout</c> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="476fe-771">Si no hay ningún otro subproceso de igual prioridad que está listo para ejecutarse, no se suspende la ejecución del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-771">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="476fe-772">Suspende el subproceso actual durante la cantidad de tiempo especificada.</span><span class="sxs-lookup"><span data-stu-id="476fe-772">Suspends the current thread for the specified amount of time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-773">El subproceso no se programará para su ejecución por el sistema operativo durante el tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="476fe-773">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="476fe-774">Este método cambia el estado del subproceso para incluir <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="476fe-774">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="476fe-775">Puede especificar <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> para el `timeout` parámetro para suspender el subproceso indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-775">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="476fe-776">Sin embargo, se recomienda utilizar otros <xref:System.Threading?displayProperty=nameWithType> las clases como <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, o <xref:System.Threading.Semaphore> en su lugar para sincronizar subprocesos o administrar los recursos.</span><span class="sxs-lookup"><span data-stu-id="476fe-776">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="476fe-777">Esta sobrecarga de <xref:System.Threading.Thread.Sleep%2A> utiliza el número total de milisegundos enteros en `timeout`.</span><span class="sxs-lookup"><span data-stu-id="476fe-777">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="476fe-778">Se descartan las fracciones de milisegundos.</span><span class="sxs-lookup"><span data-stu-id="476fe-778">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="476fe-779">Este método no realiza suministro de SendMessage y COM estándar.</span><span class="sxs-lookup"><span data-stu-id="476fe-779">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-780">Si necesita en modo de suspensión en un subproceso que tiene <xref:System.STAThreadAttribute>, pero desea realizar pero continúa bombeando SendMessage y COM estándar, puede usar una de las sobrecargas de los <xref:System.Threading.Thread.Join%2A> método que especifica un intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="476fe-780">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-781">En el ejemplo siguiente se usa el <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> sobrecarga del método para bloquear el subproceso principal de la aplicación cinco veces, durante dos segundos cada vez.</span><span class="sxs-lookup"><span data-stu-id="476fe-781">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="476fe-782">El valor de <paramref name="timeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos, o es superior a <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="476fe-782">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="iterations"><span data-ttu-id="476fe-783">Entero de 32 bits con signo que define la cantidad de tiempo de espera de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-783">A 32-bit signed integer that defines how long a thread is to wait.</span></span></param>
        <summary><span data-ttu-id="476fe-784">Hace que un subproceso espere el número de veces definido por el parámetro <paramref name="iterations" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-784">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-785">El <xref:System.Threading.Thread.SpinWait%2A> método resulta útil para implementar bloqueos.</span><span class="sxs-lookup"><span data-stu-id="476fe-785">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="476fe-786">Las clases de .NET Framework, como <xref:System.Threading.Monitor> y <xref:System.Threading.ReaderWriterLock>, use este método internamente.</span><span class="sxs-lookup"><span data-stu-id="476fe-786">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="476fe-787"><xref:System.Threading.Thread.SpinWait%2A> básicamente coloca el procesador en un bucle muy ajustado, con el recuento del bucle especificado por el `iterations` parámetro.</span><span class="sxs-lookup"><span data-stu-id="476fe-787"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="476fe-788">La duración de la espera, por tanto, depende de la velocidad del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-788">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="476fe-789">Compare esto con el <xref:System.Threading.Thread.Sleep%2A> método.</span><span class="sxs-lookup"><span data-stu-id="476fe-789">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="476fe-790">Un subproceso que llama <xref:System.Threading.Thread.Sleep%2A> da como resultado el resto de su porción actual de tiempo de procesador, incluso si el intervalo especificado es cero.</span><span class="sxs-lookup"><span data-stu-id="476fe-790">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="476fe-791">Especificar un intervalo distinto de cero para <xref:System.Threading.Thread.Sleep%2A> quita el subproceso de examen por el programador del subproceso hasta que haya transcurrido el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="476fe-791">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="476fe-792"><xref:System.Threading.Thread.SpinWait%2A> no es suelen ser útiles para las aplicaciones comunes.</span><span class="sxs-lookup"><span data-stu-id="476fe-792"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="476fe-793">En la mayoría de los casos, debe usar las clases de sincronización proporcionadas por .NET Framework; Por ejemplo, llamar a <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> o una instrucción que ajusta <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` en C# o `SyncLock` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="476fe-793">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="476fe-794">En el caso excepcional de que resulte ventajoso para evitar un cambio de contexto, por ejemplo, cuando se sabe que un cambio de estado es inminente, realizar una llamada a la <xref:System.Threading.Thread.SpinWait%2A> método en el bucle.</span><span class="sxs-lookup"><span data-stu-id="476fe-794">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="476fe-795">El código <xref:System.Threading.Thread.SpinWait%2A> ejecuta está diseñado para evitar problemas que pueden producirse en equipos con varios procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-795">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="476fe-796">Por ejemplo, en equipos con varios procesadores Intel que emplean la tecnología Hyper-Threading, <xref:System.Threading.Thread.SpinWait%2A> evita la inanición del procesador en determinadas situaciones.</span><span class="sxs-lookup"><span data-stu-id="476fe-796">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-797">Hace que se programe un subproceso para su ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-797">Causes a thread to be scheduled for execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-798">Hace que el sistema operativo cambie el estado de la instancia actual a <see cref="F:System.Threading.ThreadState.Running" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-798">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-799">Una vez que un subproceso está en el <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> de estado, el sistema operativo puede programarlo para su ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-799">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="476fe-800">El subproceso empieza a ejecutarse en la primera línea del método representado por la <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> delegado proporcionado al constructor del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-800">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="476fe-801">Tenga en cuenta que la llamada a <xref:System.Threading.Thread.Start%2A> no bloquea el subproceso que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="476fe-801">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-802">Si esta sobrecarga se utiliza con un subproceso creado utilizando un <xref:System.Threading.ParameterizedThreadStart> delegar, `null` se pasa al método ejecutado por el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-802">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="476fe-803">Una vez que finaliza el subproceso, no se puede reiniciar con otra llamada a `Start`.</span><span class="sxs-lookup"><span data-stu-id="476fe-803">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-804">En el ejemplo siguiente se crea y se inicia un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-804">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-805">Ya se inició el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-805">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="476fe-806">No hay memoria suficiente disponible para iniciar este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-806">There is not enough memory available to start this thread.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="476fe-807">Objeto que contiene datos para que los use el método ejecutado por el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-807">An object that contains data to be used by the method the thread executes.</span></span></param>
        <summary><span data-ttu-id="476fe-808">Hace que el sistema operativo cambie el estado de la instancia actual a <see cref="F:System.Threading.ThreadState.Running" />; también puede proporcionar un objeto que contiene datos para que los use el método ejecutado por el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-808">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-809">Una vez que un subproceso está en el <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> de estado, el sistema operativo puede programarlo para su ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-809">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="476fe-810">El subproceso empieza a ejecutarse en la primera línea del método representado por la <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> delegado proporcionado al constructor del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-810">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="476fe-811">Tenga en cuenta que la llamada a <xref:System.Threading.Thread.Start%2A> no bloquea el subproceso que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="476fe-811">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="476fe-812">Una vez que finaliza el subproceso, no se puede reiniciar con otra llamada a `Start`.</span><span class="sxs-lookup"><span data-stu-id="476fe-812">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="476fe-813">Esta sobrecarga y la <xref:System.Threading.ParameterizedThreadStart> delegado que sean fáciles de pasar datos a un procedimiento de subproceso, pero la técnica no tiene seguridad de tipos porque puede pasar cualquier objeto a esta sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="476fe-813">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="476fe-814">Es una manera más segura para pasar datos a un procedimiento de subproceso poner el procedimiento de subproceso y los campos de datos en un objeto de trabajo.</span><span class="sxs-lookup"><span data-stu-id="476fe-814">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="476fe-815">Para obtener más información, consulte [crear subprocesos y pasar datos en tiempo de inicio](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="476fe-815">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-816">En el ejemplo siguiente se crea un <xref:System.Threading.ParameterizedThreadStart> delegado con un método estático y un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="476fe-816">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-817">Ya se inició el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-817">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="476fe-818">No hay memoria suficiente iniciar este subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-818">There is not enough memory available to start this thread.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="476fe-819">Este subproceso se creó mediante un delegado <see cref="T:System.Threading.ThreadStart" /> en lugar de un delegado <see cref="T:System.Threading.ParameterizedThreadStart" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-819">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-820">Suspende el subproceso o, si este ya se ha suspendido, no tiene efecto alguno.</span><span class="sxs-lookup"><span data-stu-id="476fe-820">Either suspends the thread, or if the thread is already suspended, has no effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-821">Si el subproceso se ha suspendido, este método no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="476fe-821">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="476fe-822">No utilice la <xref:System.Threading.Thread.Suspend%2A> y <xref:System.Threading.Thread.Resume%2A> métodos para sincronizar las actividades de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-822">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="476fe-823">No tener ninguna manera de saber qué código un subproceso se ejecuta cuando se lo suspenderá.</span><span class="sxs-lookup"><span data-stu-id="476fe-823">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="476fe-824">Si se suspende un subproceso mientras contiene los bloqueos durante una evaluación de permisos de seguridad, otros subprocesos en la <xref:System.AppDomain> podría bloquearse.</span><span class="sxs-lookup"><span data-stu-id="476fe-824">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="476fe-825">Si se suspende un subproceso mientras se ejecuta un constructor de clase, otros subprocesos en la <xref:System.AppDomain> que intentan usar que clase están bloqueadas.</span><span class="sxs-lookup"><span data-stu-id="476fe-825">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="476fe-826">Pueden producirse interbloqueos muy fácilmente.</span><span class="sxs-lookup"><span data-stu-id="476fe-826">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="476fe-827">Solo .NET Core: este miembro no se admite.</span><span class="sxs-lookup"><span data-stu-id="476fe-827">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-828">No se ha iniciado el subproceso o está inactivo</span><span class="sxs-lookup"><span data-stu-id="476fe-828">The thread has not been started or is dead.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="476fe-829">El llamador no tiene el permiso <see cref="T:System.Security.Permissions.SecurityPermission" /> apropiado.</span><span class="sxs-lookup"><span data-stu-id="476fe-829">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="476fe-830">para operaciones avanzadas en subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-830">for advanced operations on threads.</span></span> <span data-ttu-id="476fe-831">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-831">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="476fe-832">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="476fe-832">Reserved for future use.</span></span> <span data-ttu-id="476fe-833">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="476fe-833">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="476fe-834">Matriz que se pasa con los nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="476fe-834">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="476fe-835">Número de nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="476fe-835">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="476fe-836">Contexto de configuración regional en el que se van a interpretar los nombres.</span><span class="sxs-lookup"><span data-stu-id="476fe-836">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="476fe-837">Matriz asignada por el llamador que recibe los identificadores que corresponden a los nombres.</span><span class="sxs-lookup"><span data-stu-id="476fe-837">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="476fe-838">Asigna un conjunto de nombres a un conjunto correspondiente de identificadores de envío.</span><span class="sxs-lookup"><span data-stu-id="476fe-838">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-839">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-839">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="476fe-840">Para obtener más información sobre `IDispatch::GetIDsOfNames`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="476fe-840">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="476fe-841">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="476fe-841">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="476fe-842">Información de tipos que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="476fe-842">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="476fe-843">Identificador de la configuración regional de la información de tipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-843">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="476fe-844">Recibe un puntero al objeto de información de tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="476fe-844">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="476fe-845">Recupera la información de tipo de un objeto, que se puede usar después para obtener la información de tipo de una interfaz.</span><span class="sxs-lookup"><span data-stu-id="476fe-845">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-846">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-846">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="476fe-847">Para obtener más información sobre `IDispatch::GetTypeInfo`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="476fe-847">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="476fe-848">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="476fe-848">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="476fe-849">Señala a una ubicación que recibe el número de interfaces de información de tipo proporcionado por el objeto.</span><span class="sxs-lookup"><span data-stu-id="476fe-849">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="476fe-850">Recupera el número de interfaces de información de tipo que proporciona un objeto (0 ó 1).</span><span class="sxs-lookup"><span data-stu-id="476fe-850">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-851">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-851">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="476fe-852">Para obtener más información sobre `IDispatch::GetTypeInfoCount`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="476fe-852">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="476fe-853">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="476fe-853">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="476fe-854">Identifica el miembro.</span><span class="sxs-lookup"><span data-stu-id="476fe-854">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="476fe-855">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="476fe-855">Reserved for future use.</span></span> <span data-ttu-id="476fe-856">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="476fe-856">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="476fe-857">Contexto de la configuración regional en que se interpretan los argumentos.</span><span class="sxs-lookup"><span data-stu-id="476fe-857">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="476fe-858">Marcas que describen el contexto de la llamada.</span><span class="sxs-lookup"><span data-stu-id="476fe-858">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="476fe-859">Puntero a una estructura que contiene una matriz de argumentos, una matriz de valores DISPID de argumento para argumentos con nombre y recuentos del número de elementos de cada matriz.</span><span class="sxs-lookup"><span data-stu-id="476fe-859">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="476fe-860">Puntero a la ubicación donde se va a almacenar el resultado.</span><span class="sxs-lookup"><span data-stu-id="476fe-860">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="476fe-861">Puntero a una estructura que contiene información de excepciones.</span><span class="sxs-lookup"><span data-stu-id="476fe-861">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="476fe-862">Índice del primer argumento que tiene un error.</span><span class="sxs-lookup"><span data-stu-id="476fe-862">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="476fe-863">Proporciona acceso a las propiedades y los métodos expuestos por un objeto.</span><span class="sxs-lookup"><span data-stu-id="476fe-863">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-864">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="476fe-864">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="476fe-865">Para obtener más información sobre `IDispatch::Invoke`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="476fe-865">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="476fe-866">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="476fe-866">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="476fe-867">Obtiene un valor que contiene los estados del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-867">Gets a value containing the states of the current thread.</span></span></summary>
        <value><span data-ttu-id="476fe-868">Uno de los valores de <see cref="T:System.Threading.ThreadState" /> que indica el estado del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-868">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span></span> <span data-ttu-id="476fe-869">El valor inicial es <see langword="Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-869">The initial value is <see langword="Unstarted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-870">El <xref:System.Threading.Thread.ThreadState%2A> propiedad proporciona información más específica que la <xref:System.Threading.Thread.IsAlive%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-870">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="476fe-871">Estado de los subprocesos solo es de interés en escenarios de depuración.</span><span class="sxs-lookup"><span data-stu-id="476fe-871">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="476fe-872">El código nunca debe usar el estado de los subprocesos para sincronizar las actividades de los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="476fe-872">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-873">En el ejemplo de código siguiente se muestra cómo tener acceso el `ThreadState` de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-873">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="476fe-874">Nuevo estado del apartamento.</span><span class="sxs-lookup"><span data-stu-id="476fe-874">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="476fe-875">Establece el estado del apartamento de un subproceso antes de iniciarse.</span><span class="sxs-lookup"><span data-stu-id="476fe-875">Sets the apartment state of a thread before it is started.</span></span></summary>
        <returns>
          <span data-ttu-id="476fe-876"><see langword="true" /> si se ha establecido el estado del apartamento; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-876"><see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-877">Los subprocesos nuevos se inicializan como <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si no se ha establecido su estado de apartamento antes de que se inicien.</span><span class="sxs-lookup"><span data-stu-id="476fe-877">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="476fe-878">Estado del apartamento se debe establecer antes de que se inicia un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-878">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-879">El subproceso de aplicación principal se inicializa en <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="476fe-879">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="476fe-880">La única manera de establecer el estado de apartamento del subproceso de aplicación principal en <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> es aplicar el <xref:System.STAThreadAttribute> atributo al método de punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="476fe-880">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="476fe-881">El <xref:System.Threading.Thread.TrySetApartmentState%2A> método, junto con el <xref:System.Threading.Thread.GetApartmentState%2A> método y <xref:System.Threading.Thread.SetApartmentState%2A> reemplaza el método, el <xref:System.Threading.Thread.ApartmentState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="476fe-881">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="476fe-882">En el ejemplo de código siguiente se muestra la <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, y <xref:System.Threading.Thread.TrySetApartmentState%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="476fe-882">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="476fe-883">El ejemplo de código crea un subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-883">The code example creates a thread.</span></span> <span data-ttu-id="476fe-884">Antes de inicia el subproceso, <xref:System.Threading.Thread.GetApartmentState%2A> muestra inicial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> estado y <xref:System.Threading.Thread.SetApartmentState%2A> cambia el estado a <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="476fe-884">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="476fe-885">El <xref:System.Threading.Thread.TrySetApartmentState%2A> , a continuación, devuelve el método `false` al intentar cambiar el estado a <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> porque el estado de apartamento ya está establecido.</span><span class="sxs-lookup"><span data-stu-id="476fe-885">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="476fe-886">Si hubiera intentado la misma operación <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> habría iniciado.</span><span class="sxs-lookup"><span data-stu-id="476fe-886">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="476fe-887">Una vez iniciado el subproceso, la <xref:System.Threading.Thread.TrySetApartmentState%2A> método se vuelve a usar.</span><span class="sxs-lookup"><span data-stu-id="476fe-887">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="476fe-888">Esta vez produce <xref:System.Threading.ThreadStateException> porque ya se haya iniciado el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-888">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="476fe-889"><paramref name="state" /> no es un estado de tipo apartamento válido.</span><span class="sxs-lookup"><span data-stu-id="476fe-889"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="476fe-890">Ya se inició el subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-890">The thread has already been started.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-891">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-891">Reads the value of a field.</span></span> <span data-ttu-id="476fe-892">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-892">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-893">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-893">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-894">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-894">Reads the value of a field.</span></span> <span data-ttu-id="476fe-895">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-895">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-896">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-896">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-897"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-897"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-898">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-898">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-899">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-899">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-900">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-900">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-901">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-901">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-902">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-902">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-903">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-903">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-904">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-904">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-905">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-905">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-906">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-906">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-907">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-907">Reads the value of a field.</span></span> <span data-ttu-id="476fe-908">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-908">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-909">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-909">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-910"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-910"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-911">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-911">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-912">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-912">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-913">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-913">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-914">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-914">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-915">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-915">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-916">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-916">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-917">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-917">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-918">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-918">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-919">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-919">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-920">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-920">Reads the value of a field.</span></span> <span data-ttu-id="476fe-921">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-921">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-922">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-922">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-923"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-923"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-924">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-924">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-925">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-925">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-926">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-926">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-927">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-927">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-928">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-928">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-929">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-929">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-930">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-930">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-931">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-931">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-932">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-932">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-933">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-933">Reads the value of a field.</span></span> <span data-ttu-id="476fe-934">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-934">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-935">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-935">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-936"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-936"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-937">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-937">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-938">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-938">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-939">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-939">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-940">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-940">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-941">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-941">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-942">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-942">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-943">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-943">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-944">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-944">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-945">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-945">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-946">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-946">Reads the value of a field.</span></span> <span data-ttu-id="476fe-947">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-947">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-948">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-948">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-949"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-949"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-950">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-950">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-951">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-951">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-952">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-952">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-953">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-953">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-954">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-954">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-955">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-955">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-956">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-956">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-957">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-957">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-958">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-958">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-959">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-959">Reads the value of a field.</span></span> <span data-ttu-id="476fe-960">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-960">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-961">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-961">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-962"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-962"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-963">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-963">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-964">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-964">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-965">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-965">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-966">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-966">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-967">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-967">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-968">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-968">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-969">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-969">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-970">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-970">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-971">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-971">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-972">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-972">Reads the value of a field.</span></span> <span data-ttu-id="476fe-973">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-973">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-974">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-974">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-975"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-975"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-976">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-976">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-977">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-977">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-978">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-978">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-979">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-979">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-980">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-980">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-981">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-981">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-982">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-982">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-983">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-983">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-984">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-984">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-985">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-985">Reads the value of a field.</span></span> <span data-ttu-id="476fe-986">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-986">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-987">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-987">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-988"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-988"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-989">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-989">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-990">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-990">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-991">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-991">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-992">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-992">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-993">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-993">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-994">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-994">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-995">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-995">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-996">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-996">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-997">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-997">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-998">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-998">Reads the value of a field.</span></span> <span data-ttu-id="476fe-999">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-999">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-1000">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1000">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1001"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1001"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1002">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1002">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1003">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1003">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-1004">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1004">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1005">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1005">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1006">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1006">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1007">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1007">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1008">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1008">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1009">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1009">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1010">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-1010">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-1011">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1011">Reads the value of a field.</span></span> <span data-ttu-id="476fe-1012">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1012">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-1013">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1013">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1014"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1014"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1015">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1015">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1016">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1016">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-1017">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1017">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1018">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1018">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1019">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1019">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1020">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1020">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1021">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1021">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1022">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1022">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1023">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-1023">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-1024">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1024">Reads the value of a field.</span></span> <span data-ttu-id="476fe-1025">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1025">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-1026">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1026">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1027"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1027"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1028">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1028">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1029">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1029">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-1030">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1030">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1031">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1031">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1032">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1032">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1033">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1033">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1034">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1034">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1035">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1035">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1036">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-1036">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-1037">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1037">Reads the value of a field.</span></span> <span data-ttu-id="476fe-1038">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1038">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-1039">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1039">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1040"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1040"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1041">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1041">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1042">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1042">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-1043">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1043">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1044">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1044">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1045">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1045">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1046">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1046">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1047">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1047">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1048">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1048">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1049">Campo que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="476fe-1049">The field to be read.</span></span></param>
        <summary><span data-ttu-id="476fe-1050">Lee el valor de un campo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1050">Reads the value of a field.</span></span> <span data-ttu-id="476fe-1051">El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1051">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="476fe-1052">Último valor que ha escrito en el campo un procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1052">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1053"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1053"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1054">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1054">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1055">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileRead%2A> Obtiene el último valor escrito en una ubicación de memoria cualquier procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1055">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="476fe-1056">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1056">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1057">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1057">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1058">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1058">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1059">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1059">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1060">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1060">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1061">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1061">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="476fe-1062">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1062">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1063">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1063">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1064">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1064">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1065">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1065">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1066"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1066"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1067">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1067">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1068">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1068">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1069">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1069">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1070">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1070">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1071">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1071">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1072">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1072">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1073">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1073">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1074">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1074">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1075">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1075">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1076">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1076">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1077">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1077">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1078"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1078"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1079">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1079">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1080">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1080">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1081">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1081">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1082">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1082">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1083">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1083">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1084">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1084">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1085">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1085">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1086">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1086">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1087">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1087">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1088">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1088">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1089">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1089">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1090"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1090"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1091">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1091">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1092">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1092">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1093">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1093">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1094">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1094">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1095">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1095">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1096">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1096">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1097">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1097">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1098">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1098">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1099">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1099">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1100">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1100">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1101">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1101">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1102"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1102"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1103">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1103">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1104">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1104">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1105">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1105">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1106">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1106">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1107">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1107">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1108">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1108">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1109">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1109">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1110">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1110">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1111">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1111">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1112">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1112">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1113">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1113">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1114"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1114"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1115">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1115">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1116">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1116">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1117">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1117">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1118">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1118">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1119">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1119">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1120">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1120">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1121">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1121">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1122">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1122">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1123">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1123">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1124">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1124">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1125">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1125">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1126"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1126"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1127">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1127">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1128">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1128">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1129">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1129">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1130">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1130">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1131">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1131">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1132">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1132">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1133">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1133">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1134">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1134">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1135">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1135">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1136">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1136">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1137">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1137">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1138"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1138"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1139">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1139">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1140">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1140">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1141">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1141">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1142">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1142">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1143">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1143">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1144">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1144">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1145">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1145">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1146">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1146">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1147">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1147">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1148">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1148">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1149">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1149">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1150"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1150"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1151">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1151">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1152">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1152">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1153">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1153">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1154">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1154">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1155">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1155">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1156">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1156">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1157">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1157">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1158">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1158">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1159">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1159">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1160">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1160">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1161">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1161">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1162"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1162"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1163">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1163">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1164">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1164">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1165">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1165">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1166">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1166">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1167">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1167">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1168">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1168">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1169">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1169">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1170">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1170">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1171">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1171">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1172">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1172">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1173">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1173">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1174"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1174"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1175">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1175">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1176">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1176">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1177">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1177">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1178">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1178">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1179">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1179">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1180">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1180">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1181">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1181">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1182">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1182">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1183">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1183">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1184">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1184">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1185">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1185">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1186"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1186"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1187">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1187">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1188">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1188">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1189">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1189">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1190">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1190">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1191">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1191">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1192">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1192">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1193">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1193">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1194">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1194">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1195">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1195">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1196">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1196">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1197">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1197">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1198"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1198"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1199">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1199">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1200">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1200">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1201">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1201">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1202">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1202">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1203">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1203">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1204">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1204">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1205">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1205">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1206">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1206">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="476fe-1207">Campo en el que se escribirá el valor.</span><span class="sxs-lookup"><span data-stu-id="476fe-1207">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="476fe-1208">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="476fe-1208">The value to be written.</span></span></param>
        <summary><span data-ttu-id="476fe-1209">Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</span><span class="sxs-lookup"><span data-stu-id="476fe-1209">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1210"><xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> son para casos especiales de sincronización.</span><span class="sxs-lookup"><span data-stu-id="476fe-1210"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="476fe-1211">En circunstancias normales, C# `lock` instrucción, Visual Basic `SyncLock` (instrucción) y la <xref:System.Threading.Monitor> clase proporcionan alternativas más sencillas.</span><span class="sxs-lookup"><span data-stu-id="476fe-1211">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="476fe-1212">En un sistema multiprocesador, <xref:System.Threading.Thread.VolatileWrite%2A> garantiza que un valor escrito en una ubicación de memoria resulta inmediatamente visible para todos los procesadores.</span><span class="sxs-lookup"><span data-stu-id="476fe-1212">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="476fe-1213">Esto podría requerir vaciar las cachés de procesador.</span><span class="sxs-lookup"><span data-stu-id="476fe-1213">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="476fe-1214">Incluso en un sistema monoprocesador, <xref:System.Threading.Thread.VolatileRead%2A> y <xref:System.Threading.Thread.VolatileWrite%2A> Asegúrese de que un valor se leen o escriben en la memoria y no almacena en caché (por ejemplo, en un registro del procesador).</span><span class="sxs-lookup"><span data-stu-id="476fe-1214">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="476fe-1215">Por consiguiente, se puede usar para sincronizar el acceso a un campo que se pueden actualizar mediante otro subproceso o el hardware.</span><span class="sxs-lookup"><span data-stu-id="476fe-1215">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="476fe-1216">Llamar a este método sólo afecta a una sola memoria access.</span><span class="sxs-lookup"><span data-stu-id="476fe-1216">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="476fe-1217">Para proporcionar una sincronización efectiva para un campo, debe usar todo el acceso al campo <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1217">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="476fe-1218">En C#, utilizando la `volatile` modificador en un campo garantiza que todo el acceso a ese campo utilice <xref:System.Threading.Thread.VolatileRead%2A> o <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="476fe-1218">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="476fe-1219">Hace que el subproceso que realiza la llamada ceda la ejecución a otro subproceso que está listo para ejecutarse en el procesador actual.</span><span class="sxs-lookup"><span data-stu-id="476fe-1219">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span></span> <span data-ttu-id="476fe-1220">El sistema operativo selecciona el subproceso al que se va a ceder la ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-1220">The operating system selects the thread to yield to.</span></span></summary>
        <returns>
          <span data-ttu-id="476fe-1221">Es <see langword="true" /> si el sistema operativo cambió la ejecución a otro subproceso; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="476fe-1221"><see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="476fe-1222">Si este método se realiza correctamente, se produjo el resto del intervalo de tiempo actual del subproceso.</span><span class="sxs-lookup"><span data-stu-id="476fe-1222">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="476fe-1223">El sistema operativo programa el subproceso que realiza la llamada para otro intervalo de tiempo, según su prioridad y el estado de otros subprocesos que están disponibles para su ejecución.</span><span class="sxs-lookup"><span data-stu-id="476fe-1223">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="476fe-1224">Generando se limita al procesador que se está ejecutando el subproceso que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="476fe-1224">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="476fe-1225">El sistema operativo no se cambiará la ejecución a otro procesador, incluso si ese procesador está inactivo o está ejecutando un subproceso de prioridad más baja.</span><span class="sxs-lookup"><span data-stu-id="476fe-1225">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="476fe-1226">Si no hay ningún otro subproceso que está listo para ejecutarse en el procesador actual, el sistema operativo no ceda la ejecución y este método devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="476fe-1226">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="476fe-1227">Este método es equivalente a usar invocación de plataforma para llamar a Win32 nativo `SwitchToThread` función.</span><span class="sxs-lookup"><span data-stu-id="476fe-1227">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="476fe-1228">Debe llamar a la <xref:System.Threading.Thread.Yield%2A> invocar el método en lugar de con la plataforma, porque la invocación de plataforma omite cualquier comportamiento del subprocesamiento personalizado el host ha solicitado.</span><span class="sxs-lookup"><span data-stu-id="476fe-1228">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>