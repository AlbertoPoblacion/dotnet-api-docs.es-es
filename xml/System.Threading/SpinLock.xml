<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SpinLock.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52e23183129f62f63c4589bc805d4ebc7b8b87041.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e23183129f62f63c4589bc805d4ebc7b8b87041</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</source>
          <target state="translated">Proporciona una primitiva de bloqueo de exclusión mutua donde un subproceso que intenta adquirir el bloqueo espera en un bucle y realiza comprobaciones repetidamente hasta que haya un bloqueo disponible.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For an example of how to use a Spin Lock, see <bpt id="p1">[</bpt>How to: Use SpinLock for Low-Level Synchronization<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</source>
          <target state="translated">Para obtener un ejemplo de cómo usar un bloqueo por subproceso, vea <bpt id="p1">[</bpt>Cómo: utilizar SpinLock para la sincronización de bajo nivel<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spin locks can be used for leaf-level locks where the object allocation implied by using a <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, in size or due to garbage collection pressure, is overly expensive.</source>
          <target state="translated">Bloqueos por subproceso pueden usarse para los bloqueos de nivel de hoja que implica la asignación de objetos mediante el uso de un <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, tamaño o debido a la presión de la colección de elementos no utilizados, es demasiado caro.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</source>
          <target state="translated">Un bloqueo por subproceso puede ser útil para evitar el bloqueo; Sin embargo, si espera una cantidad significativa de bloqueos, probablemente no debería utilizar bloqueos por subproceso debido al giro excesivo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</source>
          <target state="translated">Giro puede ser beneficioso cuando los bloqueos son específicos y numerosos (por ejemplo, un bloqueo por nodo en una lista vinculada) y también cuando tiempos de espera de bloqueo están siempre muy cortos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>In general, while holding a spin lock, one should avoid any of these actions:</source>
          <target state="translated">En general, mientras se mantiene un bloqueo por subproceso, se debería evitar cualquiera de estas acciones:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>blocking,</source>
          <target state="translated">bloqueo,</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>calling anything that itself may block,</source>
          <target state="translated">llamar a algo que sí puede bloquear,</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>holding more than one spin lock at once,</source>
          <target state="translated">que contiene más de un bloqueo por subproceso a la vez,</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making dynamically dispatched calls (interface and virtuals),</source>
          <target state="translated">realizando llamadas (interfaz y virtuales), enviadas dinámicamente</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making statically dispatched calls into any code one doesn't own, or</source>
          <target state="translated">realizando llamadas a cualquier código que no tiene uno, enviadas estáticamente o</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>allocating memory.</source>
          <target state="translated">asignación de memoria.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> should only be used after you have been determined that doing so will improve an application's performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> solo debe usarse una vez que se ha determinado que al hacerlo mejorará el rendimiento de la aplicación.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>It is also important to note that <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a value type, for performance reasons.</source>
          <target state="translated">También es importante tener en cuenta que <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> es un tipo de valor, por motivos de rendimiento.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For this reason, you must be very careful not to accidentally copy a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</source>
          <target state="translated">Por este motivo, debe ser cuidado de no copiar accidentalmente un <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> de instancia, como las dos instancias (la original y la copia), a continuación, sería completamente independientes entre sí, esto probablemente conduciría a un comportamiento erróneo de la aplicación.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>If a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance must be passed around, it should be passed by reference rather than by value.</source>
          <target state="translated">Si una <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> alrededor, se debe pasar la instancia, se debe pasar por referencia en lugar de por valor.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Do not store <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instances in readonly fields.</source>
          <target state="translated">No almacene <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instancias en campos de solo lectura.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar un <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">Todos los miembros de <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> son seguras para subprocesos y se pueden usar desde varios subprocesos simultáneamente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Whether to capture and use thread IDs for debugging purposes.</source>
          <target state="translated">Indica si se han de capturar y utilizar identificadores de subprocesos con fines de depuración.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> structure with the option to track thread IDs to improve debugging.</source>
          <target state="translated">Inicializa una nueva instancia de la estructura <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> con la opción de realizar el seguimiento de los identificadores de subprocesos para mejorar la depuración.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The default constructor for <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> tracks thread ownership.</source>
          <target state="translated">El constructor predeterminado para <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> pistas de propiedad de subprocesos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The following example demonstrates how a SpinLock may be used.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo se puede utilizar un bloqueo por bucle.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">Es true si se adquiere el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> se debe inicializar en false antes de llamar a este método.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Adquiere el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> de manera confiable para determinar si se adquirió el bloqueo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> es un bloqueo no reentrante, lo que significa que si un subproceso tiene el bloqueo, no se permite volver a entrar en el bloqueo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If thread ownership tracking is enabled (whether it's enabled is available through <ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</source>
          <target state="translated">Si está habilitada el seguimiento de la propiedad de subproceso (si está habilitado está disponible a través de <ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>), se producirá una excepción cuando un subproceso intenta volver a entrar en un bloqueo ya tenía.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</source>
          <target state="translated">Sin embargo, si se deshabilita el seguimiento de la propiedad de subproceso, intenta entrar en un bloqueo ya mantenido se producirá un interbloqueo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> sin haber llamado primero <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> el estado interno de la <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> pueden resultar dañados.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling Enter.</source>
          <target state="translated">El argumento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> se debe inicializar en false antes de llamar a Enter.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Releases the lock.</source>
          <target state="translated">Libera el bloqueo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Releases the lock.</source>
          <target state="translated">Libera el bloqueo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>The default overload of <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> provides the same behavior as if calling <ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> using true as the argument.</source>
          <target state="translated">La sobrecarga predeterminada del <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> proporciona el mismo comportamiento que si se llamara <ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> utilizando true como el argumento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> sin haber llamado primero <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> el estado interno de la <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> pueden resultar dañados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual no es el propietario de este bloqueo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</source>
          <target state="translated">Valor booleano que indica si una barrera de memoria debe emitirse para publicar inmediatamente la operación de salida a otros subprocesos.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Releases the lock.</source>
          <target state="translated">Libera el bloqueo.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> with the <ph id="ph2">`useMemoryBarrier`</ph> argument set to true will improve the fairness of the lock at the expense of some performance.</source>
          <target state="translated">Al llamar a <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> con el <ph id="ph2">`useMemoryBarrier`</ph> argumento establecido en true mejorará la limpieza del bloqueo a costa del rendimiento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>The default <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> overload behaves as if specifying true for <ph id="ph2">`useMemoryBarrier`</ph>.</source>
          <target state="translated">El valor predeterminado <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> sobrecarga se comporta como si especifica true para <ph id="ph2">`useMemoryBarrier`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> sin haber llamado primero <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> el estado interno de la <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> pueden resultar dañados.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual no es el propietario de este bloqueo.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeld">
          <source>Gets whether the lock is currently held by any thread.</source>
          <target state="translated">Obtiene un valor que indica si un subproceso mantiene actualmente el bloqueo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeld">
          <source>true if the lock is currently held by any thread; otherwise false.</source>
          <target state="translated">Es true si cualquier subproceso mantiene actualmente el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Gets whether the lock is held by the current thread.</source>
          <target state="translated">Obtiene un valor que indica si el subproceso actual mantiene actualmente el bloqueo.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>true if the lock is held by the current thread; otherwise false.</source>
          <target state="translated">Es true si el subproceso actual mantiene el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</source>
          <target state="translated">Si el bloqueo se inicializó para realizar un seguimiento de los subprocesos del propietario, esto devolverá si se adquiere el bloqueo por el subproceso actual.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>It is invalid to use this property when the lock was initialized to not track thread ownership.</source>
          <target state="translated">No es válido utilizar esta propiedad cuando el bloqueo se inicializó para no realizar el seguimiento de propiedad de subprocesos.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Thread ownership tracking is disabled.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está deshabilitado.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>Gets whether thread ownership tracking is enabled for this instance.</source>
          <target state="translated">Obtiene un valor que indica si el seguimiento de propiedad de subprocesos está habilitado para esta instancia.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>true if thread ownership tracking is enabled for this instance; otherwise false.</source>
          <target state="translated">Es true si se ha habilitado el seguimiento de propiedad de subprocesos para esta instancia; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> de manera confiable para determinar si se adquirió el bloqueo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">Es true si se adquiere el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> se debe inicializar en false antes de llamar a este método.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> de manera confiable para determinar si se adquirió el bloqueo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block waiting for the lock to be available.</source>
          <target state="translated">A diferencia de <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter no bloqueará en espera para adquirir el bloqueo esté disponible.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</source>
          <target state="translated">Si el bloqueo no está disponible cuando se llama a TryEnter, se devolverá inmediatamente sin más giro.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">El argumento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> se debe inicializar en false antes de llamar a TryEnter.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Número de milisegundos de espera o <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) para esperar indefinidamente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">Es true si se adquiere el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> se debe inicializar en false antes de llamar a este método.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> de manera confiable para determinar si se adquirió el bloqueo.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">A diferencia de <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter no bloqueará indefinidamente esperando para que adquirir el bloqueo esté disponible.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`millisecondsTimeout`</ph> has expired.</source>
          <target state="translated">Bloqueará hasta que el bloqueo esté disponible o hasta que el <ph id="ph1">`millisecondsTimeout`</ph> ha expirado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">El argumento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> se debe inicializar en false antes de llamar a TryEnter.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa el número de milisegundos de espera o estructura <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milisegundos para esperar indefinidamente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">Es true si se adquiere el bloqueo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> se debe inicializar en false antes de llamar a este método.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> de manera confiable para determinar si se adquirió el bloqueo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">A diferencia de <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter no bloqueará indefinidamente esperando para que adquirir el bloqueo esté disponible.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`timeout`</ph> has expired.</source>
          <target state="translated">Bloqueará hasta que el bloqueo esté disponible o hasta que el <ph id="ph1">`timeout`</ph> ha expirado.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es un número negativo distinto de -1 milisegundo, que representa un tiempo de espera infinito, o el tiempo de espera es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milisegundos.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">El argumento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> se debe inicializar en false antes de llamar a TryEnter.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>