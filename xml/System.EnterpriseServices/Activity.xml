<Type Name="Activity" FullName="System.EnterpriseServices.Activity">
  <TypeSignature Language="C#" Value="public sealed class Activity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Activity extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Activity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Activity" />
  <TypeSignature Language="C++ CLI" Value="public ref class Activity sealed" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="527ef-101">Crea una actividad para realizar trabajo por lotes sincrónico y asincrónico que pueda utilizar los servicios COM+ sin necesidad de crear un componente COM+.</span><span class="sxs-lookup"><span data-stu-id="527ef-101">Creates an activity to do synchronous or asynchronous batch work that can use COM+ services without needing to create a COM+ component.</span></span> <span data-ttu-id="527ef-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="527ef-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="527ef-103">El contexto asociado con la actividad está totalmente determinado por un <xref:System.EnterpriseServices.ServiceConfig> objeto.</span><span class="sxs-lookup"><span data-stu-id="527ef-103">The context associated with the activity is completely determined by a <xref:System.EnterpriseServices.ServiceConfig> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="527ef-104">En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.EnterpriseServices.Activity> clase y usar el servicio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="527ef-104">The following code example demonstrates how to use the <xref:System.EnterpriseServices.Activity> class and use the synchronization service.</span></span>  
  
 [!code-csharp[EnterpriseServices_Activity#0](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Activity/CS/EnterpriseServices_Activity.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity (System.EnterpriseServices.ServiceConfig cfg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.EnterpriseServices.ServiceConfig cfg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Activity.#ctor(System.EnterpriseServices.ServiceConfig)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cfg As ServiceConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Activity(System::EnterpriseServices::ServiceConfig ^ cfg);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cfg" Type="System.EnterpriseServices.ServiceConfig" />
      </Parameters>
      <Docs>
        <param name="cfg"><span data-ttu-id="527ef-105"><see cref="T:System.EnterpriseServices.ServiceConfig" /> que contiene la información de configuración de los servicios que se van a utilizar.</span><span class="sxs-lookup"><span data-stu-id="527ef-105">A <see cref="T:System.EnterpriseServices.ServiceConfig" /> that contains the configuration information for the services to be used.</span></span></param>
        <summary><span data-ttu-id="527ef-106">Inicializa una nueva instancia de la clase <see cref="T:System.EnterpriseServices.Activity" />.</span><span class="sxs-lookup"><span data-stu-id="527ef-106">Initializes a new instance of the <see cref="T:System.EnterpriseServices.Activity" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="527ef-107">Crea un <xref:System.EnterpriseServices.Activity> que se usa para enviar el trabajo por lotes a los servicios COM +.</span><span class="sxs-lookup"><span data-stu-id="527ef-107">Creates an <xref:System.EnterpriseServices.Activity> that is used to submit batch work to COM+ services.</span></span> <span data-ttu-id="527ef-108">El contexto asociado con la actividad está totalmente determinado por la <xref:System.EnterpriseServices.ServiceConfig> objeto que se pasa a través de la `cfg` parámetro.</span><span class="sxs-lookup"><span data-stu-id="527ef-108">The context associated with the activity is completely determined by the <xref:System.EnterpriseServices.ServiceConfig> object that is passed through the `cfg` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="527ef-109">En el siguiente ejemplo de código se muestra cómo inicializar una nueva instancia de la clase <xref:System.EnterpriseServices.Activity>.</span><span class="sxs-lookup"><span data-stu-id="527ef-109">The following code example demonstrates how to initialize a new instance of the <xref:System.EnterpriseServices.Activity> class.</span></span>  
  
 [!code-csharp[EnterpriseServices_Activity#1](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Activity/CS/EnterpriseServices_Activity.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="527ef-110">El objeto <see cref="T:System.EnterpriseServices.Activity" /> no es compatible con la plataforma actual.</span><span class="sxs-lookup"><span data-stu-id="527ef-110"><see cref="T:System.EnterpriseServices.Activity" /> is not supported on the current platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousCall">
      <MemberSignature Language="C#" Value="public void AsynchronousCall (System.EnterpriseServices.IServiceCall serviceCall);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AsynchronousCall(class System.EnterpriseServices.IServiceCall serviceCall) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AsynchronousCall (serviceCall As IServiceCall)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AsynchronousCall(System::EnterpriseServices::IServiceCall ^ serviceCall);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceCall" Type="System.EnterpriseServices.IServiceCall" />
      </Parameters>
      <Docs>
        <param name="serviceCall"><span data-ttu-id="527ef-111">Objeto <see cref="T:System.EnterpriseServices.IServiceCall" /> que se utiliza para implementar el trabajo por lotes.</span><span class="sxs-lookup"><span data-stu-id="527ef-111">A <see cref="T:System.EnterpriseServices.IServiceCall" /> object that is used to implement the batch work.</span></span></param>
        <summary><span data-ttu-id="527ef-112">Ejecuta de forma sincrónica el trabajo por lotes especificado y definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="527ef-112">Runs the specified user-defined batch work asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="527ef-113">En el ejemplo de código siguiente se muestra cómo utilizar este método.</span><span class="sxs-lookup"><span data-stu-id="527ef-113">The following code example demonstrates how to use this method.</span></span>  
  
 [!code-csharp[EnterpriseServices_Activity#2](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Activity/CS/EnterpriseServices_Activity.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToCurrentThread">
      <MemberSignature Language="C#" Value="public void BindToCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindToCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Activity.BindToCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindToCurrentThread ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindToCurrentThread();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="527ef-114">Enlaza el trabajo definido por el usuario al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="527ef-114">Binds the user-defined work to the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="527ef-115"><xref:System.EnterpriseServices.Activity.BindToCurrentThread%2A> enlaza el trabajo por lotes que se envía por la <xref:System.EnterpriseServices.Activity.SynchronousCall%2A> o <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A> métodos para el actual un contenedor uniproceso (STA).</span><span class="sxs-lookup"><span data-stu-id="527ef-115"><xref:System.EnterpriseServices.Activity.BindToCurrentThread%2A> binds the batch work that is submitted by the <xref:System.EnterpriseServices.Activity.SynchronousCall%2A> or <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A> methods to the current single-threaded apartment (STA).</span></span> <span data-ttu-id="527ef-116"><xref:System.EnterpriseServices.Activity.BindToCurrentThread%2A> no tiene ningún efecto si el subproceso actual se está ejecutando en el contenedor multiproceso (MTA).</span><span class="sxs-lookup"><span data-stu-id="527ef-116"><xref:System.EnterpriseServices.Activity.BindToCurrentThread%2A> has no effect if the current thread is being run in the multithreaded apartment (MTA).</span></span> <span data-ttu-id="527ef-117">El modelo de subproceso actual se determina mediante la configuración de la <xref:System.EnterpriseServices.ServiceConfig.ThreadPool%2A> propiedad de la <xref:System.EnterpriseServices.ServiceConfig> objeto.</span><span class="sxs-lookup"><span data-stu-id="527ef-117">The current thread model is determined by the configuration of the <xref:System.EnterpriseServices.ServiceConfig.ThreadPool%2A> property of the <xref:System.EnterpriseServices.ServiceConfig> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronousCall">
      <MemberSignature Language="C#" Value="public void SynchronousCall (System.EnterpriseServices.IServiceCall serviceCall);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SynchronousCall(class System.EnterpriseServices.IServiceCall serviceCall) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SynchronousCall (serviceCall As IServiceCall)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SynchronousCall(System::EnterpriseServices::IServiceCall ^ serviceCall);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceCall" Type="System.EnterpriseServices.IServiceCall" />
      </Parameters>
      <Docs>
        <param name="serviceCall"><span data-ttu-id="527ef-118">Objeto <see cref="T:System.EnterpriseServices.IServiceCall" /> que se utiliza para implementar el trabajo por lotes.</span><span class="sxs-lookup"><span data-stu-id="527ef-118">A <see cref="T:System.EnterpriseServices.IServiceCall" /> object that is used to implement the batch work.</span></span></param>
        <summary><span data-ttu-id="527ef-119">Ejecuta de forma asincrónica el trabajo por lotes especificado y definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="527ef-119">Runs the specified user-defined batch work synchronously.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnbindFromThread">
      <MemberSignature Language="C#" Value="public void UnbindFromThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnbindFromThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Activity.UnbindFromThread" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnbindFromThread ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnbindFromThread();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="527ef-120">Desenlaza el trabajo por lotes enviado mediante los métodos <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" /> o <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" /> desde el subproceso donde se está ejecutando el trabajo por lotes.</span><span class="sxs-lookup"><span data-stu-id="527ef-120">Unbinds the batch work that is submitted by the <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" /> or <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" /> methods from the thread on which the batch work is running.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="527ef-121"><xref:System.EnterpriseServices.Activity.UnbindFromThread%2A> Si el trabajo por lotes no estaba enlazado anteriormente a un subproceso no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="527ef-121"><xref:System.EnterpriseServices.Activity.UnbindFromThread%2A> has no effect if the batch work was not previously bound to a thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>