<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65909f2ec439d52a6e219ae1ac7909475679abd1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563530" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Admite métodos a los que se puede llamar cuando se inicia o cierra un componente COM.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el <xref:System.EnterpriseServices.IProcessInitializer> métodos de interfaz de componentes con servicio si desea ejecutar la inicialización o el código de cierre cuando un proceso de servidor (Dllhost.exe) se inicia o se cierra, respectivamente.  
  
 COM + proporciona `Startup` y `Shutdown` eventos cuando Dllhost.exe se inicia y finaliza. Esta característica permite a cualquier componente de COM + que se instala en una aplicación de servidor COM + (denominada componentes de servidor de ahora en adelante) para ejecutar la inicialización personalizada y limpiar el código. Una instancia de cada componente que implementa la <xref:System.EnterpriseServices.IProcessInitializer> interfaz se creará y almacenada para la duración del proceso y llama en los métodos de interfaz durante el inicio y cierre. Cuando se implementa en una <xref:System.EnterpriseServices.ServicedComponent>, durante el registro del componente, el `InitializesServerApplication` parámetro en el `COMAdminCatalogObject` dentro de los componentes de la colección está establecida en `true`.  
  
 Mediante el `Startup` y `Shutdown` eventos, puede inicializar recursos, crear conexiones, inicializar datos compartidos y ejecuta código de limpieza. Sin embargo, no debe tener acceso a los Estados que son específicos de COM + porque aún no se han creado instancias de componentes de servidor. Además, el código en el `Startup` y `Shutdown` eventos deben devolver lo más rápido posible, porque el sistema sólo espera 90 segundos para que Dllhost.exe se prepare para aceptar activaciones después de que el sistema inicia el proceso. Si Dllhost.exe no indica que está listo dentro de 90 segundos, el sistema termina el proceso; por lo tanto, todo el proceso de inicialización debe realizarse dentro de este período de tiempo. Cada componente de servidor que participa en la inicialización debe ser compatible con la <xref:System.EnterpriseServices.IProcessInitializer> interfaz. En el inicio de DllHost.exe, COM + crea la todos los componentes de servidor que solicitó este servicio, las llamadas `QueryInterface` para el <xref:System.EnterpriseServices.IProcessInitializer> interfaz y llama el <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> función. De forma similar, cuando se cierra el proceso DllHost.exe, llama el <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> función en las que almacenó previamente punteros de interfaz.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Realiza acciones de cierre. Se le llama cuando se cierra Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> no se llama durante failfast u otros eventos de apagado grave.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">En Microsoft Windows XP, un puntero a la interfaz <see langword="IUnknown" /> del componente COM que se inicia. En Microsoft Windows 2000, este argumento siempre es <see langword="null" />.</param>
        <summary>Realiza la inicialización cuando se inicia. Se le llama cuando se inicia Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El objeto al que hace referencia `punkProcessControl` implementa un <xref:System.EnterpriseServices.IProcessInitControl> interfaz. <xref:System.EnterpriseServices.IProcessInitControl> es compatible con el único método <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 El código de inicialización <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> puede llamar a la <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, con el tiempo de espera establecido igual que el número de segundos que quedan antes de iniciar el componente se agote.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>