<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="642ac9e3f2ad478ab2e2f243b5892ce7ec311488" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39983166" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Funciona en los Componentes en cola en el control anómalo de errores de reproducción del servidor y errores del mecanismo de entrega de Message Queuing del cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase de excepción definida para el componente en el catálogo COM + implementa tanto <xref:System.EnterpriseServices.IPlaybackControl> y la interfaz de la clase original. Las implementaciones de método de la interfaz de clase original se usan para realizar el control de excepciones para los métodos con error en la propia clase. Se llamará después <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> o <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> para procesar las excepciones del método llamado originalmente.  
  
 El Reproductor de componentes en cola llama a los métodos de <xref:System.EnterpriseServices.IPlaybackControl> para informar al objeto de controlador de excepciones que un mensaje que se va a colocar en la cola de mensajes no enviados. El Reproductor de componentes en cola, a continuación, llame al mismo método en el objeto de controlador de excepciones que generó el error en la llamada al método original. El objeto de controlador de excepciones puede implementar una alternativa, por ejemplo, recopilar información de diagnóstico o generar un objeto o un mensaje que informa al cliente del problema. Si la aplicación no implementa <xref:System.EnterpriseServices.IPlaybackControl>, el mensaje dudoso se coloca en la cola de mensajes no enviados cuando el Reproductor de componentes en cola agota todos los reintentos.  
  
 Un mensaje dudoso es un mensaje que no se puede procesar por algún motivo, quizás debido a un problema con el servidor o el sistema de cola. La transacción se revierte y deja el mensaje dudoso a la parte superior de la cola. Cuando el mensaje se quita de la cola de nuevo, se produce la misma condición. Este mensaje puede continuar indefinidamente hasta que algo se realiza para corregir el problema. El servicio de componentes en cola controla el mensaje dudoso mediante el uso de una serie de reintentos. Después de varios intentos incorrectos, el mensaje se mueve a una cola definitiva de almacenamiento. Los mensajes dudosos permanecen en la cola de almacenamiento hasta que se mueve manualmente mediante la herramienta Mover mensajes de componentes en cola.  
  
 La situación de mensajes dudosos también se puede resolver mediante programación, con el <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> método, que informa al autor del componente de servidor que han fallado todos los intentos de reproducir una activación aplazada.  
  
 Si detecta un mensaje dudoso, es posible que poder resolver rápidamente la causa subyacente del problema. Por ejemplo, si el servidor estaba desconectado por algún motivo, puede poner en conexión el servidor. Si no se puede resolver el problema rápidamente, puede generar automáticamente otra transacción que se notifique al solicitante que no se ha producido la transacción. El solicitante puede hacer que una transacción de compensación que invierte el efecto de una transacción que ya se ha confirmado.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa al componente controlador de excepciones del cliente de que todos los intentos de Message Queuing por entregar el mensaje al servidor se han rechazado y el mensaje ha terminado en la cola de mensajes no enviados Xact del cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A medida que llegan mensajes en la cola de mensajes no enviados Xact, COM + intenta invocar un controlador de excepciones de lado cliente relacionadas con la clase de servidor para enviar esta notificación. Para ello, la primera llamada <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, a continuación, llamar a la versión de control de excepciones del método con error en el objeto de controlador de excepciones. Este método de excepción, a continuación, puede tomar una acción de excepción, como registrar el error, enviar un mensaje de correo electrónico al administrador o llevar a cabo acción de compensación del lado cliente (invertir el efecto de una transacción anterior). Si el método de excepción no se realiza correctamente, el mensaje permanece en la cola de mensajes no enviados Xact.  
  
 La cola de mensajes no enviados Xact puede verse en el Explorador de Microsoft Message Queue (MSMQ).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa a la implementación de la clase de excepción del servidor de que todos los intentos de reproducir una activación aplazada en el servidor han sido erróneos y el mensaje se va a mover a su cola definitiva de almacenamiento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A medida que llegan mensajes en la cola de mensajes no enviados Xact, COM + intenta invocar un controlador de excepciones de lado servidor relacionadas con la clase de servidor para enviar esta notificación. Para ello, la primera llamada <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, a continuación, llamar a la versión del método en el objeto de controlador de excepción con error de control de excepciones. Este método de excepción, a continuación, puede tomar una acción de excepción, como registrar el error, enviar un mensaje de correo electrónico al administrador o llevar a cabo acción de compensación del lado cliente (invertir el efecto de una transacción anterior). El objeto de servidor debe esforzarse para completar correctamente esta transacción. En caso contrario, se requiere intervención manual para volver a procesar el mensaje. Si el método de excepción no se realiza correctamente, el mensaje se mueve a la cola definitiva de almacenamiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>