<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cd1ba8f834757bf52422205aa8cea5ecc90a9e0" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56782208" /></Metadata><TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Package = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa un contenedor que puede almacenar varios objetos de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> es una clase abstracta que se puede usar para organizar objetos en una sola entidad de un formato físico definido para la portabilidad y un acceso eficiente.  
  
 Un archivo ZIP es el formato físico principal para el <xref:System.IO.Packaging.Package>.  Otros <xref:System.IO.Packaging.Package> implementaciones podrían usar otros formatos físicos, como un documento XML, una base de datos o servicio Web.  
  
 Al igual que un sistema de archivos, los elementos incluidos en un <xref:System.IO.Packaging.Package> se hace referencia en una organización jerárquica de carpetas y archivos.  
  
 Aunque <xref:System.IO.Packaging.Package> es una clase abstracta, la <xref:System.IO.Packaging.ZipPackage> clase derivada sirve como valor predeterminado por el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Un <xref:System.IO.Packaging.PackagePart> ("elemento") es la clase abstracta que representa un objeto que se almacena en un <xref:System.IO.Packaging.Package>.  
  
 Un <xref:System.IO.Packaging.PackageRelationship> ("relación") define una asociación entre un origen de <xref:System.IO.Packaging.Package> o <xref:System.IO.Packaging.PackagePart> y un objeto de destino.  Un <xref:System.IO.Packaging.PackageRelationship> puede ser uno de los dos tipos, cada uno de los cuales puede tener uno de dos formas:  
  
-   Una relación de nivel de paquete (creado por el <xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType> método) se relaciona con un <xref:System.IO.Packaging.Package> como:  
  
    -   Un elemento de destino en el paquete.  
  
    -   Un recurso de destino fuera del paquete.  
  
-   Una relación de nivel de elemento (creado por el <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType> método) se relaciona con un origen de <xref:System.IO.Packaging.PackagePart> como:  
  
    -   Otro elemento de destino en el paquete.  
  
    -   Un recurso de destino fuera del paquete.  
  
 Origen de la relación <xref:System.IO.Packaging.Package> u origen <xref:System.IO.Packaging.PackagePart> se considera el "propietario" de la relación.  Cuando se elimina el objeto de origen, también se eliminan todas las relaciones que posee el objeto de origen.  El proceso de creación o eliminación de una relación no cambia físicamente los objetos de origen o destino de ninguna manera.  
  
 Un <xref:System.IO.Packaging.PackageDigitalSignature> ("firma digital") es una composición de elementos y relaciones que representan una firma digital que se incluye con un <xref:System.IO.Packaging.Package>.  La firma digital identifica al originador y valida que los elementos y relaciones contenidos en el <xref:System.IO.Packaging.Package> no se han modificado.  
  
 Los paquetes también admiten Digital Rights Management (DRM) que permite a los elementos de contenido en un <xref:System.IO.Packaging.Package> cifrarse con derechos de acceso específicos concedidos a los usuarios autorizados.  
  
 Según el <xref:System.IO.Packaging.Package> arquitectura, una <xref:System.Windows.Xps.Packaging.XpsDocument> es un tipo de paquete diseñado para almacenar documentos en función de la apertura [XML Paper Specification (XPS)](https://go.microsoft.com/fwlink/?LinkID=65761).  
  
 .NET Framework usa paquetes para almacenar contenido, recursos y las relaciones de las páginas y documentos mediante un archivo ZIP estándar de forma predeterminada. Como con cualquier archivo ZIP, la aplicación puede utilizar el <xref:System.IO.Packaging> clases para almacenar y, opcionalmente, proteger cualquier tipo o el número de archivos de datos en un único contenedor de acceso eficiente.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra los pasos básicos para crear un <xref:System.IO.Packaging.Package>.  En este ejemplo, se crea un paquete para que contenga un documento junto con una imagen gráfica que se muestra como parte del documento.  (Esto es similar al caso en el que tiene un archivo HTML una \<IMG > etiqueta a la que hace referencia a un archivo de imagen externo.)  Dos <xref:System.IO.Packaging.PackageRelationship> elementos también se incluyen en el paquete.  El primero, una relación de "nivel de paquete", define la parte del documento como elemento raíz del paquete.  Una relación en segundo lugar, el "nivel de elemento" define la asociación entre el elemento del documento (el "origen" de la relación de nivel de elemento) y su uso de la parte de la imagen (el "destino" de la relación de nivel de elemento).  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">Especificación Open Packaging Conventions (OPC)</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=74494">Estructura de firma digital de las convenciones de empaquetado abierto</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.Packaging.Package" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package openFileAccess" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">Permisos de E/S de archivo del paquete.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.Packaging.Package" /> con <see cref="T:System.IO.FileAccess" /> especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> es un constructor protegido de la <xref:System.IO.Packaging.Package> clase base abstracta. Cuando se llama en una clase derivada, el <xref:System.IO.Packaging.Package.%23ctor%2A> constructor inicializa una nueva instancia de la clase derivada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="openFileAccess" /> no es válido.</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess * bool -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package (openFileAccess, streaming)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
        <Parameter Name="streaming" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">Permisos de E/S de archivo del paquete.</param>
        <param name="streaming">Es <see langword="true" /> para abrir el paquete de transmisión por secuencias; de lo contrario, es <see langword="false" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.Packaging.Package" /> con una <see cref="T:System.IO.FileAccess" /> y una opción de transmisión por secuencias especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> es un constructor protegido de la <xref:System.IO.Packaging.Package> abstracta de la clase base. Cuando se llama en una clase derivada, el <xref:System.IO.Packaging.Package.%23ctor%2A> constructor inicializa una nueva instancia de la clase derivada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="openFileAccess" /> no es válido.</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="package.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda y cierra el paquete más todas las secuencias de los elementos subyacentes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para el <xref:System.IO.Packaging.Package> clase <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> realizar la misma operación: no hay ninguna razón para llamar a <xref:System.IO.Packaging.Package.Dispose%2A> si llama a <xref:System.IO.Packaging.Package.Close%2A>, o viceversa.  
  
 <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> llaman internamente a <xref:System.IO.Packaging.Package.Flush%2A>.  
  
> [!NOTE]
>  El `using` instrucción (diferente de la `using` directiva de espacio de nombres) es la manera recomendada para <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> un paquete.  [Escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055) y [leer un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160034) muestran cómo cerrar y eliminar un paquete mediante el uso de la `using` instrucción.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un nuevo elemento del paquete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> Inicializa un valor vacío <xref:System.IO.Stream> para el nuevo elemento.  El <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> método puede utilizarse para obtener una referencia a la instancia de la secuencia asociada con la parte.  
  
 Para obtener más información acerca de los elementos del paquete, vea la sección 1.1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.PackagePart> y, a continuación, almacenar datos en la parte.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> método para crear realmente la parte basada en el formato físico implementado en la clase derivada.</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del nuevo elemento.</param>
        <param name="contentType">Tipo de contenido del flujo de datos.</param>
        <summary>Crea un nuevo elemento sin comprimir con un URI y el tipo de contenido especificados.</summary>
        <returns>El nuevo elemento creado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> Inicializa un valor vacío <xref:System.IO.Stream> para el nuevo elemento.  El <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> método puede utilizarse para obtener una referencia a la instancia de la secuencia asociada con la parte.  
  
 La parte <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> es <xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>.  
  
 Para obtener más información acerca de los elementos del paquete, vea la sección 1.1 en la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.PackagePart> y, a continuación, almacenar datos en la parte.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> o <paramref name="contentType" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> no es un [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] válido de <see cref="T:System.IO.Packaging.PackagePart" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un elemento con el <paramref name="partUri" /> especificado ya está presente en el paquete.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura (no se puede agregar ningún elemento nuevo).</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> método para crear realmente la parte basada en el formato físico implementado en la clase derivada.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] del nuevo elemento.</param>
        <param name="contentType">Tipo de contenido del flujo de datos.</param>
        <param name="compressionOption">La opción de compresión del flujo de datos, compresión <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> o <see cref="F:System.IO.Packaging.CompressionOption.Normal" />.</param>
        <summary>Crea un nuevo elemento con un URI, tipo de contenido y opción de compresión especificados.</summary>
        <returns>El nuevo elemento creado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para el valor predeterminado <xref:System.IO.Packaging.ZipPackage> clase derivada, el <xref:System.IO.Packaging.Package.CreatePart%2A> método sólo es compatible con dos `compressionOption` valores, <xref:System.IO.Packaging.CompressionOption.NotCompressed> o <xref:System.IO.Packaging.CompressionOption.Normal> compresión.  Otros <xref:System.IO.Packaging.CompressionOption> valores de <xref:System.IO.Packaging.CompressionOption.Maximum>, <xref:System.IO.Packaging.CompressionOption.Fast>, o <xref:System.IO.Packaging.CompressionOption.SuperFast> usar <xref:System.IO.Packaging.CompressionOption.Normal> compresión.  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> crea un valor vacío <xref:System.IO.Stream> para el nuevo elemento.  El <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> método puede utilizarse para obtener una referencia a la instancia de la secuencia asociada con la parte.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.PackagePart> y, a continuación, almacenar datos en la parte.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> o <paramref name="contentType" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> no es un [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] válido de <see cref="T:System.IO.Packaging.PackagePart" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un elemento con el <paramref name="partUri" /> especificado ya está presente en el paquete.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor <paramref name="compressionOption" /> no es válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura (no se puede agregar ningún elemento nuevo).</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> método para crear realmente la parte basada en el formato físico implementado en la clase derivada.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="abstract member CreatePartCore : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePartCore (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del elemento que se crea.</param>
        <param name="contentType">Tipo de contenido del flujo de datos.</param>
        <param name="compressionOption">Opción de compresión del flujo de datos.</param>
        <summary>Cuando se invalida en una clase derivada, crea un nuevo elemento en el paquete.</summary>
        <returns>El elemento creado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase derivada <xref:System.IO.Packaging.Package.CreatePartCore%2A> llama al método el <xref:System.IO.Packaging.Package.CreatePart%2A> método para crear un elemento basado en el formato físico implementado en la clase derivada.  
  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> derivados de la implementación de la clase del resumen <xref:System.IO.Packaging.Package> proporcionado y usa la clase.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.CreatePart%2A> llama internamente a <xref:System.IO.Packaging.Package.CreatePartCore%2A> de la <xref:System.IO.Packaging.ZipPackage> clase para crear un nuevo elemento en un archivo ZIP.  
  
 Para el valor predeterminado <xref:System.IO.Packaging.ZipPackage> clase derivada, el <xref:System.IO.Packaging.Package.CreatePartCore%2A> método sólo es compatible con dos `compressionOption` valores, <xref:System.IO.Packaging.CompressionOption.NotCompressed> o <xref:System.IO.Packaging.CompressionOption.Normal> compresión.  Otros <xref:System.IO.Packaging.CompressionOption> valores de <xref:System.IO.Packaging.CompressionOption.Maximum>, <xref:System.IO.Packaging.CompressionOption.Fast>, o <xref:System.IO.Packaging.CompressionOption.SuperFast> usar <xref:System.IO.Packaging.CompressionOption.Normal> compresión.  
  
 Para obtener más información sobre el modelo y los elementos del paquete, consulte el capítulo 1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La clase derivada <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> implementación debe hacer ninguna suposición sobre el orden o las operaciones realizadas por el <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> método que lo llama.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una relación de nivel de paquete en un elemento especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una relación de nivel de paquete define una asociación entre el paquete y un elemento de destino asociado o un recurso.  Una relación de nivel de paquete puede ser una de estas dos formas.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un destino <xref:System.IO.Packaging.PackagePart> dentro del paquete.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un recurso de destino fuera del paquete.  
  
 En una relación de paquete, el paquete se considera el "propietario" de la relación.  Cuando se elimina el paquete, también se eliminan todas las relaciones que posee el paquete.  El proceso de creación o eliminación de la relación no modifica físicamente el elemento de destino o recurso de ninguna manera.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la creación de un <xref:System.IO.Packaging.PackageRelationship> entre un <xref:System.IO.Packaging.Package> y un elemento de documento raíz.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del elemento de destino.</param>
        <param name="targetMode">Indica si el elemento de destino es <see cref="F:System.IO.Packaging.TargetMode.Internal" /> o <see cref="F:System.IO.Packaging.TargetMode.External" /> en el paquete.</param>
        <param name="relationshipType">URI que define exclusivamente el rol de la relación.</param>
        <summary>Crea una relación de nivel de paquete en un elemento con un URI, modo de destino y tipo de relación especificados.</summary>
        <returns>Relación de nivel de paquete en el elemento especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una relación de nivel de paquete define una asociación entre el paquete y un elemento de destino asociado o un recurso.  Una relación de nivel de paquete puede ser una de estas dos formas.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un elemento de destino en el paquete.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un recurso de destino fuera del paquete.  
  
 En una relación de paquete, el paquete se considera el "propietario" de la relación.  Cuando se elimina el paquete, también se eliminan todas las relaciones que posee el paquete.  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> no cambia físicamente el elemento de destino o recurso de ninguna manera.  
  
 El destino de una relación no puede ser otra relación.  
  
 Si `targetMode` se especifica como <xref:System.IO.Packaging.TargetMode.Internal>, `targetUri` debe ser un URI relativo que se forma según la [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI).  El URI relativo interno puede ser una ruta absoluta que comienza por una barra diagonal ("/") caracteres como "/ page1.xaml" o "/ images/picture4.jpg", o una ruta de acceso relativa como ".. / imagespicture1.jpg "que se resuelve en la raíz del paquete ("/ ") como el URI base.  
  
 Si `targetMode` se especifica como <xref:System.IO.Packaging.TargetMode.External>, `targetUri` puede ser cualquier absoluta o URI relativo el formato correcto según el [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI). `http://www.microsoft.com/page2.xml` es un ejemplo de un URI absoluto que hace referencia a un recurso de destino externo "page2.xml".  "images/picture1.jpg" es un ejemplo de un URI relativo que también hace referencia a un destino externo resource "1.jpg" pero que se resuelve en el URI del propio paquete.  
  
 `relationshipType` debe ser un [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] que se forma según la [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI).  En la tabla siguiente se muestra el nivel de paquete `relationshipType` URI definen por la especificación de Open Packaging Conventions (OPC).  
  
|Relación de nivel de paquete|URI del tipo de relación|  
|---------------------------------|---------------------------|  
|Propiedades básicas|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certificado de firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Origen de la firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Vista en miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Para obtener más información sobre el empaquetado y relaciones de paquete, vea la sección 1.3 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar <xref:System.IO.Packaging.Package.CreateRelationship%2A> para crear un <xref:System.IO.Packaging.PackageRelationship> entre un <xref:System.IO.Packaging.Package> y un elemento de documento raíz.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> o <paramref name="relationshipType" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El elemento del <paramref name="targetUri" /> es una clase <see cref="T:System.IO.Packaging.PackageRelationship" /> o <paramref name="targetMode" /> es <see cref="F:System.IO.Packaging.TargetMode.Internal" /> y <paramref name="targetUri" /> es un URI absoluto.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="targetMode" /> no es válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura.</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del elemento de destino.</param>
        <param name="targetMode">Indica si el elemento de destino es <see cref="F:System.IO.Packaging.TargetMode.Internal" /> o <see cref="F:System.IO.Packaging.TargetMode.External" /> en el paquete.</param>
        <param name="relationshipType">URI que define exclusivamente el rol de la relación.</param>
        <param name="id">Identificador XML único.</param>
        <summary>Crea una relación de nivel de paquete en un elemento con un URI, modo de destino, tipo de relación y [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)] especificados.</summary>
        <returns>Relación de nivel de paquete en el elemento especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una relación de nivel de paquete define una asociación entre el paquete y un elemento de destino asociado o un recurso.  Una relación de nivel de paquete puede ser una de estas dos formas.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un elemento de destino en el paquete.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un recurso de destino fuera del paquete.  
  
 En una relación de paquete, el paquete se considera el "propietario" de la relación.  Cuando se elimina el paquete, también se eliminan todas las relaciones que posee el paquete.  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> no cambia físicamente el elemento de destino o recurso de ninguna manera.  
  
 El destino de una relación no puede ser otra relación.  
  
 `id` Debe ser un identificador XML válido.  El `id` tipo es xsd: ID y debe seguir las convenciones de nomenclatura prescritas en el esquema XML parte 2: Especificación de los tipos de datos (consulte [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID)).  
  
 Si `id` se especifica como `null` se generará automáticamente un identificador único.  Un `id` especificado por un valor vacío cadena no es válida.  
  
 Si `targetMode` se especifica como <xref:System.IO.Packaging.TargetMode.Internal>, `targetUri` debe ser un URI relativo que se forma según la [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI).  El URI relativo interno puede ser una ruta absoluta que comienza por una barra diagonal ("/") caracteres como "/ page1.xaml" o "/ images/picture4.jpg", o una ruta de acceso relativa como ".. / imagespicture1.jpg "que se resuelve en la raíz del paquete ("/ ") como el URI base.  
  
 Si `targetMode` se especifica como <xref:System.IO.Packaging.TargetMode.External>, `targetUri` puede ser cualquier absoluta o URI relativo el formato correcto según el [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI). `http://www.microsoft.com/page2.xml` es un ejemplo de un URI absoluto que hace referencia a un recurso de destino externo "page2.xml".  "images/picture1.jpg" es un ejemplo de un URI relativo que también hace referencia a un destino externo resource "1.jpg" pero que se resuelve en el URI del propio paquete.  
  
 `relationshipType` debe ser un URI que se forma según la [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI).  En la tabla siguiente se muestra el nivel de paquete `relationshipType` URI definen por la especificación de Open Packaging Conventions (OPC).  
  
|Relación de nivel de paquete|URI del tipo de relación|  
|---------------------------------|---------------------------|  
|Propiedades básicas|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certificado de firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Origen de la firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Vista en miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Para obtener más información sobre el empaquetado y relaciones de paquete, vea la sección 1.3 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar <xref:System.IO.Packaging.Package.CreateRelationship%2A> para crear un <xref:System.IO.Packaging.PackageRelationship> entre un <xref:System.IO.Packaging.Package> y un elemento de documento raíz.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> o <paramref name="relationshipType" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El elemento del <paramref name="targetUri" /> es una clase <see cref="T:System.IO.Packaging.PackageRelationship" /> o <paramref name="targetMode" /> es <see cref="F:System.IO.Packaging.TargetMode.Internal" /> y <paramref name="targetUri" /> es un URI absoluto.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="targetMode" /> no es válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> no es un identificador XML válido; o bien, ya existe un elemento con el <paramref name="id" /> especificado en el paquete.</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.DeletePart : Uri -&gt; unit" Usage="package.DeletePart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] del elemento que se va a eliminar.</param>
        <summary>Elimina un elemento con un URI especificado desde el paquete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` debe ser un URI relativo que consta de una ruta de acceso absoluta que comienza con una barra diagonal ("/") caracteres.  La ruta de acceso absoluta es relativa a la raíz del paquete y se ha creado según la [RFC 3986](https://tools.ietf.org/html/rfc3986) especificación de sintaxis genérica del identificador uniforme de recursos (URI).  "/ page1.xaml" y "/ images/picture4.jpg" son ejemplos de URI válido de parte.  
  
 No se produce ninguna excepción si un elemento con los valores especificados `partUri` no está en el paquete.  (Puede usar el <xref:System.IO.Packaging.Package.PartExists%2A> método para determinar si un elemento con un determinado `partUri` está en el paquete.)  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> no es un [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] válido de <see cref="T:System.IO.Packaging.PackagePart" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> método para eliminar el elemento basada en el formato físico implementado en la clase derivada.</para></block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member DeletePartCore : Uri -&gt; unit" Usage="package.DeletePartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">La propiedad <see cref="P:System.IO.Packaging.PackagePart.Uri" /> de la clase <see cref="T:System.IO.Packaging.PackagePart" /> que se va a eliminar.</param>
        <summary>Cuando se invalida en una clase derivada, elimina un elemento con un URI especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> derivados de la implementación de la clase del resumen <xref:System.IO.Packaging.Package> proporcionado y usa la clase.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.DeletePart%2A> llama internamente a <xref:System.IO.Packaging.Package.DeletePartCore%2A> de la <xref:System.IO.Packaging.ZipPackage> basándose en el formato físico implementado en la clase derivada de la operación de eliminación de la clase para realizar la real.  
  
 Para obtener más información sobre el modelo y los elementos del paquete, consulte el capítulo 1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La clase derivada <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementación llama a la <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> método a la parte especificada según el formato físico implementado en la clase derivada.  
  
La clase derivada <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementación debe hacer ninguna suposición sobre el orden o las operaciones realizadas por el <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> método que lo llama.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="package.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">La propiedad <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> de la clase <see cref="T:System.IO.Packaging.PackageRelationship" /> que se va a eliminar.</param>
        <summary>Elimina una relación de nivel del paquete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una relación de nivel de paquete define una asociación entre el paquete y un elemento de destino asociado o un recurso.  Una relación de nivel de paquete puede ser una de estas dos formas.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un elemento de destino en el paquete.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un recurso de destino fuera del paquete.  
  
 En una relación de paquete, el paquete se considera el "propietario" de la relación.  Cuando se elimina el paquete, también se eliminan todas las relaciones que posee el paquete.  
  
 No se produce ninguna excepción si una relación con los valores especificados `id` no está en el paquete.  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> no cambia físicamente el elemento de destino de ninguna manera.  
  
 Para obtener más información acerca de las relaciones de paquete, vea la sección 1.3 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> no es un identificador XML válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="package.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Vacía y guarda el contenido de todos los elementos y relaciones, cierra el paquete y libera todos los recursos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para asegurarse de que todos los cambios se guardan correctamente, <xref:System.IO.Packaging.Package.Dispose%2A> también finaliza, vacía y cierra todos los elementos y relaciones que se encuentran en el paquete.  
  
 Para el <xref:System.IO.Packaging.Package> (clase), <xref:System.IO.Packaging.Package.Dispose%2A> y <xref:System.IO.Packaging.Package.Close%2A> realizar la misma operación: no hay ninguna razón para llamar a <xref:System.IO.Packaging.Package.Dispose%2A> si llama a <xref:System.IO.Packaging.Package.Close%2A>, o viceversa.  
  
 <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> llaman internamente a <xref:System.IO.Packaging.Package.Flush%2A>.  
  
 Las clases derivadas que asignan y administran los recursos de memoria no deben invalidar este método para liberar recursos cuando <xref:System.IO.Packaging.Package.Dispose%2A> se llama. Las invalidaciones de la clase derivada también deben llamar <xref:System.IO.Packaging.Package.Flush%2A> y la clase base <xref:System.IO.Packaging.Package.Dispose%2A> método para asegurarse de que se realiza siempre que la limpieza de clase base.  
  
> [!NOTE]
>  El `using` instrucción (diferente de la `using` directiva de espacio de nombres) es la manera recomendada para <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> un paquete. [Escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055) se muestra cómo cerrar y eliminar un paquete mediante el uso de la `using` instrucción.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberSignature Language="F#" Value="member this.FileOpenAccess : System.IO.FileAccess" Usage="System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la configuración de acceso de archivos del paquete.</summary>
        <value>Uno de los valores de <see cref="T:System.IO.FileAccess" />: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" /> o <see cref="F:System.IO.FileAccess.ReadWrite" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.IO.Packaging.Package.FileOpenAccess%2A> no tiene ningún valor predeterminado.  La configuración de acceso de archivo se especifica en el <xref:System.IO.Packaging.Package.%23ctor%2A> llame al constructor al crear un nuevo paquete, o el <xref:System.IO.Packaging.Package.Open%2A> llamar al abrir un paquete existente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="package.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda el contenido de todos los elementos y relaciones contenidos en el paquete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> llama internamente a la clase derivada <xref:System.IO.Packaging.Package.FlushCore%2A> implementación para realizar la operación de vaciado específica del formato real.  La clase derivada <xref:System.IO.Packaging.Package.FlushCore%2A> método es responsable de guardar el contenido y de relaciones para la implementación de la clase derivada física específica.  
  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> implementación derivada de la abstracta <xref:System.IO.Packaging.Package> se proporciona y se usa la clase base. En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.Flush%2A> llama internamente a <xref:System.IO.Packaging.Package.FlushCore%2A> para guardar los elementos y relaciones en un paquete de archivo ZIP.  
  
 <xref:System.IO.Packaging.Package.Flush%2A> se llama de forma automática el <xref:System.IO.Packaging.Package.Close%2A> y <xref:System.IO.Packaging.Package.Dispose%2A> métodos.  Cuando <xref:System.IO.Packaging.Package.Close%2A> o <xref:System.IO.Packaging.Package.Dispose%2A> se llama no es necesario llamar a <xref:System.IO.Packaging.Package.Flush%2A> por separado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo lectura y no se puede modificar.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.FlushCore" /> método para vaciar el elemento basado en el formato físico implementado en la clase derivada.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberSignature Language="F#" Value="abstract member FlushCore : unit -&gt; unit" Usage="package.FlushCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, guarda el contenido de todos los elementos y relaciones en el almacén de la clase derivada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> llama a la <xref:System.IO.Packaging.Package.Flush%2A> método para realizar la operación de vaciado real basada en el formato físico implementado en la clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La clase derivada <see cref="M:System.IO.Packaging.Package.FlushCore" /> implementación no debe hacer ninguna suposición sobre el orden o las operaciones realizadas por el <see cref="M:System.IO.Packaging.Package.Flush" /> método que lo llama.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.GetPart : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del elemento que se va a devolver.</param>
        <summary>Devuelve el elemento con un URI especificado.</summary>
        <returns>Elemento con el <paramref name="partUri" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.InvalidOperationException> se produce si un elemento con los valores especificados `partUri` no existe.  
  
 El <xref:System.IO.Packaging.Package.PartExists%2A> método puede utilizarse para determinar si `partUri` hace referencia a un elemento existente.  
  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> implementación derivada de la abstracta <xref:System.IO.Packaging.Package> se proporciona y se usa la clase base.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.GetPart%2A> llama internamente a <xref:System.IO.Packaging.Package.GetPartCore%2A> de la <xref:System.IO.Packaging.ZipPackage> clase para devolver un elemento solicitado desde un archivo ZIP.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo buscar, recuperar y leer los elementos contenidos en un paquete.  Para obtener un ejemplo completo, vea [leer un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> no es un [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] válido de <see cref="T:System.IO.Packaging.PackagePart" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un elemento con el <paramref name="partUri" /> especificado no está en el paquete.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> método para vaciar el elemento basado en el formato físico implementado en la clase derivada.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member GetPartCore : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del elemento que se va a recuperar.</param>
        <summary>Cuando se invalida en una clase derivada, devuelve el elemento tratado por un URI especificado.</summary>
        <returns>El elemento solicitado; o <see langword="null" />, si un elemento con el <paramref name="partUri" /> especificado no está en el paquete.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> implementación derivada de la abstracta <xref:System.IO.Packaging.Package> proporcionado y usa la clase.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.GetPart%2A> llama internamente a <xref:System.IO.Packaging.Package.GetPartCore%2A> de la <xref:System.IO.Packaging.ZipPackage> clase para recuperar una parte de un archivo ZIP.  
  
 Para obtener más información sobre el modelo y los elementos del paquete, consulte el capítulo 1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La clase derivada <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementación llama a la <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> método para tener acceso y devolver la parte especificada basada en el formato físico implementado en la clase derivada.  
  
La clase derivada <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementación debe hacer ninguna suposición sobre el orden o las operaciones realizadas por el <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> método que lo llama.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberSignature Language="F#" Value="member this.GetParts : unit -&gt; System.IO.Packaging.PackagePartCollection" Usage="package.GetParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una colección de todos los elementos en el paquete.</summary>
        <returns>Colección de todos los elementos <see cref="T:System.IO.Packaging.PackagePart" /> contenidos en el paquete.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> Devuelve una colección de todas las partes que se encuentran en el paquete, incluidos <xref:System.IO.Packaging.PackageRelationship> partes.  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> nunca devolverá `null`; sin embargo, la colección devuelta contendrá cero elementos si el paquete no contiene ningún elemento.  
  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> implementación derivada de la abstracta <xref:System.IO.Packaging.Package> se proporciona y se usa la clase base.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.GetParts%2A> llamadas la <xref:System.IO.Packaging.Package.GetPartsCore%2A> método de la <xref:System.IO.Packaging.ZipPackage> clase para devolver las partes de un archivo ZIP.  
  
 Para obtener más información sobre los paquetes y los elementos del paquete, vea la sección 1.1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.IO.Packaging.Package.GetParts%2A> método para obtener una colección de los elementos que se encuentran en un <xref:System.IO.Packaging.Package>.  El código fuente del programa completo, vea [creación de un paquete con un ejemplo de la firma Digital](https://go.microsoft.com/fwlink/?LinkID=159966).  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> llama internamente a la clase derivada <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> método para vaciar el elemento basado en el formato físico implementado en la clase derivada.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberSignature Language="F#" Value="abstract member GetPartsCore : unit -&gt; System.IO.Packaging.PackagePart[]" Usage="package.GetPartsCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, devuelve una matriz de todos los elementos del paquete.</summary>
        <returns>Matriz de todos los elementos contenidos en el paquete.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase derivada <xref:System.IO.Packaging.Package.GetPartsCore%2A> implementación llama a la <xref:System.IO.Packaging.Package.GetParts%2A> método para tener acceso y devolver la matriz de partes basada en el formato físico implementado en la clase derivada.  
  
 De forma predeterminada, un <xref:System.IO.Packaging.ZipPackage> implementación derivada de la abstracta <xref:System.IO.Packaging.Package> proporcionado y usa la clase.  En la operación de forma predeterminada, <xref:System.IO.Packaging.Package.GetParts%2A> llama internamente a <xref:System.IO.Packaging.Package.GetPartCore%2A> de la <xref:System.IO.Packaging.ZipPackage> clase para recuperar las partes de un archivo ZIP.  
  
 Para obtener más información sobre el modelo y los elementos del paquete, consulte el capítulo 1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La clase derivada <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> implementación debe hacer ninguna suposición sobre el orden o las operaciones realizadas por el <see cref="M:System.IO.Packaging.Package.GetParts" /> método que lo llama.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Propiedad <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> de la relación que se va a devolver.</param>
        <summary>Devuelve la relación de nivel de paquete con un identificador especificado.</summary>
        <returns>Relación de nivel de paquete con el <paramref name="id" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` Debe ser un identificador XML válido. El `id` tipo es xsd: ID y debe seguir las convenciones de nomenclatura prescritas en la [sección 3.3.8 de XML Schema Part 2: Especificación de los tipos de datos](https://www.w3.org/TR/xmlschema-2/#ID).  
  
 Para obtener más información sobre el empaquetado y relaciones de paquete, vea la sección 1.3 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> no es un identificador XML válido.</exception>
        <exception cref="T:System.InvalidOperationException">Una relación con el <paramref name="id" /> especificado no está en el paquete.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una colección de todas las relaciones de nivel de paquete.</summary>
        <returns>Colección de todas las relaciones de nivel de paquete contenidas en el paquete.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> nunca devolverá `null`; sin embargo, la colección devuelta puede contener cero elementos si el paquete no contiene ninguna relación de nivel de paquete.  
  
 Una relación de nivel de paquete define una asociación entre el paquete y un elemento de destino asociado o un recurso.  Una relación de nivel de paquete puede ser una de estas dos formas.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un elemento de destino en el paquete.  
  
-   Entre un <xref:System.IO.Packaging.Package> a un recurso de destino fuera del paquete.  
  
 En una relación de paquete, el paquete se considera el "propietario" de la relación.  Cuando se elimina el paquete, también se eliminan todas las relaciones que posee el paquete.  El proceso de creación o eliminación de la relación no modifica físicamente el elemento de destino o recurso de ninguna manera.  
  
 Para obtener más información sobre el empaquetado y relaciones de paquete, vea la sección 1.3 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> para coincidir y devolver en la colección.</param>
        <summary>Devuelve una colección de todas las relaciones de nivel de paquete que coincidan con una propiedad <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> especificada.</summary>
        <returns>Colección de relaciones de nivel de paquete que coincidan con el <paramref name="relationshipType" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> nunca devolverá `null`; sin embargo, la colección devuelta puede contener cero elementos si no hay ninguna relación de nivel de paquete que coinciden con la cadena `relationshipType`.  
  
 En la tabla siguiente se muestra el nivel de paquete `relationshipType` URI definen por la especificación de Open Packaging Conventions (OPC).  
  
|Relación de nivel de paquete|URI del tipo de relación|  
|---------------------------------|---------------------------|  
|Propiedades básicas|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certificado de firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Origen de la firma digital|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Vista en miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo recuperar las relaciones que se han definido para el paquete.  Para obtener un ejemplo completo, vea [leer un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> es una cadena vacía.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Abre un paquete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.Package> que incorpora <xref:System.IO.Packaging.PackageRelationship> y <xref:System.IO.Packaging.PackagePart> elementos junto con los datos almacenados.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Secuencia de E/S en la que se va a abrir el paquete.</param>
        <summary>Abre un paquete en una secuencia de E/S especificada.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">El paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> especificada es de sólo escritura; o bien, el paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> es de sólo lectura.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso y nombre de archivo del paquete.</param>
        <summary>Abre un paquete en una ruta de acceso y un nombre de archivo especificados.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Esto <xref:System.IO.Packaging.Package.Open%2A> método abre el paquete con los atributos predeterminados <xref:System.IO.FileMode.OpenOrCreate>, <xref:System.IO.FileAccess.ReadWrite>, y <xref:System.IO.FileShare.None> (para especificar atributos diferentes use una de las otras sobrecargas del método Open).  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.Package> que incorpora <xref:System.IO.Packaging.PackageRelationship> y <xref:System.IO.Packaging.PackagePart> elementos junto con los datos almacenados.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">Secuencia de E/S en la que se va a abrir el paquete.</param>
        <param name="packageMode">Modo de archivo en el que se va a abrir el paquete.</param>
        <summary>Abre un paquete con una secuencia de E/S y un modo de archivo especificados.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="packageMode" /> no es válido.</exception>
        <exception cref="T:System.IO.IOException">El paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> especificada es de sólo escritura; o bien, el paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> es de sólo lectura.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso y nombre de archivo del paquete.</param>
        <param name="packageMode">Modo de archivo en el que se va a abrir el paquete.</param>
        <summary>Abre un paquete en una ruta de acceso especificada con un modo de archivo especificado.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Esto <xref:System.IO.Packaging.Package.Open%2A> método abre el paquete con los atributos predeterminados <xref:System.IO.FileAccess.ReadWrite> y <xref:System.IO.FileShare.None> (para especificar atributos diferentes use una de las otras sobrecargas del método Open).  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.Package> que incorpora <xref:System.IO.Packaging.PackageRelationship> y <xref:System.IO.Packaging.PackagePart> elementos junto con los datos almacenados.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="packageMode" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">Secuencia de E/S en la que se va a abrir el paquete.</param>
        <param name="packageMode">Modo de archivo en el que se va a abrir el paquete.</param>
        <param name="packageAccess">Acceso de archivo en el que se va a abrir el paquete.</param>
        <summary>Abre un paquete con una secuencia de E/S, un modo de archivo y la configuración de acceso de archivo especificados.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="packageMode" /> o <paramref name="packageAccess" /> no es válido.</exception>
        <exception cref="T:System.IO.IOException">El paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> especificada es de sólo escritura; o bien, el paquete que va a abrirse requiere permisos de lectura o de lectura y escritura y la <paramref name="stream" /> es de sólo lectura.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso y nombre de archivo del paquete.</param>
        <param name="packageMode">Modo de archivo en el que se va a abrir el paquete.</param>
        <param name="packageAccess">Acceso de archivo en el que se va a abrir el paquete.</param>
        <summary>Abre un paquete en una ruta de acceso especificada con un modo de archivo y la configuración de acceso de archivo especificados.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Esto <xref:System.IO.Packaging.Package.Open%2A> método abre el paquete con el valor predeterminado es <xref:System.IO.FileShare.None> atributo (para especificar un atributo diferente, use el <xref:System.IO.Packaging.Package.Open%2A> sobrecarga del método).  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo abrir y leer un <xref:System.IO.Packaging.Package> que contiene <xref:System.IO.Packaging.PackageRelationship> y <xref:System.IO.Packaging.PackagePart> elementos junto con los datos almacenados.  Para obtener un ejemplo completo, vea [leer un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="packageMode" /> o <paramref name="packageAccess" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess, packageShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso y nombre de archivo del paquete.</param>
        <param name="packageMode">Modo de archivo en el que se va a abrir el paquete.</param>
        <param name="packageAccess">Acceso de archivo en el que se va a abrir el paquete.</param>
        <param name="packageShare">Modo de uso compartido de archivos en el que se va a abrir el paquete.</param>
        <summary>Abre un paquete en una ruta de acceso especificada con un modo de archivo, acceso de archivo y configuración de uso compartido de archivos especificados.</summary>
        <returns>El paquete abierto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> es el tipo de paquete predeterminado que usa el <xref:System.IO.Packaging.Package.Open%2A> método.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un nuevo <xref:System.IO.Packaging.Package> que incorpora <xref:System.IO.Packaging.PackageRelationship> y <xref:System.IO.Packaging.PackagePart> elementos junto con los datos almacenados.  Para obtener un ejemplo completo, vea [escribir un ejemplo de paquete](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="packageMode" />, <paramref name="packageAccess" /> o <paramref name="packageShare" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PackageProperties : System.IO.Packaging.PackageProperties" Usage="System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las propiedades básicas del paquete.</summary>
        <value>Propiedades básicas del paquete.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre las propiedades básicas del paquete, vea la sección 3.1 de la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member PartExists : Uri -&gt; bool&#xA;override this.PartExists : Uri -&gt; bool" Usage="package.PartExists partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri"><see cref="T:System.Uri" /> del elemento en el que se va a buscar.</param>
        <summary>Indica si un elemento con un URI especificado está en el paquete.</summary>
        <returns>Es <see langword="true" /> si un elemento con el <paramref name="partUri" /> especificado está en el paquete; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `partUri` debe comenzar con un carácter de barra diagonal "/" y ser absoluto desde la raíz del paquete.  
  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> no es un [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] válido de <see cref="T:System.IO.Packaging.PackagePart" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura (no se puede leer la información).</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="package.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">La propiedad <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> de la relación que se va a comprobar.</param>
        <summary>Indica si una relación de nivel de paquete con un identificador especificado está contenida en el paquete.</summary>
        <returns>Es <see langword="true" /> si una relación de nivel de paquete con el <paramref name="id" /> especificado está en el paquete; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información, vea la especificación de Open Packaging Conventions (OPC) disponible para su descarga en <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> no es un identificador XML válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El paquete no está abierto (se ha llamado a <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> o <see cref="M:System.IO.Packaging.Package.Close" />).</exception>
        <exception cref="T:System.IO.IOException">El paquete es de sólo escritura.</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro admite la infraestructura de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no tiene fines de uso de aplicación.  Utilice el método <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> con seguridad de tipos en su lugar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>