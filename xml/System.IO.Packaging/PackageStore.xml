<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="245b0dbe550b6d8c9da469b38d25afbd8040fa21" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996804" /></Metadata><TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una colección de específicos de la aplicación <see cref="T:System.IO.Packaging.Package" /> instancias que se utilizan en combinación con <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.Packaging.PackageStore> define una colección de referencia de paquete que están abiertos y activo en la aplicación.  Paquetes agregados a la <xref:System.IO.Packaging.PackageStore> se obtiene acceso es por su valor URI clave.  El <xref:System.IO.Packaging.PackageStore> admite tres usos comunes:  
  
1.  Acceso a <xref:System.IO.Packaging.PackagePart> datos a través de <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  La aplicación que obtiene una instancia de un <xref:System.IO.Packaging.Package> URI del paquete proporcionado.  
  
3.  Acceso a los paquetes que se crean y almacenan en un <xref:System.IO.MemoryStream>.  
  
 Para mejorar el rendimiento y minimizar la sobrecarga de operaciones de apertura y cierre repetidos de archivo, el <xref:System.IO.Packaging.PackageStore> se usa para administrar las instancias de paquetes accediendo a <xref:System.IO.Packaging.PackWebRequest> y directamente por la aplicación.  Al obtener acceso a datos en un paquete, el <xref:System.IO.Packaging.Package> dirección de un solicitado <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> primero se comprueba para ver si el paquete ya se ha definido y abierto en el <xref:System.IO.Packaging.PackageStore>.  Si el paquete se define como abierto en el <xref:System.IO.Packaging.PackageStore>, solicitado de elementos pueden tener acceso directamente sin la apertura y cierre el paquete para cada solicitud.  
  
 Si la aplicación abre un paquete con <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> se puede llamar para agregar el paquete el <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> más adelante se debe llamar para quitar el paquete desde el <xref:System.IO.Packaging.PackageStore> antes de llamar a <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Paquetes XPS abierta con un <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructor automáticamente se agregan y eliminan desde el <xref:System.IO.Packaging.PackageStore> cuando se crea y se elimina el documento.  (No es necesario llamar a <xref:System.IO.Packaging.PackageStore.AddPackage%2A> o <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> por separado para abrir paquetes XPS con <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructores.)  
  
 Los permisos de E/S de archivos de un paquete que se tiene acceso a través del <xref:System.IO.Packaging.PackageStore> sigue siendo el mismo que los permisos de E/S establecidos en el paquete cuando se abre.  El <xref:System.IO.Packaging.PackageStore> sólo proporciona referencias a los paquetes que se han agregado a la tienda.  Es responsabilidad de la aplicación para abrir, actualizar y cerrar cada paquete correctamente.  
  
 Paquetes agregados a la <xref:System.IO.Packaging.PackageStore> puede obtenerse en entornos multiproceso cuando se utilizan en combinación con un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] analizador como <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Cuando se trabaja en un entorno multiproceso, la aplicación debe bloquear el paquete antes de acceso.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">La clave [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] de la <paramref name="package" /> comparar en un <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">El paquete para agregar al almacén.</param>
        <summary>Agrega un <see cref="T:System.IO.Packaging.Package" /> en el almacén.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` define el URI que se compara cuando se llama de la clave del paquete <xref:System.IO.Packaging.PackWebRequest>.  
  
 Si el `packageUri` coincide con el <xref:System.IO.Packaging.PackagePart.Uri%2A> para un <xref:System.IO.Packaging.PackagePart> en un <xref:System.IO.Packaging.PackWebRequest> llamada, el paquete definido en el <xref:System.IO.Packaging.PackageStore> se usa para acceder al elemento solicitado.  
  
 Si el `packageUri` no coincide con el <xref:System.IO.Packaging.PackagePart.Uri%2A> para un <xref:System.IO.Packaging.PackagePart> en un <xref:System.IO.Packaging.PackWebRequest> llamada, el paquete con el URI especificado se abre para tener acceso al elemento solicitado.  
  
 **Nota de seguridad** este método exige <xref:System.Security.Permissions.EnvironmentPermission> personalizado todas <xref:System.IO.Packaging.Package> (que no sean de<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.AddPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="package" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> es un paquete válido [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Un paquete con los valores especificados <paramref name="packageUri" /> ya está en el almacén.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">El [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del paquete que se va a devolver.</param>
        <summary>Devuelve el <see cref="T:System.IO.Packaging.Package" /> con un determinado [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] desde la tienda.</summary>
        <returns>El paquete con un determinado <paramref name="packageUri" />; o <see langword="null" />, si un paquete con los valores especificados <paramref name="packageUri" /> no está en el almacén.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` se hace coincidir con el URI especificado en el <xref:System.IO.Packaging.PackageStore.AddPackage%2A> llamada al método.  
  
 **Nota de seguridad** este método exige <xref:System.Security.Permissions.EnvironmentPermission> personalizado todas <xref:System.IO.Packaging.Package> (que no sean de<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.GetPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="packageUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> es un paquete válido [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">El [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del paquete que se va a quitar.</param>
        <summary>Quita el <see cref="T:System.IO.Packaging.Package" /> con un determinado [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] desde la tienda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` se hace coincidir con el URI especificado en el <xref:System.IO.Packaging.PackageStore.AddPackage%2A> llamada al método.  
  
 **Nota de seguridad** este método exige <xref:System.Security.Permissions.EnvironmentPermission> personalizado todas <xref:System.IO.Packaging.Package> (que no sean de<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="packageUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> es un paquete válido [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>