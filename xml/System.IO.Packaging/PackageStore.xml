<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9646ee86aa2b99b957b6c34ac522a8de749c695b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36561399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of application-specific <see cref="T:System.IO.Packaging.Package" /> instances used in combination with <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.Packaging.PackageStore> define una colección de referencia del paquete que está abiertas y activas en la aplicación.  Paquetes agregados a la <xref:System.IO.Packaging.PackageStore> se tiene acceso en su valor URI clave.  El <xref:System.IO.Packaging.PackageStore> admite tres usos comunes:  
  
1.  Obtener acceso a <xref:System.IO.Packaging.PackagePart> datos a través de <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  La aplicación que obtiene una instancia de un <xref:System.IO.Packaging.Package> proporciona el URI del paquete.  
  
3.  Acceso a los paquetes que se crean y almacenan en un <xref:System.IO.MemoryStream>.  
  
 Para mejorar el rendimiento y minimizar la sobrecarga de operaciones de apertura y cierre de archivo repetidas, el <xref:System.IO.Packaging.PackageStore> se utiliza para administrar las instancias de paquetes que se tiene acceso con <xref:System.IO.Packaging.PackWebRequest> y directamente por la aplicación.  Al obtener acceso a datos en un paquete, el <xref:System.IO.Packaging.Package> dirección de un solicitado <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> primero se comprueban para ver si el paquete ya está definido y abierto en el <xref:System.IO.Packaging.PackageStore>.  Si el paquete se ha definido como abierta en el <xref:System.IO.Packaging.PackageStore>, solicitado partes son accesibles directamente sin repetidamente de apertura y cierre el paquete para cada solicitud.  
  
 Si la aplicación abre un paquete con <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> se puede llamar para agregar el paquete a la <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> posteriormente debe llamarse para quitar el paquete desde el <xref:System.IO.Packaging.PackageStore> antes de llamar a <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Los paquetes XPS abierto con un <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructor automáticamente se agregan y quitan desde la <xref:System.IO.Packaging.PackageStore> cuando se crea y se elimina el documento.  (No es necesario llamar a <xref:System.IO.Packaging.PackageStore.AddPackage%2A> o <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> por separado de los paquetes XPS abiertos con <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructores.)  
  
 Los permisos de E/S de archivos de un paquete que se tiene acceso a través de la <xref:System.IO.Packaging.PackageStore> es el mismo que los permisos de E/S establecidos en el paquete cuando se abre.  El <xref:System.IO.Packaging.PackageStore> sólo proporciona referencias a los paquetes que se han agregado a la tienda.  Depende de la aplicación para abrir, actualizar y cerrar cada paquete correctamente.  
  
 Paquetes agregados a la <xref:System.IO.Packaging.PackageStore> son accesibles en entornos multiproceso cuando se utilizan en combinación con un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] analizador como <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Cuando se trabaja en un entorno multiproceso, la aplicación debe bloquear el paquete antes de acceso.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">The key [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] of the <c>package</c> to compare in a <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">The package to add to the store.</param>
        <summary>Adds a <see cref="T:System.IO.Packaging.Package" /> to the store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` define la clave del paquete URI que se compara cuando se llama a <xref:System.IO.Packaging.PackWebRequest>.  
  
 Si el `packageUri` coincide con la <xref:System.IO.Packaging.PackagePart.Uri%2A> para un <xref:System.IO.Packaging.PackagePart> en un <xref:System.IO.Packaging.PackWebRequest> llamar a, el paquete definido en el <xref:System.IO.Packaging.PackageStore> se utiliza para tener acceso al elemento solicitado.  
  
 Si el `packageUri` no coincide con el <xref:System.IO.Packaging.PackagePart.Uri%2A> para un <xref:System.IO.Packaging.PackagePart> en un <xref:System.IO.Packaging.PackWebRequest> llamada, el paquete con el URI especificado se abre para tener acceso al elemento solicitado.  
  
 **Nota de seguridad** este método solicita <xref:System.Security.Permissions.EnvironmentPermission> para todos los personalizado <xref:System.IO.Packaging.Package> (no -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.AddPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> is an invalid package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">A package with the specified <paramref name="packageUri" /> is already in the store.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] of the package to return.</param>
        <summary>Returns the <see cref="T:System.IO.Packaging.Package" /> with a specified [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] from the store.</summary>
        <returns>The package with a specified <paramref name="packageUri" />; or <see langword="null" />, if a package with the specified <paramref name="packageUri" /> is not in the store.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` coincide con el URI especificado en el <xref:System.IO.Packaging.PackageStore.AddPackage%2A> llamada al método.  
  
 **Nota de seguridad** este método solicita <xref:System.Security.Permissions.EnvironmentPermission> para todos los personalizado <xref:System.IO.Packaging.Package> (no -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.GetPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> is an invalid package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] of the package to remove.</param>
        <summary>Removes the <see cref="T:System.IO.Packaging.Package" /> with a specified [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] from the store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` coincide con el URI especificado en el <xref:System.IO.Packaging.PackageStore.AddPackage%2A> llamada al método.  
  
 **Nota de seguridad** este método solicita <xref:System.Security.Permissions.EnvironmentPermission> para todos los personalizado <xref:System.IO.Packaging.Package> (no -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 En el siguiente ejemplo, se muestra cómo utilizar el método <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> is an invalid package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>