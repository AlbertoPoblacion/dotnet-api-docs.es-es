<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b52d0db75885f8aeda4cb24406f99463c817ee8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36698936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <TypeSignature Language="F#" Value="type InstallContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene información sobre la actual instalación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, un <xref:System.Configuration.Install.InstallContext> se crea mediante una instalación de archivo ejecutable, como InstallUtil.exe, que instala ensamblados. El programa de instalación, se invoca el <xref:System.Configuration.Install.InstallContext> constructor, pasando los parámetros de línea de comandos y la ruta de acceso del archivo de registro predeterminado.  
  
 Antes de llamar a su <xref:System.Configuration.Install.Installer.Install%2A>, <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A>, o <xref:System.Configuration.Install.Installer.Uninstall%2A> métodos, el programa de instalación establece la <xref:System.Configuration.Install.Installer.Context%2A> propiedad de un <xref:System.Configuration.Install.Installer> a la instancia de <xref:System.Configuration.Install.InstallContext>. Antes de llamar a estos métodos, un <xref:System.Configuration.Install.Installer> que contiene una colección de instaladores en el <xref:System.Configuration.Install.Installer.Installers%2A> conjuntos de propiedades del <xref:System.Configuration.Install.Installer.Context%2A> propiedad de cada instalador independiente.  
  
 El <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad contiene una versión analizada de la línea de comandos que se especifica para ejecutar el ejecutable de instalación. La propiedad contiene información como la ruta de acceso a un archivo de registro, si se debe mostrar la información de registro en la consola y si se debe mostrar una interfaz de usuario durante la instalación. Llame a la <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> método para averiguar si un parámetro de línea de comandos es `true`.  
  
 Use la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> método para escribir mensajes de estado en el archivo de registro de instalación y la consola.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.Configuration.Install.InstallContext.%23ctor%2A> constructores, el <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad y el <xref:System.Configuration.Install.InstallContext.LogMessage%2A> y <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> métodos de la <xref:System.Configuration.Install.InstallContext> clase.  
  
 Cuando el <xref:System.Configuration.Install.Installer.Install%2A> se llama el método del instalador, comprueba si hay parámetros de la línea de comandos. Función, muestra los mensajes de progreso en la consola y también se guarda en el archivo de registro especificado.  
  
 Cuando se invoca el programa sin ningún argumento, vacío <xref:System.Configuration.Install.InstallContext> se crea. Cuando "/ archivo de registro" y "/ LogtoConsole" se especifican, el <xref:System.Configuration.Install.InstallContext> se crea pasando los argumentos correspondientes a <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.Install.InstallContext" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.Install.InstallContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga no crea un archivo de registro para la instalación.  
  
   
  
## Examples  
  
> [!NOTE]
>  Este ejemplo muestra cómo utilizar una de las versiones sobrecargadas de los <xref:System.Configuration.Install.InstallContext> constructor. Para obtener otros ejemplos, vea los temas individuales de sobrecarga.  
  
 Cuando se invoca el programa sin ningún argumento, vacío <xref:System.Configuration.Install.InstallContext> se crea.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="new System.Configuration.Install.InstallContext : string * string[] -&gt; System.Configuration.Install.InstallContext" Usage="new System.Configuration.Install.InstallContext (logFilePath, commandLine)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Ruta de acceso al archivo de registro para esta instalación o <see langword="null" /> si no se debe crear ningún archivo de registro.</param>
        <param name="commandLine">Parámetros de la línea de comandos que se especifican cuando se ejecuta el programa de instalación o <see langword="null" /> si no se especifica ninguno.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.Install.InstallContext" /> y crea un archivo de registro para la instalación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la instalación usa [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md), este constructor crea un archivo de registro en la ruta de acceso especificada y analiza la matriz de parámetros de línea de comandos en el <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad. Si se especifica una ruta de acceso del archivo de registro en los parámetros de línea de comandos, se utiliza para crear el archivo. Si no se especifica el argumento de archivo de registro en la línea de comandos, el valor de la `logFilePath` se usa el parámetro. Para suprimir la creación de un archivo de registro, pase el "/ logfile =" parámetro de línea de comandos.  
  
   
  
## Examples  
 En este ejemplo es un extracto del ejemplo en la información general de la clase de <xref:System.Configuration.Install.InstallContext> clase.  
  
 Cuando "/ archivo de registro" y "/ LogtoConsole" se especifican, el <xref:System.Configuration.Install.InstallContext> se crea pasando los argumentos correspondientes a <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Pasar la ruta de acceso del archivo de registro predeterminado en el <paramref name="logFilePath" /> parámetro cuando se llama a este constructor. Esto es donde se crea el archivo de registro, a menos que se usa el parámetro de línea de comandos/logfile cuando se ejecuta el ejecutable de instalación.</para>
        </block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="member this.IsParameterTrue : string -&gt; bool" Usage="installContext.IsParameterTrue paramName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Nombre del parámetro de la línea de comandos que se va a comprobar.</param>
        <summary>Determina si el parámetro especificado de la línea de comandos es <see langword="true" />.</summary>
        <returns>Es <see langword="true" /> si el parámetro especificado está establecido en "yes", "true", "1" o una cadena vacía (""); en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método tiene acceso a la <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad, que contiene una versión analizada de los parámetros de línea de comandos, para determinar si el parámetro especificado es `true`.  
  
   
  
## Examples  
 En este ejemplo es un extracto de la muestra en la información general de la clase de la <xref:System.Configuration.Install.InstallContext> clase.  
  
 Usa el <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> método para averiguar si el `LogtoConsole` se ha establecido el parámetro. Si `yes`, se utilizará el <xref:System.Configuration.Install.InstallContext.LogMessage%2A> método para escribir mensajes de estado en el archivo de registro de instalación y la consola.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.LogMessage : string -&gt; unit" Usage="installContext.LogMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe un mensaje en la consola y el archivo de registro para la instalación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un instalador puede llamar a este método para escribir curso u otra información de estado en el archivo de registro. Si los parámetros de línea de comandos especifican que debe mostrarse una interfaz de usuario, el instalador debe mostrar cuadros de mensaje o realizar consultas además de llamar a la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> método. Texto escrito en el archivo de registro no se verán por el usuario a menos que InstallUtil.exe se usa para ejecutar la instalación y "/ LogToConsole = true" se especifica en la línea de comandos.  
  
   
  
## Examples  
 En este ejemplo es un extracto del ejemplo en la información general de la clase de <xref:System.Configuration.Install.InstallContext> clase.  
  
 Usa el <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> método para averiguar si el `LogtoConsole` se ha establecido el parámetro. Si `yes`, se utilizará el <xref:System.Configuration.Install.InstallContext.LogMessage%2A> método para escribir mensajes de estado en el archivo de registro de instalación y la consola.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los parámetros de la línea de comandos que se especificaron al ejecutar InstallUtil.exe.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> que representa los parámetros de la línea de comandos que se especificaron al ejecutar el ejecutable de instalación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una nueva <xref:System.Configuration.Install.InstallContext> se crea, la línea de comandos se analizan los parámetros en el <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad. Las claves y los valores de los parámetros son cadenas.  
  
   
  
## Examples  
 En este ejemplo es un extracto del ejemplo en la información general de la clase de <xref:System.Configuration.Install.InstallContext> clase.  
  
 El ejemplo recupera el <xref:System.Configuration.Install.InstallContext.Parameters%2A> propiedad para ver si el usuario ha escrito uno de los argumentos de línea de comandos. También usa el <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> método para averiguar si el `LogtoConsole` se ha establecido el parámetro. Si `yes`, se utilizará el <xref:System.Configuration.Install.InstallContext.LogMessage%2A> método para escribir mensajes de estado en el archivo de registro de instalación y la consola.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member ParseCommandLine : string[] -&gt; System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.ParseCommandLine args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Matriz que contiene los parámetros de la línea de comandos.</param>
        <summary>Analiza los parámetros de la línea de comandos en un diccionario de cadenas.</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> que contiene los parámetros analizados de la línea de comandos.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>