<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6312f62a7271a3ae638fe385dad862891597930" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51304378" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa la colección de objetos <see cref="T:System.IO.Log.LogExtent" /> asociados a un <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase contiene una colección de objetos <xref:System.IO.Log.LogExtent> asociados a un <xref:System.IO.Log.LogStore>. Una instancia de <xref:System.IO.Log.LogStore> almacena sus datos en una colección de extensiones de disco, que se representa mediante instancias de <xref:System.IO.Log.LogExtent>. Una <xref:System.IO.Log.LogExtent> particular está asociada a un <xref:System.IO.Log.LogStore>y los objetos <xref:System.IO.Log.LogExtent> en el mismo <xref:System.IO.Log.LogStore> son de tamaño idéntico. El espacio se agrega a y elimina de una instancia <xref:System.IO.Log.LogStore> en incrementos de la extensión.  
  
 Aunque los objetos <xref:System.IO.Log.LogExtent> se representan en disco como archivos, no se deberían mover ni eliminar como archivos normales. En su lugar, debería utilizar los métodos proporcionados por esta clase para agregar y eliminar instancias de <xref:System.IO.Log.LogExtent> directamente. Las extensiones se quitan normalmente cuando ya no contienen datos activos. Sin embargo, si el parámetro `force` del método <xref:System.IO.Log.LogExtentCollection.Remove%2A> es `true`, se produce una excepción si no se pueden quitar inmediatamente.  
  
 No se puede quitar la última extensión en <xref:System.IO.Log.LogExtentCollection>, lo que significa que la propiedad <xref:System.IO.Log.LogExtentCollection.Count%2A> no puede ser cero una vez agregada una extensión.  
  
   
  
## Examples  
 Este ejemplo muestra cómo utilizar las clases <xref:System.IO.Log.LogExtent> y <xref:System.IO.Log.LogExtentCollection> para agregar y emular extensiones en una secuencia de registro.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nueva <see cref="T:System.IO.Log.LogExtent" /> y la agrega a la colección.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso a la extensión de registro que se va a agregar.</param>
        <summary>Agrega una instancia de <see cref="T:System.IO.Log.LogExtent" /> a la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tamaño de la instancia de <xref:System.IO.Log.LogExtent> recientemente agregada es igual al tamaño de las instancias <xref:System.IO.Log.LogExtent> de la colección.  
  
> [!NOTE]
>  No utilice este método para agregar la primera <xref:System.IO.Log.LogExtent> a la colección.  
  
   
  
## Examples  
 Este ejemplo muestra cómo utilizar las clases <xref:System.IO.Log.LogExtent> y <xref:System.IO.Log.LogExtentCollection> para agregar y emular extensiones en una secuencia de registro.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El nombre del archivo de almacenamiento de registro especificado por <paramref name="path" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha de especificar un tamaño para la primera extensión.</exception>
        <exception cref="T:System.IO.IOException">La solicitud no se pudo realizar debido a una excepción de E/S inesperada.  
  
O bien 
No se puede crear el archivo especificado por <paramref name="path" /> porque el archivo o el directorio ya existe.</exception>
        <exception cref="T:System.ObjectDisposedException">Se llamó al método una vez eliminada la secuencia.</exception>
        <exception cref="T:System.OutOfMemoryException">No hay bastante memoria para continuar la ejecución del programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La secuencia del registro está completa.  
  
O bien 
El disco o medio de almacenamiento está lleno.</exception>
        <exception cref="T:System.UnauthorizedAccessException">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso a la extensión del registro.</param>
        <param name="size">Tamaño de la extensión del registro.</param>
        <summary>Crea una nueva <see cref="T:System.IO.Log.LogExtent" /> del tamaño especificado y la agrega a la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la colección no está vacía, el tamaño especificado debe ser al menos tan grande como el tamaño de las otras extensiones de la colección. En este caso, el parámetro `size` se pasa por alto y se crea la extensión con el mismo tamaño que las otras extensiones de la colección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="path" /> o <paramref name="size" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" /> no está dentro de un intervalo válido.</exception>
        <exception cref="T:System.ArgumentException">El nombre del archivo de almacenamiento de registro especificado por <paramref name="path" /> no es válido.  
  
 <paramref name="size" /> es menor que el tamaño de las otras extensiones del almacén.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha de especificar un tamaño para la primera extensión.  
  
O bien 
No se puede utilizar un nombre de extensión duplicado.</exception>
        <exception cref="T:System.IO.IOException">La solicitud no se pudo realizar debido a una excepción de E/S inesperada.  
  
O bien 
No se puede crear el archivo especificado por <paramref name="path" /> porque el archivo o el directorio ya existe.</exception>
        <exception cref="T:System.ObjectDisposedException">Se llamó al método una vez eliminada la secuencia.</exception>
        <exception cref="T:System.OutOfMemoryException">No hay bastante memoria para continuar la ejecución del programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La secuencia del registro está completa.  
  
O bien 
El disco o medio de almacenamiento está lleno.</exception>
        <exception cref="T:System.UnauthorizedAccessException">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de extensiones del registro de la colección.</summary>
        <value>Número de extensiones del registro de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este ejemplo muestra cómo utilizar las clases <xref:System.IO.Log.LogExtent> y <xref:System.IO.Log.LogExtentCollection> para agregar y emular extensiones en una secuencia de registro.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El almacén del registro se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de instancias de <see cref="T:System.IO.Log.LogExtent" /> libres de la colección, esto es, el número de instancias de <see cref="T:System.IO.Log.LogExtent" /> que no contienen datos.</summary>
        <value>El número de instancias <see cref="T:System.IO.Log.LogExtent" /> libres de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este ejemplo muestra cómo utilizar las clases <xref:System.IO.Log.LogExtent> y <xref:System.IO.Log.LogExtentCollection> para agregar y emular extensiones en una secuencia de registro.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El almacén del registro se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene un enumerador para las instancias de <see cref="T:System.IO.Log.LogExtent" /> de esta colección. Este método no puede heredarse.</summary>
        <returns>Un enumerador para las instancias de <see cref="T:System.IO.Log.LogExtent" /> de esta colección.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">La solicitud no se pudo realizar debido a una excepción de E/S inesperada.</exception>
        <exception cref="T:System.InvalidOperationException">La operación no es válida por una de estas razones: 
-   La enumeración ha finalizado.  
  
-   Se ha modificado la colección.  
  
-   La enumeración no se ha iniciado. Se debe realizar una llamada a <see cref="M:System.Collections.IEnumerator.MoveNext" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se llamó al método una vez eliminada la secuencia.</exception>
        <exception cref="T:System.OutOfMemoryException">No hay bastante memoria para continuar la ejecución del programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La secuencia del registro está completa.</exception>
        <exception cref="T:System.UnauthorizedAccessException">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quita una instancia de <see cref="T:System.IO.Log.LogExtent" /> de la colección.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">La instancia de <see cref="T:System.IO.Log.LogExtent" /> que se va a eliminar.</param>
        <param name="force"><see langword="true" /> si se debería quitar la extensión inmediatamente; de lo contrario, <see langword="false" />.</param>
        <summary>Quita la instancia de <see cref="T:System.IO.Log.LogExtent" /> especificada de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de <xref:System.IO.Log.LogExtent> sólo se puede quitar de la colección si no forma parte de la región activa del <xref:System.IO.Log.LogStore>. Si el parámetro `force` es `true` y la extensión no se puede quitar inmediatamente, se produce una excepción. Si el parámetro `force` es `false` y no se puede quitar la extensión, no se quitará hasta que no forme parte de la región activa.  
  
 No se puede quitar la última extensión de la <xref:System.IO.Log.LogExtentCollection>, lo que significa que la propiedad <xref:System.IO.Log.LogExtentCollection.Count%2A> no puede ser cero una vez agregada una extensión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="extent" /> o <paramref name="force" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="extent" /> no se puede encontrar en la colección.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="extent" /> no se puede quitar. Sigue siendo parte de la región activa o se deniega el acceso.</exception>
        <exception cref="T:System.IO.IOException">La solicitud no se pudo realizar debido a una excepción de E/S inesperada.  
  
O bien 
 <paramref name="extent" /> no se puede eliminar.</exception>
        <exception cref="T:System.ObjectDisposedException">Se llamó al método una vez eliminada la secuencia.</exception>
        <exception cref="T:System.OutOfMemoryException">No hay bastante memoria para continuar la ejecución del programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La secuencia del registro está completa.</exception>
        <exception cref="T:System.UnauthorizedAccessException">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">La ruta de la instancia <see cref="T:System.IO.Log.LogExtent" /> que se va a eliminar.</param>
        <param name="force"><see langword="true" /> si se debería quitar la extensión inmediatamente; de lo contrario, <see langword="false" />.</param>
        <summary>Quita la instancia de <see cref="T:System.IO.Log.LogExtent" /> con la ruta especificada de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de <xref:System.IO.Log.LogExtent> sólo se puede quitar de la colección si no forma parte de la región activa del <xref:System.IO.Log.LogStore>. Si el parámetro `force` es `true` y la extensión no se puede quitar inmediatamente, se produce una excepción. Si el parámetro `force` es `false` y no se puede quitar la extensión, no se quitará hasta que no forme parte de la región activa.  
  
 No se puede quitar la última extensión de la <xref:System.IO.Log.LogExtentCollection>, lo que significa que la propiedad <xref:System.IO.Log.LogExtentCollection.Count%2A> no puede ser cero una vez agregada una extensión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="path" /> o <paramref name="force" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La extensión especificada por <paramref name="path" /> no se puede encontrar en la colección.</exception>
        <exception cref="T:System.InvalidOperationException">No se puede quitar la extensión especificada por <paramref name="path" />. Sigue siendo parte de la región activa o se deniega el acceso.</exception>
        <exception cref="T:System.IO.IOException">La solicitud no se pudo realizar debido a una excepción de E/S inesperada.  
  
O bien 
No se puede eliminar la extensión especificada por <paramref name="path" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se llamó al método una vez eliminada la secuencia.</exception>
        <exception cref="T:System.OutOfMemoryException">No hay bastante memoria para continuar la ejecución del programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La secuencia del registro está completa.</exception>
        <exception cref="T:System.UnauthorizedAccessException">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene un enumerador para las instancias de <see cref="T:System.IO.Log.LogExtent" /> de esta colección. Este método no puede heredarse.</summary>
        <returns>Un enumerador para las instancias de <see cref="T:System.IO.Log.LogExtent" /> de esta colección.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>