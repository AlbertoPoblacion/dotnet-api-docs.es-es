<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa793273dbcd2a8e8cddc5d93a374542a76bcf24" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63905703" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Recupera las exportaciones que coinciden con un objeto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificado.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambian las exportaciones en la clase <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambian las exportaciones especificadas.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene la exportación especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parámetro de tipo del objeto <see cref="T:System.Lazy`1" /> que se va a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <summary>Devuelve la exportación con el nombre de contrato derivado del parámetro de tipo especificado. Si no hay exactamente una exportación coincidente, se iniciará una excepción.</summary>
        <returns>Exportación con el nombre de contrato derivado del parámetro de tipo especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos <see cref="T:System.Lazy`1" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto <see cref="T:System.Lazy`1" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parámetro de tipo del objeto <see cref="T:System.Lazy`1" /> que se va a devolver.</typeparam>
        <param name="contractName">Nombre de contrato del objeto <see cref="T:System.Lazy`1" /> que se va a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Devuelve la exportación con el nombre de contrato especificado. Si no hay exactamente una exportación coincidente, se iniciará una excepción.</summary>
        <returns>Exportación con el nombre de contrato especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos <see cref="T:System.Lazy`1" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto <see cref="T:System.Lazy`1" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parámetro de tipo del objeto <see cref="T:System.Lazy`2" /> que se va a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo de la vista de metadatos del objeto <see cref="T:System.Lazy`2" /> que se va a devolver.</typeparam>
        <summary>Devuelve la exportación con el nombre de contrato derivado del parámetro de tipo especificado. Si no hay exactamente una exportación coincidente, se iniciará una excepción.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos <see cref="T:System.Lazy`2" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto <see cref="T:System.Lazy`2" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> no es un tipo de vista de metadatos válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parámetro de tipo del objeto <see cref="T:System.Lazy`2" /> que se va a devolver.</typeparam>
        <typeparam name="TMetadataView">Tipo de la vista de metadatos del objeto <see cref="T:System.Lazy`2" /> que se va a devolver.</typeparam>
        <param name="contractName">Nombre de contrato del objeto <see cref="T:System.Lazy`2" /> que se va a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Devuelve la exportación con el nombre de contrato especificado. Si no hay exactamente una exportación coincidente, se iniciará una excepción.</summary>
        <returns>Exportación con el nombre de contrato especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos <see cref="T:System.Lazy`2" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto <see cref="T:System.Lazy`2" /> con el nombre de contrato derivado de <paramref name="T" /> en el objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> no es un tipo de vista de metadatos válido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene un objeto exportado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <summary>Devuelve el objeto exportado con el nombre de contrato derivado del parámetro de tipo especificado. Si no hay exactamente un objeto exportado coincidente, se iniciará una excepción.</summary>
        <returns>Objeto exportado con el nombre de contrato derivado del parámetro de tipo especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos exportados con el nombre de contrato derivado de <paramref name="T" /> en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto exportado con el nombre de contrato derivado de <paramref name="T" /> en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir el objeto exportado subyacente en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver.</typeparam>
        <param name="contractName">Nombre de contrato del objeto exportado que se va a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Devuelve el objeto exportado con el nombre de contrato especificado. Si no hay exactamente un objeto exportado coincidente, se iniciará una excepción.</summary>
        <returns>Objeto exportado con el nombre de contrato especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay cero objetos exportados con el nombre de contrato derivado de <paramref name="T" /> en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
O bien 
Hay más de un objeto exportado con el nombre de contrato derivado de <paramref name="T" /> en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir el objeto exportado subyacente en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el objeto exportado especificado o un valor predeterminado si no está disponible.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <summary>Obtiene el objeto exportado con el nombre de contrato derivado del parámetro de tipo especificado o el valor predeterminado del tipo especificado, o bien inicia una excepción si hay más de un objeto exportado coincidente.</summary>
        <returns>Objeto exportado con el nombre de contrato derivado de <paramref name="T" />, si se encuentra; de lo contrario, devuelve el valor predeterminado de <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se encuentra el objeto exportado, este método devuelve el valor predeterminado adecuado para `T`; por ejemplo, cero para tipos enteros, `false` para tipos booleanos, y `null` para tipos de referencia.  
  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay más de un objeto exportado con el nombre de contrato derivado de <paramref name="T" /> en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir el objeto exportado subyacente en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver.</typeparam>
        <param name="contractName">Nombre de contrato del objeto exportado que se va a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Obtiene el objeto exportado con el nombre de contrato especificado o el valor predeterminado del tipo especificado, o bien inicia una excepción si hay más de un objeto exportado coincidente.</summary>
        <returns>Objeto exportado con el nombre de contrato especificado, si se encuentra; de lo contrario, devuelve el valor predeterminado de <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se encuentra el objeto exportado, este método devuelve el valor predeterminado adecuado para `T`; por ejemplo, cero para tipos enteros, `false` para tipos booleanos, y `null` para tipos de referencia.  
  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Hay más de un objeto exportado con el nombre de contrato especificado en <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir el objeto exportado subyacente en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene uno o varios objetos exportados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <summary>Obtiene todos los objetos exportados con el nombre de contrato derivado del parámetro de tipo especificado.</summary>
        <returns>Objetos exportados con el nombre de contrato derivado del parámetro de tipo especificado, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.ObjectModel.Collection`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir uno o varios de los objetos exportados subyacentes en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo del objeto exportado que se va a devolver.</typeparam>
        <param name="contractName">Nombre de contrato de los objetos exportados que se van a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Obtiene todos los objetos exportados con el nombre de contrato especificado.</summary>
        <returns>Objetos exportados con el nombre de contrato especificado, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.ObjectModel.Collection`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">No es posible convertir uno o varios de los valores exportados subyacentes en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Error durante la composición. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contendrá una colección de los errores que se han producido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene todas las exportaciones que cumplen las condiciones especificadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Objeto que define las condiciones de los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que se van a obtener.</param>
        <summary>Obtiene todas las exportaciones que cumplen las condiciones de la definición de importación especificada.</summary>
        <returns>Colección de todos los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumplen la condición especificada por <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">El valor de <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> y hay cero objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumplen las condiciones del objeto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificado.  
  
O bien 
 El valor de <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> y hay más de un objeto <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumple las condiciones del objeto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificado.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Objeto que define las condiciones de los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que se van a obtener.</param>
        <param name="atomicComposition">Contenedor transaccional de la composición.</param>
        <summary>Obtiene todas las exportaciones que cumplen las condiciones de la definición de importación y la composición especificadas.</summary>
        <returns>Colección de todos los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumplen la condición especificada por <paramref name="definition" /> y <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">El valor de <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> y hay cero objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumplen las condiciones del objeto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificado.  
  
O bien 
 El valor de <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> y hay más de un objeto <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumple las condiciones del objeto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificado.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> es <see langword="null" />.  
  
O bien 
 <paramref name="atomicComposition" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Parámetro de tipo de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver.</param>
        <param name="metadataViewType">Tipo de la vista de metadatos de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver.</param>
        <param name="contractName">Nombre de contrato del objeto <see cref="T:System.Lazy`2" /> que se va a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Obtiene todas las exportaciones con el nombre de contrato especificado.</summary>
        <returns>Colección de todos los objetos <see cref="T:System.Lazy`2" /> con el nombre de contrato especificado por <paramref name="contractName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `type`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="metadataViewType" /> no es un tipo de vista de metadatos válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parámetro de tipo de los objetos <see cref="T:System.Lazy`1" /> que se van a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <summary>Obtiene todas las exportaciones con el nombre de contrato derivado del parámetro de tipo especificado.</summary>
        <returns>Objetos <see cref="T:System.Lazy`1" /> con el nombre de contrato derivado de <paramref name="T" />, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parámetro de tipo de los objetos <see cref="T:System.Lazy`1" /> que se van a devolver.</typeparam>
        <param name="contractName">Nombre de contrato de los objetos <see cref="T:System.Lazy`1" /> que se van a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Obtiene todas las exportaciones con el nombre de contrato especificado.</summary>
        <returns>Objetos <see cref="T:System.Lazy`1" /> con el nombre de contrato especificado, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parámetro de tipo de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo de la vista de metadatos de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver.</typeparam>
        <summary>Obtiene todas las exportaciones con el nombre de contrato derivado del parámetro de tipo especificado.</summary>
        <returns>Objetos <see cref="T:System.Lazy`2" /> con el nombre de contrato derivado de <paramref name="T" />, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> no es un tipo de vista de metadatos válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parámetro de tipo de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver. El nombre del contrato también se deriva de este parámetro de tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo de la vista de metadatos de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver.</typeparam>
        <param name="contractName">Nombre de contrato de los objetos <see cref="T:System.Lazy`2" /> que se van a devolver; <see langword="null" /> o una cadena vacía ("") para usar el nombre de contrato predeterminado.</param>
        <summary>Obtiene todas las exportaciones con el nombre de contrato especificado.</summary>
        <returns>Objetos <see cref="T:System.Lazy`2" /> con el nombre de contrato especificado, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de contrato predeterminado es el resultado de llamar a la <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> método `T`.  
  
 El nombre de contrato se compara utilizando el <xref:System.StringComparer.Ordinal%2A> propiedad para realizar una comparación no lingüística, distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> no es un tipo de vista de metadatos válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Objeto que define las condiciones de los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que se van a devolver.</param>
        <param name="atomicComposition">Contenedor transaccional de la composición.</param>
        <summary>Obtiene todas las exportaciones que cumplen la restricción definida por la definición especificada.</summary>
        <returns>Colección que contiene todas las exportaciones que cumplen la condición especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidaciones de este método no deberían tratar las divergencias relacionadas con la cardinalidad como errores y no deberían producir excepciones en esos casos. Por ejemplo, si <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> es <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> y hay cero <xref:System.ComponentModel.Composition.Primitives.Export> objetos que cumplen las condiciones del elemento especificado <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>, vacía <xref:System.Collections.Generic.IEnumerable%601> se debe devolver la colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Objeto que define las condiciones de los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que se van a obtener.</param>
        <param name="atomicComposition">Contenedor transaccional de la composición.</param>
        <param name="exports">Cuando este método devuelve un valor, contiene una colección de los objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que cumplen las condiciones definidas por <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, si se encuentran; de lo contrario, devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacío. Este parámetro se pasa sin inicializar.</param>
        <summary>Obtiene todas las exportaciones que cumplen las condiciones de la importación especificada.</summary>
        <returns><see langword="true" /> si <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> y hay cero objetos <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que coincidan con las condiciones de la clase <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificada; <see langword="true" /> si <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> es <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> y hay exactamente una clase <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> que coincide con las condiciones de la clase <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> especificada; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>