<Type Name="AuthenticationManager" FullName="System.Net.AuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6557aa33b5dbcbdad923774777f049037478e1e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39959113" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthenticationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.AuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthenticationManager" />
  <TypeSignature Language="F#" Value="type AuthenticationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Administra los módulos de autenticación a los que se llama durante el proceso de autenticación del cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager> es una clase estática que administra los módulos de autenticación que utiliza una aplicación. Cuando se realiza una solicitud a recursos protegidos, el <xref:System.Net.AuthenticationManager> llamadas la <xref:System.Net.AuthenticationManager.Authenticate%2A> método para obtener un <xref:System.Net.Authorization> instancia que se utiliza en las solicitudes posteriores.  
  
 El <xref:System.Net.AuthenticationManager> consulta cada módulo de autenticación registrado mediante una llamada a la <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> método para cada módulo. El primer módulo de autenticación para devolver un <xref:System.Net.Authorization> instancia se usa para autenticar la solicitud.  
  
 Los módulos que proporcionan la básica, implícita, negotiate, NTLM, y los tipos de autenticación de Kerberos están registrados con el <xref:System.Net.AuthenticationManager> de forma predeterminada. Los módulos de autenticación adicional que implementan la <xref:System.Net.IAuthenticationModule> interfaz se puede agregar utilizando el <xref:System.Net.AuthenticationManager.Register%2A> método. Módulos de autenticación se llaman en el orden en que se agregaron a la lista.  
  
> [!NOTE]
>  Kerberos y negotiate no se admite el tipo de autenticación en Windows 95/98 o Windows NT 4.0.  
  
   
  
## Examples  
 [!code-cpp[System.Net.Authentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#1)]
 [!code-csharp[System.Net.Authentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#1)]
 [!code-vb[System.Net.Authentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization Authenticate(string challenge, class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (challenge As String, request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ Authenticate(System::String ^ challenge, System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.Authenticate (challenge, request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="System.String" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="challenge">Desafío devuelto por el recurso de Internet.</param>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> que inició el desafío de autenticación.</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> asociadas a esta solicitud.</param>
        <summary>Llama a cada uno de los módulos de autenticación registrados para encontrar el primer módulo que pueda responder a la solicitud de autenticación.</summary>
        <returns>Instancia de la clase <see cref="T:System.Net.Authorization" /> que contiene el resultado del intento de autorización. Si no hay ningún módulo de autenticación que responda al desafío, el método devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.AuthenticationManager.Authenticate%2A> llamadas al método el <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> método en cada módulo de autenticación registrado hasta que uno de los módulos responda con una <xref:System.Net.Authorization> instancia.  
  
 La primera <xref:System.Net.Authorization> instancia devuelta se utiliza para autenticar la solicitud. Si no hay ningún módulo de autenticación puede autenticar la solicitud, el <xref:System.Net.AuthenticationManager.Authenticate%2A> devuelve del método `null`.  
  
 Se llama a los módulos de autenticación en el orden en el que se registran con el <xref:System.Net.AuthenticationManager>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="challenge" /> es <see langword="null" />.  
  
O bien 
 <paramref name="request" /> es <see langword="null" />.  
  
O bien 
 <paramref name="credentials" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CredentialPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentialPolicy CredentialPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CredentialPolicy As ICredentialPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentialPolicy ^ CredentialPolicy { System::Net::ICredentialPolicy ^ get(); void set(System::Net::ICredentialPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CredentialPolicy : System.Net.ICredentialPolicy with get, set" Usage="System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la directiva de credenciales que se utilizará para las solicitudes de recursos realizadas con la clase <see cref="T:System.Net.HttpWebRequest" />.</summary>
        <value>Un objeto que implementa la interfaz <see cref="T:System.Net.ICredentialPolicy" /> que determina si se envían credenciales con las solicitudes. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La directiva de credenciales determina si se debe enviar las credenciales al enviar una solicitud para un recurso de red, como el contenido de una página Web. Si se envían las credenciales, los servidores que requieren autenticación de cliente pueden intentar autenticar al cliente cuando se recibe la solicitud en lugar de enviar una respuesta que indica que se requieren las credenciales del cliente. Aunque esto ahorra un ida y vuelta al servidor, esto se debe valorar el riesgo de seguridad inherentes a enviar credenciales a través de la red. Cuando el servidor de destino no requiere autenticación del cliente es mejor no enviar las credenciales.  
  
 La directiva de credenciales se llamará solo para las solicitudes que especifican las credenciales o usarán un <xref:System.Net.WebProxy> objeto que especifica las credenciales.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer la directiva de credenciales.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTargetNameDictionary">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.StringDictionary CustomTargetNameDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CustomTargetNameDictionary As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Specialized::StringDictionary ^ CustomTargetNameDictionary { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTargetNameDictionary : System.Collections.Specialized.StringDictionary" Usage="System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el diccionario que contiene los Nombres de entidad de seguridad de servicio (SPN) utilizados para identificar los hosts durante la autenticación Kerberos para las solicitudes realizadas utilizando <see cref="T:System.Net.WebRequest" /> y sus clases derivadas.</summary>
        <value>Un objeto <see cref="T:System.Collections.Specialized.StringDictionary" /> en el que se puede escribir que contiene los valores SPN para las claves compuestas de información de host.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un SPN es un nombre por el que un cliente identifica una instancia de un servicio o aplicación en un servidor con fines de autenticación mutua. Se solicita la autenticación mutua de forma predeterminada, y puede requerir estableciendo <xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=nameWithType> a <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> en la solicitud.  
  
 Cuando un <xref:System.Net.WebRequest> requiere autenticación mutua, el SPN para el destino debe ser suministrado por el cliente. Si conoce el SPN, puede agregarlo a la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> antes de enviar la solicitud. Si no ha agregado información de SPN a este diccionario, la <xref:System.Net.AuthenticationManager> usa el <xref:System.Net.WebRequest.RequestUri%2A> método para crear el SPN probablemente; sin embargo, esto es un valor calculado y podría ser incorrecta. Si se intenta la autenticación mutua y se produce un error, puede comprobar el diccionario para determinar el SPN calculado. Si el protocolo de autenticación no es compatible con la autenticación mutua, no se especifica ningún SPN en el diccionario.  
  
 Para agregar un valor SPN a este diccionario, utilice el <xref:System.Uri.AbsoluteUri%2A> de la <xref:System.Net.WebRequest.RequestUri%2A> como clave. Internamente, la clave se trunca para incluir el <xref:System.Uri.Scheme%2A>, <xref:System.Uri.Host%2A>y el <xref:System.Uri.Port%2A> si no es el puerto predeterminado.  
  
> [!NOTE]
>  Obtener acceso a los métodos y propiedades de la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> requiere sin restricciones <xref:System.Net.WebPermission>.  
  
> [!NOTE]
>  Cuando se realiza la autenticación Kerberos a través de un proxy, el proxy y el nombre de host ultimate deben resolverse como un SPN. La resolución de nombres del proxy está protegida por un tiempo de espera. La resolución del nombre de host ultimate un SPN requiere una búsqueda de DNS y no hay ningún tiempo de espera asociado directamente a esta operación. Por lo tanto, las operaciones sincrónicas pueden tardar más tiempo de espera. Para solucionar este problema, agregar el prefijo de identificador URI del host ultimate a la caché SPN antes de realizar solicitudes a él.  
  
 Ahora el comportamiento predeterminado de SP1 versión 3.5 es especificar el nombre de host usado en la dirección URL de solicitud del SPN en el intercambio de autenticación NTLM (NT LAN Manager) cuando la propiedad <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> no está establecida. El nombre de host usado en la dirección URL de solicitud puede ser diferente al encabezado de host especificado en <xref:System.Net.HttpRequestHeader?displayProperty=nameWithType> en la solicitud de cliente. El nombre de host usado en la dirección URL de solicitud puede ser diferente al nombre de host real del servidor, el nombre de equipo del servidor, la dirección IP del equipo o la dirección de bucle invertido. En estos casos se produce un error en la solicitud de autenticación de Windows. Para solucionar el problema, es posible que deba notificar a Windows que usa el nombre de host en la dirección URL de solicitud en el cliente de solicitud (por ejemplo, "contoso") es realmente un nombre alternativo para el equipo local.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el contenido de la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>.  
  
 [!code-cpp[NclCredPolicy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#5)]
 [!code-csharp[NclCredPolicy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization PreAuthenticate(class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PreAuthenticate (request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ PreAuthenticate(System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member PreAuthenticate : System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.PreAuthenticate (request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> realizada en un recurso de Internet.</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> asociadas a la solicitud.</param>
        <summary>Realiza la autenticación previa de una solicitud.</summary>
        <returns>Es una instancia de la clase <see cref="T:System.Net.Authorization" /> si se puede realizar la autenticación previa de la solicitud; de lo contrario es <see langword="null" />. Si <paramref name="credentials" /> es <see langword="null" /> este método devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el módulo de autenticación puede realizar la autenticación previa la solicitud, el <xref:System.Net.AuthenticationManager.PreAuthenticate%2A> método devuelve una instancia de la autenticación y envía la información de autorización al servidor en lugar de esperar el recurso emitir un desafío. Este comportamiento se describe en la sección 3.3 de RFC 2617 (HTTP Authentication: Basic and Digest Authentication de acceso). Los módulos de autenticación que admiten la autenticación previa permiten a los clientes mejorar la eficacia de servidor, ya que evita adicionales ciclos de ida y causados por los desafíos de autenticación.  
  
 Conjunto de solicitudes de los módulos de autorización que pueden realizar la autenticación previa del <xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=nameWithType> propiedad `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="request" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Register (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Register : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Register authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> que se va a registrar con el administrador de autenticación.</param>
        <summary>Registra un módulo de autenticación con el administrador de autenticación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.AuthenticationManager.Register%2A> método agrega módulos de autenticación al final de la lista de módulos llamados por el <xref:System.Net.AuthenticationManager.Authenticate%2A> método. Módulos de autenticación se llaman en el orden en que se agregaron a la lista. Si un módulo con el mismo <xref:System.Net.IAuthenticationModule.AuthenticationType%2A> está ya registrada, este método quita el módulo registrado y agrega `authenticationModule` al final de la lista.  
  
   
  
## Examples  
 El ejemplo siguiente registra un módulo de autenticación con el Administrador de autenticación. Para obtener un ejemplo completo, consulte el <xref:System.Net.AuthenticationManager> clase.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para ejecutar código no administrado. Enumeración asociada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RegisteredModules">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator RegisteredModules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEnumerator RegisteredModules" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.RegisteredModules" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RegisteredModules As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::IEnumerator ^ RegisteredModules { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegisteredModules : System.Collections.IEnumerator" Usage="System.Net.AuthenticationManager.RegisteredModules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una lista de módulos de autenticación registrados con el administrador de autenticación.</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" /> que permite leer los módulos de autenticación registrados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propiedad proporciona un <xref:System.Collections.IEnumerator> registrado de instancia que permite a la lista de módulos de autenticación se puede leer. El <xref:System.Net.AuthenticationManager.Register%2A> método agrega módulos a la lista y el <xref:System.Net.AuthenticationManager.Unregister%2A> método quita módulos de él.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propiedad para obtener una lista de módulos de autenticación que están registrados con el Administrador de autenticación. Para obtener un ejemplo completo, consulte el <xref:System.Net.AuthenticationManager> clase.  
  
 [!code-cpp[System.Net.Authentication#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#8)]
 [!code-csharp[System.Net.Authentication#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#8)]
 [!code-vb[System.Net.Authentication#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unregister">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quita módulos de autenticación de la lista de módulos registrados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Unregister : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> que se va a quitar de la lista de módulos registrados.</param>
        <summary>Quita el módulo de autenticación especificado de la lista de módulos registrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.AuthenticationManager.Unregister%2A> método quita el módulo de autenticación especificado en la lista de módulos de autenticación lo llamadas el <xref:System.Net.AuthenticationManager.Authenticate%2A> método. El módulo se han agregado a la lista mediante el <xref:System.Net.AuthenticationManager.Register%2A> método antes de que se pueda quitar de la lista.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Net.AuthenticationManager.Unregister%2A> método para quitar el módulo de autenticación especificado de la lista de módulos registrados. Para obtener un ejemplo completo, consulte el <xref:System.Net.AuthenticationManager> clase.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No está registrado el <see cref="T:System.Net.IAuthenticationModule" /> especificado.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para ejecutar código no administrado. Enumeración asociada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string authenticationScheme);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string authenticationScheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationScheme As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ authenticationScheme);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationScheme" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationScheme" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationScheme">Esquema de autenticación del módulo que se va a quitar.</param>
        <summary>Quita módulos de autenticación con el esquema de autenticación especificado de la lista de módulos registrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.AuthenticationManager.Unregister%2A> método quita el módulo de autenticación con el esquema de autenticación especificado en la lista de módulos de autenticación lo llamadas el <xref:System.Net.AuthenticationManager.Authenticate%2A> método. El módulo se han agregado a la lista mediante el <xref:System.Net.AuthenticationManager.Register%2A> método antes de que se pueda quitar de la lista.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Net.AuthenticationManager.Unregister%2A> método para quitar un módulo de autenticación con el esquema de autenticación especificado de la lista de módulos registrados.  
  
 [!code-cpp[AuthenticationManager_UnRegister2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CPP/authenticationmanager_unregister2.cpp#2)]
 [!code-csharp[AuthenticationManager_UnRegister2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CS/authenticationmanager_unregister2.cs#2)]
 [!code-vb[AuthenticationManager_UnRegister2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/VB/authenticationmanager_unregister2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationScheme" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No está registrado un módulo de este esquema de autenticación.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para ejecutar código no administrado. Enumeración asociada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>