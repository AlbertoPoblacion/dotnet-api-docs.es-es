<Type Name="WebPermission" FullName="System.Net.WebPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12b09b1670949b5844035bbdb9af3f87c21360d8" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53503871" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit WebPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPermission&#xA;Inherits CodeAccessPermission&#xA;Implements IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPermission sealed : System::Security::CodeAccessPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type WebPermission = class&#xA;    inherit CodeAccessPermission&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controla los derechos de acceso a los recursos HTTP de Internet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission> Proporciona un conjunto de métodos y propiedades para controlar el acceso a recursos de Internet. Puede usar un <xref:System.Net.WebPermission> proporcionar acceso restringido o sin restricción a su recurso, basándose en la <xref:System.Security.Permissions.PermissionState> que se establece cuando el <xref:System.Net.WebPermission> se crea.  
  
 Crear un <xref:System.Net.WebPermission> instancia mediante una llamada a su constructor con uno de los siguientes conjuntos de parámetros:  
  
-   Sin parámetros. El valor predeterminado de <xref:System.Security.Permissions.PermissionState> es <xref:System.Security.Permissions.PermissionState.None>.  
  
-   Objeto <xref:System.Security.Permissions.PermissionState>. Especificar <xref:System.Security.Permissions.PermissionState.Unrestricted> para permitir que cualquier URI que se usará en la clase de destino o <xref:System.Security.Permissions.PermissionState.None> para permitir el acceso solo a los URI que especifican mediante el uso de la <xref:System.Net.WebPermission.AddPermission%2A> método.  
  
-   Un <xref:System.Net.NetworkAccess> valor y una cadena URI. El URI especificado tiene los permisos concedidos por la <xref:System.Net.NetworkAccess> valor.  
  
-   Un <xref:System.Net.NetworkAccess> especificador y la expresión regular URI.  
  
 El <xref:System.Net.WebPermission.ConnectList%2A> y <xref:System.Net.WebPermission.AcceptList%2A> contienen los identificadores URI a los que hayan concedido el permiso de acceso. Para agregar un URI a cualquiera de estas listas, use <xref:System.Net.WebPermission.AddPermission%2A>. Si se pasa <xref:System.Net.NetworkAccess.Accept> como el <xref:System.Net.NetworkAccess> parámetro, el URI se agregará a la <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> va a permitir conexiones a la clase de destino con los URI de coincidencia del <xref:System.Net.WebPermission.AcceptList%2A>.  
  
> [!CAUTION]
>  Para denegar el acceso a un recurso de Internet, debe denegar el acceso a todas las posibles rutas de acceso a ese recurso. Esto requiere que realiza la llamada <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=nameWithType> con el parámetro de estado establecido en <xref:System.Security.CodeAccessPermission.Deny%2A>. Un mejor enfoque es permitir el acceso a solo el recurso específico. Para obtener más información acerca de este tema, consulte el [NIB: Utilizar el método Deny](https://msdn.microsoft.com/library/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) tema.  
  
> [!NOTE]
>  Debe denegar el acceso utilizando solo la ruta canónica del recurso. No hay ninguna necesidad de usar variaciones sintácticas todas la ruta de acceso.  
  
> [!NOTE]
>  Información de puerto predeterminada y el nombre de usuario se elimina de la <xref:System.Uri> antes de la comparación con el argumento de expresión regular que se proporciona a los <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. Si la expresión regular contiene información de usuario o el número de puerto predeterminado, todos los entrantes <xref:System.Uri>s se producirá un error para que coincida con la expresión regular.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una nueva instancia de <xref:System.Net.WebPermission> mediante un <xref:System.Text.RegularExpressions.Regex>. Hosts adicionales se agregan a la conexión y aceptar la lista de <xref:System.Net.WebPermission>. Por último, la conexión y aceptar la lista se muestran en la consola.  
  
 [!code-cpp[WebPermission_Regex#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Regex/CPP/regex.cpp#1)]
 [!code-csharp[WebPermission_Regex#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Regex/CS/regex.cs#1)]
 [!code-vb[WebPermission_Regex#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Regex/VB/regex.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.CodeAccessPermission" />
    <altmember cref="T:System.Security.Permissions.PermissionState" />
    <altmember cref="T:System.Net.NetworkAccess" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Net.WebPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Net.WebPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crea una nueva instancia de la clase <xref:System.Net.WebPermission>. Este constructor crea un permiso vacío que no concede ningún derecho.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.IsUnrestricted" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Security::Permissions::PermissionState state);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Security.Permissions.PermissionState -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Valor <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Net.WebPermission" /> que aprueba todas las solicitudes o las desaprueba.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la `state` parámetro sea <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType> o <xref:System.Security.Permissions.PermissionState.Unrestricted?displayProperty=nameWithType>respectivamente produciendo totalmente restringido o completamente acceso sin restricciones a todas las variables de seguridad. Si especifica <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>, a continuación, puede dar acceso a los URI individuales mediante <xref:System.Net.WebPermission.AddPermission%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una instancia de <xref:System.Net.WebPermission> y proporciona derechos de acceso a direcciones URL específicas.  
  
 [!code-cpp[WebPermission_Copy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#1)]
 [!code-csharp[WebPermission_Copy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#1)]
 [!code-vb[WebPermission_Copy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Security.Permissions.PermissionState.Unrestricted" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Net.NetworkAccess access, string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.NetworkAccess access, string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (access As NetworkAccess, uriString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Net::NetworkAccess access, System::String ^ uriString);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Net.NetworkAccess * string -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission (access, uriString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">Valor de NetworkAccess que indica el tipo de acceso que se debe conceder al URI especificado. <see cref="F:System.Net.NetworkAccess.Accept" /> indica que la aplicación puede aceptar conexiones de Internet en un recurso local. <see cref="F:System.Net.NetworkAccess.Connect" /> indica que la aplicación puede conectarse a recursos de Internet específicos.</param>
        <param name="uriString">Cadena URI a la que se conceden derechos de acceso.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.WebPermission" /> con los derechos de acceso especificados para el URI indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa un <xref:System.Net.WebPermission> y concede el permiso de destino para establecer un control remoto hospedar conexión o acepte la conexión con un host remoto mediante el URI descrito por el `uriString` parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una nueva instancia de <xref:System.Net.WebPermission> con derechos de conexión para el URI especificado.  
  
 [!code-cpp[WebPermission_Union#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#1)]
 [!code-csharp[WebPermission_Union#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#1)]
 [!code-vb[WebPermission_Union#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.NetworkAccess access, class System.Text.RegularExpressions.Regex uriRegex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (access As NetworkAccess, uriRegex As Regex)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Net::NetworkAccess access, System::Text::RegularExpressions::Regex ^ uriRegex);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Net.NetworkAccess * System.Text.RegularExpressions.Regex -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission (access, uriRegex)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriRegex" Type="System.Text.RegularExpressions.Regex" />
      </Parameters>
      <Docs>
        <param name="access">Valor de <see cref="T:System.Net.NetworkAccess" /> que indica el tipo de acceso que se debe conceder al URI especificado. <see cref="F:System.Net.NetworkAccess.Accept" /> indica que la aplicación puede aceptar conexiones de Internet en un recurso local. <see cref="F:System.Net.NetworkAccess.Connect" /> indica que la aplicación puede conectarse a recursos de Internet específicos.</param>
        <param name="uriRegex">Una expresión regular que describe el URI al que se concede acceso.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.WebPermission" /> con los derechos de acceso especificados para la expresión regular URI indicada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa un <xref:System.Net.WebPermission> y concede el permiso de destino para establecer un control remoto hospedar conexión o acepte la conexión con un host remoto mediante el URI descrito por el `uriRegex` parámetro.  
  
> [!NOTE]
>  Se recomienda que cree `uriRegex` utilizando el <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>, <xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType>, y <xref:System.Text.RegularExpressions.RegexOptions.Singleline?displayProperty=nameWithType> marcas.  
  
> [!NOTE]
>  Un cadena de URI de candidato se coteja con la lista de expresiones regulares pertinentes (<xref:System.Net.WebPermission.AcceptList%2A> o <xref:System.Net.WebPermission.ConnectList%2A>) de dos maneras. En primer lugar, se comprueba la cadena URI candidato con la lista adecuada; a continuación, si no hay ninguna coincidencia, la cadena de URI de candidato se convierte en un <xref:System.Uri> y coteja con la lista correspondiente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una nueva instancia de <xref:System.Net.WebPermission> con derechos de conexión para el elemento especificado <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>.  
  
 [!code-cpp[WebPermission_Constructor4#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Constructor4/CPP/webpermission_constructor4.cpp#1)]
 [!code-csharp[WebPermission_Constructor4#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Constructor4/CS/webpermission_constructor4.cs#1)]
 [!code-vb[WebPermission_Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Constructor4/VB/webpermission_constructor4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="AcceptList">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator AcceptList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator AcceptList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebPermission.AcceptList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AcceptList As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IEnumerator ^ AcceptList { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AcceptList : System.Collections.IEnumerator" Usage="System.Net.WebPermission.AcceptList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad devuelve una enumeración de los permisos de aceptación única que ostenta este <see cref="T:System.Net.WebPermission" />. Los tipos de objeto posibles que contiene la enumeración que se devuelve son <see cref="T:System.String" /> y <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        <value>Interfaz <see cref="T:System.Collections.IEnumerator" /> que contiene permisos de aceptación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene una lista de los recursos locales que permite este <xref:System.Net.WebPermission>. La clase a la que se aplicó <xref:System.Net.WebPermission> solo tiene permiso para recibir una conexión entrante a los recursos locales que se encuentran en esta lista.  
  
> [!NOTE]
>  Puede agregar los identificadores URI a esta lista mediante <xref:System.Net.WebPermission.AddPermission%2A>.  
  
> [!NOTE]
>  Un cadena de URI de candidato se coteja con la lista de expresiones regulares pertinentes (<xref:System.Net.WebPermission.AcceptList%2A> o <xref:System.Net.WebPermission.ConnectList%2A>) de dos maneras. En primer lugar, se comprueba la cadena URI candidato con la lista adecuada; a continuación, si no hay ninguna coincidencia, la cadena de URI de candidato se convierte en un <xref:System.Uri> y coteja con la lista correspondiente.  
  
   
  
## Examples  
 El ejemplo siguiente imprime las direcciones URL en el <xref:System.Net.WebPermission.AcceptList%2A> en la consola.  
  
 [!code-cpp[WebPermission_AcceptConnectList#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#2)]
 [!code-csharp[WebPermission_AcceptConnectList#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#2)]
 [!code-vb[WebPermission_AcceptConnectList#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPermission">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega el URI especificado con los derechos de acceso indicados al <see cref="T:System.Net.WebPermission" /> actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPermission">
      <MemberSignature Language="C#" Value="public void AddPermission (System.Net.NetworkAccess access, string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPermission(valuetype System.Net.NetworkAccess access, string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPermission (access As NetworkAccess, uriString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPermission(System::Net::NetworkAccess access, System::String ^ uriString);" />
      <MemberSignature Language="F#" Value="member this.AddPermission : System.Net.NetworkAccess * string -&gt; unit" Usage="webPermission.AddPermission (access, uriString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access"><see cref="T:System.Net.NetworkAccess" /> que especifica los derechos de acceso que se conceden al URI.</param>
        <param name="uriString">Cadena que describe el URI al que se conceden derechos de acceso.</param>
        <summary>Agrega la cadena URI especificada con los derechos de acceso indicados al <see cref="T:System.Net.WebPermission" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si ha especificado <xref:System.Security.Permissions.PermissionState.None> como el <xref:System.Security.Permissions.PermissionState>, utilice <xref:System.Net.WebPermission.AddPermission%2A> para permitir el uso de `uriString` en la clase de destino. La forma en que `uriString` se puede usar el destino especificada por clase `access`. Especificar <xref:System.Net.NetworkAccess.Accept> como parámetro de acceso para agregar el URI especificado por el `uriString` acepta cadenas de parámetro a la lista de URI, o especificar <xref:System.Net.NetworkAccess.Connect> como el acceso a cadenas de conexión de parámetro para agregar el identificador URI a la lista de URI.  
  
> [!NOTE]
>  Una llamada a <xref:System.Net.WebPermission.AddPermission%2A> en <xref:System.Security.Permissions.PermissionState.Unrestricted> <xref:System.Net.WebPermission> no tendrán ningún efecto, ya que se concede permiso a todos los URI.  
  
> [!NOTE]
>  Un cadena de URI de candidato se coteja con la lista de expresiones regulares pertinentes (<xref:System.Net.WebPermission.AcceptList%2A> o <xref:System.Net.WebPermission.ConnectList%2A>) de dos maneras. En primer lugar, se comprueba la cadena URI candidato con la lista adecuada; a continuación, si no hay ninguna coincidencia, la cadena de URI de candidato se convierte en un <xref:System.Uri> y coteja con la lista correspondiente.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo agregar derechos de acceso a las cadenas de dirección URL determinadas.  
  
 [!code-cpp[WebPermission_Intersect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#2)]
 [!code-csharp[WebPermission_Intersect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#2)]
 [!code-vb[WebPermission_Intersect#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Net.NetworkAccess" />
      </Docs>
    </Member>
    <Member MemberName="AddPermission">
      <MemberSignature Language="C#" Value="public void AddPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPermission(valuetype System.Net.NetworkAccess access, class System.Text.RegularExpressions.Regex uriRegex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPermission (access As NetworkAccess, uriRegex As Regex)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPermission(System::Net::NetworkAccess access, System::Text::RegularExpressions::Regex ^ uriRegex);" />
      <MemberSignature Language="F#" Value="member this.AddPermission : System.Net.NetworkAccess * System.Text.RegularExpressions.Regex -&gt; unit" Usage="webPermission.AddPermission (access, uriRegex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriRegex" Type="System.Text.RegularExpressions.Regex" />
      </Parameters>
      <Docs>
        <param name="access">NetworkAccess que especifica los derechos de acceso que se conceden al URI.</param>
        <param name="uriRegex">Expresión regular que describe el conjunto de identificadores URI a los que se va a conceder derechos de acceso.</param>
        <summary>Agrega el URI especificado con los derechos de acceso indicados al <see cref="T:System.Net.WebPermission" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si ha especificado <xref:System.Security.Permissions.PermissionState.None> como el <xref:System.Security.Permissions.PermissionState>, utilice <xref:System.Net.WebPermission.AddPermission%2A> para permitir el uso de `uriRegex` en la clase de destino. Especificar <xref:System.Net.NetworkAccess.Accept> como el `access` parámetro para agregar el URI especificado por el `uriRegex` acepta cadenas de parámetro a la lista de URI, o especificar <xref:System.Net.NetworkAccess.Connect> como el acceso a cadenas de conexión de parámetro para agregar el identificador URI a la lista de URI.  
  
> [!NOTE]
>  Una llamada a <xref:System.Net.WebPermission.AddPermission%2A> en un <xref:System.Security.Permissions.PermissionState.Unrestricted> <xref:System.Net.WebPermission> instancia tendrá ningún efecto, como el permiso se concede a todos los URI.  
  
> [!NOTE]
>  Se recomienda que cree `uriRegex` utilizando el <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>, <xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType>, y <xref:System.Text.RegularExpressions.RegexOptions.Singleline?displayProperty=nameWithType> marcas.  
  
> [!NOTE]
>  Un cadena de URI de candidato se coteja con la lista de expresiones regulares pertinentes (<xref:System.Net.WebPermission.AcceptList%2A> o <xref:System.Net.WebPermission.ConnectList%2A>) de dos maneras. En primer lugar, se comprueba la cadena URI candidato con la lista adecuada; a continuación, si no hay ninguna coincidencia, la cadena de URI de candidato se convierte en un <xref:System.Uri> y coteja con la lista correspondiente.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Net.WebPermission.AddPermission%2A> para conceder derechos de acceso para el URI especificado.  
  
 [!code-cpp[WebPermission_IsSubset#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset/CPP/webpermission_issubset.cpp#1)]
 [!code-csharp[WebPermission_IsSubset#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset/CS/webpermission_issubset.cs#1)]
 [!code-vb[WebPermission_IsSubset#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset/VB/webpermission_issubset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="uriRegex" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Net.NetworkAccess" />
      </Docs>
    </Member>
    <Member MemberName="ConnectList">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator ConnectList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator ConnectList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebPermission.ConnectList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConnectList As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IEnumerator ^ ConnectList { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectList : System.Collections.IEnumerator" Usage="System.Net.WebPermission.ConnectList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad devuelve una enumeración de los permisos de conexión única que ostenta este <see cref="T:System.Net.WebPermission" />. Los tipos de objeto posibles que contiene la enumeración que se devuelve son <see cref="T:System.String" /> y <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        <value>Interfaz <see cref="T:System.Collections.IEnumerator" /> que contiene permisos de conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene una lista de los recursos remotos que permite este <xref:System.Net.WebPermission>. La clase a la que se aplicó <xref:System.Net.WebPermission> solo tiene permiso para conectar con los recursos que se encuentran en esta lista.  
  
> [!NOTE]
>  Puede agregar los identificadores URI a esta lista mediante <xref:System.Net.WebPermission.AddPermission%2A>.  
  
> [!NOTE]
>  Un cadena de URI de candidato se coteja con la lista de expresiones regulares pertinentes (<xref:System.Net.WebPermission.AcceptList%2A> o <xref:System.Net.WebPermission.ConnectList%2A>) de dos maneras. En primer lugar, se comprueba la cadena URI candidato con la lista adecuada; a continuación, si no hay ninguna coincidencia, la cadena de URI de candidato se convierte en un <xref:System.Uri> y coteja con la lista correspondiente.  
  
   
  
## Examples  
 El ejemplo siguiente imprime las direcciones URL en el <xref:System.Net.WebPermission.ConnectList%2A> en la consola.  
  
 [!code-cpp[WebPermission_AcceptConnectList#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#1)]
 [!code-csharp[WebPermission_AcceptConnectList#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#1)]
 [!code-vb[WebPermission_AcceptConnectList#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Security.IPermission" Usage="webPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia de un objeto <see cref="T:System.Net.WebPermission" />.</summary>
        <returns>Una nueva instancia de la clase <see cref="T:System.Net.WebPermission" /> con los mismos valores que la original.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Security.IPermission> devuelto por este representa método el mismo acceso a los recursos que el original <xref:System.Net.WebPermission>. Este método invalida <xref:System.Security.CodeAccessPermission.Copy%2A> y se implementa para admitir la <xref:System.Security.IPermission> interfaz.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una segunda instancia de <xref:System.Net.WebPermission> mediante <xref:System.Net.WebPermission.Copy%2A>. Esta segunda instancia es idéntica al primero.  
  
 [!code-cpp[WebPermission_Copy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#2)]
 [!code-csharp[WebPermission_Copy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#2)]
 [!code-vb[WebPermission_Copy#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement securityElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement securityElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ securityElement);" />
      <MemberSignature Language="F#" Value="override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="webPermission.FromXml securityElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityElement" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="securityElement">Codificación XML desde la cual se reconstruye el <see cref="T:System.Net.WebPermission" />.</param>
        <summary>Reconstruye un <see cref="T:System.Net.WebPermission" /> a partir de codificación XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.WebPermission.FromXml%2A> método reconstruye un <xref:System.Net.WebPermission> desde un archivo XML la codificación que se define por la <xref:System.Security.SecurityElement> clase.  
  
 Use la <xref:System.Net.WebPermission.ToXml%2A> método para codificar XML en el <xref:System.Net.WebPermission>, incluida información de estado.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Security.SecurityElement?displayProperty=nameWithType>, rellena sus atributos y utiliza <xref:System.Net.WebPermission.FromXml%2A> para transferir esta información a una instancia de <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]
 [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]
 [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="securityElement" /> es <see langword="null." /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="securityElement" /> no es un elemento de permiso para este tipo.</exception>
        <altmember cref="M:System.Net.WebPermission.ToXml" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="webPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Objeto <see cref="T:System.Net.WebPermission" /> que se va a comparar con la instancia actual.</param>
        <summary>Devuelve la intersección lógica entre dos instancias de <see cref="T:System.Net.WebPermission" />.</summary>
        <returns>Nuevo <see cref="T:System.Net.WebPermission" /> que representa la intersección de la instancia actual y el parámetro <paramref name="target" />. Si la intersección está vacía, el método devuelve una referencia <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission.Intersect%2A> Devuelve un <xref:System.Net.WebPermission> que contiene los permisos que son comunes tanto en `target` y la instancia actual.  
  
 Este método invalida <xref:System.Security.CodeAccessPermission.Intersect%2A> y se implementa para admitir la <xref:System.Security.IPermission> interfaz.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear una instancia de <xref:System.Net.WebPermission> mediante la intersección lógica entre dos existente <xref:System.Net.WebPermission> instancias.  
  
 [!code-cpp[WebPermission_Intersect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#3)]
 [!code-csharp[WebPermission_Intersect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#3)]
 [!code-vb[WebPermission_Intersect#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="target" /> no es <see langword="null" />, o bien no es de tipo <see cref="T:System.Net.WebPermission" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="webPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Net.WebPermission" /> que se va a comparar con el <see cref="T:System.Net.WebPermission" /> actual.</param>
        <summary>Determina si el <see cref="T:System.Net.WebPermission" /> actual es un subconjunto del objeto especificado.</summary>
        <returns>Es <see langword="true" /> si la instancia actual es un subconjunto del parámetro <paramref name="target" />; en caso contrario, es <see langword="false" />. Si el destino es <see langword="null" />, el método devuelve <see langword="true" /> para un permiso actual vacío que no esté restringido; en caso contrario, devuelve <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el actual <xref:System.Net.WebPermission> especifica un conjunto de recursos asociados que contenidas por completo el `target` parámetro y, a continuación, actual <xref:System.Net.WebPermission> es un subconjunto de `target`. Este método invalida <xref:System.Net.WebPermission.IsSubsetOf%2A> y se implementa para admitir la <xref:System.Security.IPermission> interfaz.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Net.WebPermission.IsSubsetOf%2A> para determinar si los derechos de acceso se encuentran en una instancia de <xref:System.Net.WebPermission> se encuentran en otra instancia de <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_IsSubset2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset2/CPP/source.cpp#1)]
 [!code-csharp[WebPermission_IsSubset2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset2/CS/source.cs#1)]
 [!code-vb[WebPermission_IsSubset2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro de destino no es una instancia de <see cref="T:System.Net.WebPermission" />.</exception>
        <exception cref="T:System.NotSupportedException">La instancia actual contiene un derecho con codificación Regex y no se encuentra exactamente el mismo derecho de la instancia de destino.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="override this.IsUnrestricted : unit -&gt; bool" Usage="webPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comprueba el estado de permiso global del <see cref="T:System.Net.WebPermission" />.</summary>
        <returns>Es <see langword="true" /> si <see cref="T:System.Net.WebPermission" /> se ha creado con <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /><see cref="T:System.Security.Permissions.PermissionState" />; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Net.WebPermission> es <xref:System.Security.Permissions.PermissionState.Unrestricted>, a continuación, la clase de destino puede utilizar todos los identificadores URI. En caso contrario, el permiso específico debe proporcionarse a cualquier URI que se va a utilizar con la clase de destino.  
  
> [!NOTE]
>  Use <xref:System.Net.WebPermission.AddPermission%2A> para agregar un URI y especificar sus permisos.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="webPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una codificación XML de un <see cref="T:System.Net.WebPermission" /> y su estado actual.</summary>
        <returns><see cref="T:System.Security.SecurityElement" /> que contiene una representación en código XML del <see cref="T:System.Net.WebPermission" />, incluida la información de estado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Net.WebPermission.FromXml%2A> método para restaurar la información de estado de un <xref:System.Security.SecurityElement>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar <xref:System.Net.WebPermission.ToXml%2A> para crear un <xref:System.Security.SecurityElement?displayProperty=nameWithType> e imprimir sus atributos en la consola.  
  
 [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]
 [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]
 [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="webPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Net.WebPermission" /> que se va a combinar con el <see cref="T:System.Net.WebPermission" /> actual.</param>
        <summary>Devuelve la unión lógica entre dos instancias de la clase <see cref="T:System.Net.WebPermission" />.</summary>
        <returns>Un <see cref="T:System.Net.WebPermission" /> que representa la unión de la instancia actual y el parámetro <paramref name="target" />. Si uno de los <see langword="WebPermission" /> es <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />, el método devuelve un <see cref="T:System.Net.WebPermission" /> que es <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />. Si el destino es <see langword="null" />, devuelve una copia del <see cref="T:System.Net.WebPermission" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission.Union%2A> Devuelve un <xref:System.Net.WebPermission> que contiene todos los permisos en ambos `target` y la instancia actual.  
  
   
  
## Examples  
 El ejemplo siguiente toma la unión lógica de dos <xref:System.Net.WebPermission> instancias para crear una tercera instancia de <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_Union#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#2)]
 [!code-csharp[WebPermission_Union#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#2)]
 [!code-vb[WebPermission_Union#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El destino no es <see langword="null" />, o bien no es de tipo <see cref="T:System.Net.WebPermission" />.</exception>
        <altmember cref="T:System.Security.Permissions.PermissionState" />
      </Docs>
    </Member>
  </Members>
</Type>