<Type Name="HttpListenerResponse" FullName="System.Net.HttpListenerResponse">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa3fe53790ba7d4b62a8ac21de3289453bf3aa8c" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683184" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerResponse : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerResponse extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerResponse" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerResponse&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerResponse sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa una respuesta a una solicitud que controla un objeto <see cref="T:System.Net.HttpListener" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un cliente realiza una solicitud para un recurso controlado por un <xref:System.Net.HttpListener> objeto, la solicitud y respuesta se ponen a disposición de la aplicación en un <xref:System.Net.HttpListenerContext> objeto. La solicitud se representa mediante un <xref:System.Net.HttpListenerRequest> objeto y está disponible en la <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> propiedad. La respuesta se representa mediante un <xref:System.Net.HttpListenerResponse> objeto y está disponible en la <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> propiedad.  
  
 Puede personalizar la respuesta estableciendo varias propiedades, como <xref:System.Net.HttpListenerResponse.StatusCode%2A>, <xref:System.Net.HttpListenerResponse.StatusDescription%2A>, y <xref:System.Net.HttpListenerResponse.Cookies%2A>. Use la <xref:System.Net.HttpListenerResponse.OutputStream%2A?displayProperty=nameWithType> propiedad que se va a obtener un <xref:System.IO.Stream> a qué respuesta se pueden escribir datos de instancia. Por último, envíe los datos de respuesta al cliente mediante una llamada a la <xref:System.Net.HttpListenerResponse.Close%2A> método.  
 
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerContext" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la conexión con el cliente sin enviar una respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método en un objeto que se ha cerrado ya no tiene ningún efecto. Si la respuesta no se ha cerrado ya, este método cierra así como los asociados <xref:System.Net.HttpListenerRequest> y <xref:System.Net.HttpListenerContext> objetos. La conexión con el cliente también está cerrada, sin tener en cuenta la <xref:System.Net.HttpListenerRequest.KeepAlive%2A> valor de propiedad de la solicitud de cliente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public void AddHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHeader (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHeader(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">El nombre del encabezado HTTP que se establece.</param>
        <param name="value">Valor del encabezado <c>name</c>.</param>
        <summary>Agrega el encabezado y valor especificados a los encabezados HTTP para esta respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método equivale a llamar a la <xref:System.Net.WebHeaderCollection.Set%2A> método en la colección devuelta por la <xref:System.Net.HttpListenerResponse.Headers%2A> propiedad.  
  
 Si el encabezado especificado en `name` no existe, este método inserta un nuevo encabezado en la <xref:System.Net.HttpListenerResponse.Headers%2A> colección de la propiedad. Si `name` está presente en la colección, este reemplaza el método existente de valor con `value`. Para agregar un valor a un encabezado existente sin reemplazar el valor existente, use la <xref:System.Net.HttpListenerResponse.AppendHeader%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo agregar un encabezado utilizando esta propiedad.  
  
 [!code-csharp[Net_Listener_Basic#26](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.ArgumentException">No tiene permiso para especificar un valor para el encabezado especificado.  
  
 O bien  
  
 <paramref name="name" /> o <paramref name="value" /> contienen caracteres no válidos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La longitud de <paramref name="value" /> es mayor que 65.535 caracteres.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
        <altmember cref="T:System.Net.WebHeaderCollection" />
      </Docs>
    </Member>
    <Member MemberName="AppendCookie">
      <MemberSignature Language="C#" Value="public void AppendCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendCookie(System::Net::Cookie ^ cookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">
          <see cref="T:System.Net.Cookie" /> para agregar a la colección que se envía con esta respuesta.</param>
        <summary>Agrega el objeto especificado <see cref="T:System.Net.Cookie" /> a la colección de cookies para esta respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método equivale a llamar a la <xref:System.Net.CookieCollection.Add%2A> método en la colección devuelta por la <xref:System.Net.HttpListenerResponse.Cookies%2A> propiedad.  
  
 Si la cookie especificada no existe en el <xref:System.Net.HttpListenerResponse.Cookies%2A> la colección de la propiedad, `cookie` se agrega. Si la cookie existe en la colección, `cookie` lo reemplaza.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo agregar una cookie a una respuesta  
  
 [!code-csharp[Net_Listener_Basic#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AppendHeader">
      <MemberSignature Language="C#" Value="public void AppendHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendHeader (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendHeader(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del encabezado HTTP al que se va a anexar <c>value</c>.</param>
        <param name="value">Valor que se va a anexar al encabezado <c>name</c>.</param>
        <summary>Anexa un valor al encabezado HTTP especificado que se enviará con esta respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método equivale a llamar a la <xref:System.Net.WebHeaderCollection.Add%2A> método en la colección devuelta por la <xref:System.Net.HttpListenerResponse.Headers%2A> propiedad.  
  
 Si el encabezado especificado en `header` no existe, este método inserta un nuevo encabezado en la <xref:System.Net.HttpListenerResponse.Headers%2A> colección de la propiedad. Si `header` está presente en la colección, este método agrega `value` a los valores existentes. Para reemplazar el valor de un encabezado existente, use la <xref:System.Net.HttpListenerResponse.AddHeader%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> es <see langword="null" /> o una cadena vacía ("").  
  
 O bien  
  
 No tiene permiso para especificar un valor para el encabezado especificado.  
  
 O bien  
  
 <paramref name="name" /> o <paramref name="value" /> contienen caracteres no válidos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La longitud de <paramref name="value" /> es mayor que 65.535 caracteres.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía la respuesta al cliente y libera los recursos que contenía esta instancia de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Envía la respuesta al cliente y libera los recursos que contenía esta instancia de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método cierra la secuencia de respuesta y el <xref:System.Net.HttpListenerRequest> asociado con la respuesta.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método para enviar un <xref:System.Net.HttpStatusCode.Forbidden> respuesta (403) al cliente.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (byte[] responseEntity, bool willBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(unsigned int8[] responseEntity, bool willBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (responseEntity As Byte(), willBlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(cli::array &lt;System::Byte&gt; ^ responseEntity, bool willBlock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseEntity" Type="System.Byte[]" />
        <Parameter Name="willBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="responseEntity">Una matriz <see cref="T:System.Byte" /> que contiene la respuesta enviada al cliente.</param>
        <param name="willBlock">
          Es <see langword="true" /> para bloquear la ejecución mientras se vuelca la secuencia al cliente; de lo contrario, es <see langword="false" />.</param>
        <summary>Devuelve al cliente la matriz de bytes especificada y libera los recursos mantenidos por esta instancia de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si va a enviar los datos del cuerpo con la respuesta, puede utilizar este método para enviarlo como un <xref:System.Byte> matriz en lugar de escribir los datos de cuerpo para el <xref:System.Net.HttpListenerResponse.OutputStream%2A> propiedad y llamar a la <xref:System.Net.HttpListenerResponse.Close%2A> método.  
  
 Este método cierra la secuencia de respuesta y el <xref:System.Net.HttpListenerRequest> asociado con la respuesta.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-csharp[Net_Listener_Basic#24](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="responseEntity" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ ContentEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Text.Encoding" /> para la propiedad <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> de esta respuesta.</summary>
        <value>Un objeto <see cref="T:System.Text.Encoding" /> apropiado para el uso con los datos de la propiedad <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> o bien <see langword="null" />, si no se especifica ninguna codificación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Text.Encoding> objeto puede utilizarse para convertir las secuencias de bytes en juegos de caracteres (páginas de códigos) y caracteres en las secuencias de bytes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar esta propiedad.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentLength64">
      <MemberSignature Language="C#" Value="public long ContentLength64 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength64" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentLength64" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentLength64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ContentLength64 { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de bytes de los datos del cuerpo incluidos en la respuesta.</summary>
        <value>Valor del encabezado <see langword="Content-Length" /> de la respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Content-Length` encabezado expresa la longitud, en bytes, de los datos del cuerpo de la respuesta. Cuando con un formato que no se envían los datos fragmentada o sin procesar, deberá configurar el <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propiedad. Si no, el <xref:System.Net.HttpListener> no envía los datos de respuesta.  
  
 Para obtener una lista completa de encabezados de respuesta, consulte el <xref:System.Net.HttpResponseHeader> enumeración.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer el valor de esta propiedad.  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor especificado para una operación de conjunto es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Ya se está enviando la respuesta.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo MIME del contenido devuelto.</summary>
        <value>Una instancia de <see cref="T:System.String" /> que contiene el texto del encabezado <see langword="Content-Type" /> de la respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se comunica con un explorador Web, debe establecer esta propiedad explícitamente al devolver cualquier tipo de contenido distinto de `text/html`.  
  
 Para obtener una lista completa de encabezados de respuesta, consulte el <xref:System.Net.HttpResponseHeader> enumeración.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor especificado para una operación Set es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor especificado en una operación de conjunto es una cadena vacía ("").</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Net.CookieCollection Cookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieCollection Cookies" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Cookies" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookies As CookieCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::CookieCollection ^ Cookies { System::Net::CookieCollection ^ get(); void set(System::Net::CookieCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.CookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la colección de cookies devuelta con la respuesta.</summary>
        <value>Una <see cref="T:System.Net.CookieCollection" /> que contiene las cookies adjuntas a la respuesta. La colección está vacía si no se agregaron cookies a la respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una cookie es datos de texto de nombre/valor de un servidor Web que se almacena en el equipo local (cliente). Se admiten los siguientes formatos de cookie: Netscape, RFC 2109 y RFC 2965. La especificación de cookies de Netscape está disponible en http://wp.netscape.com/newsref/std/cookie_spec.html; están disponibles en los documentos RFC [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se comprueba una solicitud para una cookie y devuelve una nueva cookie con la respuesta si la solicitud no tenía una.  
  
 [!code-csharp[Net_Listener_Basic#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="CopyFrom">
      <MemberSignature Language="C#" Value="public void CopyFrom (System.Net.HttpListenerResponse templateResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFrom(class System.Net.HttpListenerResponse templateResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFrom (templateResponse As HttpListenerResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFrom(System::Net::HttpListenerResponse ^ templateResponse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateResponse" Type="System.Net.HttpListenerResponse" />
      </Parameters>
      <Docs>
        <param name="templateResponse">La instancia de <see cref="T:System.Net.HttpListenerResponse" /> que se copia.</param>
        <summary>Copia las propiedades de la <see cref="T:System.Net.HttpListenerResponse" /> especificada en esta respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cambia periódicamente muchas de las propiedades de sus valores predeterminados a un conjunto fijo de nuevos valores, es conveniente usar un <xref:System.Net.HttpListenerResponse> instancia como una plantilla. Personalizar la respuesta de la plantilla una vez y, en lugar de configurar cada respuesta por separado, llame a la <xref:System.Net.HttpListenerResponse.CopyFrom%2A> método para configurar una nueva respuesta basada en valores de propiedad en la respuesta de la plantilla.  
  
 Las siguientes propiedades se copian desde `templateResponse` a la instancia actual.  
  
-   <xref:System.Net.HttpListenerResponse.Headers%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ContentLength64%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusCode%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusDescription%2A>  
  
-   <xref:System.Net.HttpListenerResponse.KeepAlive%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ProtocolVersion%2A>  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una respuesta copiando una respuesta de la plantilla.  
  
 [!code-csharp[NCLListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NCLListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la colección de pares nombre/valor de encabezado que devuelve el servidor.</summary>
        <value>Una instancia de <see cref="T:System.Net.WebHeaderCollection" /> que contiene todos los encabezados HTTP establecidos explícitamente que se deben incluir en la respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Encabezados de respuesta contienen información de metadatos, como la fecha y hora de la respuesta, la identidad del servidor responde y el tipo MIME de los datos contenidos en el cuerpo de respuesta.  
  
 Para obtener una lista completa de encabezados de respuesta, consulte el <xref:System.Net.HttpResponseHeader> enumeración.  
  
> [!NOTE]
>  Si se intenta establecer un Content-Length, Keep-Alive, Transfer-Encoding, o se producirá el encabezado WWW-Authenticate utilizando la propiedad Headers, una excepción. Use la <xref:System.Net.HttpListenerResponse.KeepAlive%2A> o <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propiedades para establecer estos encabezados. No se puede establecer manualmente los encabezados Transfer-Encoding o WWW-Authenticate.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar los encabezados en un <xref:System.Net.WebHeaderCollection>.  
  
 [!code-csharp[Net_Listener_Basic#23](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La instancia de <see cref="T:System.Net.WebHeaderCollection" /> especificada para una operación de conjunto no es válida para una respuesta.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el servidor solicita una conexión persistente.</summary>
        <value>
          Es <see langword="true" /> si el servidor solicita una conexión persistente; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un cliente y servidor HTTP esperan intercambiar datos varias veces en un período corto, una conexión persistente acelera la comunicación, por lo que les permite evitar la sobrecarga necesaria para abrir y cerrar una conexión TCP para cada mensaje. Las conexiones persistentes están en uso generalizado en las comunicaciones entre los exploradores Web modernos y los servidores Web.  
  
 Las conexiones persistentes se describen en detalle en la especificación del protocolo HTTP/1.1 (RFC 2616) disponible en el sitio Web de RTF Editor ([https://www.rfc-editor.org/](https://www.rfc-editor.org/)).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer el valor de esta propiedad.  
  
 [!code-csharp[NclListener#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream OutputStream" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.OutputStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ OutputStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.IO.Stream" /> en el que se puede escribir una respuesta.</summary>
        <value>Un objeto <see cref="T:System.IO.Stream" /> en el que se puede escribir una respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propiedad se debe establecer explícitamente antes de escribir en el valor devuelto <xref:System.IO.Stream> objeto.  
  
> [!NOTE]
>  Cerrar la solicitud no cierra la secuencia devuelta por esta propiedad. Cuando ya no necesite la secuencia, se debe cerrar mediante una llamada al método Close.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ProtocolVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtocolVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ ProtocolVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la versión de HTTP utilizada para la respuesta.</summary>
        <value>Un objeto <see cref="T:System.Version" /> que indica la versión de HTTP utilizada al responder al cliente. Tenga en cuenta que esta propiedad está obsoleta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las capacidades de las distintas versiones HTTP se especifican en los documentos disponibles en [ https://www.ietf.org ](https://www.ietf.org).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer el valor de esta propiedad.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor especificado para una operación Set es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor especificado para una operación de conjunto no tiene su propiedad <see cref="P:System.Version.Major" /> establecida en 1 o su propiedad <see cref="P:System.Version.Minor" /> establecida en 0 ó 1.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redirect(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Redirect(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Redirect (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Redirect(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">La dirección URL que el cliente debe utilizar para buscar el recurso solicitado.</param>
        <summary>Configura la respuesta para redirigir el cliente a la dirección URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.HttpListenerResponse.Redirect%2A> método se utiliza para redirigir un cliente a la nueva ubicación de un recurso. Este método establece la respuesta `Location` encabezado a `url`, el <xref:System.Net.HttpListenerResponse.StatusCode%2A> propiedad <xref:System.Net.HttpStatusCode.Redirect>y el <xref:System.Net.HttpListenerResponse.StatusDescription%2A> propiedad en "Found".  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-csharp[Net_Listener_Basic#27](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="RedirectLocation">
      <MemberSignature Language="C#" Value="public string RedirectLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedirectLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.RedirectLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property RedirectLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RedirectLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor del encabezado HTTP <see langword="Location" /> en esta respuesta.</summary>
        <value>Un valor <see cref="T:System.String" /> que contiene la dirección URL absoluta que se envía al cliente en el encabezado <see langword="Location" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Location` encabezado especifica la dirección URL a la que el cliente se dirige a un recurso solicitado.  
  
> [!NOTE]
>  Configuración de esta propiedad no se establece automáticamente el <xref:System.Net.HttpListenerResponse.StatusCode%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer esta propiedad.  
  
 [!code-csharp[Net_Listener_Basic#25](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor especificado en una operación de conjunto es una cadena vacía ("").</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.SendChunked" />
      <MemberSignature Language="VB.NET" Value="Public Property SendChunked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SendChunked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si la respuesta utiliza una codificación de transferencia en fragmentos.</summary>
        <value>
          Es <see langword="true" /> si la respuesta está configurada para utilizar codificación de transferencia en fragmentos; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El cuerpo de un mensaje fragmentado se compone de una serie de fragmentos. Cada fragmento se compone de dos partes: el tamaño de los datos del fragmento y los datos reales. Cuando se establece en true, la respuesta se envía mediante fragmentada la codificación de transferencia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public void SetCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCookie(System::Net::Cookie ^ cookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">Un objeto <see cref="T:System.Net.Cookie" /> para esta respuesta.</param>
        <summary>Agrega o actualiza un objeto <see cref="T:System.Net.Cookie" /> en la colección de cookies enviada con esta respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos de las cookies se consideran los mismos si los valores de sus <xref:System.Net.Cookie.Name%2A>, <xref:System.Net.Cookie.Domain%2A>, y <xref:System.Net.Cookie.Path%2A> propiedades son las mismas. Si estos tres fragmentos de información son iguales, el método intenta actualizar la cookie. Las comparaciones de nombre y dominio no distinguen mayúsculas de minúsculas, pero la comparación de ruta de acceso no distingue entre mayúsculas y minúsculas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-csharp[Net_Listener_Basic#28](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La cookie ya existe en la colección y no se pudo reemplazar.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusCode">
      <MemberSignature Language="C#" Value="public int StatusCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StatusCode" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusCode" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StatusCode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el código de estado de HTTP que se devuelve al cliente.</summary>
        <value>Un valor <see cref="T:System.Int32" /> que especifica el código de estado de HTTP para el recurso solicitado. El valor predeterminado es <see cref="F:System.Net.HttpStatusCode.OK" />, que indica que el servidor procesó correctamente la solicitud del cliente e incluyó el recurso solicitado en el cuerpo de la respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los clientes usar el código de estado devuelto por el servidor para decidir cómo continuar. Un valor de <xref:System.Net.HttpStatusCode.OK> indica que el servidor procesa la solicitud del cliente correctamente e incluye el recurso solicitado en el cuerpo de respuesta. Otros códigos de estado comunes incluyen <xref:System.Net.HttpStatusCode.NotFound>, lo que indica que el recurso solicitado no se encontró en el servidor, y <xref:System.Net.HttpStatusCode.NotModified>, que indica que no fue necesario devolver el recurso solicitado en el cuerpo de respuesta porque el cliente de la copia almacenada en caché del recurso está actualizada.  
  
 Para obtener una lista completa de códigos de estado posibles, vea el <xref:System.Net.HttpStatusCode> enumeración.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer el valor de esta propiedad.  
  
 [!code-csharp[Net_Listener_Basic#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está cerrado.</exception>
        <exception cref="T:System.Net.ProtocolViolationException">El valor especificado para una operación de conjunto no es válido. Los valores válidos están comprendidos entre 100 y 999, ambos inclusive.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusDescription">
      <MemberSignature Language="C#" Value="public string StatusDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una descripción de texto del código de estado de HTTP devuelto al cliente.</summary>
        <value>La descripción de texto del código de estado de HTTP devuelto al cliente. El valor predeterminado es la descripción de RFC 2616 del valor de la propiedad <see cref="P:System.Net.HttpListenerResponse.StatusCode" /> o una cadena vacía (""), si no existe una descripción de RFC 2616.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La descripción del estado normalmente proporciona detalles que explican el <xref:System.Net.HttpListenerResponse.StatusCode%2A> valor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer el valor de esta propiedad.  
  
 [!code-csharp[NclListener#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor especificado para una operación Set es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor especificado para una operación de establecimiento contiene caracteres que no se pueden imprimir.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos que usa <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Net.HttpListenerResponse.Close%2A> método para enviar la respuesta y liberar los recursos mantenidos por un <xref:System.Net.HttpListenerResponse>. Para descartar la respuesta y liberar los recursos mantenidos por esta instancia, utilice el <xref:System.Net.HttpListenerResponse.Abort%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
  </Members>
</Type>