<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b91ddd2c5b3a0e85bd53329c243386ca09aa7389" /><Meta Name="ms.sourcegitcommit" Value="303c57f737f11b89445bb845737721fee7ab8051" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/26/2019" /><Meta Name="ms.locfileid" Value="56834047" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Codifica una cadena para su uso en cadenas HTML, XML, CSS y URL.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Web.Security.AntiXss.AntiXssEncoder> clase para invalidar el <xref:System.Web.Util.HttpEncoder> clase que se usa de forma predeterminada para codificar y descodificar como cadenas en los métodos de clases <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, y <xref:System.Net.HttpResponseHeader>.  
  
 En el <xref:System.Web.Security.AntiXss.AntiXssEncoder> (clase), todos los caracteres que no se encuentran en la lista segura se codifican el <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> y <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> métodos.  
  
 Para reemplazar el <xref:System.Web.Util.HttpEncoder> clase con el <xref:System.Web.Security.AntiXss.AntiXssEncoder> class, registrarlo con el `encoderType` atributo del elemento httpRuntime en el archivo Web.config, como se muestra en el ejemplo siguiente:  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 Encontrará una lista de caracteres seguro de forma predeterminada para los distintos métodos de codificación en la sección Comentarios para el <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A>, <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A>, <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A>, y <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A> métodos. La lista segura de forma predeterminada se puede modificar utilizando el <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <summary>Codifica la cadena especificada para su uso en hojas de estilos en cascada (CSS).</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura.  
  
> [!NOTE]
>  Insertar comillas ("") alrededor de la cadena resultante antes de agregarlo a una hoja de estilos en cascada.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos son desde el [Unicode C0 controles y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres.
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 La secuencia de escape de caracteres CSS consta de un carácter de barra diagonal inversa (\\) seguido por un máximo de seis dígitos hexadecimales que representan un código de carácter de la norma ISO 10646. (El estándar ISO 10646 es equivalente a Unicode). Cualquier carácter que no sea un dígito hexadecimal finaliza la secuencia de escape. Si un carácter que sigue la secuencia de escape también es un dígito hexadecimal válido, debe incluir los seis dígitos en la secuencia de escape o usar un carácter de espacio en blanco para finalizar la secuencia de escape. Por ejemplo, `\000020` denota un espacio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <param name="output">El sistema de escritura de texto que se usará para generar la cadena.</param>
        <summary>Codifica y genera la cadena especificada para su uso en un atributo HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `&#DECIMAL;` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres, a menos que se indique en la columna Descripción.  
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos latinos en mayúsculas|  
||a-z|Caracteres alfabéticos latinos en minúsculas|  
|0-9|Números|  
|!|Signo de exclamación|  
|#|Signo de número, hash|  
|$|Signo de dólar|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|*|Asterisk|  
|+|Signo más|  
|,|Coma|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|/|Barra diagonal|  
|:|Dos puntos|  
|;|Semicolon|  
|=|Signo igual|  
|?|Signo de interrogación|  
|@|Comercial en el inicio de sesión|  
|[ ]|Los corchetes|  
|&#92;|Barra diagonal inversa|  
|^|Símbolo de intercalación|  
|_|Carácter de subrayado|  
|\`| Acento grave|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
|0x00A1 - 0x00AC|Caracteres especiales entre 0x00A1 (161 decimal) y 0x00AC (172 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres.|  
|0x00AE - 0x00FF|Caracteres especiales entre 0x00AE (174 decimal) y 0x00FF (255 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres.|  
|0x0100 - 0x017F|Caracteres entre 0 x 0100 (256 decimal) y 0x017F (383 decimal). (El Unicode [Latín extendido A](https://www.unicode.org/charts/PDF/U0100.pdf) intervalo de caracteres.)|
|0x0180 - 0x024F|Caracteres entre 0x0180 (384 decimal) y 0x024F (591 decimal). (El Unicode [Latín-extendido-B](https://www.unicode.org/charts/PDF/U0180.pdf) intervalo de caracteres.)|  
|0x0250 - 0x02AF|Caracteres entre 0x0250 (592 decimal) y 0x02AF (687 decimal). (El Unicode [Extensiones IPA](https://www.unicode.org/charts/PDF/U0250.pdf) intervalo de caracteres.)| 
|0x02B0 - 0x02FF|Caracteres entre 0x02B0 (688 decimal) y 0x02FF (767 decimal). (El Unicode [letras modificadoras de espaciado](https://www.unicode.org/charts/PDF/U02B0.pdf) intervalo de caracteres.)|
|0x0300 - 0x036F|Caracteres entre 0 x 0300 (768 decimal) y 0x036F (879 decimal). (El Unicode [marcas diacríticas combinadas](https://www.unicode.org/charts/PDF/U0300.pdf) intervalo de caracteres.)|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Para personalizar la lista segura, llame a la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica la cadena especificada para su uso como texto en marcado HTML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <param name="useNamedEntities"><see langword="true" /> para usar entidades con nombre de HTML 4.0 para algunas codificaciones de caracteres; <see langword="false" /> para codificar usando únicamente la notación <c>&amp;#DECIMAL;</c>.</param>
        <summary>Codifica la cadena especificada para su uso como texto en marcado HTML y especifica opcionalmente si se han de utilizar entidades denominadas de HTML 4.0.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `&#DECIMAL;` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres, a menos que se indique en la columna Descripción.
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos latinos en mayúsculas|  
|a-z|Caracteres alfabéticos latinos en minúsculas|  
|0-9|Números|  
|(Espacio)|Espacio|  
|!|Signo de exclamación|  
|#|Signo de número, hash|  
|$|Signo de dólar|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|*|Asterisk|  
|+|Signo más|  
|,|Coma|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|/|Barra diagonal|  
|:|Dos puntos|  
|;|Semicolon|  
|=|Signo igual|  
|?|Signo de interrogación|  
|@|Arroba|  
|[ ]|Los corchetes|  
|&#92;|Barra diagonal inversa|  
|^|Símbolo de intercalación|  
|_|Carácter de subrayado|  
|\`| Acento grave|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
|0x00A1 - 0x00AC|Caracteres especiales entre 0x00A1 (161 decimal) y 0x00AC (172 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x00AE - 0x00FF|Caracteres especiales entre 0x00AE (174 decimal) y 0x00FF (255 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x0100 - 0x017F|Caracteres entre 0 x 0100 (256 decimal) y 0x017F (383 decimal). (El Unicode [Latín extendido A](https://www.unicode.org/charts/PDF/U0100.pdf) intervalo de caracteres.)|
|0x0180 - 0x024F|Caracteres entre 0x0180 (384 decimal) y 0x024F (591 decimal). (El Unicode [Latín-extendido-B](https://www.unicode.org/charts/PDF/U0180.pdf) intervalo de caracteres.)|  
|0x0250 - 0x02AF|Caracteres entre 0x0250 (592 decimal) y 0x02AF (687 decimal). (El Unicode [Extensiones IPA](https://www.unicode.org/charts/PDF/U0250.pdf) intervalo de caracteres.)|  
|0x02B0 - 0x02FF|Caracteres entre 0x02B0 (688 decimal) y 0x02FF (767 decimal). (El Unicode [letras modificadoras de espaciado](https://www.unicode.org/charts/PDF/U02B0.pdf) intervalo de caracteres.)|
|0x0300 - 0x036F|Caracteres entre 0 x 0300 (768 decimal) y 0x036F (879 decimal). (El Unicode [marcas diacríticas combinadas](https://www.unicode.org/charts/PDF/U0300.pdf) intervalo de caracteres.)| 
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Para personalizar la lista segura, llame a la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <param name="output">El sistema de escritura de texto que se usará para generar la cadena.</param>
        <summary>Codifica la cadena especificada para su uso como texto en marcado HTML y genera la cadena mediante el escritor de texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `&#DECIMAL;` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres, a menos que se indique en la columna Descripción.
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos latinos en mayúsculas|  
|a-z|Caracteres alfabéticos latinos en minúsculas|  
|0-9|Números|  
|(Espacio)|Espacio|  
|!|Signo de exclamación|  
|#|Signo de número, hash|  
|$|Signo de dólar|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|*|Asterisk|  
|+|Signo más|  
|,|Coma|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|/|Barra diagonal|  
|:|Dos puntos|  
|;|Semicolon|  
|=|Signo igual|  
|?|Signo de interrogación|  
|@|Arroba|  
|[ ]|Los corchetes|  
|&#92;|Barra diagonal inversa|  
|^|Símbolo de intercalación|  
|_|Carácter de subrayado|  
|\`| Acento grave|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
|0x00A1 - 0x00AC|Caracteres especiales entre 0x00A1 (161 decimal) y 0x00AC (172 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x00AE - 0x00FF|Caracteres especiales entre 0x00AE (174 decimal) y 0x00FF (255 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x0100 - 0x017F|Caracteres entre 0 x 0100 (256 decimal) y 0x017F (383 decimal). (El Unicode [Latín extendido A](https://www.unicode.org/charts/PDF/U0100.pdf) intervalo de caracteres.)|
|0x0180 - 0x024F|Caracteres entre 0x0180 (384 decimal) y 0x024F (591 decimal). (El Unicode [Latín-extendido-B](https://www.unicode.org/charts/PDF/U0180.pdf) intervalo de caracteres.)| 
|0x0250 - 0x02AF|Caracteres entre 0x0250 (592 decimal) y 0x02AF (687 decimal). (El Unicode [Extensiones IPA](https://www.unicode.org/charts/PDF/U0250.pdf) intervalo de caracteres.)| 
|0x02B0 - 0x02FF|Caracteres entre 0x02B0 (688 decimal) y 0x02FF (767 decimal). (El Unicode [letras modificadoras de espaciado](https://www.unicode.org/charts/PDF/U02B0.pdf) intervalo de caracteres.)|
|0x0300 - 0x036F|Caracteres entre 0 x 0300 (768 decimal) y 0x036F (879 decimal). (El Unicode [marcas diacríticas combinadas](https://www.unicode.org/charts/PDF/U0300.pdf) intervalo de caracteres.)| 
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Para personalizar la lista segura, llame a la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica la cadena especificada para su uso en envíos de formulario cuyo tipo MIME es "application/x-www-form-urlencoded".</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <summary>Codifica la cadena especificada para su uso en envíos de formulario cuyo tipo MIME es "application/x-www-form-urlencoded".</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación. 
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.   

En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
    
|Gráfico de códigos Unicode|Carácter(es)|Descripción|  
|------------------------|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <param name="codePage">Página de códigos que se va a usar para codificar la cadena de <paramref name="input" />.</param>
        <summary>Codifica la cadena especificada para su uso en envíos de formulario cuyo tipo MIME es "application/x-www-form-urlencoded" mediante la página de códigos especificada.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <param name="inputEncoding">Tipo de codificación de entrada.</param>
        <summary>Codifica la cadena especificada para envíos de formulario cuyo tipo MIME es "application/x-www-form-urlencoded" mediante el tipo de codificación de caracteres especificado.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">Combinación de gráficos de código inferior que se va a marcar como segura.</param>
        <param name="lowerMidCodeCharts">Combinación de gráficos de código inferior-medio que se va a marcar como segura.</param>
        <param name="midCodeCharts">Combinación de gráficos de código medio que se va a marcar como segura.</param>
        <param name="upperMidCodeCharts">Combinación de gráficos de código superior-medio que se va a marcar como segura.</param>
        <param name="upperCodeCharts">Combinación de gráficos de código superior que se va a marcar como segura.</param>
        <summary>Marca los caracteres de los gráficos de código Unicode especificados como seguros.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La lista segura afecta a todos los métodos de codificación XML de HTML, CSS y URL.  
  
 Con algunas excepciones, gráficos de código Unicode no se corresponden directamente con idiomas escritos. Para agregar compatibilidad para un idioma específico o un conjunto de idiomas a menudo requiere marcar varios gráficos de código como seguro.  
  
 Para agregar compatibilidad para el idioma japonés mientras continúa permitir el inglés, use la sintaxis siguiente:  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  El <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método debe llamarse el `Application_Start` método en el archivo Global.asax.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se llamó al método <see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" /> fuera del método <see langword="Application_Start" /> en el archivo Global.asax.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica cadenas y matrices de bytes para su uso en una dirección URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <summary>Codifica la cadena especificada para su uso en una dirección URL.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
    
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <param name="codePage">Página de códigos que se va a usar para codificar la cadena de <paramref name="input" />.</param>
        <summary>Codifica la cadena especificada para su uso en una dirección URL mediante la página de códigos especificada.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
    
  
|Gráfico de códigos Unicode|Carácter(es)|Descripción|  
|------------------------|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <param name="inputEncoding">Tipo de codificación de entrada.</param>
        <summary>Codifica la cadena especificada para su uso en una dirección URL utilizando el tipo especificado de codificación de caracteres.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
    
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Matriz de bytes que se va a codificar.</param>
        <param name="offset">Índice del primer byte que se va a codificar.</param>
        <param name="count">Número de bytes que se van a codificar.</param>
        <summary>Codifica la matriz de bytes especificada para su uso en una dirección URL, comenzando en el desplazamiento especificado de la matriz de bytes y codificando el número de bytes especificado.</summary>
        <returns>Matriz de bytes codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
   
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|_|Carácter de subrayado|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <summary>Codifica cadenas de ruta para su uso en una dirección URL.</summary>
        <returns>La dirección URL que contiene la ruta de acceso codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `%SINGLE_BYTE_HEX` notación.  

En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres. 
    
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos en mayúsculas|  
|a-z|Caracteres alfabéticos en minúsculas|  
|0-9|Números|  
|#|Signo de número, hash|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|/|Barra diagonal|  
|&#92;|Barra diagonal inversa|  
|_|Carácter de subrayado|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 Este método codifica sólo la ruta de acceso de una dirección URL. Este método no codificará el esquema (por ejemplo, `http:`, `ftp:`, o `file:`), la entidad (por ejemplo, `www.northwind.com` o `www.contoso.com:8080`), o la consulta o fragmento (por ejemplo, `?v=s978dfs9#x=103`). Si no hay ningún esquema o la autoridad en la cadena, se supone que la cadena es una ruta de acceso relativa y se codifica la ruta de acceso. En la siguiente dirección URL, solo la subcadena `/default.htm` está codificado:  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <summary>Codifica la cadena especificada para su uso en atributos XML.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `&#DECIMAL;` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo de caracteres, a menos que se indique en la columna Descripción.  
   
  
|Gráfico de códigos Unicode|Carácter(es)|Descripción|  
|------------------------|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos latinos en mayúsculas|  
|a-z|Caracteres alfabéticos latinos en minúsculas|  
|0-9|Números|  
|!|Signo de exclamación|  
|#|Signo de número, hash|  
|$|Signo de dólar|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|*|Asterisk|  
|+|Signo más|  
|,|Coma|  
|-|Guión, menos|  
|.|Punto, detención completa|  
|/|Barra diagonal|  
|:|Dos puntos|  
|;|Semicolon|  
|=|Signo igual|  
|?|Signo de interrogación|  
|@|Comercial en el inicio de sesión|  
|[ ]|Los corchetes|  
|&#92;|Barra diagonal inversa|  
|^|Símbolo de intercalación|  
|_|Carácter de subrayado|  
|\`| Acento grave|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
|0x00A1 - 0x00AC|Caracteres especiales entre 0x00A1 (161 decimal) y 0x00AC (172 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres.|  
|Caracteres especiales entre 0x00AE (174 decimal) y 0x00FF (255 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres.|  
|0x0100 - 0x017F|Caracteres entre 0 x 0100 (256 decimal) y 0x017F (383 decimal). (El Unicode [Latín extendido A](https://www.unicode.org/charts/PDF/U0100.pdf) intervalo de caracteres.)| 
|0x0180 - 0x024F|Caracteres entre 0x0180 (384 decimal) y 0x024F (591 decimal). (El Unicode [Latín-extendido-B](https://www.unicode.org/charts/PDF/U0180.pdf) intervalo de caracteres.)| 
|0x0250 - 0x02AF|Caracteres entre 0x0250 (592 decimal) y 0x02AF (687 decimal). (El Unicode [Extensiones IPA](https://www.unicode.org/charts/PDF/U0250.pdf) intervalo de caracteres.)| 
|0x02B0 - 0x02FF|Caracteres entre 0x02B0 (688 decimal) y 0x02FF (767 decimal). (El Unicode [letras modificadoras de espaciado](https://www.unicode.org/charts/PDF/U02B0.pdf) intervalo de caracteres.)|
|0x0300 - 0x036F|Caracteres entre 0 x 0300 (768 decimal) y 0x036F (879 decimal). (El Unicode [marcas diacríticas combinadas](https://www.unicode.org/charts/PDF/U0300.pdf) intervalo de caracteres.)|  
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Para personalizar la lista segura, llame a la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Cadena que se va a codificar.</param>
        <summary>Codifica la cadena especificada para su uso en atributos XML.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método codifica todos los caracteres excepto aquellos que están en la lista segura. Los caracteres se codifican utilizando `&#DECIMAL;` notación.  
  
> [!NOTE]
>  Escriba comillas dobles ("") o comillas simples (' ') en torno a la cadena resultante antes de agregarlo a una página.  
  
 En la tabla siguiente se enumera los caracteres seguros de forma predeterminada. Todos los caracteres son de Unicode [controles C0 y Latín básico](https://www.unicode.org/charts/PDF/U0000.pdf) intervalo excepto cuando se indique en la columna de descripción de caracteres.   
  
|Carácter(es)|Descripción|  
|--------------------|-----------------|  
|A-Z|Caracteres alfabéticos latinos en mayúsculas|  
|a-z|Caracteres alfabéticos latinos en minúsculas|  
|0-9|Números|  
|(Espacio)|Espacio|  
|!|Signo de exclamación|  
|#|Signo de número, hash|  
|$|Signo de dólar|  
|%|Signo de porcentaje|  
|( )|Paréntesis|  
|*|Asterisk|  
|+|Signo más|  
|,|Coma|  
|-|Guión, menos|  
|.|Período|  
|/|Barra diagonal|  
|:|Dos puntos|  
|;|Semicolon|  
|=|Signo igual|  
|?|Signo de interrogación|  
|@|Arroba|  
|[ ]|Los corchetes|  
|&#92;|Barra diagonal inversa|  
|^|Símbolo de intercalación|  
|_|Carácter de subrayado|  
|\`| Acento grave|  
|{ }|Llaves, entre llaves|  
|&#124;|Línea vertical|  
|~|Tilde|  
|0x00A1 - 0x00AC|Caracteres especiales entre 0x00A1 (161 decimal) y 0x00AC (172 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x00AE - 0x00FF|Caracteres especiales entre 0x00AE (174 decimal) y 0x00FF (255 decimal) desde el Unicode [controles C1 y Latín-1 adicional](https://www.unicode.org/charts/PDF/U0080.pdf) intervalo de caracteres. Se codifican los caracteres de este intervalo cuando `useNamedEntities` es `true`.|  
|0x0100 - 0x017F|Caracteres entre 0 x 0100 (256 decimal) y 0x017F (383 decimal). (El Unicode [Latín extendido A](https://www.unicode.org/charts/PDF/U0100.pdf) intervalo de caracteres.)| 
|0x0180 - 0x024F|Caracteres entre 0x0180 (384 decimal) y 0x024F (591 decimal). (El Unicode [Latín-extendido-B](https://www.unicode.org/charts/PDF/U0180.pdf) intervalo de caracteres.)|
|0x0250 - 0x02AF|Caracteres entre 0x0250 (592 decimal) y 0x02AF (687 decimal). (El Unicode [Extensiones IPA](https://www.unicode.org/charts/PDF/U0250.pdf) intervalo de caracteres.)| 
|0x02B0 - 0x02FF|Caracteres entre 0x02B0 (688 decimal) y 0x02FF (767 decimal). (El Unicode [letras modificadoras de espaciado](https://www.unicode.org/charts/PDF/U02B0.pdf) intervalo de caracteres.)|
|0x0300 - 0x036F|Caracteres entre 0 x 0300 (768 decimal) y 0x036F (879 decimal). (El Unicode [marcas diacríticas combinadas](https://www.unicode.org/charts/PDF/U0300.pdf) intervalo de caracteres.)| 
  
 En la tabla siguiente se muestra ejemplos de entradas y las salidas correspondientes codificadas.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Para personalizar la lista segura, llame a la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>