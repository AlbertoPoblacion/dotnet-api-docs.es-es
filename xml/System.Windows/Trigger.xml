<Type Name="Trigger" FullName="System.Windows.Trigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f32c952a43ccf2c6a6f12dc16eb19deca911d8e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679759" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Trigger : System.Windows.TriggerBase, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Trigger extends System.Windows.TriggerBase implements class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Trigger" />
  <TypeSignature Language="VB.NET" Value="Public Class Trigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trigger : System::Windows::TriggerBase, System::ComponentModel::ISupportInitialize, System::Windows::Markup::IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un desencadenador que aplica valores de propiedad o realiza acciones de forma condicional.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] define las propiedades que corresponden a las acciones del usuario final, como por ejemplo la <xref:System.Windows.UIElement.IsMouseOver%2A> propiedad que se establece en `true` cuando el usuario desplace el cursor sobre un <xref:System.Windows.UIElement> o correspondiente <xref:System.Windows.ContentElement.IsMouseOver%2A> propiedad de un <xref:System.Windows.ContentElement>. Que representa las acciones del usuario final en valores de propiedad, junto con el <xref:System.Windows.Trigger> elemento, permite [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] estilos para cambiar los valores de propiedad basándose en esas acciones del usuario final, todo ello desde dentro de marcado.  
  
 Las propiedades cambiadas por los desencadenadores se restablecen automáticamente a su valor anterior cuando ya no se cumple la condición desencadenada. Los desencadenadores se optimizan para transitorio indica que se espera que cambien y el estado devuelto al original, como <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> en <xref:System.Windows.Controls.Button> y <xref:System.Windows.Controls.ListBoxItem.IsSelected%2A> en <xref:System.Windows.Controls.ListBoxItem>. El <xref:System.Windows.Trigger.Property%2A> de interés debe ser una propiedad de dependencia.  
  
 Tenga en cuenta que debe especificar tanto el <xref:System.Windows.Trigger.Property%2A> y <xref:System.Windows.Trigger.Value%2A> propiedades en un <xref:System.Windows.Trigger> para el desencadenador para que sea significativo. Si no se establecen una o ambas de las propiedades, se produce una excepción.  
  
 El <xref:System.Windows.Trigger.Setters%2A> propiedad de un <xref:System.Windows.Trigger> objeto solo puede contener <xref:System.Windows.Setter> objetos. Agregar un <xref:System.Windows.Setter> secundario a un <xref:System.Windows.Trigger> objeto, agrega implícitamente a la <xref:System.Windows.SetterBaseCollection> para el <xref:System.Windows.Trigger> objeto. <xref:System.Windows.EventSetter> no se admiten objetos; solo <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> admite <xref:System.Windows.EventSetter> objetos.  
  
 Hay otros tipos de desencadenadores. <xref:System.Windows.MultiTrigger> permite aplicar los cambios en función del estado de varias propiedades. <xref:System.Windows.EventTrigger> permite aplicar cambios cuando se produce un evento. <xref:System.Windows.DataTrigger> y <xref:System.Windows.MultiDataTrigger> son para propiedades enlazadas a datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un conjunto con nombre <xref:System.Windows.Style> disponibles para <xref:System.Windows.Controls.Button> controles. El <xref:System.Windows.Style> define un <xref:System.Windows.Trigger> elemento que cambia el <xref:System.Windows.Controls.Control.Foreground%2A> propiedad de un botón cuando el <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propiedad es `true`.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Trigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Trigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Trigger" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la propiedad que devuelve el valor que se compara con la propiedad <see cref="P:System.Windows.Trigger.Value" /> del desencadenador. La comparación es una comprobación de la igualdad de referencias.</summary>
        <value>
          <see cref="T:System.Windows.DependencyProperty" /> que devuelve el valor de propiedad del elemento. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto por esta propiedad se compara con el valor especificado por el <xref:System.Windows.Trigger.Value%2A> propiedad. La comparación que se realiza es una comprobación de igualdad de referencia. Si los dos valores coinciden, a continuación, el asociado <xref:System.Windows.Setter>s se aplican los valores de propiedad especificado.  
  
 Use la `ClassName.PropertyName` sintaxis para calificar la propiedad que especifica si el estilo o la plantilla que contiene este desencadenador no tiene la `TargetType` del conjunto de propiedades.  
  
 Tenga en cuenta que debe especificar tanto el <xref:System.Windows.Trigger.Property%2A> y <xref:System.Windows.Trigger.Value%2A> propiedades en un <xref:System.Windows.Trigger> para el desencadenador para que sea significativo. Si no se establecen una o ambas de las propiedades, se produce una excepción.  
  
   
  
## Examples  
 En el siguiente ejemplo contiene dos desencadenadores. El primer cambia el <xref:System.Windows.Controls.Control.Background%2A> propiedad de un <xref:System.Windows.Controls.Button> cuando el <xref:System.Windows.UIElement.IsMouseOver%2A> propiedad es **true**. Los cambios de la segundos la <xref:System.Windows.Controls.Control.Foreground%2A> propiedad de un botón cuando el <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propiedad es **true**. El <xref:System.Windows.Style.TargetType%2A> de la <xref:System.Windows.Style> está establecido en <xref:System.Windows.Controls.Button> y, por tanto, no es necesario calificar el `Property` propiedades con el nombre de clase.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Style" /> no puede contener un objeto <see cref="T:System.Windows.Trigger" /> que haga referencia a la propiedad <see cref="T:System.Windows.Style" />.</exception>
        <exception cref="T:System.InvalidOperationException">Una vez que se usa <see cref="T:System.Windows.Trigger" />, no se puede modificar.</exception>
        <altmember cref="P:System.Windows.Trigger.Value" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">Objeto en el que el convertidor de tipos establece el valor.</param>
        <param name="eventArgs">Datos que son pertinentes para el procesamiento del convertidor de tipos.</param>
        <summary>Administra los casos en los que un convertidor de tipos proporciona un valor para una propiedad de un objeto <see cref="T:System.Windows.Trigger" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este es el método al que hace referencia un aplicada <xref:System.Windows.Markup.XamlSetTypeConverterAttribute> atributo en el nivel de clase, lo que significa que este método procesa todos los intentos para establecer valores de <xref:System.Windows.Trigger> con un convertidor de tipos. Que no suele llamar a este método directamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos <see cref="T:System.Windows.Setter" />, que describen los valores de propiedad que se van a aplicar si se cumple la condición especificada.</summary>
        <value>El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *ZeroOrMoreSetters*  
 Cero o más <xref:System.Windows.Setter> objetos. No se admite <xref:System.Windows.EventSetter> objeto.  
  
 A <xref:System.Windows.Trigger> le permite usar <xref:System.Windows.Setter>s para aplicar propiedad valores cuando el elemento cumple una condición especificada. Por ejemplo, puede cambiar el color de fondo de un elemento al que tiene el foco.  
  
 Si la misma propiedad se establece más de una vez, se aplicará el último valor de propiedad.  
  
 El <xref:System.Windows.Trigger.Setters%2A> propiedad de un <xref:System.Windows.Trigger> objeto solo puede contener <xref:System.Windows.Setter> objetos. Agregar un <xref:System.Windows.Setter> secundario a un <xref:System.Windows.Trigger> objeto, agrega implícitamente a la <xref:System.Windows.SetterBaseCollection> para el <xref:System.Windows.Trigger> objeto. <xref:System.Windows.EventSetter> no se admiten objetos; solo <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> admite <xref:System.Windows.EventSetter> objetos.  
  
   
  
## Examples  
 Como se mencionó anteriormente, agregar un <xref:System.Windows.Setter> secundarios a una <xref:System.Windows.Trigger> objeto, agrega implícitamente a la <xref:System.Windows.SetterBaseCollection> para el <xref:System.Windows.Trigger> objeto. En el ejemplo siguiente, `<Trigger.Setters>` es implícito.  
  
 [!code-xaml[PhotoStoreDemoStyled#TriggerSettersRef](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#triggersettersref)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del objeto con la propiedad que hace que se apliquen los establecedores asociados.</summary>
        <value>El valor predeterminado de la propiedad es <see langword="null" />. Si el valor de esta propiedad es <see langword="null" />, la propiedad <see cref="P:System.Windows.Trigger.Property" /> se evalúa con respecto al elemento al que se aplica este estilo o esta plantilla (elemento primario con estilo o con plantilla).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer esta propiedad en el nombre de cualquier elemento dentro del ámbito del lugar donde la colección de desencadenadores (la colección que este <xref:System.Windows.Trigger> forma parte de) se aplica. Esto suele ser un elemento con nombre que esté dentro de la plantilla que contiene este <xref:System.Windows.Trigger>.  
  
 Puede asignar un objeto mediante el [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) sintaxis.  
  
   
  
## Examples  
 Un escenario que se utilizaría el <xref:System.Windows.Trigger.SourceName%2A> propiedad es cuando la propiedad de interés no es una propiedad del elemento primario con plantilla, como en el ejemplo siguiente:  
  
 [!code-xaml[ControlTemplateExamples#TriggerSourceName](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/menu.xaml#triggersourcename)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Una vez que se usa <see cref="T:System.Windows.Trigger" />, no se puede modificar.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica al objeto que está comenzando la inicialización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Setter> se convierte en una interfaz <xref:System.ComponentModel.ISupportInitialize>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica al objeto que se ha completado la inicialización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Setter> se convierte en una interfaz <xref:System.ComponentModel.ISupportInitialize>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto secundario que se va a agregar.</param>
        <summary>Agrega un objeto secundario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Trigger> se convierte en una interfaz <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a agregar al objeto.</param>
        <summary>Agrega el contenido de texto de un nodo al objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Trigger> se convierte en una interfaz <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Property")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("SourceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor que se va a comparar con el valor de propiedad del elemento. La comparación es una comprobación de la igualdad de referencias.</summary>
        <value>El valor predeterminado es <see langword="null" />. Vea también la sección Excepciones.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este valor se compara con el valor de propiedad devuelto por el <xref:System.Windows.Trigger.Property%2A> propiedad de la <xref:System.Windows.Trigger>. La comparación que se realiza es una comprobación de la calidad de referencia. Si los dos valores son iguales, a continuación, el asociado <xref:System.Windows.Setter>s se aplican los valores de propiedad especificado.  
  
 Tenga en cuenta que debe especificar tanto el <xref:System.Windows.Trigger.Property%2A> y <xref:System.Windows.Trigger.Value%2A> propiedades en un <xref:System.Windows.Trigger> para el desencadenador para que sea significativo. Por lo tanto, si no se especifican una o ambas de las propiedades, se produce una excepción.  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
   
  
## Examples  
 El ejemplo siguiente se cambia el <xref:System.Windows.Controls.Control.Foreground%2A> propiedad de un botón cuando el <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propiedad es **true**.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No se admiten expresiones como los enlaces.</exception>
        <exception cref="T:System.InvalidOperationException">Una vez que se usa <see cref="T:System.Windows.Trigger" />, no se puede modificar.</exception>
        <altmember cref="P:System.Windows.Trigger.Property" />
        <altmember cref="P:System.Windows.Trigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>