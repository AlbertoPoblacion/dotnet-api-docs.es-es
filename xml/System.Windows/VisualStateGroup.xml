<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="751780ca652293efb20831add6e93dccadf3f14b" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48603393" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contiene objetos <see cref="T:System.Windows.VisualState" /> mutuamente excluyentes y objetos <see cref="T:System.Windows.VisualTransition" /> que se utilizan para pasar de un estado a otro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.Windows.VisualStateGroup> contiene una colección de <xref:System.Windows.VisualState> objetos. Un <xref:System.Windows.VisualState> contiene una colección de <xref:System.Windows.Media.Animation.Storyboard> objetos que especifican cómo se cambia la apariencia del control cuando el control está en un estado determinado. Por ejemplo, un <xref:System.Windows.Controls.Button> podría tener un aspecto ligeramente diferente cuando se presiona que cuando no está presionado. Dos Estados que el <xref:System.Windows.Controls.Button> define corresponden a cuando se presiona (`"Pressed"`) y cuando no lo es (`"Normal"`).  
  
 Agregar <xref:System.Windows.VisualState> a un control estableciendo la `VisualStateManager.VisualStateGroups` propiedad adjunta en el control. Coloca los Estados que son mutuamente excluyentes entre sí en el mismo <xref:System.Windows.VisualStateGroup>. Por ejemplo, el <xref:System.Windows.Controls.CheckBox> tiene dos <xref:System.Windows.VisualStateGroup> objetos. Uno contiene los Estados, `Normal`, `MouseOver`, `Pressed`, y `Disabled`. El otro contiene los Estados, `Checked`, `UnChecked`, y `Indeterminate`. El <xref:System.Windows.Controls.CheckBox> pueden estar en Estados `MouseOver` y `UnChecked` al mismo tiempo, pero no puede ser el `MouseOver` y `Pressed` Estados al mismo tiempo.  
  
 Aunque puede agregar <xref:System.Windows.VisualState> objetos a cualquier elemento, son especialmente útiles para que otros usuarios puedan volver a definir el comportamiento visual de un <xref:System.Windows.Controls.Control>. Si crea un control personalizado que utiliza un <xref:System.Windows.Controls.ControlTemplate>, puede especificar que indica que el control puede estar en agregando un <xref:System.Windows.TemplateVisualStateAttribute> en su definición de clase. A continuación, cualquier persona que crea un nuevo <xref:System.Windows.Controls.ControlTemplate> para el control se puede agregar <xref:System.Windows.VisualState> objetos a la plantilla. El <xref:System.Windows.TemplateVisualStateAttribute> permite que herramientas de diseñador, como Expression Blend, expongan los Estados del control. Los Estados con el mismo <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> pertenecen al mismo <xref:System.Windows.VisualStateGroup>.  
  
 Para obtener más información sobre cómo usar <xref:System.Windows.VisualStateGroup> objetos en un <xref:System.Windows.Controls.ControlTemplate>, consulte [personalizar la apariencia de un Control existente creando una clase ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Para obtener más información sobre cómo crear controles que usan el <xref:System.Windows.VisualStateManager>, consulte [crear un Control que tiene una apariencia personalizable](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 El <xref:System.Windows.VisualStateGroup.Transitions%2A> contiene la propiedad <xref:System.Windows.VisualTransition> objetos que se aplican cuando el control realiza la transición entre Estados que se definen en el <xref:System.Windows.VisualStateGroup>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una sencilla <xref:System.Windows.Controls.ControlTemplate> para un <xref:System.Windows.Controls.Button> que contiene un <xref:System.Windows.Controls.Grid>. También contiene un <xref:System.Windows.VisualStateGroup> denominado `CommonStates`, que define el `MouseOver` y `Normal` Estados. El <xref:System.Windows.VisualStateGroup> también tiene un <xref:System.Windows.VisualTransition> que especifica que se tarda medio segundo la <xref:System.Windows.Controls.Grid> para cambiar de verde a rojo cuando el usuario mueve el puntero del mouse sobre el <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Windows.VisualState" Usage="System.Windows.VisualStateGroup.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el <see cref="T:System.Windows.VisualState" /> que se aplica actualmente al control.</summary>
        <value><see cref="T:System.Windows.VisualState" /> que se aplica actualmente al control.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanged : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanged : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que un control pase a un estado diferente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se produce después de las transiciones de control a un nuevo estado y el <xref:System.Windows.VisualStateGroup.CurrentStateChanging> se produce el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanging : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanging : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un control comienza a pasar a un estado diferente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El evento tiene lugar cuando el control comienza a Estados de transición. Si un <xref:System.Windows.VisualTransition> se aplica el cambio de estado, este evento se produce cuando comienza la transición. Si un <xref:System.Windows.VisualTransition> , no se aplica este evento se produce después de que el control realiza la transición al nuevo estado, pero antes la <xref:System.Windows.VisualStateGroup.CurrentStateChanged> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualStateGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del elemento <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <value>Nombre del objeto <see cref="T:System.Windows.VisualStateGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los autores de controles especifican en qué estados puede estar el control mediante la adición de un <xref:System.Windows.TemplateVisualStateAttribute> en su definición de clase. Los Estados con el mismo <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> pertenecen al mismo <xref:System.Windows.VisualStateGroup>. Establecer el <xref:System.Windows.VisualStateGroup.Name%2A> de la <xref:System.Windows.VisualStateGroup> al valor de la <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se crean dos <xref:System.Windows.VisualStateGroup> objetos que se denominan `CommonStates` y `FocusStates`. El control estará en exactamente un estado de cada uno <xref:System.Windows.VisualStateGroup> en todo momento. Para el ejemplo completo, vea [personalizar la apariencia de un Control existente creando una clase ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.States : System.Collections.IList" Usage="System.Windows.VisualStateGroup.States" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de objetos <see cref="T:System.Windows.VisualState" /> que se excluyen mutuamente.</summary>
        <value>Colección de objetos <see cref="T:System.Windows.VisualState" /> que se excluyen mutuamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea una sencilla <xref:System.Windows.Controls.ControlTemplate> para un <xref:System.Windows.Controls.Button> que contiene un <xref:System.Windows.Controls.Grid>. También contiene un <xref:System.Windows.VisualStateGroup> denominado `CommonStates`, que define el `MouseOver` y `Normal` Estados. El <xref:System.Windows.VisualStateGroup> también tiene un <xref:System.Windows.VisualTransition> que especifica que se tarda medio segundo la <xref:System.Windows.Controls.Grid> para cambiar de verde a rojo cuando el usuario mueve el puntero del mouse sobre el <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transitions : System.Collections.IList" Usage="System.Windows.VisualStateGroup.Transitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de objetos <see cref="T:System.Windows.VisualTransition" />.</summary>
        <value>La colección de objetos <see cref="T:System.Windows.VisualTransition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.VisualTransition> objetos <xref:System.Windows.VisualStateGroup.Transitions%2A> se aplican cuando el control realiza la transición entre Estados que se definen en el <xref:System.Windows.VisualStateGroup>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una sencilla <xref:System.Windows.Controls.ControlTemplate> para un <xref:System.Windows.Controls.Button> que contiene un <xref:System.Windows.Controls.Grid>. También contiene un <xref:System.Windows.VisualStateGroup> denominado `CommonStates`, que define el `MouseOver` y `Normal` Estados. El <xref:System.Windows.VisualStateGroup> también tiene un <xref:System.Windows.VisualTransition> que especifica que se tarda medio segundo la <xref:System.Windows.Controls.Grid> para cambiar de verde a rojo cuando el usuario mueve el puntero del mouse sobre el <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>