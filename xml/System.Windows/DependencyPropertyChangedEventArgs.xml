<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="437f11be4b842cf6fe5f1e6049b75308904d041d" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64187364" /></Metadata><TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public value class DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="F#" Value="type DependencyPropertyChangedEventArgs = struct" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona datos de los distintos eventos de cambio de propiedades. Normalmente, estos eventos notifican cambios de valor efectivos en el valor de una propiedad de dependencia de solo lectura. Otro uso es como parte de una implementación de <see cref="T:System.Windows.PropertyChangedCallback" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los eventos que usan el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase para los datos de evento y el <xref:System.Windows.DependencyPropertyChangedEventHandler> implementaciones de método para los controladores, suelen seguir el patrón de nomenclatura `Is*Changed`y generalmente se implementan como [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] eventos sin <xref:System.Windows.RoutedEvent> copia de seguridad (no son eventos enrutados). Alguna clase controlar métodos "handle" en caso contrario, expone eventos que notifican un cambio de estado a través de un cambio de propiedad, como <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, utilice también el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase para los datos de evento.  
  
 El escenario de <xref:System.Windows.PropertyChangedCallback> consiste en usar los argumentos para los valores antiguos y nuevos informes que proceden de la evaluación del sistema de propiedades de la propiedad. Una devolución de llamada que procesa los valores antiguos y nuevos puede elegir un tratamiento especial según estos valores, como decidir no responder a cambios de valor que se consideran no significativos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de un <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos. La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generados por la clase personalizada.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As DependencyProperty, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyPropertyChangedEventArgs(System::Windows::DependencyProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.DependencyPropertyChangedEventArgs : System.Windows.DependencyProperty * obj * obj -&gt; System.Windows.DependencyPropertyChangedEventArgs" Usage="new System.Windows.DependencyPropertyChangedEventArgs (property, oldValue, newValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">Identificador de la propiedad de dependencia que ha cambiado.</param>
        <param name="oldValue">Valor de la propiedad antes del cambio notificado por el evento o cambio de estado correspondiente.</param>
        <param name="newValue">Valor de la propiedad después del cambio notificado por el evento o cambio de estado correspondiente.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los implementadores de eventos personalizados que notifican los cambios de propiedad de dependencia deben utilizar este constructor para rellenar los datos del evento con los detalles del cambio cuando se provoca el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</param>
        <summary>Determina si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</summary>
        <returns><see langword="true" /> si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación se basa en la equivalencia de valor de todas las propiedades, incluidas las propiedades internas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (args As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar con el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</param>
        <summary>Determina si el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</summary>
        <returns><see langword="true" /> si el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente a la estructura <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación se basa en la equivalencia de valor de todas las propiedades, incluidas las propiedades internas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyPropertyChangedEventArgs.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene un código hash de este <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
        <returns>Código hash entero de 32 bits con signo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor de la propiedad después del cambio.</summary>
        <value>Valor de la propiedad después del cambio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo del valor proporcionado siempre debe convertir al tipo de la propiedad de dependencia que se va a notificar.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de un <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos. La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generados por la clase personalizada.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OldValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor de la propiedad antes del cambio.</summary>
        <value>Valor de la propiedad después del cambio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo del valor proporcionado siempre debe convertir al tipo de la propiedad de dependencia que se va a notificar.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de un <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos. La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generados por la clase personalizada.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
        <summary>Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados tienen el mismo valor.</summary>
        <returns><see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son equivalentes; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación usa la misma lógica que <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="System.Windows.DependencyPropertyChangedEventArgs.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
        <summary>Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados son diferentes.</summary>
        <returns><see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son diferentes; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación devuelve la negación de la misma lógica que <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador para la propiedad de dependencia en la que se produjo el cambio de valor.</summary>
        <value>Campo del identificador de la propiedad de dependencia en la que se produjo el cambio de valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es pertinente si se usa en una común <xref:System.Windows.PropertyChangedCallback> que se registra para varias propiedades, y es necesario eliminar la ambigüedad de los cambios de propiedad invocan la devolución de llamada. <xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> no es normalmente relevante para generar eventos, porque normalmente hay una correspondencia 1:1 entre las propiedades y eventos que notifican el cambio de propiedad. El evento que se genera es la indicación de que cambia la propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>