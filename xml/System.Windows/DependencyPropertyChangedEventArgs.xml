<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="840f1b77f0e3528c43e12653ee199d6199ef1109" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public value class DependencyPropertyChangedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c5ee3-101">Proporciona datos de los distintos eventos de cambio de propiedades.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5ee3-101">Provides data for various property changed events.</span>
      </span>
      <span data-ttu-id="c5ee3-102">Normalmente, estos eventos notifican cambios de valor efectivos en el valor de una propiedad de dependencia de solo lectura.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5ee3-102">Typically these events report effective value changes in the value of a read-only dependency property.</span>
      </span>
      <span data-ttu-id="c5ee3-103">Otro uso es como parte de una implementación de <see cref="T:System.Windows.PropertyChangedCallback" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5ee3-103">Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-104">Los eventos que utilizan el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase para los datos de evento y el <xref:System.Windows.DependencyPropertyChangedEventHandler> general, las implementaciones de método para los controladores, seguir el patrón de nomenclatura `Is*Changed`y generalmente se implementan como [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] eventos sin <xref:System.Windows.RoutedEvent> copias de seguridad (no son eventos enrutados).</span><span class="sxs-lookup"><span data-stu-id="c5ee3-104">The events that use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data, and the <xref:System.Windows.DependencyPropertyChangedEventHandler> method implementations for handlers, generally follow the naming pattern `Is*Changed`, and are generally implemented as [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events without <xref:System.Windows.RoutedEvent> backing (they are not routed events).</span></span> <span data-ttu-id="c5ee3-105">Alguna clase controlar métodos "handle" en caso contrario, expone eventos que notifican un cambio de estado a través de un cambio de propiedad, como <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, utilice también el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase para los datos del evento.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-105">Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, also use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data.</span></span>  
  
 <span data-ttu-id="c5ee3-106">El escenario de <xref:System.Windows.PropertyChangedCallback> consiste en usar los argumentos para valores antiguos y nuevos informes que proceden de la evaluación del sistema de propiedad de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-106">The scenario for <xref:System.Windows.PropertyChangedCallback> is to use the arguments to report old and new values that come from the property system evaluation of the property.</span></span> <span data-ttu-id="c5ee3-107">Una devolución de llamada que procesa valores antiguos y nuevos puede elegir un tratamiento especial según estos valores, como decidir no responder a cambios de valor que se consideran no significativos.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-107">A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5ee3-108">En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de una <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-108">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="c5ee3-109">La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-109">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="c5ee3-110">A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generado por la clase personalizada.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-110">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As DependencyProperty, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyPropertyChangedEventArgs(System::Windows::DependencyProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">
          <span data-ttu-id="c5ee3-111">Identificador de la propiedad de dependencia que ha cambiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-111">The identifier for the dependency property that changed.</span>
          </span>
        </param>
        <param name="oldValue">
          <span data-ttu-id="c5ee3-112">Valor de la propiedad antes del cambio notificado por el evento o cambio de estado correspondiente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-112">The value of the property before the change reported by the relevant event or state change.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="c5ee3-113">Valor de la propiedad después del cambio notificado por el evento o cambio de estado correspondiente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-113">The value of the property after the change reported by the relevant event or state change.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5ee3-114">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-114">Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-115">Los implementadores de eventos personalizados que notifican los cambios de propiedad de dependencia deben utilizar este constructor para rellenar los datos del evento con los detalles del cambio cuando se produce el evento.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-115">Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5ee3-116">Devuelve si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-116">Returns whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c5ee3-117">Objeto que se va a comparar con el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-117">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5ee3-118">Determina si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-118">Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5ee3-119">
            <see langword="true" /> si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-119">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-120">Esta implementación se basa en la equivalencia de valor de todas las propiedades, incluidas las propiedades internas.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-120">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (args As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::DependencyPropertyChangedEventArgs args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="c5ee3-121">
            <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar con el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-121">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5ee3-122">Determina si el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-122">Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5ee3-123">
            <see langword="true" /> si el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente a la estructura <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-123">
              <see langword="true" /> if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-124">Esta implementación se basa en la equivalencia de valor de todas las propiedades, incluidas las propiedades internas.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-124">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5ee3-125">Obtiene un código hash de este <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-125">Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5ee3-126">Código hash entero de 32 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-126">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5ee3-127">Obtiene el valor de la propiedad después del cambio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-127">Gets the value of the property after the change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5ee3-128">Valor de la propiedad después del cambio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-128">The property value after the change.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-129">El tipo del valor proporcionado siempre debe ser convertibles al tipo de la propiedad de dependencia que se va a notificar.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-129">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5ee3-130">En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de una <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-130">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="c5ee3-131">La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-131">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="c5ee3-132">A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generado por la clase personalizada.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-132">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OldValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5ee3-133">Obtiene el valor de la propiedad antes del cambio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-133">Gets the value of the property before the change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5ee3-134">Valor de la propiedad después del cambio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-134">The property value before the change.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-135">El tipo del valor proporcionado siempre debe ser convertibles al tipo de la propiedad de dependencia que se va a notificar.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-135">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5ee3-136">En el ejemplo siguiente se usa el <xref:System.Windows.DependencyPropertyChangedEventArgs> clase en el contexto de una <xref:System.Windows.PropertyChangedCallback> para una propiedad determinada de una clase personalizada que también define los eventos.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-136">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="c5ee3-137">La devolución de llamada toma los resultados antiguos y nuevos valores desde el sistema de propiedades comunicado por <xref:System.Windows.DependencyPropertyChangedEventArgs>y vuelve a empaquetar estos elementos en una clase de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-137">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="c5ee3-138">A continuación, se usan los argumentos nuevos como los datos para un evento "ValueChanged" definido por y generado por la clase personalizada.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-138">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c5ee3-139">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-139">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c5ee3-140">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-140">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5ee3-141">Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados tienen el mismo valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-141">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5ee3-142">
            <see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son equivalentes; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-142">
              <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-143">La implementación usa la misma lógica como <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-143">The implementation uses the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c5ee3-144">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-144">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c5ee3-145">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-145">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5ee3-146">Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados son diferentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-146">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5ee3-147">
            <see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son diferentes; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-147">
              <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-148">La implementación devuelve la negación de la misma lógica como <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-148">The implementation returns the negation of the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5ee3-149">Obtiene el identificador para la propiedad de dependencia en la que se produjo el cambio de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-149">Gets the identifier for the dependency property where the value change occurred.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5ee3-150">Campo del identificador de la propiedad de dependencia en la que se produjo el cambio de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5ee3-150">The identifier field of the dependency property where the value change occurred.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5ee3-151">Esta propiedad es relevante si utiliza en común <xref:System.Windows.PropertyChangedCallback> que se registra para varias propiedades, y es necesario eliminar la ambigüedad de los cambios de propiedad invocan la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-151">This property is relevant if used within a common <xref:System.Windows.PropertyChangedCallback> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</span></span> <span data-ttu-id="c5ee3-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> no es normalmente relevante para generar eventos, porque no hay normalmente una correspondencia 1:1 entre las propiedades y eventos que informan del cambio de propiedad.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</span></span> <span data-ttu-id="c5ee3-153">El evento que se produjo es la indicación de que cambia la propiedad.</span><span class="sxs-lookup"><span data-stu-id="c5ee3-153">The event that was raised is itself the indication of which property changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>