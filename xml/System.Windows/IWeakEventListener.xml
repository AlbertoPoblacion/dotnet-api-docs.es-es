<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492176" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.WeakEventManager> (un distribuidor) reenvía un evento mediante una llamada a la <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> método en las clases que implementan esta interfaz, y que se han agregado como agentes de escucha mediante una llamada a <xref:System.Windows.WeakEventManager> métodos con antelación.  
  
 La principal razón para seguir el patrón WeakEvent es cuando el origen de eventos tiene una duración del objeto que es potencialmente independiente de los agentes de escucha de eventos. Mediante el envío de eventos central de un <xref:System.Windows.WeakEventManager> habilita los controladores para los agentes de escucha de elementos no utilizados recopilan (o la depuración manual) incluso si la duración del objeto de origen se extiende más allá de los agentes de escucha. Por el contrario, un enlace de eventos normal mediante `+=` o sintaxis de eventos específica del lenguaje equivalente hace que el origen podría seguir conectado contener una referencia segura a los controladores. Esto evita que las referencias del agente de escucha que se recopila de manera oportuna.  
  
 Una situación común donde las relaciones entre orígenes y los agentes de escucha sugiere el uso de este patrón es el control de eventos de actualización procedentes de orígenes para los enlaces de datos.  
  
 Puede usar el patrón WeakEvent para escuchar los eventos que son externos a la aplicación. Solo necesita definir un <xref:System.Windows.WeakEventManager> , proporcionar el comportamiento de escucha en <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>y usar el <xref:System.Windows.WeakEventManager> para asociar el controlador de referencias en lugar de `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
        <param name="sender">Object that originated the event.</param>
        <param name="e">Event data.</param>
        <summary>Receives events from the centralized event manager.</summary>
        <returns>
          <see langword="true" /> if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se implementa <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> para proporcionar compatibilidad con el modelo WeakEvent para dos eventos `ClockwiseSpin` y `CounterclockwiseSpin` cada uno tiene una dedicado <xref:System.Windows.WeakEventManager> (no mostrado). Esta implementación llama al código auxiliar del controlador de clase para cada evento admitido, conversión de los datos de evento (en este caso, los dos eventos comparten un tipo de datos de evento `SpinEventArgs`). La implementación devuelve `false` si el evento recibido no es uno que se espera.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Este método está pensado para recibir todos los posibles eventos donde está el receptor en una lista de agente de escucha. Especialmente si se implementa para una clase que está realizando escuchas para más de un evento, debe comprobar el tipo de entrada <paramref name="managerType" /> parámetro con el fin de saber qué evento de la llamada corresponde a. Es por esta razón que cada evento que se va a parte del patrón debe tener una dedicado <see cref="T:System.Windows.WeakEventManager" />. Además, el <paramref name="e" /> parámetro es de tipo general <see cref="T:System.EventArgs" />. Por lo tanto, para obtener propiedades específicas de los datos del evento, la implementación deberá convertir al tipo de datos de evento específico.  Normalmente, después de comprobar la identidad del evento según el <see cref="T:System.Windows.WeakEventManager" /> tipo, la implementación debe llamar a un controlador de clase privada. El controlador de clase posiblemente podría ser el mismo controlador de clase que se usa para administrar el evento para los agentes de escucha que se agregan mediante el patrón de eventos convencional de agregar a través de <see langword="+=" /> al evento en el remitente. La siguiente sección ejemplo proporciona una plantilla de implementación aproximada.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>