<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComponentResourceKey.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54ab025443f3717a6f64e96df27f296ecc9101058.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ab025443f3717a6f64e96df27f296ecc9101058</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">Define o hace referencia a las claves de recurso basándose en los nombres de clase de ensamblados externos, así como un identificador adicional.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">Para <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> obtener información, consulte <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">Esta clase implementa un tipo de objeto que es útil para crear claves que se basan en tipos en ensamblados, además de un identificador.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>Because you define or reference the type, you do not need to request a specific <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, and more than one set of resources can exist in the assembly, each differentiated by the type of their <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">Puesto que definir o hacer referencia al tipo, no es necesario solicitar un determinado <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, y puede existir más de un conjunto de recursos en el ensamblado, cada uno de ellos diferenciado por el tipo de sus <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>There are two ways to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">Hay dos maneras de definir un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, constructed with a <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> that exists in the external resource assembly, and a <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</source>
          <target state="translated">Si desea que una clave de fácil acceso, puede definir una propiedad estática en el código de clase de control que devuelve un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, construido con un <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> que existe en el ensamblado de recursos externos y un <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">La clave se puede utilizar para definir estilos predeterminados alternativos para los controles en un ensamblado, intercambiando el ensamblado de recursos externos original para uno personalizado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">También puede definir una parte de recurso con nombre dentro de un estilo de control más grande o una plantilla para exponer un punto de entrada de personalización.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">Esto es especialmente útil si va a definir un diccionario de recursos de tema para el control.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">También puede usar el <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> en sintaxis detallada directamente para crear una instancia separada de la clave.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">Esto es útil si desea declarar los recursos privados de otros ensamblados que son menos detectables para la personalización.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor is not generally used, because a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> value and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value are required for proper initialization.</source>
          <target state="translated">El constructor predeterminado no es suela utilizar, porque un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> valor y <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> valor son necesarios para la inicialización correcta.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">El constructor predeterminado existe principalmente para admitir <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> uso XAML en forma de parámetro con nombre.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The type that defines the resource key.</source>
          <target state="translated">Tipo que define la clave de recurso.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>A unique identifier to differentiate this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> from others associated with the <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> type.</source>
          <target state="translated">Identificador único para diferenciar este<ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> de otros asociados al tipo <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Initializes a new instance of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> , specifying the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">Inicializa una nueva instancia de <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>, especificando el <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> que define la clave y un objeto que se va a usar como identificador de recursos adicional.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:</source>
          <target state="translated">Este constructor existe para dos escenarios, con el primer escenario es el más importante:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports creating a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">Admite la creación de un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> que, a continuación, se expone como un campo estático público en una clase de control personalizado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">Esto simplifica el acceso de un control a sus recursos definidos en la plantilla a través de <ph id="ph1">`{x:Static}`</ph> usos para los valores de propiedad de plantilla.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">Admite <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> uso XAML en forma de parámetro posicional, que es una técnica disponible para otros fabricantes que hacen referencia a un recurso de componente.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a static key of a control class to provide a style customization entry point.</source>
          <target state="translated">En el ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> que, a continuación, se expone como una clave estática de una clase de control para proporcionar un punto de entrada de la personalización de estilo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">Obtiene el objeto de ensamblado que indica en qué diccionario de ensamblado se debe buscar el valor asociado a esta clave.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">Ensamblado recuperado, como una clase de reflexión.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Object to compare with the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">Objeto que se va a comparar con el objeto <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Determines whether the provided object is equal to the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">Determina si el objeto proporcionado es igual que el objeto <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los objetos son iguales; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</source>
          <target state="translated">Dos claves son iguales si ambas tienen los mismos valores para todas sus propiedades configurables de la inmediatas (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>Returns a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">Devuelve un código hash para esta <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">Valor entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">Obtiene o establece un identificador único para diferenciar esta clave de otras asociadas a este tipo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>A unique identifier.</source>
          <target state="translated">Identificador único.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically this is a string.</source>
          <target state="translated">Suele ser una cadena.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">Para <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> obtener información, consulte <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically, the string used for a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">Normalmente, la cadena utilizada para una <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> valor se ajusta a la <bpt id="p1">[</bpt>XamlName (gramática)<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> to differentiate this key from others associated with this type.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> para diferenciar esta clave de otras asociadas a este tipo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>Gets the string representation of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">Obtiene la representación de cadena de un objeto <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>The string representation.</source>
          <target state="translated">Representación de cadena.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that defines the resource key.</source>
          <target state="translated">Obtiene o establece el valor de <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que define la clave de recurso.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The type that defines the resource key.</source>
          <target state="translated">Tipo que define la clave de recurso.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">Para <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> obtener información, consulte <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> elemento se utiliza en componentes personalizados para definir las claves de recursos que se obtiene acceso desde ensamblados externos, basándose en un ensamblado que contiene el tipo de destino.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">Componentes personalizados suelen definen nuevos tipos que deben estar en el ensamblado donde se encuentra el recurso.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">Como regla general, estos tipos no tienen ninguna otra implementación, los tipos solo existen con el fin de satisfacer los requisitos de búsqueda de un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The following example shows how to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> including <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> using the <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo definir un <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> incluidos <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> mediante la <bpt id="p1">[</bpt>extensión de marcado ComponentResourceKey<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>This resource can then be placed in an external assembly and accessed by a key usage that requests the resource using an analogous <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> in the request.</source>
          <target state="translated">Este recurso, a continuación, se coloca en un ensamblado externo y obtener acceso a un uso de clave que solicita el recurso mediante un análogo <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> en la solicitud.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>