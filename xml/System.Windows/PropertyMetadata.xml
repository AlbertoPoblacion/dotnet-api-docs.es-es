<Type Name="PropertyMetadata" FullName="System.Windows.PropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="423f853a60d99a5767f47d8a9e4d3ef0dce3cb15" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39845063" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMetadata extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyMetadata" />
  <TypeSignature Language="F#" Value="type PropertyMetadata = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define ciertos aspectos de comportamiento de una propiedad de dependencia tal como se aplica a un tipo específico, incluidas las condiciones con las que se registró.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los metadatos de propiedad pueden definirse y se usa durante el registro de la propiedad de dependencia cuando se llama a la <xref:System.Windows.DependencyProperty.Register%2A> método (o variaciones para las propiedades adjuntas o las propiedades de dependencia de solo lectura), o después del registro de propietario original cuando se llama a la <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> método. <xref:System.Windows.DependencyProperty.AddOwner%2A> También toma los metadatos de propiedad.  
  
 Esta clase es una clase base concreta que se puede usar en cada una de estas llamadas. Sin embargo, es muy común para especificar los metadatos mediante una de las clases derivadas como <xref:System.Windows.FrameworkPropertyMetadata>. Estas clases derivadas admiten metadatos más detallados incluidos como valores de propiedad booleano, que son útiles para detectar o habilitar algunos comportamientos de diseño y el sistema de propiedad sólo se implementan en el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] nivel de marco.  
  
 Varias propiedades de esta clase son lectura y escritura para el modelo de objetos, pero solo se pueden escribir antes de la instancia que se va a usar en una operación de propiedad del sistema, como <xref:System.Windows.DependencyProperty.Register%2A> o <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Cada una de estas propiedades también se podría haber establecido por el constructor, pero se exponen para que <xref:System.Windows.PropertyMetadata.Merge%2A> las implementaciones de método pueden establecerlas.  
  
<a name="xamlTextUsage_PropertyMetadata"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Este tipo y los miembros de este tipo, no se utilizan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">Valor predeterminado que se especifica para una propiedad de dependencia, proporcionado normalmente como un valor de algún tipo específico.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con un valor predeterminado especificado para la propiedad de dependencia a la que se aplicarán estos metadatos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo del valor proporcionado para `defaultValue` debe coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a. Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación (el error de coincidencia producirá una excepción en tiempo de ejecución).  
  
 Aunque es el valor predeterminado por el constructor sin parámetros, un `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue> no se puede especificar. Si intenta hacerlo, se producirá una excepción.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con la referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de algún tipo específico.</param>
        <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con el valor predeterminado y la referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo del valor proporcionado `defaultValue` debe coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a. Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación (el error de coincidencia producirá una excepción en tiempo de ejecución).  
  
 Aunque es el valor predeterminado por el constructor sin parámetros, un `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue> no se puede especificar. Si intenta hacerlo, se producirá una excepción.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de algún tipo específico.</param>
        <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
        <param name="coerceValueCallback">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> en esta propiedad.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con el valor predeterminado y las devoluciones de llamada especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si desea especificar un <xref:System.Windows.CoerceValueCallback> pero no un <xref:System.Windows.PropertyChangedCallback>, puede pasar `null` para el `propertyChangedCallback` parámetro.  
  
 El tipo del valor proporcionado para `defaultValue` debe coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a. Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación (el error de coincidencia producirá una excepción en tiempo de ejecución).  
  
 Aunque es el valor predeterminado por el constructor sin parámetros, un `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue> no se puede especificar. Si intenta hacerlo, se producirá una excepción.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.CoerceValueCallback CoerceValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CoerceValueCallback As CoerceValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::CoerceValueCallback ^ CoerceValueCallback { System::Windows::CoerceValueCallback ^ get(); void set(System::Windows::CoerceValueCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoerceValueCallback : System.Windows.CoerceValueCallback with get, set" Usage="System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.CoerceValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una referencia a una implementación de <see cref="T:System.Windows.CoerceValueCallback" /> especificada en estos metadatos.</summary>
        <value>Referencia de implementación de <see cref="T:System.Windows.CoerceValueCallback" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las devoluciones de llamada en los metadatos de propiedad no son miembros públicos normalmente en el tipo contenedor, por lo que el valor de esta propiedad no es importante para la mayoría de los escenarios que simplemente utilizan los metadatos de una propiedad de dependencia existente. Una razón se expone esta propiedad es para que las subclases de metadatos pueden realizar la lógica de combinación si especifican metadatos base y metadatos de invalidación o agregando un <xref:System.Windows.CoerceValueCallback>. Sin embargo, el valor predeterminado de mezcla lógica para un <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> consiste en reemplazar el anterior.  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> se define en el modelo de objetos de lectura y escritura. Esto sucede así <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> se pueden ajustar después de la inicialización de la <xref:System.Windows.PropertyMetadata> propio objeto. Sin embargo, una vez que se consumen los metadatos como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y las propiedades se consideran inmutables. Se intentó establecer <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> una vez <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : obj with get, set" Usage="System.Windows.PropertyMetadata.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor predeterminado de la propiedad de dependencia.</summary>
        <value>Valor predeterminado de la propiedad. El valor predeterminado en un <see cref="T:System.Windows.PropertyMetadata" /> instancia creada con el constructor sin parámetros será <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> se define en el modelo de objetos de lectura y escritura. Esto sucede así <xref:System.Windows.PropertyMetadata.DefaultValue%2A> se pueden ajustar después de la inicialización de la <xref:System.Windows.PropertyMetadata> propio objeto. Sin embargo, una vez que se consumen los metadatos como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y las propiedades se consideran inmutables. Se intentó establecer <xref:System.Windows.PropertyMetadata.DefaultValue%2A> una vez <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.  
  
 Aunque es el valor predeterminado por el constructor sin parámetros, un `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue> no se puede establecer mediante <xref:System.Windows.PropertyMetadata.DefaultValue%2A> o el constructor. Si intenta hacerlo, se producirá una excepción.  
  
<a name="xamlTextUsage_PropertyChangedCallback"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Los miembros de este tipo no se utilizan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> tras su creación.</exception>
        <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="protected bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.PropertyMetadata.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que determina si se han aplicado los metadatos a una propiedad de alguna manera, lo que ha producido el estado inmutable de esta instancia de metadatos.</summary>
        <value>
          <see langword="true" /> si la instancia de metadatos es inmutable; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las distintas propiedades de <xref:System.Windows.PropertyMetadata>, tales como <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, se definen en el modelo de objetos de lectura y escritura. Esto es para que dichas propiedades se pueden ajustar después de la inicialización de la <xref:System.Windows.PropertyMetadata> propio objeto. Sin embargo, una vez que los metadatos se aplican a una propiedad de dependencia como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y las propiedades se consideran inmutables. En el momento de una de estas llamadas, <xref:System.Windows.PropertyMetadata.OnApply%2A> se llama a, y el valor de esta propiedad se establece en `true`.  
  
   
  
## Examples  
 El ejemplo siguiente se comprueba <xref:System.Windows.PropertyMetadata.IsSealed%2A> antes de una operación de establecimiento de una propiedad de metadatos personalizados.  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="propertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">Metadatos base para combinar con los valores de esta instancia.</param>
        <param name="dp">Propiedad de dependencia a la que se aplican estos metadatos.</param>
        <summary>Combina estos metadatos con los metadatos base.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se usa internamente cuando se invalida los metadatos (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método).  
  
   
  
## Examples  
 El ejemplo siguiente implementa una combinación de un tipo de metadatos personalizados que agrega una propiedad adicional a los metadatos de propiedad.  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Las implementaciones que se derivan de la clase <see cref="T:System.Windows.PropertyMetadata" /> deben invalidar este método para tener en cuenta las propiedades de metadatos que hayan agregado en sus implementaciones. Por ejemplo, su implementación podría haber agregado un nuevo valor de enumeración basada en marcas y el <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementación, a continuación, podrá combinar esos indicadores correctamente.  Llame siempre a la implementación base antes que el código de implementación, ya que la implementación base se ocupa de combinar todas las propiedades ya definidas en el <see cref="T:System.Windows.PropertyMetadata" /> tipo.  El comportamiento exacto de la combinación es decisión suya. Puede elegir tener valores combinados, revierta al valor base si se han dejado los metadatos derivados en el valor predeterminado, o muchos otros comportamientos basados en los tipos de propiedades que se ha agregado a la clase de metadatos concreto y sus significados.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="propertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">Propiedad de dependencia a la que se han aplicado los metadatos.</param>
        <param name="targetType">Tipo asociado a estos metadatos si se trata de metadatos específicos de tipo. Si éstos son los metadatos predeterminados, este valor es una referencia null.</param>
        <summary>Se le llama cuando los metadatos se han aplicado a una propiedad, que indica que se sellan los metadatos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las subclases deben asegurar que cualquier mutabilidad de la estructura de datos de un <xref:System.Windows.PropertyMetadata> subclase debe marcarse como inmutable una vez <xref:System.Windows.PropertyMetadata.OnApply%2A> se llama. Se le llama una vez que los metadatos se aplican a una operación del sistema de propiedades (registrar, agregar propietario, invalidar metadatos).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChangedCallback">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyChangedCallback PropertyChangedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyChangedCallback As PropertyChangedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyChangedCallback ^ PropertyChangedCallback { System::Windows::PropertyChangedCallback ^ get(); void set(System::Windows::PropertyChangedCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyChangedCallback : System.Windows.PropertyChangedCallback with get, set" Usage="System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una referencia a una implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada en estos metadatos.</summary>
        <value>Referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las devoluciones de llamada en los metadatos de propiedad no son miembros públicos normalmente en el tipo de definición, por lo que el valor de esta propiedad no es importante para la mayoría de los escenarios que simplemente utilizan los metadatos de una propiedad de dependencia existente. Una razón se expone esta propiedad es para que las clases de metadatos pueden realizar la lógica de combinación si se especifican metadatos base y metadatos de invalidación o agregando un <xref:System.Windows.PropertyChangedCallback>. La lógica de combinación predeterminada consiste en mantener todos los <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementaciones en una tabla y llamada de ellos, con las devoluciones de llamada establecidas por la clase más profunda en la jerarquía que se ejecuta primero.  
  
 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> se define en el modelo de objetos de lectura y escritura. Esto sucede así <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> se pueden ajustar después de la inicialización de la <xref:System.Windows.PropertyMetadata> propio objeto. Sin embargo, una vez que se consumen los metadatos como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y las propiedades se consideran inmutables. Se intentó establecer <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> una vez <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      </Docs>
    </Member>
  </Members>
</Type>