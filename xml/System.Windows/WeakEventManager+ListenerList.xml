<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f0f2be98debc822496ae0fb7a0b36b79ece2165" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679779" />
  </Metadata>
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="db8eb-101">Proporciona una lista de colecciones integrada para almacenar los agentes de escucha de <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="db8eb-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-102">Aunque esta lista contiene los miembros que son similares a las definidas por <xref:System.Collections.IList> y <xref:System.Collections.ICollection>y proporcionan una funcionalidad similar, esta clase implementa ninguna de las interfaces.</span><span class="sxs-lookup"><span data-stu-id="db8eb-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="db8eb-103">La mayoría <xref:System.Windows.WeakEventManager> no es necesario utilizar ningún miembro en clases derivadas <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="db8eb-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="db8eb-104">El <xref:System.Windows.WeakEventManager> métodos <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> y <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Utilice default <xref:System.Windows.WeakEventManager.ListenerList> internamente, una lista de cada `source`.</span><span class="sxs-lookup"><span data-stu-id="db8eb-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="db8eb-105">Basta con llamar a <xref:System.Windows.WeakEventManager.ListenerList> métodos si su <xref:System.Windows.WeakEventManager> clase mantiene varias listas para la misma combinación de origen del evento, con cada lista creada para responder a distintas condiciones del evento.</span><span class="sxs-lookup"><span data-stu-id="db8eb-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="db8eb-106">En este caso, no utilizaría <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> y <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> y en su lugar se implementaría `AddListener` o `RemoveListener` actuar sobre los agentes de escucha en sólo una de las listas de agente de escucha interno, normalmente basadas en un parámetro que se agrega a `AddListener` o `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="db8eb-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="db8eb-107">Además, basta con no se puede llamar la implementación del controlador que recibe el evento sin formato <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; en su lugar, debe realizar un seguimiento de los detalles del evento y entregar el evento solo a la lista adecuada mediante <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="db8eb-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="db8eb-108">Los diversos métodos de <xref:System.Windows.WeakEventManager.ListenerList> se proporcionan para que puedan trabajar con sus listas internas de modo que puede impedir la modificación de la lista durante la entrega real del evento.</span><span class="sxs-lookup"><span data-stu-id="db8eb-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="db8eb-109">Es una clase de ejemplo que utiliza esta técnica de implementación <xref:System.ComponentModel.PropertyChangedEventManager>, que mantenga independiente de agente de escucha se enumera de `PropertyChanged` en función de qué propiedad cambiada.</span><span class="sxs-lookup"><span data-stu-id="db8eb-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="db8eb-110">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="db8eb-110">XAML Text Usage</span></span>  
 <span data-ttu-id="db8eb-111">No se puede utilizar esta clase en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="db8eb-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-112">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-113">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="db8eb-114">Número de elementos que se deben asignar en la lista inicial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-114">The number of items that should be allocated in the initial list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-115">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" /> con la capacidad inicial especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="db8eb-116">Elemento del agente de escucha que se agrega a <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-117">Agrega un objeto <see cref="T:System.Windows.IWeakEventListener" /> a <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-118">El objeto proporcionado como agente de escucha debe ser un <xref:System.Windows.DependencyObject> que implementa el <xref:System.Windows.IWeakEventListener> de interfaz y, por tanto, tiene un trabajo <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementación.</span><span class="sxs-lookup"><span data-stu-id="db8eb-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="db8eb-119">Siempre debe llamar a <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> antes de cambiar el contenido de la lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="db8eb-120">En caso contrario, la lista puede estar en el proceso de entrega de eventos y, por tanto, se bloquea el original.</span><span class="sxs-lookup"><span data-stu-id="db8eb-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="db8eb-121">Al llamar a <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> cambia la entrada `list` como un clon para que su <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> llamada puede seguir trabajando en el clon.</span><span class="sxs-lookup"><span data-stu-id="db8eb-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="db8eb-122">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> devuelve `true`, tendrá que actualizar cualquier referencia privada a la lista que se mantiene en otras áreas del código.</span><span class="sxs-lookup"><span data-stu-id="db8eb-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="db8eb-123">Controlador de eventos que se va a agregar al <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-124">Agrega un controlador de eventos al <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-125">Declara la lista para que esté en uso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-125">Declares the list to be in use.</span>
          </span>
          <span data-ttu-id="db8eb-126">Esto evita los cambios directos a la lista durante las iteraciones de los elementos de lista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-126">This prevents direct changes to the list during iterations of the list items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="db8eb-127">
            <see langword="true" /> si se declaró que la lista ya está en uso; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-127">
              <see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-128">A <xref:System.Windows.WeakEventManager> debería llamar la implementación <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> antes de recorrer en iteración la lista para entregar un evento a los agentes de escucha y debe llamar a <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> cuando haya terminado.</span><span class="sxs-lookup"><span data-stu-id="db8eb-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="db8eb-129">Esto evita que otra llamada de modificación de la lista mientras la iteración para los propósitos de entrega del evento está en curso.</span><span class="sxs-lookup"><span data-stu-id="db8eb-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="db8eb-130">Si la lista se modifica durante este tiempo, se clona la lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="db8eb-131">Si se clona la lista, a continuación, <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> devuelve `true`, lo que significa que no se ha ejecutado un cambio reciente del agente de escucha en la última entrega.</span><span class="sxs-lookup"><span data-stu-id="db8eb-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-132">Crea un clon modificable de esta <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="db8eb-133">Clon modificable del objeto actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-133">A modifiable clone of the current object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList">
          <span data-ttu-id="db8eb-134">Objeto con el que se va a copiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-134">The object to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-135">Copia el valor <see cref="T:System.Windows.WeakEventManager.ListenerList" /> actual especificado al <see cref="T:System.Windows.WeakEventManager.ListenerList" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-136">Obtiene el número de elementos contenidos en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="db8eb-137">Número de elementos contenidos en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="db8eb-138">El objeto que ha generado el evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-138">The object that raised the event.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="db8eb-139">Objeto que contiene los datos del evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-139">An object that contains the event data.</span>
          </span>
        </param>
        <param name="managerType">
          <span data-ttu-id="db8eb-140">Tipo de la clase <see cref="T:System.Windows.WeakEventManager" /> que llama a este método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-141">Entrega el evento que se administra a cada agente de escucha en el <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="db8eb-142">
            <see langword="true" /> si cualquiera de los agentes de escucha de <see cref="T:System.Windows.WeakEventManager.ListenerList" /> hace referencia a un objeto cuyos elementos no utilizados se han recolectado; si no, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-142">
              <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-143">Obtiene un valor que representa una lista vacía para fines de comparación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-143">Gets a value that represents an empty list for purposes of comparisons.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="db8eb-144">Representación de la lista vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-144">The empty list representation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-145">Desbloquea el estado bloqueado iniciado por <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-146">Obtiene un valor que declara si este objeto <see cref="T:System.Windows.WeakEventManager.ListenerList" /> está vacío.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="db8eb-147">
            <see langword="true" /> si la lista está vacía; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-147">
              <see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-148">Este método es equivalente a la comprobación de si la <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> es cero y no comprueba si cualquiera de las referencias en la lista ahora están obsoleta.</span><span class="sxs-lookup"><span data-stu-id="db8eb-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="db8eb-149">Si desea asegurarse de que todas las referencias siguen siendo válidas, llame al método <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> justo antes de comprobar el estado vacío de la lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="db8eb-150">Índice de base cero del agente de escucha en la lista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-150">The zero-based index of the listener in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-151">Obtiene o establece un elemento de agente de escucha concreto en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="db8eb-152">El elemento que está en ese índice o una referencia nula si no hay ningún elemento en ese índice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-152">The item at that index, or a null reference if no item was at that index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="db8eb-153">Lista en la que se comprueba el estado de uso y, posiblemente, la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-153">The list to check for use state and potentially copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-154">Comprueba si la lista proporcionada está en uso y, en tal caso, establece el parámetro de referencia de la lista en una copia de esa lista, no en el original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="db8eb-155">
            <see langword="true" /> si la lista proporcionada estaba en uso en el momento de la llamada y, por consiguiente, la referencia del parámetro <paramref name="list" /> se restableció como una copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-155">
              <see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span>
          </span>
          <span data-ttu-id="db8eb-156">
            <see langword="false" /> si la lista proporcionada no estaba en uso, en cuyo caso la referencia del parámetro <paramref name="list" /> se mantiene sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-156">
              <see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-157">Si la lista especificada está en uso (lo que significa que se está entregando un evento), al llamar a este método reemplazará la entrada `list` con un clon.</span><span class="sxs-lookup"><span data-stu-id="db8eb-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="db8eb-158">Los usuarios existentes terminarán de entregar el evento a la lista original, sin interferir en los cambios en la nueva lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="db8eb-159">Si el método devuelve `true`, los llamadores quizás desee insertar la nueva lista en sus propias estructuras de datos, ya que esto indica la posibilidad de que la lista proporcionada ya no es actual.</span><span class="sxs-lookup"><span data-stu-id="db8eb-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="db8eb-160">Este método llama a <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internamente y, a continuación, se llama inmediatamente <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="db8eb-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="db8eb-161">Por lo tanto, al llamar a <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> no introduce un bloqueo en la lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="db8eb-162">Incluso la copia de la clonación se realiza como una operación secundaria después de llamar a <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="db8eb-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="db8eb-163">Quita todas las entradas de la lista en las que el destino de la referencia subyacente es una referencia nula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-163">Removes all entries from the list where the underlying reference target is a null reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="db8eb-164">Devuelve <see langword="true" /> si se purgó cualquier entrada; de lo contrario, devuelve <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="db8eb-165">Elemento que se va a quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-165">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-166">Quita la primera aparición de un elemento de agente de escucha de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db8eb-167">Siempre debe llamar a <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> antes de cambiar el contenido de la lista.</span><span class="sxs-lookup"><span data-stu-id="db8eb-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="db8eb-168">En caso contrario, la lista puede estar en el proceso de entrega de eventos y, por tanto, se bloquea el original.</span><span class="sxs-lookup"><span data-stu-id="db8eb-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="db8eb-169">Al llamar a <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> cambia la entrada `list` como un clon para que su <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> llamada puede seguir trabajando en el clon.</span><span class="sxs-lookup"><span data-stu-id="db8eb-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="db8eb-170">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> devuelve `true`, tendrá que actualizar cualquier referencia privada a la lista que se mantiene en otras áreas del código.</span><span class="sxs-lookup"><span data-stu-id="db8eb-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="db8eb-171">Controlador de eventos se va a quitar del <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="db8eb-172">Quita un controlador de eventos de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="db8eb-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>