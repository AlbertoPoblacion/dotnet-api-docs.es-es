<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager+ListenerList.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59f0f2be98debc822496ae0fb7a0b36b79ece2165.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f0f2be98debc822496ae0fb7a0b36b79ece2165</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Provides a built-in collection list for storing listeners for a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Proporciona una lista de colecciones integrada para almacenar los agentes de escucha de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Although this list contains members that resemble those defined by <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>, and provide similar functionality, this class implements neither of those interfaces.</source>
          <target state="translated">Aunque esta lista contiene los miembros que son similares a las definidas por <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>y proporcionan una funcionalidad similar, esta clase implementa ninguna de las interfaces.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> derived classes do not need to use any members on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">La mayoría <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> no es necesario utilizar ningún miembro en clases derivadas <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> use a default <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internally, one list for each <ph id="ph5">`source`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> métodos <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> Utilice default <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internamente, una lista de cada <ph id="ph5">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You only need to call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> methods if your <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</source>
          <target state="translated">Basta con llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> métodos si su <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> clase mantiene varias listas para la misma combinación de origen del evento, con cada lista creada para responder a distintas condiciones del evento.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>In this case, you would not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> and would instead implement <ph id="ph3">`AddListener`</ph> or <ph id="ph4">`RemoveListener`</ph> to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to <ph id="ph5">`AddListener`</ph> or <ph id="ph6">`RemoveListener`</ph>.</source>
          <target state="translated">En este caso, no utilizaría <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> y en su lugar se implementaría <ph id="ph3">`AddListener`</ph> o <ph id="ph4">`RemoveListener`</ph> actuar sobre los agentes de escucha en sólo una de las listas de agente de escucha interno, normalmente basadas en un parámetro que se agrega a <ph id="ph5">`AddListener`</ph> o <ph id="ph6">`RemoveListener`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Also, the handler implementation that receives the raw event cannot simply call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">Además, basta con no se puede llamar la implementación del controlador que recibe el evento sin formato <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; en su lugar, debe realizar un seguimiento de los detalles del evento y entregar el evento solo a la lista adecuada mediante <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The various methods of <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</source>
          <target state="translated">Los diversos métodos de <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> se proporcionan para que puedan trabajar con sus listas internas de modo que puede impedir la modificación de la lista durante la entrega real del evento.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>An example class that used this implementation technique is <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, which maintains separate listener lists for <ph id="ph2">`PropertyChanged`</ph> based on which property changed.</source>
          <target state="translated">Es una clase de ejemplo que utiliza esta técnica de implementación <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, que mantenga independiente de agente de escucha se enumera de <ph id="ph2">`PropertyChanged`</ph> en función de qué propiedad cambiada.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>XAML Text Usage</source>
          <target state="translated">Uso de texto XAML</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You cannot use this class in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">No se puede utilizar esta clase en <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>The number of items that should be allocated in the initial list.</source>
          <target state="translated">Número de elementos que se deben asignar en la lista inicial.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class with the specified initial capacity.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> con la capacidad inicial especificada.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The listener element to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Elemento del agente de escucha que se agrega a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Adds a <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Agrega un objeto <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> a <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The object provided as listener should be a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> that implements the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and therefore has a working <ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementation.</source>
          <target state="translated">El objeto proporcionado como agente de escucha debe ser un <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> que implementa el <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> de interfaz y, por tanto, tiene un trabajo <ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">Siempre debe llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> antes de cambiar el contenido de la lista.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">En caso contrario, la lista puede estar en el proceso de entrega de eventos y, por tanto, se bloquea el original.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">Al llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> cambia la entrada <ph id="ph2">`list`</ph> como un clon para que su <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> llamada puede seguir trabajando en el clon.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> devuelve <ph id="ph2">`true`</ph>, tendrá que actualizar cualquier referencia privada a la lista que se mantiene en otras áreas del código.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>The event handler to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Controlador de eventos que se va a agregar al <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>Adds an event handler to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Agrega un controlador de eventos al <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>Declares the list to be in use.</source>
          <target state="translated">Declara la lista para que esté en uso.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents direct changes to the list during iterations of the list items.</source>
          <target state="translated">Esto evita los cambios directos a la lista durante las iteraciones de los elementos de lista.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list was already declared to be in use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se declaró que la lista ya está en uso; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>A <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation should call <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> before iterating through the list to deliver an event to the listeners, and should call <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> when it is done.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> debería llamar la implementación <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> antes de recorrer en iteración la lista para entregar un evento a los agentes de escucha y debe llamar a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> cuando haya terminado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</source>
          <target state="translated">Esto evita que otra llamada de modificación de la lista mientras la iteración para los propósitos de entrega del evento está en curso.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is modified during this time, then the list is cloned.</source>
          <target state="translated">Si la lista se modifica durante este tiempo, se clona la lista.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is cloned, then <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, which means that you have missed a recent listener change in the last delivery.</source>
          <target state="translated">Si se clona la lista, a continuación, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> devuelve <ph id="ph2">`true`</ph>, lo que significa que no se ha ejecutado un cambio reciente del agente de escucha en la última entrega.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>Creates a modifiable clone of this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Crea un clon modificable de esta <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>A modifiable clone of the current object.</source>
          <target state="translated">Clon modificable del objeto actual.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>The object to copy to.</source>
          <target state="translated">Objeto con el que se va a copiar.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>Copies the current <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph></source>
          <target state="translated">Copia el valor <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> actual especificado al <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>Gets the number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de elementos contenidos en <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>The number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Número de elementos contenidos en <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The object that raised the event.</source>
          <target state="translated">El objeto que ha generado el evento.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>An object that contains the event data.</source>
          <target state="translated">Objeto que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> that calls this method.</source>
          <target state="translated">Tipo de la clase <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> que llama a este método.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>Delivers the event being managed to each listener in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Entrega el evento que se administra a cada agente de escucha en el <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any of the listeners in the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> refer to an object that has been garbage collected; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si cualquiera de los agentes de escucha de <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> hace referencia a un objeto cuyos elementos no utilizados se han recolectado; si no, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>Gets a value that represents an empty list for purposes of comparisons.</source>
          <target state="translated">Obtiene un valor que representa una lista vacía para fines de comparación.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>The empty list representation.</source>
          <target state="translated">Representación de la lista vacía.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.EndUse">
          <source>Unlocks the locked state initiated by <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph>.</source>
          <target state="translated">Desbloquea el estado bloqueado iniciado por <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>Gets a value that declares whether this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> is empty.</source>
          <target state="translated">Obtiene un valor que declara si este objeto <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> está vacío.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la lista está vacía; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>This method is equivalent to checking whether the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> is zero, and does not check whether any of the references in the list are now stale.</source>
          <target state="translated">Este método es equivalente a la comprobación de si la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> es cero y no comprueba si cualquiera de las referencias en la lista ahora están obsoleta.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>If you want to assure that all references are still valid, call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> just prior to checking the empty status of the list.</source>
          <target state="translated">Si desea asegurarse de que todas las referencias siguen siendo válidas, llame al método <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> justo antes de comprobar el estado vacío de la lista.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The zero-based index of the listener in the list.</source>
          <target state="translated">Índice de base cero del agente de escucha en la lista.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>Gets or sets a specific listener item in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> .</source>
          <target state="translated">Obtiene o establece un elemento de agente de escucha concreto en <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The item at that index, or a null reference if no item was at that index.</source>
          <target state="translated">El elemento que está en ese índice o una referencia nula si no hay ningún elemento en ese índice.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The list to check for use state and potentially copy.</source>
          <target state="translated">Lista en la que se comprueba el estado de uso y, posiblemente, la copia.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</source>
          <target state="translated">Comprueba si la lista proporcionada está en uso y, en tal caso, establece el parámetro de referencia de la lista en una copia de esa lista, no en el original.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided list was in use at the time of call and therefore the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference was reset to be a copy.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la lista proporcionada estaba en uso en el momento de la llamada y, por consiguiente, la referencia del parámetro <ph id="ph2">&lt;paramref name="list" /&gt;</ph> se restableció como una copia.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the provided list was not in use, in which case the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference remains unaltered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> si la lista proporcionada no estaba en uso, en cuyo caso la referencia del parámetro <ph id="ph2">&lt;paramref name="list" /&gt;</ph> se mantiene sin cambios.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the given list is in use (which means an event is currently being delivered), calling this method will replace the input <ph id="ph1">`list`</ph> with a clone.</source>
          <target state="translated">Si la lista especificada está en uso (lo que significa que se está entregando un evento), al llamar a este método reemplazará la entrada <ph id="ph1">`list`</ph> con un clon.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The existing users will finish delivering the event to the original list, without interference from changes to the new list.</source>
          <target state="translated">Los usuarios existentes terminarán de entregar el evento a la lista original, sin interferir en los cambios en la nueva lista.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the method returns <ph id="ph1">`true`</ph>, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</source>
          <target state="translated">Si el método devuelve <ph id="ph1">`true`</ph>, los llamadores quizás desee insertar la nueva lista en sus propias estructuras de datos, ya que esto indica la posibilidad de que la lista proporcionada ya no es actual.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internally and then immediately calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">Este método llama a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internamente y, a continuación, se llama inmediatamente <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Therefore calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> does not itself introduce a lock on the list.</source>
          <target state="translated">Por lo tanto, al llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> no introduce un bloqueo en la lista.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Even the clone copy is done as a secondary operation after calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">Incluso la copia de la clonación se realiza como una operación secundaria después de llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Removes all entries from the list where the underlying reference target is a null reference.</source>
          <target state="translated">Quita todas las entradas de la lista en las que el destino de la referencia subyacente es una referencia nula.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if any entries were purged; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se purgó cualquier entrada; de lo contrario, devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>The item to remove.</source>
          <target state="translated">Elemento que se va a quitar.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Removes the first occurrence of a listener item from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Quita la primera aparición de un elemento de agente de escucha de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">Siempre debe llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> antes de cambiar el contenido de la lista.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">En caso contrario, la lista puede estar en el proceso de entrega de eventos y, por tanto, se bloquea el original.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">Al llamar a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> cambia la entrada <ph id="ph2">`list`</ph> como un clon para que su <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> llamada puede seguir trabajando en el clon.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> devuelve <ph id="ph2">`true`</ph>, tendrá que actualizar cualquier referencia privada a la lista que se mantiene en otras áreas del código.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>The event handler to remove from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Controlador de eventos se va a quitar del <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>Removes an event handler from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Quita un controlador de eventos de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>