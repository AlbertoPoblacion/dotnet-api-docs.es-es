<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dc3413d869bd9f89dc87256eb510a9e917751c9d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37549854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides event-related utility methods that register routed events for class owners and add class handlers.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase se usa con más frecuencia para registrar un evento enrutado de nuevo, con <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 El segundo más comunes [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] uso es <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Utilice este método para habilitar el control de clases de un evento enrutado en la clase o un evento adjunto. Para obtener más información, consulte [Marcar eventos enrutados como controlados y control de clases](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar esta clase para registrar un nuevo evento enrutado como un miembro de clase, junto con la técnica de "contenedor" de evento enrutado de invalidación de agregar y quitar implementaciones para un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] eventos.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns identifiers for routed events that have been registered to the event system.</summary>
        <returns>An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Más <xref:System.Windows.RoutedEvent> objetos se pueden registrar más adelante. Este método obtiene una instantánea y la colección de eventos enrutados es grabable en toda la duración de la aplicación. La colección devuelta podría ser bastante grande. Simplemente contar los eventos que forman parte de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], es el número de colecciones en cientos alta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
        <summary>Finds all routed event identifiers for events that are registered with the provided owner type.</summary>
        <returns>An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers a class handler for a particular routed event.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">The type of the class that is declaring class handling.</param>
        <param name="routedEvent">The routed event identifier of the event to handle.</param>
        <param name="handler">A reference to the class handler implementation.</param>
        <summary>Registers a class handler for a particular routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de clases es una característica que está disponible para los eventos enrutados, incluidos los eventos asociados que se implementan con el respaldo de eventos enrutados. Un controlador de clase es como un controlador estático que existe para todas las instancias de la clase. Dado que el controlador es estático, no se puede cambiar las propiedades de instancia directamente con un controlador de clase, pero puede tener acceso a las instancias a través de la `sender` parámetro o los datos del evento.  
  
 Los controladores de clase se invocan antes que los controladores de instancia. Puede implementar un controlador de clase que tenga el comportamiento de marcar el evento como controlado. Por lo tanto, no se invocan controladores de instancia para un evento controlado de clase, a menos que los controladores de instancia se registren específicamente para los eventos controlados.  
  
 Muchos de los [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] eventos de elementos base proporcionan métodos virtuales de control de clases. Al reemplazar estos métodos en clases que heredan las clases base, puede implementar el control de clase sin llamar a <xref:System.Windows.EventManager.RegisterClassHandler%2A> en constructores estáticos. Estos métodos de control de clases normalmente existen para los eventos de entrada y tienen nombres que empiezan por "On" y terminan con el nombre del evento que se está administrado por la clase.  
  
 Para obtener más información sobre el control de clases, vea [Marcar eventos enrutados como controlados y control de clases](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Con esta firma, los controladores de clase se registrarán para invocar solo como respuesta a eventos no controlados. También puede registrar los controladores de clase para invocar incluso si los argumentos de evento están marcado como controlados, mediante el uso de la <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma, con `handledEventsToo` establecido en `true`.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega un controlador para <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, al llamar a <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">The type of the class that is declaring class handling.</param>
        <param name="routedEvent">The routed event identifier of the event to handle.</param>
        <param name="handler">A reference to the class handler implementation.</param>
        <param name="handledEventsToo">
          <see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</param>
        <summary>Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de clases es una característica que está disponible para los eventos enrutados, incluidos los eventos asociados que se implementan con el respaldo de eventos enrutados. Un controlador de clase es como un controlador estático que existe para todas las instancias de la clase. Dado que el controlador es estático, no se puede cambiar las propiedades de instancia directamente con un controlador de clase, pero puede tener acceso a las instancias a través de la `sender` parámetro o los datos del evento.  
  
 Los controladores de clase se invocan antes que los controladores de instancia. Puede implementar un controlador de clase que tenga el comportamiento de marcar el evento como controlado. Por lo tanto, no se invocan controladores de instancia para un evento controlado de clase, a menos que los controladores de instancia se registren específicamente para los eventos controlados.  
  
 Muchos de los [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] eventos de elementos base proporcionan métodos virtuales de control de clases. Al reemplazar estos métodos en clases que heredan las clases base, puede implementar el control de clase sin llamar a <xref:System.Windows.EventManager.RegisterClassHandler%2A> en constructores estáticos. Estos métodos de control de clases normalmente existen para los eventos de entrada y tienen nombres que empiezan por "On" y terminan con el nombre del evento que se está administrado por la clase.  
  
 Para obtener más información sobre el control de clases, vea [Marcar eventos enrutados como controlados y control de clases](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Con esta firma, los controladores de clase se pueden registrar para invocar eventos controlados, estableciendo `handledEventsToo` establecido en `true`. Por lo general, debe hacerlo solo si hay un problema conocido del control que está intentando evitar, como sistema de entrada de control de eventos de mouse o teclado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">The name of the routed event. The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</param>
        <param name="routingStrategy">The routing strategy of the event as a value of the enumeration.</param>
        <param name="handlerType">The type of the event handler. This must be a delegate type and cannot be <see langword="null" />.</param>
        <param name="ownerType">The owner class type of the routed event. This cannot be <see langword="null" />.</param>
        <summary>Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</summary>
        <returns>The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el valor devuelto de este método para crear la declaración estática de un único <xref:System.Windows.RoutedEvent> campo identificador. Este campo debe almacenarse en el tipo de propietario.  
  
 Hay un número considerable de las convenciones y procedimientos recomendados relacionados con los eventos enrutados cómo deberían denominados, registrados y expone en una clase. Para obtener más información, consulte [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>