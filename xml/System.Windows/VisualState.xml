<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="028b84ccb16bb801d733d7684e85cd793fc21aec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678529" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa la apariencia visual del control cuando está en un estado concreto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.VisualState> especifica el aspecto del control cuando se encuentra en un estado determinado. Por ejemplo, cuando un <xref:System.Windows.Controls.Button> está presionado, sus bordes pueden ser un color distinto al habitual.  El <xref:System.Windows.VisualState> clase tiene un <xref:System.Windows.VisualState.Storyboard%2A> propiedad que cambia la apariencia del control. Cuando el control entra en el estado especificado por la <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> propiedad, el <xref:System.Windows.VisualState.Storyboard%2A> comienza. Cuando el control sale del estado, el <xref:System.Windows.VisualState.Storyboard%2A> se detiene.  
  
 El <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType> propiedad contiene <xref:System.Windows.VisualState> objetos. <xref:System.Windows.VisualStateGroup> se agregan objetos a la <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> propiedad adjunta, que se define en el en un <xref:System.Windows.FrameworkElement>. Puede agregar <xref:System.Windows.VisualState> objetos a cualquier <xref:System.Windows.FrameworkElement>, pero normalmente se usan en un <xref:System.Windows.Controls.ControlTemplate> de un <xref:System.Windows.Controls.Control>. Para obtener información sobre cómo crear un <xref:System.Windows.Controls.ControlTemplate> y <xref:System.Windows.VisualState> objetos para los controles existentes, vea [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Para obtener un ejemplo del uso de <xref:System.Windows.VisualState> objetos fuera de un <xref:System.Windows.Controls.ControlTemplate>, consulte la <xref:System.Windows.VisualStateManager> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.VisualStateGroup> en el <xref:System.Windows.Controls.ControlTemplate> de un <xref:System.Windows.Controls.Button> llama `CommonStates` y agrega <xref:System.Windows.VisualState> objetos para los Estados, `Normal`, `Pressed`, y `MouseOver`. El <xref:System.Windows.Controls.Button> también define un estado llamado `Disabled` que se encuentra en la `CommonStates` <xref:System.Windows.VisualStateGroup>, pero omite en el ejemplo para mayor brevedad. Para obtener el ejemplo completo, vea [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.VisualState" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Nombre del objeto <see cref="T:System.Windows.VisualState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Especifique qué estado visual de un elemento debería especificar pasando el <xref:System.Windows.VisualState.Name%2A> de la <xref:System.Windows.VisualState> a la <xref:System.Windows.VisualStateManager>.  
  
 Cuando un <xref:System.Windows.Controls.Control> utiliza la <xref:System.Windows.VisualStateManager> en un <xref:System.Windows.Controls.ControlTemplate>, el autor del control debe especificar qué <xref:System.Windows.VisualState> objetos espera encontrar en el control de su <xref:System.Windows.Controls.ControlTemplate> colocando el <xref:System.Windows.TemplateVisualStateAttribute> en su definición de clase. <xref:System.Windows.Controls.ControlTemplate> los autores de #define new <xref:System.Windows.VisualState> objetos y establezca el <xref:System.Windows.VisualState.Name%2A> propiedad en el valor especificado por el <xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> propiedad.  
  
 Para buscar los nombres de los estados visuales para los controles que se incluyen con [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], consulte [plantillas y estilos de Control](~/docs/framework/wpf/controls/control-styles-and-templates.md). Para obtener información sobre cómo crear un <xref:System.Windows.Controls.ControlTemplate> y <xref:System.Windows.VisualState> objetos para los controles existentes, vea [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.VisualStateGroup> en el <xref:System.Windows.Controls.ControlTemplate> de un <xref:System.Windows.Controls.Button> llama `CommonStates` y agrega <xref:System.Windows.VisualState> objetos para los Estados, `Normal`, `Pressed`, y `MouseOver`. El <xref:System.Windows.Controls.Button> también define un estado llamado `Disabled` que se encuentra en la `CommonStates` <xref:System.Windows.VisualStateGroup>, pero omite en el ejemplo para mayor brevedad. Para obtener el ejemplo completo, vea [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto <see cref="T:System.Windows.Media.Animation.Storyboard" /> que define la apariencia del control cuando está en el estado representado por <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Guión gráfico que define la apariencia del control cuando está en el estado representado por <see cref="T:System.Windows.VisualState" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el control entra en el estado especificado por la <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> propiedad, el <xref:System.Windows.VisualState.Storyboard%2A> comienza. Cuando el control sale del estado, el <xref:System.Windows.VisualState.Storyboard%2A> se detiene.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un sencillo <xref:System.Windows.Controls.ControlTemplate> para un <xref:System.Windows.Controls.Button> que contiene un <xref:System.Windows.Controls.Grid>.  El <xref:System.Windows.VisualState> llama `MouseOver` tiene un guión gráfico que cambia el color de la <xref:System.Windows.Controls.Grid> de verde a rojo cuando el usuario coloca el mouse sobre el <xref:System.Windows.Controls.Button>.  El <xref:System.Windows.VisualState> llama `Normal` se incluye para que cuando el usuario mueve el mouse fuera del botón, el <xref:System.Windows.Controls.Grid> devuelve a verde.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>