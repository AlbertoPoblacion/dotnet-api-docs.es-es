<Type Name="Vector" FullName="System.Windows.Vector">
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9e442-101">Representa un desplazamiento en el espacio 2D.</span><span class="sxs-lookup"><span data-stu-id="9e442-101">Represents a displacement in 2-D space.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-102">A <xref:System.Windows.Point> representa una posición fija, pero un <xref:System.Windows.Vector> representa una dirección y una magnitud (por ejemplo, velocidad o aceleración).</span><span class="sxs-lookup"><span data-stu-id="9e442-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="9e442-103">Por lo tanto, los extremos de un segmento de línea son puntos pero su diferencia es una clase vector; es decir, la dirección y la longitud de ese segmento de línea.</span><span class="sxs-lookup"><span data-stu-id="9e442-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="9e442-104">En XAML, el delimitador entre los <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> valores de un <xref:System.Windows.Vector> puede ser una coma o un espacio.</span><span class="sxs-lookup"><span data-stu-id="9e442-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="9e442-105">Algunas referencias culturales pueden usar el carácter de coma como delimitador decimal en lugar del carácter de punto.</span><span class="sxs-lookup"><span data-stu-id="9e442-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="9e442-106">Procesamiento XAML para la referencia cultural invariable tiene como valor predeterminado en-US en la mayoría de las implementaciones de procesador XAML y espera que el punto sea el delimitador decimal.</span><span class="sxs-lookup"><span data-stu-id="9e442-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="9e442-107">Debe evitar usar el carácter de coma como delimitador decimal si especifica un <xref:System.Windows.Vector> en XAML, ya que entrará en conflicto con la conversión de tipo de cadena de un <xref:System.Windows.Vector> atributo valor en el <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> componentes.</span><span class="sxs-lookup"><span data-stu-id="9e442-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9e442-108">Uso de atributos XAML</span><span class="sxs-lookup"><span data-stu-id="9e442-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9e442-109">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="9e442-109">XAML Values</span></span>  
 <span data-ttu-id="9e442-110">*x*</span><span class="sxs-lookup"><span data-stu-id="9e442-110">*x*</span></span>  
 <span data-ttu-id="9e442-111">El componente X del vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-111">The vector's X component.</span></span> <span data-ttu-id="9e442-112">Para obtener más información, vea la propiedad <xref:System.Windows.Vector.X%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e442-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="9e442-113">*y*</span><span class="sxs-lookup"><span data-stu-id="9e442-113">*y*</span></span>  
 <span data-ttu-id="9e442-114">Componente de Y del vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-114">The vector's Y component.</span></span> <span data-ttu-id="9e442-115">Para obtener más información, vea la propiedad <xref:System.Windows.Vector.Y%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e442-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-116">En el ejemplo siguiente se muestra cómo agregar dos <xref:System.Windows.Vector> estructuras.</span><span class="sxs-lookup"><span data-stu-id="9e442-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="9e442-117">Desplazamiento de la propiedad <see cref="P:System.Windows.Vector.X" /> del nuevo objeto <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <param name="y"><span data-ttu-id="9e442-118">Desplazamiento de la propiedad <see cref="P:System.Windows.Vector.Y" /> del nuevo objeto <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <summary><span data-ttu-id="9e442-119">Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-120">En el ejemplo siguiente se muestra cómo crear dos vectores y sumarlos.</span><span class="sxs-lookup"><span data-stu-id="9e442-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-121">Suma un vector y un punto u otro vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-121">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-122">Recorrido por el que se va a trasladar el punto especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-122">The amount to translate the specified point.</span></span></param>
        <param name="point"><span data-ttu-id="9e442-123">Punto que se va a trasladar.</span><span class="sxs-lookup"><span data-stu-id="9e442-123">The point to translate.</span></span></param>
        <summary><span data-ttu-id="9e442-124">Traslada el punto especificado por el vector especificado y devuelve el punto resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-124">Translates the specified point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="9e442-125">Resultado de trasladar <paramref name="point" /> por <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-126">En el ejemplo siguiente se muestra cómo utilizar este método para agregar un <xref:System.Windows.Point> estructura a un <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-127">Primer vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="9e442-127">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-128">Segundo vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="9e442-128">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="9e442-129">Suma dos vectores y devuelve el resultado como estructura <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="9e442-130">La suma de <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-131">En el ejemplo siguiente se muestra cómo utilizar este método para agregar dos <xref:System.Windows.Vector> estructuras.</span><span class="sxs-lookup"><span data-stu-id="9e442-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-132">Primer vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-132">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-133">Segundo vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-133">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="9e442-134">Recupera el ángulo, expresado en grados, entre los dos vectores especificados.</span><span class="sxs-lookup"><span data-stu-id="9e442-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="9e442-135">El ángulo, en grados, entre <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-136">En el ejemplo siguiente se muestra cómo utilizar este método para obtener el ángulo entre dos <xref:System.Windows.Vector> estructuras.</span><span class="sxs-lookup"><span data-stu-id="9e442-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-137">Primer vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-137">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-138">Segundo vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-138">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="9e442-139">Calcula el producto vectorial de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-139">Calculates the cross product of two vectors.</span></span></summary>
        <returns><span data-ttu-id="9e442-140">Producto vectorial de <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span> <span data-ttu-id="9e442-141">La fórmula siguiente se usa para calcular este producto:</span><span class="sxs-lookup"><span data-stu-id="9e442-141">The following formula is used to calculate the cross product:</span></span>  
  
 <span data-ttu-id="9e442-142"><c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span><span class="sxs-lookup"><span data-stu-id="9e442-142"><c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-143">En el ejemplo siguiente se muestra cómo utilizar este método para calcular el producto cruzado de dos <xref:System.Windows.Vector> estructuras.</span><span class="sxs-lookup"><span data-stu-id="9e442-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-144">Primer vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-144">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-145">Segundo vector que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="9e442-145">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="9e442-146">Calcula el factor determinante de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-146">Calculates the determinant of two vectors.</span></span></summary>
        <returns><span data-ttu-id="9e442-147">Factor determinante de <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-148">En el ejemplo siguiente se muestra cómo calcular el factor determinante de dos <xref:System.Windows.Vector> estructuras.</span><span class="sxs-lookup"><span data-stu-id="9e442-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-149">Estructura vectorial que se va a dividir.</span><span class="sxs-lookup"><span data-stu-id="9e442-149">The vector structure to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="9e442-150">Cantidad por la que se divide <c>vector</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-150">The amount by which <c>vector</c> is divided.</span></span></param>
        <summary><span data-ttu-id="9e442-151">Divide el vector especificado por el valor escalar especificado y devuelve el resultado como <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-152">Resultado de dividir <paramref name="vector" /> entre <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-153">En el ejemplo siguiente se muestra cómo utilizar este método para dividir un <xref:System.Windows.Vector> por un valor escalar.</span><span class="sxs-lookup"><span data-stu-id="9e442-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-154">Compara la igualdad de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-154">Compares two vectors for equality.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-155">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-156">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Double> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="9e442-157">Vector que se va comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-157">The vector to compare.</span></span></param>
        <summary><span data-ttu-id="9e442-158">Determina si el objeto <see cref="T:System.Object" /> especificado es una estructura <see cref="T:System.Windows.Vector" /> y, en caso de que lo sea, si tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span></span></summary>
        <returns>
          <span data-ttu-id="9e442-159">Es <see langword="true" /> si <paramref name="o" /> es <see cref="T:System.Windows.Vector" /> y tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-159"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-160">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-161">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Windows.Vector> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-162">En el ejemplo siguiente se muestra cómo utilizar este método para comprobar si un <xref:System.Windows.Vector> y <xref:System.Object> son iguales.</span><span class="sxs-lookup"><span data-stu-id="9e442-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9e442-163">Vector con el que se va a comparar este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-163">The vector to compare with this vector.</span></span></param>
        <summary><span data-ttu-id="9e442-164">Compara la igualdad de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-164">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="9e442-165">Es <see langword="true" /> si <paramref name="value" /> tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-165"><see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-166">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-167">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Windows.Vector> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-168">En el ejemplo siguiente se muestra cómo utilizar este método para comprobar si dos <xref:System.Windows.Vector> estructuras son iguales.</span><span class="sxs-lookup"><span data-stu-id="9e442-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-169">Primer vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-169">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-170">Segundo vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-170">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="9e442-171">Compara la igualdad de los dos vectores especificados.</span><span class="sxs-lookup"><span data-stu-id="9e442-171">Compares the two specified vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="9e442-172">Es <see langword="true" /> si los componentes de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son iguales; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-172"><see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-173">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-174">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Double> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-175">En el ejemplo siguiente se muestra cómo utilizar este método para comprobar si dos <xref:System.Windows.Vector> estructuras son iguales.</span><span class="sxs-lookup"><span data-stu-id="9e442-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e442-176">Devuelve el código hash de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-176">Returns the hash code for this vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-177">Código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="9e442-177">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-178">En el ejemplo siguiente se muestra cómo obtener el código hash de un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e442-179">Obtiene la longitud de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-179">Gets the length of this vector.</span></span></summary>
        <value><span data-ttu-id="9e442-180">Longitud de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-180">The length of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-181">La longitud de un vector se conoce a veces como la magnitud.</span><span class="sxs-lookup"><span data-stu-id="9e442-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-182">El siguiente ejemplo se muestra cómo utiliza esta propiedad para obtener la longitud de un vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e442-183">Obtiene el cuadrado de la longitud de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-183">Gets the square of the length of this vector.</span></span></summary>
        <value><span data-ttu-id="9e442-184">Cuadrado de <see cref="P:System.Windows.Vector.Length" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-185">La longitud de un vector se conoce a veces como su magnitud.</span><span class="sxs-lookup"><span data-stu-id="9e442-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-186">En el ejemplo siguiente se muestra cómo utilizar esta propiedad para obtener el cuadrado de la longitud de un vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-187">Multiplica el vector especificado por el valor de <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />o <see cref="T:System.Windows.Vector" /> especificado y devuelve el resultado como <see cref="T:System.Windows.Vector" /> o <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="9e442-188">Valor escalar que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-188">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="9e442-189">Vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-189">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-190">Multiplica el valor escalar especificado por el vector especificado y devuelve el objeto <see cref="T:System.Windows.Vector" /> resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-191">Resultado de multiplicar <paramref name="scalar" /> y <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-192">En el ejemplo siguiente se muestra cómo utilizar este método para multiplicar un valor escalar por un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-193">Vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-193">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="9e442-194">Valor escalar que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-194">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-195">Multiplica el vector especificado por el valor escalar especificado y devuelve el objeto <see cref="T:System.Windows.Vector" /> resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-196">Resultado de multiplicar <paramref name="vector" /> y <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-197">En el ejemplo siguiente se muestra cómo utilizar este método para multiplicar un <xref:System.Windows.Vector> por un valor escalar.</span><span class="sxs-lookup"><span data-stu-id="9e442-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-198">Estructura vectorial que se va a transformar.</span><span class="sxs-lookup"><span data-stu-id="9e442-198">The vector structure to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="9e442-199">Transformación que se va a aplicar a <c>vector</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-199">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="9e442-200">Transforma el espacio de la coordenada del vector especificado mediante el objeto <see cref="T:System.Windows.Media.Matrix" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-201">Resultado de transformar <paramref name="vector" /> por <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-202">En el ejemplo siguiente se muestra cómo utilizar este método para multiplicar un <xref:System.Windows.Vector> por un <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="9e442-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-203">Primer vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-203">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-204">Segunda estructura vectorial que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-204">The second vector structure to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-205">Calcula el producto escalar de los dos vectores especificados y devuelve el resultado como <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-206"><see cref="T:System.Double" /> que contiene el producto de los vectores escalares <paramref name="vector1" /> y <paramref name="vector2" />, que se calcula con la fórmula siguiente:</span><span class="sxs-lookup"><span data-stu-id="9e442-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="9e442-207"><c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span><span class="sxs-lookup"><span data-stu-id="9e442-207"><c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-208">En el ejemplo siguiente se muestra cómo utilizar este método para multiplicar un <xref:System.Windows.Vector> por un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e442-209">Niega este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-209">Negates this vector.</span></span> <span data-ttu-id="9e442-210">El vector tiene la misma magnitud que antes, pero ahora su dirección es la contraria.</span><span class="sxs-lookup"><span data-stu-id="9e442-210">The vector has the same magnitude as before, but its direction is now opposite.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-211">En el ejemplo siguiente se muestra cómo utilizar este método para negar un vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e442-212">Normaliza este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-212">Normalizes this vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-213">Un valor normalizado mantiene su dirección pero su <xref:System.Windows.Vector.Length%2A> se convierte en 1.</span><span class="sxs-lookup"><span data-stu-id="9e442-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="9e442-214">Vector resultante se suele denominar vector unitario.</span><span class="sxs-lookup"><span data-stu-id="9e442-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="9e442-215">Un vector se normaliza dividiendo el vector por su propio <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e442-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-216">En el ejemplo siguiente se muestra cómo utilizar este método para normalizar un vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-217">Suma un vector y un punto u otro vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-217">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-218">Vector usado para trasladar <c>point</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-218">The vector used to translate <c>point</c>.</span></span></param>
        <param name="point"><span data-ttu-id="9e442-219">Punto que se va a trasladar.</span><span class="sxs-lookup"><span data-stu-id="9e442-219">The point to translate.</span></span></param>
        <summary><span data-ttu-id="9e442-220">Traslada un punto mediante el vector especificado y devuelve el punto resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-220">Translates a point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="9e442-221">Resultado de trasladar <paramref name="point" /> por <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-222">En el ejemplo siguiente se muestra cómo usar este operador (+) para traducir un <xref:System.Windows.Point> estructura a un <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-223">Primer vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="9e442-223">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-224">Segundo vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="9e442-224">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="9e442-225">Suma dos vectores y devuelve el resultado como vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-225">Adds two vectors and returns the result as a vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-226">La suma de <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-227">En el ejemplo siguiente se muestra cómo usar este operador (+) para agregar dos <xref:System.Windows.Vector> estructuras y devuelven un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-228">Vector que se va a dividir.</span><span class="sxs-lookup"><span data-stu-id="9e442-228">The vector to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="9e442-229">Valor escalar por el que se dividirá <c>vector</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-229">The scalar by which <c>vector</c> will be divided.</span></span></param>
        <summary><span data-ttu-id="9e442-230">Divide el vector escalar especificado por el valor especificado y devuelve el vector resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-231">Resultado de dividir <paramref name="vector" /> entre <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-232">En el ejemplo siguiente se muestra cómo usar este operador (/) para dividir un <xref:System.Windows.Vector> estructura por un valor escalar.</span><span class="sxs-lookup"><span data-stu-id="9e442-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-233">Primer vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-233">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-234">Segundo vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-234">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="9e442-235">Compara la igualdad de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-235">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="9e442-236">Es <see langword="true" /> si los componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son iguales; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-236"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-237">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-238">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Windows.Vector> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-239">En el ejemplo siguiente se muestra cómo usar este operador (==) para comprobar si dos <xref:System.Windows.Vector> estructuras son iguales.</span><span class="sxs-lookup"><span data-stu-id="9e442-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-240">Convierte un vector en <see cref="T:System.Windows.Size" /> o <see cref="T:System.Windows.Point" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-241">Vector que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="9e442-241">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="9e442-242">Crea <see cref="T:System.Windows.Point" /> con los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-243">Punto con los valores de las coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> iguales a los valores de desplazamiento de <paramref name="vector" /> de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-244">En el ejemplo siguiente se muestra cómo convertir un <xref:System.Windows.Vector> en un <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="9e442-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-245">Vector que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="9e442-245">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="9e442-246">Crea <see cref="T:System.Windows.Size" /> a partir de los desplazamientos de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-247">Objeto <see cref="T:System.Windows.Size" /> con una propiedad <see cref="P:System.Windows.Size.Width" /> igual al valor absoluto de la propiedad <see cref="P:System.Windows.Vector.X" /> de este vector y <see cref="P:System.Windows.Size.Height" /> igual al valor absoluto de la propiedad <see cref="P:System.Windows.Vector.Y" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-248">En el ejemplo siguiente se muestra cómo convertir explícitamente un <xref:System.Windows.Vector> en un <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="9e442-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-249">Primer vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-249">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-250">Segundo vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="9e442-250">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="9e442-251">Compara la desigualdad de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="9e442-251">Compares two vectors for inequality.</span></span></summary>
        <returns>
          <span data-ttu-id="9e442-252">Es <see langword="true" /> si los componentes de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son distintos; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-252"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e442-253">Un vector <xref:System.Windows.Vector.X%2A> y <xref:System.Windows.Vector.Y%2A> propiedades se describen mediante <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="9e442-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="9e442-254">Dado que el valor de un <xref:System.Double> puede perder precisión cuando se realizan operaciones aritméticas en él, una comparación entre dos <xref:System.Windows.Vector> estructuras que son lógicamente iguales pueden producir un error.</span><span class="sxs-lookup"><span data-stu-id="9e442-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e442-255">En el ejemplo siguiente se muestra cómo usar este operador (! =) para comprobar si dos <xref:System.Windows.Vector> estructuras no son iguales.</span><span class="sxs-lookup"><span data-stu-id="9e442-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-256">Multiplica el objeto <see cref="T:System.Windows.Vector" /> especificado por <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" /> o <see cref="T:System.Windows.Vector" /> y devuelve el resultado.</span><span class="sxs-lookup"><span data-stu-id="9e442-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="9e442-257">Valor escalar que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-257">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="9e442-258">Vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-258">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-259">Multiplica el valor escalar especificado por el vector especificado y devuelve el vector resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-260">Resultado de multiplicar <paramref name="scalar" /> y <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-261">En el ejemplo siguiente se muestra cómo usar este operador (\*) para multiplicar un valor escalar por un <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-262">Vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-262">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="9e442-263">Valor escalar que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-263">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-264">Multiplica el vector especificado por el valor escalar especificado y devuelve el vector resultante.</span><span class="sxs-lookup"><span data-stu-id="9e442-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-265">Resultado de multiplicar <paramref name="vector" /> y <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-266">En el ejemplo siguiente se muestra cómo usar este operador (\*) para multiplicar una <xref:System.Windows.Vector> estructura por un valor escalar.</span><span class="sxs-lookup"><span data-stu-id="9e442-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-267">Vector que se va a transformar.</span><span class="sxs-lookup"><span data-stu-id="9e442-267">The vector to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="9e442-268">Transformación que se va a aplicar a <c>vector</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-268">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="9e442-269">Transforma el espacio de la coordenada del vector especificado mediante el objeto <see cref="T:System.Windows.Media.Matrix" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-270">Resultado de transformar <paramref name="vector" /> por <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-271">En el ejemplo siguiente se muestra cómo usar este operador (\*) para multiplicar una <xref:System.Windows.Vector> estructura por un <xref:System.Windows.Media.Matrix> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-272">Primer vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-272">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-273">Segundo vector que se va a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="9e442-273">The second vector to multiply.</span></span></param>
        <summary><span data-ttu-id="9e442-274">Calcula el producto escalar de las dos estructuras vectoriales especificadas y devuelve el resultado como <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-275">Devuelve <see cref="T:System.Double" /> que contiene el producto de los vectores escalares <paramref name="vector1" /> y <paramref name="vector2" />, que se calcula con la fórmula siguiente:</span><span class="sxs-lookup"><span data-stu-id="9e442-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="9e442-276"><c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span><span class="sxs-lookup"><span data-stu-id="9e442-276"><c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-277">En el ejemplo siguiente se muestra cómo usar este operador (\*) para multiplicar una <xref:System.Windows.Vector> estructura por un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-278">Vector del que se resta <c>vector2</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-278">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-279">Vector que se va a restar de <c>vector1</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-279">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="9e442-280">Resta un vector especificado de otro.</span><span class="sxs-lookup"><span data-stu-id="9e442-280">Subtracts one specified vector from another.</span></span></summary>
        <returns><span data-ttu-id="9e442-281">Diferencia entre <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-282">En el ejemplo siguiente se muestra cómo usar este operador (-) para restar un <xref:System.Windows.Vector> de la estructura de un <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="9e442-283">Vector que se va a convertir en negativo.</span><span class="sxs-lookup"><span data-stu-id="9e442-283">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="9e442-284">Convierte en negativo el vector especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-284">Negates the specified vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-285">Vector con los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> opuestos a los valores de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-286">En el ejemplo siguiente se muestra cómo usar este operador de negación para negar una <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="9e442-287">Representación de cadena del vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-287">The string representation of the vector.</span></span></param>
        <summary><span data-ttu-id="9e442-288">Convierte una representación de cadena en la estructura <see cref="T:System.Windows.Vector" /> equivalente.</span><span class="sxs-lookup"><span data-stu-id="9e442-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="9e442-289">Estructura <see cref="T:System.Windows.Vector" /> equivalente.</span><span class="sxs-lookup"><span data-stu-id="9e442-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-290">En el ejemplo siguiente se muestra cómo utilizar este método para convertir una representación de cadena de un vector en una <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="9e442-291">Vector del que se resta <c>vector2</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-291">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="9e442-292">Vector que se va a restar de <c>vector1</c>.</span><span class="sxs-lookup"><span data-stu-id="9e442-292">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="9e442-293">Resta un vector especificado de otro vector especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-293">Subtracts the specified vector from another specified vector.</span></span></summary>
        <returns><span data-ttu-id="9e442-294">Diferencia entre <paramref name="vector1" /> y <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-295">En el ejemplo siguiente se muestra cómo utilizar este método para restar un <xref:System.Windows.Vector> de la estructura de un <xref:System.Windows.Vector> estructura.</span><span class="sxs-lookup"><span data-stu-id="9e442-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="9e442-296">Cadena que especifica el formato que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="9e442-296">The string specifying the format to use.</span></span>  
  
 <span data-ttu-id="9e442-297">O bien</span><span class="sxs-lookup"><span data-stu-id="9e442-297">-or-</span></span>  
  
 <span data-ttu-id="9e442-298"><see langword="null" /> para utilizar el formato predeterminado que se define para el tipo de la implementación de <see cref="T:System.IFormattable" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-298"><see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="9e442-299"><see langword="IFormatProvider" /> que se va a utilizar para dar formato al valor.</span><span class="sxs-lookup"><span data-stu-id="9e442-299">The <see langword="IFormatProvider" /> to use to format the value.</span></span>  
  
 <span data-ttu-id="9e442-300">O bien</span><span class="sxs-lookup"><span data-stu-id="9e442-300">-or-</span></span>  
  
 <span data-ttu-id="9e442-301"><see langword="null" /> para obtener la información de formato para valores numéricos de la configuración regional actual del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="9e442-301"><see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="9e442-302">Este miembro es compatible con la infraestructura de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está diseñado para utilizarse directamente desde el código.</span><span class="sxs-lookup"><span data-stu-id="9e442-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="9e442-303">Para una descripción de este miembro, vea <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9e442-304">Cadena que contiene el valor de la instancia actual con el formato especificado.</span><span class="sxs-lookup"><span data-stu-id="9e442-304">A string containing the value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e442-305">Devuelve la representación de cadena de esta estructura <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e442-306">Devuelve la representación de cadena de esta estructura <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="9e442-307">Cadena que representa los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-308">En el ejemplo siguiente se muestra cómo utilizar este método para obtener una representación de cadena de un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="9e442-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9e442-309">Información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="9e442-309">The culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="9e442-310">Devuelve la representación de cadena de esta estructura <see cref="T:System.Windows.Vector" /> con la información de formato especificada.</span><span class="sxs-lookup"><span data-stu-id="9e442-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span></span></summary>
        <returns><span data-ttu-id="9e442-311">Cadena que representa los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="9e442-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e442-312">Obtiene o establece el componente de <see cref="P:System.Windows.Vector.X" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="9e442-313">Componente de <see cref="P:System.Windows.Vector.X" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span> <span data-ttu-id="9e442-314">El valor predeterminado es 0.</span><span class="sxs-lookup"><span data-stu-id="9e442-314">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-315">En el ejemplo siguiente se muestra cómo comprobar dos <xref:System.Windows.Vector> estructuras de igualdad.</span><span class="sxs-lookup"><span data-stu-id="9e442-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e442-316">Obtiene o establece el componente de <see cref="P:System.Windows.Vector.Y" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="9e442-317">Componente de <see cref="P:System.Windows.Vector.Y" /> de este vector.</span><span class="sxs-lookup"><span data-stu-id="9e442-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span> <span data-ttu-id="9e442-318">El valor predeterminado es 0.</span><span class="sxs-lookup"><span data-stu-id="9e442-318">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e442-319">En el ejemplo siguiente se muestra cómo comprobar dos <xref:System.Windows.Vector> estructuras de igualdad.</span><span class="sxs-lookup"><span data-stu-id="9e442-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>