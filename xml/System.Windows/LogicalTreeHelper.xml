<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62b7945787d0b94dce6ae67c8577e1d895687cda" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36458585" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona métodos auxiliares estáticos para consultar los objetos del árbol lógico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.LogicalTreeHelper> clase proporciona métodos que puede usar para devolver colecciones secundarias de objetos o específicos de los objetos de dentro de los subnodos del árbol lógico. Sin embargo, la mayoría de las operaciones de árbol de objetos que se realizan normalmente también se expone mediante propiedades o métodos similares en <xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement>. Por ejemplo, pruebe lo siguiente:  
  
-   En lugar de llamar el método estático <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> método, que devuelve un enumerador para los secundarios lógicos de objetos, use la colección dedicada expuesta en el modelo de contenido para ese objeto. Casi todos los objetos que admiten un modelo de contenido exponen alguna propiedad que contiene la colección de objetos secundarios y proporciona compatibilidad de la interfaz de la colección directamente en esa colección.  
  
-   En lugar de llamar el método estático <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> método para obtener un objeto secundario especificando su nombre, llamada la <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> método en objetos específicos.  
  
 <xref:System.Windows.LogicalTreeHelper> es muy útil para escenarios de análisis que se desplazan hacia arriba o hacia abajo el árbol lógico recursivamente a través de varios niveles y desea utilizar un enfoque coherente para examinar los distintos objetos primarios o secundarios. En este caso, podría estar accediendo a una combinación de los modelos de contenido y con el modelo de contenido más API específicas sería demasiado complejas.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Elemento de interfaz de usuario que se va a mostrar.</param>
        <summary>Intenta mostrar el elemento de interfaz de usuario solicitado y genera el evento <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> en el destino para notificar los resultados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es normalmente más conveniente llamar a los métodos de instancia <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> en lugar de este método de utilidad estático. El comportamiento de los métodos de instancia es equivalente al comportamiento del método estático.  
  
 Incluso si la `current` elemento de interfaz de usuario proporcionado era un <xref:System.Windows.FrameworkContentElement>, el evento resultante es el mismo <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> evento, con el que se origina <xref:System.Windows.FrameworkContentElement> identificable mediante la comprobación de los datos de evento del evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Objeto a partir del cual se va a iniciar la búsqueda. Este objeto debe ser un objeto <see cref="T:System.Windows.FrameworkElement" /> o <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Nombre del objeto que se va a buscar.</param>
        <summary>Intenta buscar y devolver el objeto con el nombre especificado. La búsqueda se inicia a partir del objeto especificado y continúa en los subnodos del árbol lógico.</summary>
        <returns>Objeto con el nombre especificado, si se encuentra uno; devuelve <see langword="null" /> si no se encuentra ningún objeto con el nombre especificado en el árbol lógico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los métodos <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> y <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> son superficialmente similar a <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, pero funcionan mediante una lógica diferente:  
  
-   La dirección de búsqueda para <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> es hacia los objetos secundarios (abajo en el árbol); la dirección de búsqueda para el `FindName` métodos es hacia los objetos primarios (arriba en el árbol).  
  
-   El `FindName` métodos se rigen por el concepto de un ámbito de nombres XAML. Con `FindName` se garantiza que solo un objeto de ese nombre no existe, porque los ámbitos de nombres XAML exigir la exclusividad. En cambio, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> omite el ámbito de nombres XAML y es posible que entre los límites del ámbito de nombres XAML durante la búsqueda. Por lo tanto, no hay ninguna garantía de exclusividad de la `elementName` nombre cuando se traspasan los límites. Para obtener más información acerca de los ámbitos de nombres XAML, vea [ámbitos de nombres de XAML de WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve la colección de objetos secundarios inmediatos del objeto especificado mediante el procesamiento del árbol lógico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Objeto a partir del cual se comienza a procesar el árbol lógico. Se espera que sea una clase <see cref="T:System.Windows.FrameworkElement" /> o <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Devuelve la colección de objetos secundarios inmediatos del objeto especificado mediante el procesamiento del árbol lógico.</summary>
        <returns>Colección enumerable de objetos secundarios inmediatos del árbol lógico del objeto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método de firma y auxiliar principalmente cuando no está seguro de si `current` es un <xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement> y también está seguro de si la clase de ese objeto admite su propia colección de modelo de contenido. Si puede determinar el tipo del objeto que está consultando, compruebe la propiedad de contenido específica que sabe que existe en ese tipo. Por ejemplo, si sabe que el objeto que está consultando es un <xref:System.Windows.Controls.ItemsControl>, compruebe la <xref:System.Windows.Controls.ItemsControl.Items%2A> propiedad para obtener una colección fuertemente tipada, que tiene compatibilidad con la interfaz de colección y es probablemente más útil que un enumerador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Objeto a partir del cual se comienza a procesar el árbol lógico.</param>
        <summary>Devuelve la colección de objetos secundarios inmediatos del objeto <see cref="T:System.Windows.FrameworkContentElement" /> especificado mediante el procesamiento del árbol lógico.</summary>
        <returns>Colección enumerable de los objetos secundarios inmediatos a partir de <paramref name="current" /> en el árbol lógico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Objeto a partir del cual se comienza a procesar el árbol lógico.</param>
        <summary>Devuelve la colección de objetos secundarios inmediatos del objeto <see cref="T:System.Windows.FrameworkElement" /> especificado mediante el procesamiento del árbol lógico.</summary>
        <returns>Colección enumerable de los objetos secundarios inmediatos a partir de <paramref name="current" /> en el árbol lógico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Objeto cuyo objeto primario se va a buscar. Se espera que sea un objeto <see cref="T:System.Windows.FrameworkElement" /> o <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Devuelve el objeto primario del objeto especificado mediante el procesamiento del árbol lógico.</summary>
        <returns>Objeto primario solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es simplemente un contenedor que obtiene la versión del tipo adecuado (<xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement>) de la <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> propiedad; por lo que, a menos que no puede determinar la `current` tipo, puede comprobar los respectivos propiedades de la instancia en su lugar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>