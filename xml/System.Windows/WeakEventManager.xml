<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac94cdae430bda3a59a21292d13f613f0012919d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac94cdae430bda3a59a21292d13f613f0012919d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">Proporciona una clase base para el administrador de eventos que se usa en el <bpt id="p1">*</bpt>modelo de evento débil<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">El administrador agrega y quita los agentes de escucha para los eventos (o las devoluciones de llamada) que también usan el modelo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">Normalmente, se usa el modelo de evento débil cuando el origen de eventos tiene una duración de los objetos que es independiente de los agentes de escucha de eventos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>Using the central event dispatching capability of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">Usar el evento central enviar la capacidad de un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> permite que los controladores del agente de escucha pueden recogidos incluso si el objeto de origen continúa.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">Por el contrario, un enlace de eventos regulares mediante la <ph id="ph1">`+=`</ph> operador hace que el origen potencialmente desconectado mantener una referencia a los agentes de escucha.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">Esto impide que el receptor se recolectó de manera oportuna.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">Una situación común donde deben usar las relaciones de duración entre los orígenes y los agentes de escucha del modelo de evento débil es el control de eventos de actualización procedentes de los enlaces de datos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">El modelo de evento débil también puede utilizarse para las devoluciones de llamada y eventos normales.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>For an example of a custom <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
          <target state="translated">Para obtener un ejemplo de un personalizado <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, consulte <bpt id="p1">[</bpt>débil patrones de eventos<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.#ctor">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">Inicializa los valores de la clase base cuando el constructor de una clase derivada los usa como inicializador.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Objeto en el que se administra el evento.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data for the event to deliver.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos que el evento va a entregar.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">Entrega el evento que se administra a cada agente de escucha.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method from within the event handlers that are added or removed by the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementations of subclasses.</source>
          <target state="translated">Llame a la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> método desde los controladores de eventos que se agregan o quitan por la <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> las implementaciones de las subclases.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method in your <ph id="ph2">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">Si se llama a la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> método en su <ph id="ph2">`AddListener`</ph> implementación de la clase, la lista de agentes de escucha recibe el evento se mantiene en una colección subyacente.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph> no forma parte de un contrato de interfaz o clase.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and adds weak event pattern listeners for the event.)</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> es el nombre sugerido para el método de la clase de administrador que llama a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> y agrega los agentes de escucha de eventos débiles patrón para el evento.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Agrega los agentes de escucha a una sola lista.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Si la implementación del administrador mantiene más de una lista de agentes de escucha por evento, no use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">En su lugar, la implementación debe crear su propio <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instancias, <ph id="ph2">`AddListener`</ph> debería agregar agentes de escucha a la lista adecuada y eventos se deben entregar a la lista de agentes de escucha adecuada llamando <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Objeto en el que se administra el evento.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> proporcionado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Delivers the event being managed to each listener in the provided list.</source>
          <target state="translated">Entrega el evento que se administra a cada agente de escucha en la lista proporcionada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</source>
          <target state="translated">Este método es necesario si la implementación del administrador mantiene listas de agentes de escucha independientes basadas en información que se captura en los datos del evento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</source>
          <target state="translated">Si utiliza esta técnica avanzada, debe crear y mantener listas independientes como parte de la implementación del administrador, y debe proporcionar un medio para agregar agentes de escucha a una lista específica.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</source>
          <target state="translated">La implementación del controlador que escucha el evento sin formato debe actuar según la condición que se usa para diferenciar las listas y entrega el evento únicamente a la lista o listas adecuadas.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The type to obtain the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> for.</source>
          <target state="translated">Tipo para el que se obtiene <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation that is used for the provided type.</source>
          <target state="translated">Devuelve la implementación de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> que se usa para el tipo proporcionado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The matching <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation.</source>
          <target state="translated">Implementación de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> correspondiente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementations call this method using their passed <ph id="ph2">`managerType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> las implementaciones de llamar a este método con su pasado <ph id="ph2">`managerType`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">El valor devuelto <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> , a continuación, se utiliza como el diferenciador que determina qué evento se recibió y qué controlador de clase privada que se invoca.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">Índice de base cero del origen solicitado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">Obtiene o establece los datos que se almacenan para el origen especificado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">Datos que almacena el administrador para este origen.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">Las clases derivadas pueden elegir qué datos y tipos se almacenan en este indizador.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Typically this is implemented as a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, which is a list of weak references to listeners.</source>
          <target state="translated">Normalmente esto se implementa como un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, que es una lista de referencias débiles a los agentes de escucha.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>You would only have to change this type if the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> type cannot contain your required information.</source>
          <target state="translated">Solo tendría que cambiar este tipo si el <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> tipo no puede contener la información necesaria.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>If so, you will have to override the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">Si es así, tendrá que reemplazar el <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> método para que toda la limpieza del tipo subyacente se realiza correctamente.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">Devuelve un nuevo objeto para contener agentes de escucha para un evento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">Nuevo objeto para contener agentes de escucha para un evento.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">El objeto de origen al que el delegado de controlador se suscribe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The delegate that handles the event that is raised by <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegado que controla el evento generado por <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">Agrega el delegado especificado como controlador de eventos del origen especificado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to attach listeners to.</source>
          <target state="translated">Origen al que se asocian los agentes de escucha.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Clase que realiza las escuchas (que debe implementar <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">Agrega el agente de escucha proporcionado al origen proporcionado para el evento que se administra.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Llamar a este método dentro de la clase de administrador <ph id="ph1">`AddListener`</ph> métodos en <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementaciones.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> es el nombre sugerido para el método estático que define en la clase de administrador para permitir a otras clases agregar un agente de escucha para el modelo de evento débil.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> debe tomar dos parámetros: el <ph id="ph2">`source`</ph> donde el agente de escucha está conectado y el <ph id="ph3">`listener`</ph> instancia.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Para su <ph id="ph1">`AddListener`</ph> implementación, llame a la <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> método en el administrador actual y pase los mismos dos parámetros.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If the list of listeners was previously empty, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Si la lista de agentes de escucha estaba vacía anteriormente, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> llamadas el <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> método internamente, que llamará específica de su <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> invalidar a través del polimorfismo.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Agrega los agentes de escucha a una sola interna <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> por <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Si la implementación del administrador mantiene más de una lista de agentes de escucha para cada combinación de origen del evento, no use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> event instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">En su lugar, la implementación debe crear su propio <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instancias, <ph id="ph2">`AddListener`</ph> debería agregar agentes de escucha a la lista adecuada y eventos se deben entregar a la lista de agentes de escucha adecuada llamando el <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> eventos en lugar de la <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The source to remove the handler from.</source>
          <target state="translated">Origen del que se va a quitar el controlador.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The delegate to remove from <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegado que se va a quitar de <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">Quita el controlador agregado anteriormente del origen especificado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to remove listeners from.</source>
          <target state="translated">Origen del que se quitan los agentes de escucha.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Clase que realiza las escuchas (que debe implementar <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">Quita un agente de escucha previamente agregado del origen proporcionado.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Llamar a este método dentro de la clase de administrador <ph id="ph1">`RemoveListener`</ph> métodos en <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementaciones.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> es el nombre sugerido para el método estático que define en la clase de administrador para permitir a otras clases quitar un agente de escucha para el modelo de evento débil.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> debe tomar dos parámetros: el <ph id="ph2">`source`</ph> donde se quita el agente de escucha y la <ph id="ph3">`listener`</ph> clase.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Para su <ph id="ph1">`RemoveListener`</ph> implementación, llame a la <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> método en el administrador actual y pase los mismos dos parámetros.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If a call to <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes the last listener in the list, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> calls the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Si una llamada a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> quita el último agente de escucha en la lista, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> llamadas el <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> método internamente, que llamará específica de su <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> invalidar a través del polimorfismo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes listeners from a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> Quita los agentes de escucha de un único interno <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> por <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</source>
          <target state="translated">Si la implementación del administrador mantiene más de una lista de agentes de escucha para cada combinación de origen del evento, no use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> method instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">En su lugar, la implementación debe crear su propio <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instancias, <ph id="ph2">`RemoveListener`</ph> debe quitar los agentes de escucha de la lista correspondiente, y eventos se deben entregar a la lista de agentes de escucha adecuada llamando a la <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> en lugar del método la <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The source for events being listened to.</source>
          <target state="translated">Origen de los eventos que se escuchan.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The data to check.</source>
          <target state="translated">Datos que se van a comprobar.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>This object is expected to be a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementation.</source>
          <target state="translated">Se espera que este objeto sea una implementación de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to stop listening to <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>, and completely remove all entries from <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para dejar de escuchar a <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> y quitar completamente todas las entradas de <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">Quita las entradas del agente de escucha inactivas de la lista de datos para el origen proporcionado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed from the list.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se quitaron realmente algunas entradas de la lista.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se han quitado realmente algunas entradas; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method has a default implementation that will remove all entries when data is a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> método tiene una implementación predeterminada que se quitará todas las entradas cuando los datos son un <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If the underlying type for the <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> is something other than <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, or contains data beyond a <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, you must override the <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Si el tipo subyacente para la <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> es algo distinto de <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, o contiene datos más allá de un <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, es necesario reemplazar el <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The override should provide purge behavior for the alternate type items list.</source>
          <target state="translated">La invalidación debe proporcionar el comportamiento de purga para la lista de elementos de tipo alternativa.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Generally, the override should provide behavior without calling the base implementation.</source>
          <target state="translated">Por lo general, la invalidación debe proporcionar el comportamiento sin llamar a la implementación base.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If a specific <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> still needs clearing, call <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</source>
          <target state="translated">Si un determinado <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> aún debe borrar, llamada <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>Establishes a read-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Establece un bloqueo de lectura en la tabla de datos subyacente y devuelve <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <ph id="ph1">&lt;see langword="using" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>In derived classes, queries to the table contained in <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> should always occur within a <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">En las clases derivadas, las consultas realizadas en la tabla contenida en <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> deben realizarse siempre en un <ph id="ph2">`using (ReadLock) { ... }`</ph> cláusula, excepto para las consultas que ya están en un bloqueo de escritura.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Estas consultas pueden ser necesarias si su clase admite más sofisticadas <ph id="ph1">`AddListener`</ph> implementación que requiere más datos más allá de la <ph id="ph2">`source`</ph> y <ph id="ph3">`listener`</ph>y utiliza el <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> colección para almacenar la información adicional.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>The source to remove listener information for.</source>
          <target state="translated">Origen del que se quita la información del agente de escucha.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">Quita todos los agentes de escucha del origen especificado.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">Solicita que se realice una purga de entradas no usadas en la lista de agentes de escucha subyacente en un subproceso de menor prioridad.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method on the current manager's list, at lower thread priority, with the <ph id="ph3">`purgeAll`</ph> parameter set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> método es similar a llamar a la <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> método en la lista del administrador actual, con menor prioridad de subproceso, con el <ph id="ph3">`purgeAll`</ph> parámetro establecido en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The type to set the new event manager.</source>
          <target state="translated">Tipo en el que se establece el nuevo administrador de eventos.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The new event manager.</source>
          <target state="translated">Nuevo administrador del evento.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">Establece el administrador actual para el tipo de administrador especificado.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> method to initialize a manager, if that is required by a call to your <ph id="ph2">`CurrentManager`</ph> property on a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation.</source>
          <target state="translated">Llame a la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> método para inicializar un administrador, si es necesario por una llamada a su <ph id="ph2">`CurrentManager`</ph> propiedad en un <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The source to begin listening on.</source>
          <target state="translated">Origen en el que se empiezan a realizar escuchas.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">Cuando se invalida en una clase derivada, inicia la escucha para el evento que se administra.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>After the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method is first called, the manager should be in the state of calling <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> whenever the relevant event from the provided source is handled.</source>
          <target state="translated">Después de llamar al método <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> por primera vez, el administrador debe estar en el estado de llamar a <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> o <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> cada vez que se administre el evento pertinente del origen proporcionado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> overrides should add a handler to the provided <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> invalidaciones deben agregar un controlador a proporcionado <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The handler is declared by the manager itself.</source>
          <target state="translated">El controlador está declarado por el propio administrador.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should not be public, and it should only be called in response to the event being managed.</source>
          <target state="translated">El controlador de clase no debe ser público y solo debe llamarse en respuesta al evento que se va a administrar.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should call the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> method or the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> method appropriately.</source>
          <target state="translated">El controlador de clase debe llamar a la <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> método o la <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> método correctamente.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>The source to stop listening on.</source>
          <target state="translated">Origen en el que se dejan de realizar escuchas.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">Cuando se invalida en una clase derivada, deja de realizar escuchas en el origen proporcionado para el evento que se administra.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementations should remove the class handler as added by the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> las implementaciones deberían quitar el controlador de clase agregando el <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Removing a listener should not clear the listener list.</source>
          <target state="translated">Quitar un agente de escucha no debería borrar la lista de escucha.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Instead, it should only disconnect the class handler (perhaps temporarily).</source>
          <target state="translated">En su lugar, solo debe desconectar el controlador de clase (quizás temporalmente).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Other methods are available for clearing the entire list, such as the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method with the <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parameter set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Existen otros métodos para borrar toda la lista, como el <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> método con el <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parámetro establecido en <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>Establishes a write-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Establece un bloqueo de escritura en la tabla de datos subyacente y devuelve <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <ph id="ph1">&lt;see langword="using" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">En las clases derivadas, todas las modificaciones a la tabla de datos subyacente deben realizarse dentro de un <ph id="ph1">`using (WriteLock) { ... }`</ph> cláusula.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Estas modificaciones pueden ser necesarias si su clase admite más sofisticadas <ph id="ph1">`AddListener`</ph> implementación que requiere más datos más allá de la <ph id="ph2">`source`</ph> y <ph id="ph3">`listener`</ph>y utiliza el <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> colección para almacenar la información adicional.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>