<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765185" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un identificador de propiedad de dependencia para un acceso de escritura limitado a una propiedad de dependencia de sólo lectura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> las instancias se obtienen como el valor devuelto de una llamada de registro de propiedad de dependencia mediante los métodos <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> o <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Los tipos que registran una propiedad de dependencia se pueden usar el <xref:System.Windows.DependencyPropertyKey> en las llamadas a <xref:System.Windows.DependencyObject.SetValue%2A> y <xref:System.Windows.DependencyObject.ClearValue%2A> que ajustar el valor de propiedad como parte de la lógica de la clase. Si lo permite el nivel de acceso de la clave, las clases relacionadas pueden usar la clave y la propiedad de dependencia también. Por ejemplo, puede declarar la clave como internos, y otros tipos dentro del mismo ensamblado también pueden establecer esa propiedad de dependencia.  
  
 El <xref:System.Windows.DependencyPropertyKey> devuelto por la dependencia de solo lectura registro de la propiedad no debe estar público, puesto que exponer la clave hace que la propiedad configurable, frustrando, por tanto, el punto de registro como una propiedad de dependencia de solo lectura. Además, exponer la clave hace que una discrepancia entre la dependencia disponible los comportamientos de la propiedad y su [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementaciones de contenedor de propiedad, que es el diseño de clase incorrecto.  
  
 En lugar de exponer la propia clave, en su lugar, debe exponer la <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor de la <xref:System.Windows.DependencyPropertyKey> como un `public static readonly` <xref:System.Windows.DependencyProperty> en su clase. Esto permite que la propiedad para devolver un identificador de propiedad de dependencia válido para determinadas operaciones de sistema de propiedades como enumerar valores establecidos localmente. Sin embargo, el identificador obtenido, por tanto, no tiene todas las capacidades de un <xref:System.Windows.DependencyProperty> para muchas operaciones de sistema de propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente se registra una propiedad de dependencia de solo lectura y también usa la clave para dos fines en otros miembros de clase: implementar el contenedor"get" y, como el identificador para una operación de determinación protegido que establece el valor según los cálculos otros valores de propiedad.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador de propiedad de dependencia asociado a este identificador de propiedad de dependencia de sólo lectura especializado.</summary>
        <value>Identificador de la propiedad de dependencia pertinente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor habilita el identificador de una propiedad de solo lectura participar en común las operaciones de sistema de propiedad utilizando algunas de las mismas interfaces que se usan para las propiedades de dependencia de lectura y escritura.  
  
 Para implementar el descriptor de acceso get de una propiedad de dependencia de solo lectura, debe crear y exponer un <xref:System.Windows.DependencyProperty> identificador en su clase. Esta suspensión tiene dos fines:  
  
-   Sus propias necesidades de la clase el <xref:System.Windows.DependencyProperty> identificador con el fin de implementar el descriptor de acceso get para el contenedor de propiedad. Usa el <xref:System.Windows.DependencyProperty> como un parámetro para el <xref:System.Windows.DependencyObject.GetValue%2A> llamada que implementa el descriptor de acceso get.  
  
-   <xref:System.Windows.DependencyProperty> los identificadores de exponen la propiedad de dependencia para el sistema de propiedades, que otros métodos que se basan en los metadatos pueden acceder a él en un formulario estándar. Por ejemplo, si llama a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> en algunas <xref:System.Windows.DependencyObject> y obtener el identificador de una enumeración de las propiedades establecidas localmente (valores e identificadores) devuelto para una propiedad de dependencia de sólo lectura sería su <xref:System.Windows.DependencyProperty> en lugar de la clave de valor. No expone un <xref:System.Windows.DependencyProperty> identificador no aumenta la seguridad de la propiedad de dependencia de solo lectura de cualquier manera, simplemente realiza las operaciones que implican la propiedad más difícil tanto para las instancias de clase y clases derivadas posteriores.  
  
 Para exponer el <xref:System.Windows.DependencyProperty> identificador en su clase, se llama a <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directamente en su clave. Use este valor para crear un `public static readonly` <xref:System.Windows.DependencyProperty> identificador en la clase, que es semejante a la <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> para exponer el <xref:System.Windows.DependencyProperty> identificador (`AquariumGraphicProperty`) para el `AquariumGraphic` propiedad de dependencia de solo lectura en una clase. El ejemplo también muestra el <xref:System.Windows.DependencyPropertyKey> creación (como un miembro interno) y el descriptor de acceso get `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Se deben invalidar el tipo en el que existe esta propiedad de dependencia y los metadatos.</param>
        <param name="typeMetadata">Metadatos proporcionados para este tipo.</param>
        <summary>Invalida los metadatos de una propiedad de dependencia de sólo lectura que está representada por este identificador de propiedad de dependencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidar metadatos en una propiedad de dependencia de solo lectura se realiza por motivos similares como invalidación de metadatos en una propiedad de dependencia de lectura y escritura y está restringido para el acceso en el nivel de clave porque los comportamientos especificados en los metadatos pueden cambiar el comportamiento de juego (el el valor predeterminado, por ejemplo).  
  
 Como con las propiedades de dependencia de lectura y escritura, la invalidación de metadatos en una propiedad de dependencia de sólo lectura sólo debe hacerse antes de esa propiedad que se va a colocar en uso por el sistema de propiedades (Esto equivale al momento en que instancias específicas de objetos que registran el propiedad instancias se crean). Las llamadas a <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> solo debe realizarse dentro de los constructores estáticos del tipo que se proporciona como el `forType` parámetro de este método o una inicialización equivalente para esa clase.  
  
 Este método reenvía de forma eficaz a la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método, pasando el <xref:System.Windows.DependencyPropertyKey> instancia como el parámetro de clave.  
  
   
  
## Examples  
 El ejemplo siguiente invalida los metadatos de una propiedad de dependencia de sólo lectura existente que hereda de una clase. En este caso, el objetivo del escenario fue agregar una devolución de llamada de valor de coerción que no tengan los metadatos de propiedad base. También puede invalidar metadatos para cualquiera de los otros motivos que invalidar metadatos es normalmente apropiado (cambiar el valor predeterminado, agregar <xref:System.Windows.FrameworkPropertyMetadataOptions> valores, etcetera.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado invalidar metadatos en una propiedad de dependencia de lectura y escritura (no se puede hacer utilizando esta firma).</exception>
        <exception cref="T:System.ArgumentException">Los metadatos ya estaban establecidos para la propiedad tal y como existen en el tipo proporcionado.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>