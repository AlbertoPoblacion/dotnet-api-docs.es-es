<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cdf245a9689919000af11208b44b103950e964a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460964" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7d2a4-101">Proporciona un identificador de propiedad de dependencia para un acceso de escritura limitado a una propiedad de dependencia de sólo lectura.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7d2a4-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d2a4-102"><xref:System.Windows.DependencyPropertyKey> las instancias se obtienen como el valor devuelto de una llamada de registro de propiedad de dependencia mediante los métodos <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> o <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="7d2a4-103">Pueden usar los tipos que registran una propiedad de dependencia del <xref:System.Windows.DependencyPropertyKey> en las llamadas a <xref:System.Windows.DependencyObject.SetValue%2A> y <xref:System.Windows.DependencyObject.ClearValue%2A> que ajustar el valor de propiedad como parte de la lógica de clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="7d2a4-104">Si lo permite el nivel de acceso de la clave, las clases relacionadas pueden utilizar la clave y la propiedad de dependencia también.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="7d2a4-105">Por ejemplo, puede declarar la clave como interna y otros tipos dentro del mismo ensamblado también pueden establecer esa propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="7d2a4-106">El <xref:System.Windows.DependencyPropertyKey> devuelto por la dependencia de solo lectura registro de la propiedad no se debería hacer público, porque expone la clave hace que la propiedad configurable, defeating, por tanto, el punto de registro como una propiedad de dependencia de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="7d2a4-107">Asimismo, exponer la clave hace que una discrepancia entre la dependencia disponible comportamientos de la propiedad y su [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] las implementaciones de contenedor de propiedad, que es el diseño de clase incorrecto.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="7d2a4-108">En lugar de exponer la propia clave, en su lugar debe exponer la <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor de la <xref:System.Windows.DependencyPropertyKey> como un `public static readonly` <xref:System.Windows.DependencyProperty> en la clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="7d2a4-109">Esto permite la propiedad que se va a devolver un identificador de la propiedad de dependencia válido para ciertas operaciones de sistema de propiedades como enumerar valores establecidos localmente.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="7d2a4-110">Sin embargo, el identificador obtenido, por tanto, no tiene todas las capacidades de un <xref:System.Windows.DependencyProperty> para muchas operaciones de sistema de propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d2a4-111">En el ejemplo siguiente se registra una propiedad de dependencia de solo lectura y también usa la clave para dos propósitos en otros miembros de clase: implementar el contenedor"get" y, como identificador para una operación de determinación protegido que establece el valor que se basa en los cálculos otros valores de propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7d2a4-112">Obtiene el identificador de propiedad de dependencia asociado a este identificador de propiedad de dependencia de sólo lectura especializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7d2a4-113">Identificador de la propiedad de dependencia pertinente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-113">The relevant dependency property identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d2a4-114">El <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor habilita el identificador de una propiedad de solo lectura participar en común las operaciones de sistema de propiedad con algunas de las mismas interfaces que se usan para las propiedades de dependencia de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="7d2a4-115">Para implementar el descriptor de acceso de propiedad get para una propiedad de dependencia de solo lectura, debe crear y exponer un <xref:System.Windows.DependencyProperty> identificador en la clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="7d2a4-116">Esta suspensión tiene dos fines:</span><span class="sxs-lookup"><span data-stu-id="7d2a4-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="7d2a4-117">Las necesidades de su propia clase la <xref:System.Windows.DependencyProperty> identificador con el fin de implementar el descriptor de acceso get para el contenedor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="7d2a4-118">Usa el <xref:System.Windows.DependencyProperty> como un parámetro para el <xref:System.Windows.DependencyObject.GetValue%2A> llamada que implementa el descriptor de acceso get.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="7d2a4-119"><xref:System.Windows.DependencyProperty> identificadores de exponen la propiedad de dependencia para el sistema de propiedades de forma que otros métodos que se basan en los metadatos pueden obtener acceso a él en un formato estándar.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="7d2a4-120">Por ejemplo, si llama a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> en algunos <xref:System.Windows.DependencyObject> y obtiene una enumeración de propiedades del conjunto localmente (valores e identificadores) el identificador devuelto para una propiedad de dependencia de solo lectura sería la <xref:System.Windows.DependencyProperty> valor en lugar de la clave.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="7d2a4-121">No exponer un <xref:System.Windows.DependencyProperty> identificador no aumenta la seguridad de la propiedad de dependencia de solo lectura de cualquier manera, solo realiza las operaciones que implican la propiedad más difícil tanto para instancias de clase y clases derivadas posteriores.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="7d2a4-122">Para exponer el <xref:System.Windows.DependencyProperty> identificador en la clase, se llama a <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directamente en su clave.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="7d2a4-123">Use este valor para crear un `public static readonly` <xref:System.Windows.DependencyProperty> identificador en la clase, que se asemeja a la <xref:System.Windows.DependencyPropertyKey>.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d2a4-124">El ejemplo siguiente se llama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> para exponer el <xref:System.Windows.DependencyProperty> identificador (`AquariumGraphicProperty`) para el `AquariumGraphic` propiedad de dependencia de solo lectura en una clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="7d2a4-125">El ejemplo también muestra el <xref:System.Windows.DependencyPropertyKey> creación (como un miembro interno) y el descriptor de acceso get `AquariumGraphic`.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="7d2a4-126">Se deben invalidar el tipo en el que existe esta propiedad de dependencia y los metadatos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-126">The type on which this dependency property exists and metadata should be overridden.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="7d2a4-127">Metadatos proporcionados para este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-127">Metadata supplied for this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d2a4-128">Invalida los metadatos de una propiedad de dependencia de sólo lectura que está representada por este identificador de propiedad de dependencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d2a4-129">Invalidación de metadatos en una propiedad de dependencia de solo lectura se realiza por motivos similares como invalidación de metadatos en una propiedad de dependencia de lectura y escritura y está restringida para el acceso en el nivel de clave porque los comportamientos especificados en los metadatos pueden cambiar el comportamiento de conjunto (el el valor predeterminado, por ejemplo).</span><span class="sxs-lookup"><span data-stu-id="7d2a4-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="7d2a4-130">Como con las propiedades de dependencia de lectura y escritura, la invalidación de metadatos en una propiedad de dependencia de solo lectura solo debe realizarse antes de esa propiedad se sitúe en uso por el sistema de propiedades (Esto equivale a la hora que instancias específicas de objetos que registran el propiedad se crea una instancia).</span><span class="sxs-lookup"><span data-stu-id="7d2a4-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="7d2a4-131">Las llamadas a <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> sólo debe realizarse dentro de los constructores estáticos del tipo que se proporciona como el `forType` parámetro de este método o una inicialización equivalente para esa clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="7d2a4-132">Este método reenvía de forma eficaz a la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método, pasando el <xref:System.Windows.DependencyPropertyKey> instancia como el parámetro de clave.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d2a4-133">En el ejemplo siguiente se invalida metadatos para una propiedad de dependencia de solo lectura existente que hereda de una clase.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="7d2a4-134">En este caso, el objetivo del escenario era agregar una devolución de llamada de valor forzado que no dispongan de los metadatos de propiedad base.</span><span class="sxs-lookup"><span data-stu-id="7d2a4-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="7d2a4-135">También puede reemplazar los metadatos para cualquiera de los otros motivos que la invalidación de metadatos es normalmente adecuado (cambiar el valor predeterminado, agregar <xref:System.Windows.FrameworkPropertyMetadataOptions> valores, etcetera.)</span><span class="sxs-lookup"><span data-stu-id="7d2a4-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7d2a4-136">Se ha intentado invalidar metadatos en una propiedad de dependencia de lectura y escritura (no se puede hacer utilizando esta firma).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7d2a4-137">Los metadatos ya estaban establecidos para la propiedad tal y como existen en el tipo proporcionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d2a4-137">Metadata was already established for the property as it exists on the provided type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>