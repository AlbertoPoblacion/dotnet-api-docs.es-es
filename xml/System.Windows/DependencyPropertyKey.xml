<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676979" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un identificador de propiedad de dependencia para un acceso de escritura limitado a una propiedad de dependencia de sólo lectura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> las instancias se obtienen como el valor devuelto de una llamada de registro de propiedad de dependencia mediante los métodos <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> o <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Pueden usar los tipos que registran una propiedad de dependencia del <xref:System.Windows.DependencyPropertyKey> en las llamadas a <xref:System.Windows.DependencyObject.SetValue%2A> y <xref:System.Windows.DependencyObject.ClearValue%2A> que ajustar el valor de propiedad como parte de la lógica de clase. Si lo permite el nivel de acceso de la clave, las clases relacionadas pueden utilizar la clave y la propiedad de dependencia también. Por ejemplo, puede declarar la clave como interna y otros tipos dentro del mismo ensamblado también pueden establecer esa propiedad de dependencia.  
  
 El <xref:System.Windows.DependencyPropertyKey> devuelto por la dependencia de solo lectura registro de la propiedad no se debería hacer público, porque expone la clave hace que la propiedad configurable, defeating, por tanto, el punto de registro como una propiedad de dependencia de solo lectura. Asimismo, exponer la clave hace que una discrepancia entre la dependencia disponible comportamientos de la propiedad y su [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] las implementaciones de contenedor de propiedad, que es el diseño de clase incorrecto.  
  
 En lugar de exponer la propia clave, en su lugar debe exponer la <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor de la <xref:System.Windows.DependencyPropertyKey> como un `public static readonly` <xref:System.Windows.DependencyProperty> en la clase. Esto permite la propiedad que se va a devolver un identificador de la propiedad de dependencia válido para ciertas operaciones de sistema de propiedades como enumerar valores establecidos localmente. Sin embargo, el identificador obtenido, por tanto, no tiene todas las capacidades de un <xref:System.Windows.DependencyProperty> para muchas operaciones de sistema de propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se registra una propiedad de dependencia de solo lectura y también usa la clave para dos propósitos en otros miembros de clase: implementar el contenedor"get" y, como identificador para una operación de determinación protegido que establece el valor que se basa en los cálculos otros valores de propiedad.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador de propiedad de dependencia asociado a este identificador de propiedad de dependencia de sólo lectura especializado.</summary>
        <value>Identificador de la propiedad de dependencia pertinente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor habilita el identificador de una propiedad de solo lectura participar en común las operaciones de sistema de propiedad con algunas de las mismas interfaces que se usan para las propiedades de dependencia de lectura y escritura.  
  
 Para implementar el descriptor de acceso de propiedad get para una propiedad de dependencia de solo lectura, debe crear y exponer un <xref:System.Windows.DependencyProperty> identificador en la clase. Esta suspensión tiene dos fines:  
  
-   Las necesidades de su propia clase la <xref:System.Windows.DependencyProperty> identificador con el fin de implementar el descriptor de acceso get para el contenedor de propiedad. Usa el <xref:System.Windows.DependencyProperty> como un parámetro para el <xref:System.Windows.DependencyObject.GetValue%2A> llamada que implementa el descriptor de acceso get.  
  
-   <xref:System.Windows.DependencyProperty> identificadores de exponen la propiedad de dependencia para el sistema de propiedades de forma que otros métodos que se basan en los metadatos pueden obtener acceso a él en un formato estándar. Por ejemplo, si llama a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> en algunos <xref:System.Windows.DependencyObject> y obtiene una enumeración de propiedades del conjunto localmente (valores e identificadores) el identificador devuelto para una propiedad de dependencia de solo lectura sería la <xref:System.Windows.DependencyProperty> valor en lugar de la clave. No exponer un <xref:System.Windows.DependencyProperty> identificador no aumenta la seguridad de la propiedad de dependencia de solo lectura de cualquier manera, solo realiza las operaciones que implican la propiedad más difícil tanto para instancias de clase y clases derivadas posteriores.  
  
 Para exponer el <xref:System.Windows.DependencyProperty> identificador en la clase, se llama a <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directamente en su clave. Use este valor para crear un `public static readonly` <xref:System.Windows.DependencyProperty> identificador en la clase, que se asemeja a la <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> para exponer el <xref:System.Windows.DependencyProperty> identificador (`AquariumGraphicProperty`) para el `AquariumGraphic` propiedad de dependencia de solo lectura en una clase. El ejemplo también muestra el <xref:System.Windows.DependencyPropertyKey> creación (como un miembro interno) y el descriptor de acceso get `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Se deben invalidar el tipo en el que existe esta propiedad de dependencia y los metadatos.</param>
        <param name="typeMetadata">Metadatos proporcionados para este tipo.</param>
        <summary>Invalida los metadatos de una propiedad de dependencia de sólo lectura que está representada por este identificador de propiedad de dependencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidación de metadatos en una propiedad de dependencia de solo lectura se realiza por motivos similares como invalidación de metadatos en una propiedad de dependencia de lectura y escritura y está restringida para el acceso en el nivel de clave porque los comportamientos especificados en los metadatos pueden cambiar el comportamiento establecido (el valor predeterminado, por ejemplo).  
  
 Como con las propiedades de dependencia de lectura y escritura, la invalidación de metadatos en una propiedad de dependencia de solo lectura solo debe realizarse antes de esa propiedad se sitúe en uso por el sistema de propiedades (Esto equivale a la vez que se crean instancias de instancias específicas de objetos que registran la propiedad). Las llamadas a <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> sólo debe realizarse dentro de los constructores estáticos del tipo que se proporciona como el `forType` parámetro de este método o una inicialización equivalente para esa clase.  
  
 Este método reenvía de forma eficaz a la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método, pasando el <xref:System.Windows.DependencyPropertyKey> instancia como el parámetro de clave.  
  
   
  
## Examples  
 En el ejemplo siguiente se invalida metadatos para una propiedad de dependencia de solo lectura existente que hereda de una clase. En este caso, el objetivo del escenario era agregar una devolución de llamada de valor forzado que no dispongan de los metadatos de propiedad base. También puede reemplazar los metadatos para cualquiera de los otros motivos que la invalidación de metadatos es normalmente adecuado (cambiar el valor predeterminado, agregar <xref:System.Windows.FrameworkPropertyMetadataOptions> valores, etcetera.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado invalidar metadatos en una propiedad de dependencia de lectura y escritura (no se puede hacer utilizando esta firma).</exception>
        <exception cref="T:System.ArgumentException">Los metadatos ya estaban establecidos para la propiedad tal y como existen en el tipo proporcionado.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>