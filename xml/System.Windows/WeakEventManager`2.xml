<Type Name="WeakEventManager&lt;TEventSource,TEventArgs&gt;" FullName="System.Windows.WeakEventManager&lt;TEventSource,TEventArgs&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4e50fcde0e88c932d182a02bc6f23e2b30e7e37" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676349" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WeakEventManager&lt;TEventSource,TEventArgs&gt; : System.Windows.WeakEventManager where TEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WeakEventManager`2&lt;TEventSource, (class System.EventArgs) TEventArgs&gt; extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager`2" />
  <TypeSignature Language="VB.NET" Value="Public Class WeakEventManager(Of TEventSource, TEventArgs)&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEventSource, typename TEventArgs&gt;&#xA; where TEventArgs : EventArgspublic ref class WeakEventManager : System::Windows::WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEventSource" />
    <TypeParameter Name="TEventArgs">
      <Constraints>
        <BaseTypeName>System.EventArgs</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEventSource">Tipo que genera el evento.</typeparam>
    <typeparam name="TEventArgs">Tipo que contiene los datos de eventos.</typeparam>
    <summary>Proporciona un <see cref="T:System.Windows.WeakEventManager" /> con seguridad de tipos que permite especificar el controlador de eventos que se va a usar para el modelo de “agente de escucha de evento débil”. Esta clase define un parámetro de tipo para el origen del evento y un parámetro de tipo para los datos de eventos que se usan.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.WeakEventManager> clase le permite aprovechar el modelo de agente de escucha de eventos débiles mediante la especificación de los eventos para suscribirse a, el origen del evento y el controlador de eventos.  Puede usar <xref:System.Windows.WeakEventManager%602> como una alternativa para implementar la <xref:System.Windows.IWeakEventListener> interfaz y utilizando especializada <xref:System.Windows.WeakEventManager>. Cuando se llama a <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, el origen debe ser de tipo `TEventSource` y debe tener el controlador de eventos se pasa `TEventArgs` como los datos de evento. Esto garantiza que la comprobación de tipos se produce en tiempo de compilación.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (TEventSource source, string eventName, EventHandler&lt;TEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(!TEventSource source, string eventName, class System.EventHandler`1&lt;!TEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As TEventSource, eventName As String, handler As EventHandler(Of TEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(TEventSource source, System::String ^ eventName, EventHandler&lt;TEventArgs&gt; ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TEventSource" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="handler" Type="System.EventHandler&lt;TEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">Objeto de origen que provoca el evento especificado.</param>
        <param name="eventName">Nombre del evento para la suscripción.</param>
        <param name="handler">Delegado que controla el evento.</param>
        <summary>Agrega el controlador de eventos especificado al evento especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un nuevo objeto para contener agentes de escucha para un evento.</summary>
        <returns>Nuevo objeto para contener agentes de escucha para un evento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (TEventSource source, string eventName, EventHandler&lt;TEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(!TEventSource source, string eventName, class System.EventHandler`1&lt;!TEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As TEventSource, eventName As String, handler As EventHandler(Of TEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(TEventSource source, System::String ^ eventName, EventHandler&lt;TEventArgs&gt; ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TEventSource" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="handler" Type="System.EventHandler&lt;TEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">Objeto de origen que provoca el evento especificado.</param>
        <param name="eventName">Nombre del evento que se va a eliminar del controlador.</param>
        <param name="handler">Delegado que se va a quitar.</param>
        <summary>Quita el controlador de eventos especificado del evento indicado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Objeto que genera el evento.</param>
        <summary>Inicia la escucha del evento en el objeto especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Objeto que genera el evento.</param>
        <summary>Detiene la escucha del evento en el objeto especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>