<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb4566079a39397df3b4c7b2b5c0c5ef441585ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679019" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un desencadenador que aplica un conjunto de acciones en respuesta a un evento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger> los objetos tienen la <xref:System.Windows.Trigger.Setters%2A>, <xref:System.Windows.TriggerBase.EnterActions%2A>, y <xref:System.Windows.TriggerBase.ExitActions%2A> propiedades que se aplican cambios o acciones en función del estado de ciertas propiedades, mientras que <xref:System.Windows.EventTrigger> objetos iniciar un conjunto de <xref:System.Windows.EventTrigger.Actions%2A> cuando se produce un evento enrutado especificado. Por ejemplo, puede que desee usar un <xref:System.Windows.EventTrigger> para iniciar un conjunto de animaciones cuando el puntero del mouse está sobre un determinado [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] control. A diferencia de <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> no tiene ningún concepto de finalización de estado, por lo que la acción no se podrá deshacer una vez que la condición que provocó el evento ya no es true.  
  
 Tenga en cuenta que, cuando se usa un <xref:System.Windows.EventTrigger>, debe elegir los eventos que no interfieren con el comportamiento inherente del control. Controles como <xref:System.Windows.Controls.Button> o <xref:System.Windows.Controls.TextBox> realizar acciones específicas en los eventos de entrada de usuario, como clics del mouse y eventos de teclado. Por ejemplo, si está creando un botón y vuelva a intentar configurar la <xref:System.Windows.Input.Mouse.MouseDown> eventos como la <xref:System.Windows.EventTrigger.RoutedEvent%2A> de un <xref:System.Windows.EventTrigger>, el <xref:System.Windows.EventTrigger> nunca se aplica porque el evento en primer lugar se controla mediante el botón. En su lugar, puede usar el <xref:System.Windows.Input.Mouse.PreviewMouseDown> evento o un evento diferente.  
  
 Cuando utiliza un enlace de datos, si usas el <xref:System.Windows.Data.Binding.TargetUpdated> eventos, debe establecer el <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valor de la <xref:System.Windows.Data.Binding> el objeto a `true` para que se genere el evento.  
  
 Agregar un <xref:System.Windows.TriggerAction> secundario a un <xref:System.Windows.EventTrigger> objeto, agrega implícitamente a la <xref:System.Windows.TriggerActionCollection> para el <xref:System.Windows.EventTrigger> objeto.  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar los desencadenadores de eventos en un estilo para animar la <xref:System.Windows.UIElement.MouseEnter> y <xref:System.Windows.UIElement.MouseLeave> eventos de un <xref:System.Windows.FrameworkElement>. En este ejemplo, el <xref:System.Windows.Style> tiene la <xref:System.Windows.Style.TargetType%2A> establecido en <xref:System.Windows.Shapes.Rectangle>. Por lo tanto, no es necesario calificar el `MouseEnter` y `MouseLeave` nombres de evento con el nombre de clase.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.EventTrigger" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.EventTrigger" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <see cref="T:System.Windows.RoutedEvent" /> que activa este desencadenador.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.EventTrigger" /> con el evento especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de acciones que se van a aplicar cuando se produzca el evento.</summary>
        <value>El valor predeterminado es una colección vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> no tiene ningún concepto de finalización de estado, por lo que la acción no se podrá deshacer una vez que la condición que provocó el evento ya no es true.  
  
 Agregar un <xref:System.Windows.TriggerAction> secundario a un <xref:System.Windows.EventTrigger> objeto, agrega implícitamente a la <xref:System.Windows.TriggerActionCollection> para el <xref:System.Windows.EventTrigger> objeto.  
  
> [!NOTE]
>  Esta propiedad solo puede establecerse [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] a través de la sintaxis de colección se muestra, o tener acceso al objeto de colección y utilizando sus diversos métodos, como Add. La propiedad para tener acceso el propio objeto de colección es de solo lectura, la propia colección es de lectura y escritura.  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *OneOrMoreTriggerActions*  
 Uno o más <xref:System.Windows.TriggerAction> objetos.  
  
   
  
## Examples  
 En este ejemplo se describe cómo utilizar desencadenadores de eventos en un estilo para animar la <xref:System.Windows.UIElement.MouseEnter> y <xref:System.Windows.UIElement.MouseLeave> eventos de un <xref:System.Windows.FrameworkElement>. Como se mencionó anteriormente, agregar un <xref:System.Windows.TriggerAction> secundarios a una <xref:System.Windows.EventTrigger> objeto, agrega implícitamente a la <xref:System.Windows.TriggerActionCollection> para el <xref:System.Windows.EventTrigger> objeto. Por lo tanto, en este ejemplo, `<EventTrigger.Actions>` es implícito.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Windows.TriggerAction" /> que se va a agregar a la colección de propiedades <see cref="P:System.Windows.EventTrigger.Actions" /> del desencadenador.</param>
        <summary>Agrega el objeto especificado a la colección <see cref="P:System.Windows.EventTrigger.Actions" /> del desencadenador de eventos actual.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Este parámetro no se utiliza.</param>
        <summary>Este método no se admite y tiene como resultado una excepción.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Windows.RoutedEvent" /> que activará este desencadenador.</summary>
        <value>El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>aplican un conjunto de acciones cuando se produce el evento enrutado especificado. Por ejemplo, puede que desee usar <xref:System.Windows.EventTrigger>s para iniciar un conjunto de animaciones cuando el puntero del mouse está sobre un determinado [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] control.  
  
 Si la plantilla o el estilo que contiene este <xref:System.Windows.EventTrigger> no tiene la `TargetType` propiedad especificada, a continuación, es necesario calificar el nombre del evento con el nombre de clase mediante el `ClassName.EventName` sintaxis.  
  
 <xref:System.Windows.EventTrigger> objetos no pueden controlar los eventos que ya han sido <xref:System.Windows.RoutedEventArgs.Handled%2A>. Controles como <xref:System.Windows.Controls.Button> o <xref:System.Windows.Controls.TextBox> realizar acciones específicas en los eventos de entrada de usuario, como clics del mouse y eventos de teclado. Por ejemplo, si está creando un botón y vuelva a intentar configurar la <xref:System.Windows.Input.Mouse.MouseDown> eventos como la <xref:System.Windows.EventTrigger.RoutedEvent%2A> de un <xref:System.Windows.EventTrigger>, el <xref:System.Windows.EventTrigger> nunca se aplica porque el evento en primer lugar se controla mediante el botón. En su lugar, puede usar el <xref:System.Windows.Input.Mouse.PreviewMouseDown> evento o un evento diferente.  
  
 Cuando utiliza un enlace de datos, si usas el <xref:System.Windows.Data.Binding.TargetUpdated> eventos, debe establecer el <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valor de la <xref:System.Windows.Data.Binding> objeto en true para que se genere el evento.  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar los desencadenadores de eventos en un estilo para animar la <xref:System.Windows.UIElement.MouseEnter> y <xref:System.Windows.UIElement.MouseLeave> eventos de un <xref:System.Windows.FrameworkElement>. En este ejemplo, el <xref:System.Windows.Style> tiene la <xref:System.Windows.Style.TargetType%2A> establecido en <xref:System.Windows.Shapes.Rectangle>. Por lo tanto, no es necesario calificar el `MouseEnter` y `MouseLeave` nombres de evento con el nombre de clase.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> no puede ser null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve si los procesos de serialización deben serializar el valor efectivo de la propiedad <see cref="P:System.Windows.EventTrigger.Actions" /> en instancias de esta clase.</summary>
        <returns>Devuelve <see langword="true" />si el valor de la propiedad <see cref="P:System.Windows.EventTrigger.Actions" /> se debe serializar; en caso contrario, devuelve <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del objeto con el evento que activa este desencadenador. Solo se utiliza por desencadenadores de elementos o de plantillas.</summary>
        <value>El valor predeterminado es <see langword="null" />. Si este valor de propiedad es <see langword="null" />, el elemento que se supervisa para provocar el evento es el elemento primario con plantilla o la raíz del árbol lógico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer esta propiedad en el nombre de cualquier elemento dentro del ámbito del lugar donde la colección de desencadenadores (la colección que este <xref:System.Windows.EventTrigger> forma parte de) se aplica. Esto suele ser un elemento con nombre que esté dentro de la plantilla que contiene este <xref:System.Windows.EventTrigger>. Si está configurando el <xref:System.Windows.FrameworkElement.Triggers%2A> propiedad en un elemento directamente, a continuación, que es un elemento con nombre dentro del ámbito de ese elemento primario.  
  
 Puede asignar un objeto mediante el [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) sintaxis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Una vez que se usa <see cref="T:System.Windows.EventTrigger" />, no se puede modificar.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto secundario que se va a agregar.</param>
        <summary>Agrega un objeto secundario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.EventTrigger> se convierte en una interfaz <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a agregar al objeto.</param>
        <summary>Agrega el contenido de texto de un nodo al objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.EventTrigger> se convierte en una interfaz <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>