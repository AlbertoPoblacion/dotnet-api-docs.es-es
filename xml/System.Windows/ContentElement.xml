<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f414ea08984adb4625dff8e31e567084a0cfa2a2" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65009176" /></Metadata><TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type ContentElement = class&#xA;    inherit DependencyObject&#xA;    interface IInputElement&#xA;    interface IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona una clase base de nivel principal de WPF para los elementos de contenido. Los elementos de contenido están diseñados para la presentación del estilo de flujo, mediante un modelo de diseño orientado a marcado intuitivo y un modelo de objetos deliberadamente simple.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement> define las características de contenido comunes siguientes:  
  
-   Entrada: Todos los <xref:System.Windows.ContentElement> las clases derivadas proporcionar soporte técnico para la captura de entrada básico del teclado, mouse, operaciones de arrastrar y colocar, controles de lápiz y aceleradores.  
  
-   Foco: Todos los <xref:System.Windows.ContentElement> clases derivadas son potencialmente puede recibir el foco. (Sin embargo, el estado puede recibir el foco predeterminado para el <xref:System.Windows.ContentElement> es la clase base `false`. Para obtener más información sobre cómo realizar una <xref:System.Windows.ContentElement> puede recibir el foco, vea <xref:System.Windows.ContentElement.Focusable%2A>.) Además, esta clase contiene [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] que puede usar para recorrer el foco entre elementos relacionados.  
  
-   Eventos: <xref:System.Windows.ContentElement> incluye eventos que están relacionadas con el foco de entrada y salida; también incluye eventos para realizar cambios en el estado. En muchos casos, el <xref:System.Windows.ContentElement> eventos son eventos enrutados. En algunos casos, los eventos enrutados tienen tunelización y propagación estrategias de enrutamiento, que se genera como eventos independientes en respuesta al mismo estado o condición. Además, <xref:System.Windows.ContentElement> define [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] que pueden generar enrutar eventos y que puede agregar o quitar controladores de eventos.  
  
 <xref:System.Windows.ContentElement> comparte muchas común [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] con <xref:System.Windows.UIElement>. Estas trampas de diseño [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] no provienen de una herencia de clases compartidas. Pero comparten la nomenclatura común, un comportamiento similar y una implementación interna similar de [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] en cada clase. La similitud es porque <xref:System.Windows.ContentElement> y <xref:System.Windows.UIElement> son cada clases que son un elemento base, aunque cada uno tiene diferentes intenciones para su comportamiento de modelo de objetos de marcado.  
  
 En concreto, <xref:System.Windows.UIElement> desciende de <xref:System.Windows.Media.Visual>, que proporciona compatibilidad con los gráficos de nivel inferior para la representación un <xref:System.Windows.ContentElement> a una región rectangular dentro de una ventana compuesta, mientras que <xref:System.Windows.ContentElement> aplaza la representación para que los conceptos más común a los escenarios de documento, como flujo y ajuste, admiten más fácilmente. Estos dos relacionados con las clases también implementan las interfaces comunes <xref:System.Windows.IInputElement> y <xref:System.Windows.Media.Animation.IAnimatable>.  

 ## <a name="notes-to-inheritors"></a>Notas para los herederos

 La <xref:System.Windows.ContentElement> clase todavía no define todos los aspectos de un elemento de contenido completando para la presentación del estilo de flujo. <xref:System.Windows.FrameworkContentElement> es una clase derivada inmediatamente de <xref:System.Windows.ContentElement>. <xref:System.Windows.FrameworkContentElement> incluye un conjunto más completo de miembros adicionales que admiten la representación de un <xref:System.Windows.FrameworkContentElement> dentro de un host de contenido y el uso del sistema de diseño de nivel de marco WPF.

 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.ContentElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega un controlador de eventos enrutados para un evento enrutado especificado. Para ello, agrega el controlador a la colección de controladores en el elemento actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificador del evento enrutado que se va a controlar.</param>
        <param name="handler">Referencia a la implementación del controlador.</param>
        <summary>Agrega un controlador de eventos enrutados para un evento enrutado especificado. Para ello, agrega el controlador a la colección de controladores en el elemento actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede agregar el mismo controlador para el mismo evento varias veces sin producir una excepción. Sin embargo, el controlador se invoca realmente varias veces cuando se controla el evento. Por lo tanto, considere cómo este comportamiento podría tener efectos secundarios que deben tenerse en cuenta en la implementación del controlador.  
  
 Este método se utiliza normalmente para proporcionar la implementación del descriptor de acceso "Agregar" para el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] patrones de acceso de eventos de un evento enrutado personalizado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificador del evento enrutado que se va a controlar.</param>
        <param name="handler">Referencia a la implementación del controlador.</param>
        <param name="handledEventsToo"><see langword="true" /> para registrar el controlador invocado, aunque el evento enrutado esté marcado como controlado en los datos de evento; <see langword="false" /> para registrar el controlador con la condición predeterminada de que no se invocará si el evento enrutado ya está marcado como controlado.  
  
De manera predeterminada, es <see langword="false" />.  
  
No solicite de manera rutinaria volver a controlar un evento enrutado.</param>
        <summary>Agrega un controlador de eventos enrutados para un evento enrutado especificado. Para ello, agrega el controlador a la colección de controladores en el elemento actual. Especifique <paramref name="handledEventsToo" /> como <see langword="true" /> para que el controlador proporcionado se invoque para eventos enrutados que estén marcados como controlados por otro elemento en la ruta del evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Procesamiento de eventos de entrada de bajo nivel de una manera práctica es una tarea compleja. Muchos controles implementan el comportamiento donde un determinado evento está marcado como controlado y se reemplaza por otro evento más intuitivo. Por lo general, un control solo marcar un evento de entrada de la plataforma como controlado si hay alguna intención de diseño para hacerlo. En determinados escenarios, esas intenciones de diseño podrían no ser lo que requiere el control del evento de entrada concreto. Para estos escenarios es que el registro controladores con `handledEventsToo` como `true` es adecuado. Pero no debe hacerlo periódicamente. Invocar los controladores en respuesta a todos los eventos incluso si controla complicará su propia lógica de procesamiento de eventos de aplicación. Es posible que vea una disminución del rendimiento si la lógica del controlador es considerable. Debe reservar el uso de adjuntar controladores de eventos ya controlados para las situaciones donde ya haya encontrado durante el proceso de desarrollo que ciertos controles están controlando los eventos que desea administrar con lógica de la aplicación.  
  
 Otra técnica para evitar el comportamiento de ciertas combinaciones de control de eventos de control de clases es usar la alternativa de vista previa de ese evento. Por ejemplo, si <xref:System.Windows.ContentElement.MouseLeftButtonDown> está marcado como controlado por el control de clases, es posible que pueda agregar controladores para <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> en su lugar.  
  
 Puede agregar el mismo controlador para el mismo evento varias veces sin producir una excepción. Sin embargo, el controlador se invoca realmente varias veces cuando se controla el evento. Por lo tanto, considere cómo este comportamiento podría tener efectos secundarios que deben tenerse en cuenta en la implementación del controlador.  
  
 Este método se utiliza normalmente para proporcionar la implementación del descriptor de acceso "Agregar" para el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] patrones de acceso de eventos de un evento enrutado personalizado.  
  
   
  
## Examples  
 El ejemplo siguiente implementa un controlador invocado en la <xref:System.Windows.FrameworkElement.Initialized> eventos en una página que se adjunta un controlador definido en uno de los elementos con nombre en la página mediante `handledEventsToo` `true`. Este controlador se invocaría incluso si los datos de evento compartidos como controlado antes de alcanzar el elemento de control de la ruta de marcado de otro elemento en la ruta.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">La ruta del evento que se agregan controladores al.</param>
        <param name="e">Los datos del evento que se usan para agregar los controladores. Este método usa la <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> propiedad de los argumentos para crear los controladores.</param>
        <summary>Agregue controladores al especificado <see cref="T:System.Windows.EventRoute" /> actual <see cref="T:System.Windows.ContentElement" /> colección de controladores de eventos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para los elementos host de contenido (independientemente de si implementan <xref:System.Windows.IContentHost>) con el fin de agregar controladores para los elementos secundarios de host de contenido en el host <xref:System.Windows.EventRoute>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.ContentElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si este elemento se puede usar como destino de una operación de arrastrar y colocar.</summary>
        <value>Es <see langword="true" /> si este elemento se puede usar como destino de una operación de arrastrar y colocar; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operaciones de arrastrar y colocar no están habilitadas de forma predeterminada y debe habilitarse deliberadamente estableciendo <xref:System.Windows.ContentElement.AllowDrop%2A> a `true`. Más allá de esta configuración básica, el comportamiento de arrastrar y colocar es completamente la implementación específica y no se define mediante <xref:System.Windows.ContentElement> o cualquier otra clase de elemento base. Algunos controles, por ejemplo, <xref:System.Windows.Controls.RichTextBox>, tiene un comportamiento predeterminado, pero no <xref:System.Windows.ContentElement> las clases derivadas tengan este tipo de comportamiento. Para obtener más información acerca de arrastrar y colocar, vea [arrastrar y colocar, información general sobre](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkContentElement> invalida los metadatos de esta propiedad de dependencia en su implementación. En concreto, <xref:System.Windows.FrameworkContentElement> designa que esta propiedad permite la herencia de valores de propiedad (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> es `true` en los metadatos). Herencia de valores de propiedad en este contexto significa que si hay elementos secundarios con ningún otro valor para <xref:System.Windows.ContentElement.AllowDrop%2A> asignado a través de los valores locales o los estilos, el valor del elemento primario más cercano con asignado este valor (de nuevo, ya sea en estilos, de forma predeterminada los valores, o un valor local), a continuación, el valor de ese elemento primario se asigna a todos los elementos secundarios no asignados por el sistema de propiedades. Esto significa que puede especificar si desea permitir que las operaciones de colocar en el elemento raíz y, a continuación, propagar el valor a todos los <xref:System.Windows.FrameworkContentElement> elementos secundarios que no lo han específicamente asignado un valor de `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo siguiente se establece <xref:System.Windows.ContentElement.AllowDrop%2A> en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aplica una animación a una propiedad de dependencia especificada en este elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identificador de la propiedad que se animará.</param>
        <param name="clock">Reloj de animación que controla y declara la animación.</param>
        <summary>Aplica una animación a una propiedad de dependencia especificada en este elemento. Se detiene cualquier animación existente y se reemplaza con la nueva animación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar una animación de una propiedad, especifique el identificador para esa propiedad como `dp` y especifique `clock` como `null`. Esto quita la animación y la propiedad animada se establece en su valor base. Sin embargo, no se detiene el reloj de animación asociada originalmente. Cualquier otra animación asignada a ese reloj seguirá en ejecución.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Propiedad que se va a animar.</param>
        <param name="clock">Reloj de animación que controla y declara la animación.</param>
        <param name="handoffBehavior">Valor de la enumeración. El valor predeterminado es <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, que detendrá cualquier animación existente y la reemplazará por una nueva.</param>
        <summary>Aplica una animación a una propiedad de dependencia especificada en este elemento, con capacidad para especificar lo que ocurre si la propiedad ya tiene una animación en ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar una animación de una propiedad, especifique el identificador para esa propiedad como `dp` y especifique `clock` como `null`. Esto quita la animación y la propiedad animada se establece en su valor base. Sin embargo, no se detiene el reloj de animación asociada originalmente. Cualquier otra animación asignada a ese reloj seguirá en ejecución.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se captura al menos una entrada táctil en este elemento.</summary>
        <value><see langword="true" /> Si al menos una interacción se captura en este elemento; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se captura al menos una entrada táctil en este elemento o a cualquier elemento secundario de su árbol visual.</summary>
        <value><see langword="true" /> Si al menos una interacción se captura en este elemento o cualquier elemento secundario de su árbol visual; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se presiona al menos una entrada táctil sobre este elemento.</summary>
        <value><see langword="true" /> Si se presiona al menos una entrada táctil sobre este elemento; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se presiona al menos una entrada táctil sobre este elemento o cualquier elemento secundario de su árbol visual.</summary>
        <value><see langword="true" /> Si se presiona al menos una entrada táctil sobre este elemento o cualquier elemento secundario de su árbol visual; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia una animación para una propiedad animada especificada en este elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">La propiedad se va a animar, que se especifica como un identificador de propiedad de dependencia.</param>
        <param name="animation">La escala de tiempo de que comience la animación.</param>
        <summary>Inicia una animación para una propiedad animada especificada en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al comprobar si una propiedad está animada, tenga en cuenta que la animación se iniciará y se considera animados cuando se procesa el primer fotograma más allá del punto de partida no animado.  
  
 Si el <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` es `null`, a continuación, se quitan las animaciones actuales y se mantiene el valor actual de la propiedad.  
  
 Si toda la `animation` valor es `null`, todas las animaciones se quitarán de la propiedad y el valor de propiedad se vuelve a su valor base. Sin embargo, la escala de tiempo de animación asociada originalmente no se detiene. Se seguirá ejecutar cualquier otra animación asignada a esa escala de tiempo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">La propiedad se va a animar, que se especifica como el identificador de propiedad de dependencia.</param>
        <param name="animation">La escala de tiempo de la animación que se aplicará.</param>
        <param name="handoffBehavior">Un valor de enumeración que especifica cómo interactúa la nueva animación con cualquier animación actual (en ejecución) que ya afecte el valor de propiedad.</param>
        <summary>Se inicia una animación concreta para una propiedad animada especificada en este elemento, con la opción de especificar lo que ocurre si la propiedad ya tiene una animación en ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al comprobar si una propiedad está animada, tenga en cuenta que la animación se iniciará y se considera animados cuando se procesa el primer fotograma más allá del punto de partida no animado.  
  
 Si el <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` es `null`, a continuación, se quitan las animaciones actuales y se mantiene el valor actual de la propiedad.  
  
 Si toda la `animation` valor es `null`, todas las animaciones se quitarán de la propiedad y el valor de propiedad se vuelve a su valor base. Sin embargo, la escala de tiempo de animación asociada originalmente no se detiene. Se seguirá ejecutar cualquier otra animación asignada a esa escala de tiempo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="contentElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Intenta forzar la captura del mouse en este elemento.</summary>
        <returns><see langword="true" /> Si el mouse se captura correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para ser capturado, un elemento debe estar habilitado. Compruebe si <xref:System.Windows.ContentElement.IsEnabled%2A> es `true` antes de llamar a <xref:System.Windows.ContentElement.CaptureMouse%2A>.  
  
 Si una llamada a <xref:System.Windows.ContentElement.CaptureMouse%2A> devuelve `true`, a continuación, <xref:System.Windows.ContentElement.IsMouseCaptured%2A> también es `true`.  
  
 Si una llamada a <xref:System.Windows.ContentElement.CaptureMouse%2A> devuelve `true`, el <xref:System.Windows.ContentElement.GotMouseCapture> y <xref:System.Windows.ContentElement.IsMouseCapturedChanged> se provocan eventos, con <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> en el evento informa de los datos como el elemento donde el <xref:System.Windows.ContentElement.CaptureMouse%2A> se llama al método. Si se fuerza la captura, puede interferir con las capturas existentes - especialmente con las capturas que se relacionan con arrastrar y colocar con el mouse.  
  
 Para borrar la captura del mouse de todos los elementos, llame a <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con el `element` parámetro proporcionado como `null`.  
  
   
  
## Examples  
 El ejemplo siguiente captura el mouse o libera la captura, en función de si el elemento ya ha capturado el mouse. Tenga en cuenta que este ejemplo convierte el elemento de destino de captura probable para la <xref:System.Windows.IInputElement> interfaz y, por tanto, una llamada a inicialmente el <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> método. Conversión a <xref:System.Windows.IInputElement> es una técnica que es útil si no está seguro de si el elemento que desea que captura el mouse está un <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement>. La conversión de tipos de interfaz y el método de interfaz llamar a, a continuación, llama a la implementación de CaptureMouse específica del tipo adecuada internamente sin necesidad de una versión de prueba que se convierte en una <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement>. Esta misma técnica de conversión funciona con otros miembros que <xref:System.Windows.IInputElement> define, por ejemplo muchos de los eventos relacionados con la entrada así como otros métodos de entrada.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="contentElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Intenta forzar la captura del lápiz óptico en este elemento.</summary>
        <returns><see langword="true" /> Si el lápiz se captura correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada basada en el dispositivo de lápiz óptico predeterminado subyacente siempre devuelve `true`. Sin embargo, si está ampliando los dispositivos de entrada que proporcionan la implementación del dispositivo para el sistema de entrada, es posible crear un sistema con una implementación de dispositivo de lápiz óptico alternativo que podría devolver resultados diferentes.  
  
 Cuando un elemento captura el lápiz óptico, recibe la entrada de lápiz óptico incluso si el lápiz está fuera de sus límites. Normalmente, se captura el lápiz sólo durante las operaciones de arrastrar y colocar.  
  
 Llamar a este método llama a una subyacente estático <xref:System.Windows.Input.Stylus> método <xref:System.Windows.Input.Stylus.Capture%2A>. El comportamiento de captura reales se implementa mediante la implementación del dispositivo de lápiz óptico activo.  
  
 Para ser capturado, un elemento debe estar habilitado. Compruebe si <xref:System.Windows.ContentElement.IsEnabled%2A> es `true` devolver antes de llamar a <xref:System.Windows.ContentElement.CaptureStylus%2A>.  
  
 Si una llamada a <xref:System.Windows.ContentElement.CaptureStylus%2A> devuelve `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> también es `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">El dispositivo de captura.</param>
        <summary>Intenta forzar la captura de una entrada táctil en este elemento.</summary>
        <returns><see langword="true" /> Si se captura la entrada táctil especificada en este elemento; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A> devolverá `false` si el <xref:System.Windows.Input.TouchDevice> se captura actualmente a otro elemento.  
  
 Si <xref:System.Windows.ContentElement.CaptureTouch%2A> devuelve `true`, el <xref:System.Windows.ContentElement.GotTouchCapture> provoca el evento.  
  
 Para liberar la captura de un solo toque de este elemento, utilice el <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> método y especifique el dispositivo táctil para liberar. Para liberar todos los dispositivos táctiles de este elemento, utilice el <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="touchDevice" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.ContentElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de <see cref="T:System.Windows.Input.CommandBinding" /> objetos que están asociados con este elemento.</summary>
        <value>La colección de todos los <see cref="T:System.Windows.Input.CommandBinding" /> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Input.CommandBinding> habilita el control de un comando específico para este elemento y declara la vinculación entre un comando, sus eventos y los controladores que están conectados por este elemento.  
  
 Otra manera típica de rellenar la <xref:System.Windows.ContentElement.CommandBindings%2A> colección consiste en usar <xref:System.Windows.Input.CommandManager> métodos mediante programación.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreCommandBindings*  
 Uno o más <xref:System.Windows.Input.CommandBinding> elementos. Cada uno de ellos debe tener un <xref:System.Windows.Input.CommandBinding.Command%2A> atributo establecido en un comando conocido, y los atributos establecidos para el <xref:System.Windows.Input.CommandBinding.CanExecute> y <xref:System.Windows.Input.CommandBinding.Executed> las implementaciones de controladores. Para obtener más información, vea <xref:System.Windows.Input.CommandBinding>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada notifica un evento de arrastre subyacente con este elemento como el destino del arrastre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.DragEnter> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewDragEnter>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnDragEnter%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada informa de un evento de arrastre subyacente con este elemento como el origen del arrastre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.DragLeave> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnDragLeave%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada informa de un evento de arrastre subyacente con este elemento como destino potencial para colocar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se produce incluso si la operación de arrastrar se origina en los límites del elemento. Si la operación de arrastrar se inicia fuera de los límites y, a continuación, se mueve dentro, también se genera este evento, así como <xref:System.Windows.ContentElement.DragEnter> y los eventos de vista previa relacionados.  
  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.DragOver> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.DragOverEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnDragOver%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada notifica un evento de colocación subyacente con este elemento como el destino de la colocación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.Drop> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.DropEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewDrop>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnDrop%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="contentElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Intenta establecer el foco a este elemento.</summary>
        <returns><see langword="true" /> Si se pudo establecer el foco de teclado para este elemento; <see langword="false" /> si esta llamada al método no forzó el foco.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para poder recibir el foco, <xref:System.Windows.ContentElement.Focusable%2A> y <xref:System.Windows.ContentElement.IsEnabled%2A> deben ser `true`. Tenga en cuenta que casi todos los <xref:System.Windows.ContentElement> las clases derivadas no pueden <xref:System.Windows.ContentElement.Focusable%2A> de forma predeterminada.  
  
 Incluso si un elemento es el control de eventos puede recibir el foco y están habilitados, dentro de un árbol específico, (por ejemplo, para un control compuesto) podría responder a los eventos de foco de vista previa permitiendo que no existe, el foco, por tanto, este método devolvería `false`.  
  
 En general el foco se rige por dos conceptos independientes: foco de teclado y el foco lógico, que no siempre son idénticos. Este método establece el foco lógico. No hay ningún medio de programación para establecer el foco de teclado específicamente; el foco de teclado viene determinada por la entrada del usuario. Para obtener más información, consulte [foco lógico](~/docs/framework/wpf/advanced/focus-overview.md) y [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Si una llamada a <xref:System.Windows.ContentElement.Focus%2A> devuelve `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> y <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> también son `true`.  
  
 Si las propiedades relacionadas ya no están `true`, al llamar a <xref:System.Windows.ContentElement.Focus%2A>, uno o varios de los siguientes eventos se generan en el siguiente orden: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (el origen es el nuevo destino de foco), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (el origen es el nuevo destino de foco).  
  
   
  
## Examples  
 El ejemplo siguiente es un controlador de eventos de carga de página que busca un determinado denominado párrafo del documento y establece el foco. Los apartados no son puede recibir el foco de forma predeterminada; este párrafo concreto ha aplicado un estilo (no mostrado) que utiliza un estilo <xref:System.Windows.Setter> para asegurarse de recibir el foco.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.ContentElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento puede recibir el foco.</summary>
        <value><see langword="true" /> si el elemento admite foco; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo el elemento enfocado recibe la entrada de teclado.  
  
 Ciertas clases derivadas podrían invalidar metadatos para esta propiedad de dependencia de tal forma que la clase derivada puede recibir el foco de forma predeterminada.  
  
 Cuando la hereda <xref:System.Windows.Documents.Hyperlink> o sus clases derivadas, <xref:System.Windows.Documents.Hyperlink> invalida los metadatos de esta propiedad de dependencia y vuelve a definir el valor predeterminado de esta propiedad sea `true`.  
  
### <a name="dependency-property-information"></a>Información de la propiedad de dependencia
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.FocusableProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
## <a name="notes-to-inheritors"></a>Notas para los herederos

Al derivar de <xref:System.Windows.ContentElement>, considere si desea que el elemento pueda recibir el foco, ya que de forma predeterminada no puede recibir el foco. Si desea que el elemento que se va a recibir el foco, invalidar los metadatos de esta propiedad en el constructor estático de la clase derivada como sigue:  

[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
[!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
donde `myElement` es el nombre de clase del tipo que se va a reemplazar el valor de metadatos.
  
## Examples  
 En el ejemplo siguiente se crea un estilo que hace que sea un <xref:System.Windows.Documents.Paragraph> puede recibir el foco de forma predeterminada y proporciona un comportamiento visual cuando recibe el foco.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.ContentElement.Focusable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="contentElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Propiedad de dependencia que se va a comprobar.</param>
        <summary>Devuelve el valor de la propiedad base para la propiedad especificada en este elemento, sin tener en cuenta ningún valor animado posible desde una animación en ejecución o detenida.</summary>
        <returns>Valor de la propiedad como si hubiera ninguna animación asociada a la propiedad de dependencia especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si hubiera ninguna animación asociada a la propiedad, el <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> valor devuelto siempre es idéntica a la <xref:System.Windows.DependencyObject.GetValue%2A> valor devuelto. Si hay animaciones asociadas, a continuación, todas las animación posible había derivada valores, incluidos el inicio y se omiten los valores de la detención y el valor de propiedad se determina basándose en todas las demás entradas posibles. Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="contentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, devuelve una alternativa [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] primario para este elemento si no existe ningún elemento primario visual.</summary>
        <returns>Un objeto, si la implementación de una clase derivada tiene una conexión primaria alternativa al informe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación virtual predeterminada de este método devuelve `null`. <xref:System.Windows.FrameworkContentElement> Proporciona una implementación práctica.  
  
 Los elementos primarios alternativos se utilizan para el enrutamiento de eventos, en casos donde un elemento crea una estructura primaria alternativa para que se enrutan sus eventos en forma diferente desde el modelo estándar de enrutamiento del árbol visual con el elemento primario estándar, o hacia abajo en la obtener una vista previa de estrategia de enrutamiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada informa de un evento de arrastrar y colocar subyacente que afecta a este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.GiveFeedback> eventos permite que el origen de un evento de arrastre para modificar la apariencia del puntero del mouse con el fin de proporcionar información visual al usuario durante una operación de arrastrar y colocar. Los comentarios visuales refuerzan que una operación de arrastrar y colocar está en proceso.  
  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.GiveFeedback> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.GiveFeedback> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGiveFeedback%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento recibe el foco lógico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Foco lógico es diferente del foco de teclado si el foco se impone deliberadamente mediante una llamada al método pero el foco de teclado anterior existe en un ámbito diferente. En este escenario, el foco de teclado permanece donde está y el elemento donde un <xref:System.Windows.ContentElement.Focus%2A> se llama al método todavía obtiene el foco lógico.  
  
 Una interpretación más precisa de este evento es que se produce cuando el valor de la <xref:System.Windows.ContentElement.IsFocused%2A> se cambia la propiedad de un elemento en la ruta de `false` a `true`.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que recibe el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que ha obtenido el foco.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGotFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento recibe el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> es un evento similar que realiza el seguimiento de cambios de estado en una propiedad que mantiene el estado del foco de un elemento; el <xref:System.Windows.ContentElement.GotKeyboardFocus> evento se provoca en muchas de las mismas circunstancias.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que tiene el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene el foco.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.GotKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.GotKeyboardFocus> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento captura el mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el mouse, recibe la entrada del mouse incluso si el puntero del mouse está fuera de sus límites. El mouse normalmente se captura solo durante las operaciones de arrastrar y colocar y capturado se mantiene hasta que se produce la acción de colocar de la operación de arrastrar y colocar.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que tiene la captura puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en el evento de captura de datos para determinar el elemento real que tiene un mouse.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.GotMouseCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.GotMouseCapture> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definida.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento captura el lápiz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el lápiz óptico, recibe la entrada de lápiz óptico incluso si el puntero está fuera de sus límites. El lápiz se captura normalmente sólo durante las operaciones de arrastrar y colocar y retiene la captura hasta que se produce la acción de colocar de la operación de arrastrar y colocar.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que tiene la captura puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene la captura.  
  
 Este evento crea un alias para el evento adjunto para esta clase para que <xref:System.Windows.ContentElement.GotStylusCapture> forma parte de la clase de lista de miembros cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.GotStylusCapture> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definida.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se captura una entrada táctil en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este elemento tiene propiedades animadas.</summary>
        <value><see langword="true" /> Si este elemento tiene animaciones asociadas a cualquiera de sus propiedades; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve `true` para animaciones persistentes (no bloqueadas, siempre en ejecución) o para las animaciones que tienen una escala de tiempo específico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.ContentElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de enlaces de entrada que están asociados con este elemento.</summary>
        <value>La colección de enlaces de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los enlaces de entrada admiten el enlace de comandos para dispositivos de entrada. Por ejemplo, <xref:System.Windows.Input.MouseBinding> implementa los enlaces que incluyen propiedades que son específicas de los dispositivos de mouse de entrada.  
  
 La colección de enlaces de entrada incluye los enlaces de entrada que pertenecen al tipo y también los enlaces de entrada que se declaran en la instancia.  
  
 Una propiedad relacionada, <xref:System.Windows.ContentElement.CommandBindings%2A>, mantiene una colección de enlaces de comandos. Estos enlaces se diferencian de los enlaces de entrada que representan el siguiente nivel hacia abajo del procesamiento de comandos - las acciones que están asociados a comandos conocidos y los controladores específicos de la clase para ellos.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreInputBindings*  
 Uno o varios <xref:System.Windows.Input.InputBinding> elementos (normalmente el <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding> las clases derivadas). Cada uno de ellos debe tener un <xref:System.Windows.Input.InputBinding.Command%2A> y <xref:System.Windows.Input.InputBinding.Gesture%2A> conjunto de atributos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.ContentElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si este elemento está habilitado en el [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value><see langword="true" /> si el elemento está habilitado; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un estilo que incluye un establecedor de propiedad que proporciona un comportamiento visual alternativo cuando un <xref:System.Windows.Documents.Hyperlink> está establecido en <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsEnabled" /> propiedad de este elemento cambia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.ContentElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que se convierte en el valor devuelto de <see cref="P:System.Windows.ContentElement.IsEnabled" /> en clases derivadas.</summary>
        <value><see langword="true" /> si el elemento está habilitado; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## <a name="notes-to-inheritors"></a>Notas para los herederos

La implementación predeterminada de esta propiedad se almacena en caché el valor y también calcula si el elemento primario de este elemento está habilitado. Si el elemento primario no está habilitado, el elemento secundario no se puede habilitar eficazmente en la interfaz de usuario práctica. Si opta por reemplazar esta implementación, asegúrese de que se llame a la implementación base para conservar este comportamiento.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.ContentElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que determina si este elemento tiene foco lógico.</summary>
        <value><see langword="true" /> si este elemento tiene foco lógico; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Foco lógico puede diferir del foco de teclado si una aplicación tiene varias divisiones de foco, por ejemplo, entre el contenido del menú y el resto de la aplicación. En este escenario, el foco de teclado sólo puede estar en un elemento del interfaz de usuario de la aplicación, sin embargo, ciertos elementos en otras divisiones de foco todavía es posible que conserva el foco lógico. Para obtener más información sobre el foco lógico, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) y [foco lógico](~/docs/framework/wpf/advanced/focus-overview.md).  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un estilo que hace que sea un <xref:System.Windows.Documents.Paragraph> puede recibir el foco de forma predeterminada y proporciona un comportamiento visual cuando recibe el foco.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un sistema de métodos de entrada, como [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], está habilitado para procesar la entrada en este elemento.</summary>
        <value><see langword="true" /> si un método de entrada está activo; de lo contrario, <see langword="false" />. El valor predeterminado de la propiedad adjunta subyacente es <see langword="true" />; sin embargo, este valor se ve influenciado por el estado de los métodos de entrada en tiempo de ejecución.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve el valor devuelto por la propiedad adjunta <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> para los métodos de entrada actualmente habilitados (teclado, voz y otros dispositivos de entrada).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este elemento tiene foco de teclado.</summary>
        <value><see langword="true" /> si este elemento tiene foco de teclado; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el foco del teclado está en cualquier lugar dentro del elemento o elementos secundarios.</summary>
        <value><see langword="true" /> si el foco del teclado está en el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los cambios en el valor de esta propiedad normalmente provocan el <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> eventos, a menos que una clase derivada invalidó <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> para suprimir el evento.  
  
 Esta propiedad no se establece directamente, pero puede establecer el foco al elemento mediante una llamada a <xref:System.Windows.ContentElement.Focus%2A>, o realizando una <xref:System.Windows.ContentElement.MoveFocus%2A> solicitud. Cualquiera de estas llamadas al método puede cambiar este valor de propiedad.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.ContentElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este elemento captura el mouse.</summary>
        <value><see langword="true" /> si el elemento tiene la captura del mouse; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estado de la captura del mouse está relacionado con las operaciones de arrastrar y colocar en proceso.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo siguiente activa el estado de la captura del mouse o desactivar en función de si el elemento ya ha capturado el mouse.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que determina si la captura del mouse se retiene por este elemento o los elementos secundarios de su árbol de elementos.</summary>
        <value>Es <see langword="true" /> si este elemento o un elemento incluido en este contiene la captura del mouse; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> cambia en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la posición del puntero del mouse corresponde a los resultados de las pruebas de posicionamiento, que tienen en cuenta la composición del elemento.</summary>
        <value><see langword="true" /> si el puntero del mouse está sobre el mismo resultado del elemento que una prueba de posicionamiento; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.Windows.ContentElement.IsMouseOver%2A>, esta propiedad solo es `true` si el puntero del mouse está sobre el elemento literal - como lo es para una prueba de posicionamiento. Si el puntero del mouse está sobre un elemento secundario, en concreto sobre los elementos que forman parte de un elemento de la plantilla más profunda y la composición, esta propiedad será `false`. A menos que sepa cómo un control está compuesto (por ejemplo, utiliza esta propiedad en una plantilla de control personalizado para un control que defina), esta propiedad podría devolver resultados inesperados. Para la mayoría de los escenarios donde no se esté creando controles, utilizar <xref:System.Windows.ContentElement.IsMouseOver%2A> en su lugar.  
  
 Si este elemento captura el mouse, y esta propiedad es `true` en tiempo de captura, esta propiedad continuará devolviendo `true` hasta que se pierde la captura del mouse y el puntero no es a través de sus límites.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.ContentElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el puntero del mouse se encuentra sobre este elemento (incluidos los elementos visuales secundarios o la composición de su control).</summary>
        <value><see langword="true" /> si el puntero del mouse está sobre el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque no existe un evento "IsMouseOverChanged análogo" análogo, hacen varios eventos similares. Por ejemplo, puede usar <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, y <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  
  
 Si este elemento captura el mouse, esta propiedad permanece `true` hasta que se pierde la captura del mouse y el puntero del mouse deja los límites del elemento.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un estilo que incluye un establecedor de propiedad que proporciona un comportamiento visual alternativo cuando un <xref:System.Windows.Documents.Hyperlink> informes <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.ContentElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se captura el lápiz en este elemento.</summary>
        <value><see langword="true" /> si el elemento tiene la captura del lápiz; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que determina si la captura del lápiz se retiene por este elemento, incluidos los elementos secundarios y la composición del control.</summary>
        <value><see langword="true" /> Si la captura del lápiz se mantiene dentro de este elemento; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la posición del lápiz corresponde a los resultados de las pruebas de posicionamiento, que tienen en cuenta la composición del elemento.</summary>
        <value><see langword="true" /> si el lápiz está sobre el mismo elemento que una prueba de posicionamiento; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.Windows.ContentElement.IsStylusOver%2A>, esta propiedad solo es `true` si el lápiz está sobre el elemento. Si en su lugar, el lápiz está sobre un elemento secundario o a través de los elementos que forman parte de la composición más profunda de un elemento, esta propiedad será `false`.  
  
 A menos que sepa cómo un control está compuesto (por ejemplo, utiliza esta propiedad en una plantilla de control personalizado para un control que defina), esta propiedad podría devolver resultados inesperados. Para la mayoría de los escenarios donde no se esté creando controles, utilizar <xref:System.Windows.ContentElement.IsStylusOver%2A> en su lugar.  
  
 Si este elemento tiene la captura del lápiz y esta propiedad es `true` en el momento de captura, esta propiedad permanece `true` hasta que se pierde la captura del lápiz y el lápiz no es a través de sus límites.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de la <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> cambios de propiedad de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.ContentElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el lápiz se encuentra sobre este elemento (incluidos los elementos secundarios visuales).</summary>
        <value><see langword="true" /> Si el lápiz está sobre el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento tiene la captura del lápiz, esta propiedad permanece `true` hasta que se pierde la captura del lápiz y el puntero está fuera de sus límites.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|Establecen las propiedades de metadatos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.ContentElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se presiona una tecla mientras el foco está en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de texto y los comandos. El <xref:System.Windows.ContentElement.KeyDown> evento es un evento de entrada de texto de nivel inferior que no funcionen según lo previsto en ciertos controles. Esto es porque algunos controles tienen la composición del control o el control de entrada de control de clases que proporciona una versión superior del texto y los eventos relacionados.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.KeyDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.KeyDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewKeyDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnKeyDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar una tecla mientras el foco está en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.ContentElement.KeyUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.KeyUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewKeyUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnKeyUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento pierde el foco lógico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El foco lógico es diferente del foco de teclado si el foco se aleja deliberadamente mediante una llamada a un método pero el foco de teclado anterior existe en otro ámbito. En este escenario, permanece el foco de teclado donde está y el elemento donde un <xref:System.Windows.ContentElement.Focus%2A> se llama al método todavía obtiene el foco lógico.  
  
 Una interpretación más precisa de este evento es que se produce cuando el valor de la <xref:System.Windows.ContentElement.IsFocused%2A> cambia la propiedad de un elemento en la ruta de `true` a `false`.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que pierde el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que ha obtenido el foco.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnLostFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento deja de recibir el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que este evento usa el enrutamiento de propagación, el elemento que perdió el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.LostKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.LostKeyboardFocus> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento pierde la captura del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el mouse, recibe la entrada del mouse incluso si el puntero está fuera de sus límites. Normalmente, se captura el mouse sólo durante las operaciones de arrastrar y colocar.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que pierde la captura puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que pierde la captura.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.LostMouseCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.LostMouseCapture> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definida.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento pierde la captura del lápiz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el lápiz óptico, recibe la entrada de lápiz óptico incluso si el puntero está fuera de sus límites. Normalmente, se captura el lápiz sólo durante las operaciones de arrastrar y colocar.  
  
 Dado que este evento usa el enrutamiento de propagación, el elemento que pierde el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.LostStylusCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.LostStylusCapture> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definida.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento pierde una captura táctil.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al presionar cualquier botón del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.ContentElement.MouseDown> evento se genera a menudo junto a cualquiera <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.ContentElement.MouseLeftButtonDown> y <xref:System.Windows.ContentElement.MouseRightButtonDown> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando el <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento llega a este elemento a lo largo de la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Unos <xref:System.Windows.ContentElement> las clases derivadas que tienen un comportamiento similar a control, por ejemplo, <xref:System.Windows.Documents.Hyperlink>, podría tener inherentes a control de clases para los eventos de botón del mouse. El botón primario del mouse hacia abajo de evento es el evento más probable que clase en un control. La clase de control a menudo marca subyacente <xref:System.Windows.Input.Mouse> eventos de clase como controlado. Una vez que el evento está marcado como controlado, no se generan normalmente otros controladores de instancia que están asociados a ese elemento. Cualquier otro controlador instancia o clase que se adjunta a los elementos de la dirección de propagación hacia la raíz en el árbol de la interfaz de usuario también normalmente no se genera.  
  
 Puede resolver el problema que se describe en la sección anterior importante y seguir recibiendo <xref:System.Windows.ContentElement.MouseDown> eventos para los eventos en una clase derivada que tiene el control mediante el uso de cualquiera de estas soluciones de clases de presionar el botón primario del mouse:  
  
-   Adjuntar controladores para el <xref:System.Windows.ContentElement.PreviewMouseDown> evento, que no está marcado como controlado por los controles. Tenga en cuenta que se trata de un evento de vista previa, la ruta comienza en la raíz y desciende hasta el control.  
  
-   Registrar un controlador en el control mediante procedimientos llamando <xref:System.Windows.ContentElement.AddHandler%2A> y eligiendo la opción de firma que habilita los controladores escuchar eventos aunque estén marcados como controlados en los datos del evento enrutado.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewMouseDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el puntero del mouse entra dentro de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter> es un [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) que usa el control de la estrategia de enrutamiento de eventos directo. No se generan los eventos enrutados directos a lo largo de una ruta; en su lugar, se controlan en el mismo elemento donde se generan. Sin embargo, permiten otros aspectos del comportamiento del evento enrutado, como los desencadenadores de eventos en estilos.  
  
 Aunque <xref:System.Windows.ContentElement.MouseEnter> realiza un seguimiento cuando el puntero del mouse entra en los límites de un elemento, este evento más literalmente informa de que el <xref:System.Windows.ContentElement.IsMouseOver%2A> ha cambiado el valor de propiedad de `false` a `true` en este elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseEnter> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseEnter%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el puntero del mouse deja los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave> es un [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) que usa el control de la estrategia de enrutamiento de eventos directo. No se generan los eventos enrutados directos a lo largo de una ruta; en su lugar, se controlan en el mismo elemento donde se generan. Sin embargo, permiten otros aspectos del comportamiento del evento enrutado, como los desencadenadores de eventos en estilos.  
  
 Aunque <xref:System.Windows.ContentElement.MouseLeave> realiza un seguimiento cuando el mouse sale de un elemento, este evento más literalmente informa de que el <xref:System.Windows.ContentElement.IsMouseOver%2A> ha cambiado el valor de propiedad de `true` a `false` en este elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseLeave> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseLeave%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al presionar el botón primario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
> [!IMPORTANT]
>  Unos <xref:System.Windows.ContentElement> las clases derivadas que tienen un comportamiento similar a control, por ejemplo, <xref:System.Windows.Documents.Hyperlink>, podría tener inherentes a control de clases para los eventos de botón del mouse. El botón primario del mouse hacia abajo de evento es el evento más probable que clase en un control. La clase de control a menudo marca subyacente <xref:System.Windows.Input.Mouse> eventos de clase como controlado. Una vez que el evento está marcado como controlado, no se generan normalmente otros controladores de instancia que están asociados a ese elemento. Cualquier otro controlador instancia o clase que se adjunta a los elementos de la dirección de propagación hacia la raíz en el árbol de la interfaz de usuario también normalmente no se genera.  
  
 Puede resolver el problema que se describe en la sección anterior importante y seguir recibiendo <xref:System.Windows.ContentElement.MouseLeftButtonDown> eventos para los eventos en una clase derivada que tiene el control mediante el uso de cualquiera de estas soluciones de clases de presionar el botón primario del mouse:  
  
-   Adjuntar controladores para el <xref:System.Windows.ContentElement.PreviewMouseDown> evento, que no está marcado como controlado por los controles. Tenga en cuenta que se trata de un evento de vista previa, la ruta comienza en la raíz y desciende hasta el control.  
  
-   Registrar un controlador en el control mediante procedimientos llamando <xref:System.Windows.ContentElement.AddHandler%2A> y eligiendo la opción de firma que habilita los controladores escuchar eventos aunque estén marcados como controlados en los datos del evento enrutado.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar el botón primario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al mover el puntero del mouse mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewMouseMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al pulsar el botón secundario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
 Eventos del botón secundario del mouse con frecuencia tienen control nativo en escenarios de aplicación. Por ejemplo, un presionar el botón secundario del mouse puede mostrar un menú contextual. Consulte [información general sobre ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar el botón secundario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar cualquier botón del mouse sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.ContentElement.MouseUp> evento se genera a menudo junto a cualquiera <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>, que corresponden a una versión de uno de los dos botones del mouse estándar. <xref:System.Windows.ContentElement.MouseLeftButtonUp> y <xref:System.Windows.ContentElement.MouseRightButtonUp> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando el <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento llega a este elemento a lo largo de la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewMouseUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario gira la rueda del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura del foco o del mouse tienen prioridad sobre dónde está el puntero del mouse; por lo tanto, si recibe el <xref:System.Windows.ContentElement.MouseWheel> evento desde un elemento con foco o capturado, en realidad podría ser el puntero del mouse sobre otro elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.MouseWheel> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.MouseWheel> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewMouseWheel>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnMouseWheel%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="contentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Una solicitud de recorrido que contiene una propiedad que indica un modo de recorrido en el orden de tabulación existente o una dirección para mover visualmente.</param>
        <summary>Intenta mover el foco de este elemento a otro elemento. Una dirección de orientación, que se interpreta dentro de la organización del elemento primario visual de este elemento especifica la dirección para mover el foco.</summary>
        <returns><see langword="true" /> Si se realizó el recorrido solicitado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asegúrese de que comprobar el valor devuelto de este método. Un valor devuelto de `false` podría devolverse si el recorrido se ejecuta en una posición de tabulación que se define mediante la composición de un control, y la solicitud de recorrido no incluía el ajusta.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="contentElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve la clase específica <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementaciones para el [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infraestructura.</summary>
        <returns>Implementación de <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> específica del tipo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## <a name="notes-to-inheritors"></a>Notas para los herederos

La implementación de este método se suele llamar al constructor de un determinado <xref:System.Windows.Automation.Peers.AutomationPeer" /> implementación y devolverlo como el valor devuelto.  
  
 Todos los <xref:System.Windows.ContentElement> las clases derivadas deben implementar este método para proporcionar sus propias específicas <xref:System.Windows.Automation.Peers.AutomationPeer> las implementaciones de la infraestructura de WPF. Para obtener más información sobre cómo implementar este patrón, vea <xref:System.Windows.Automation.Peers.AutomationPeer>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.DragEnter" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.DragLeave" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.DragOver" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.DragEnter" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.GiveFeedback" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.RoutedEventArgs" /> que contiene datos de eventos. Estos datos de eventos deben contener el identificador para el evento <see cref="E:System.Windows.ContentElement.GotFocus" />.</param>
        <summary>Genera el evento enrutado <see cref="E:System.Windows.ContentElement.GotFocus" /> mediante el uso de los datos de eventos proporcionados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método, aunque sea virtual, tiene una implementación predeterminada que genera el evento.  
  
 Esto en * implementación del método está pensada para generar el evento, y esta misma implementación del método se invoca internamente para generar el evento cuando la <xref:System.Windows.ContentElement.IsFocused%2A> cambios de valor de propiedad. El <xref:System.Windows.ContentElement.OnGotFocus%2A> implementación difiere de algún otro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] en * implementaciones, que solo proporcionan una manera cómoda para agregar el control de clases para ese evento.  
  
## <a name="notes-to-inheritors"></a>Notas para los herederos

A menos que tenga una necesidad imperiosa e inusual para no provocar eventos de foco, asegúrese de la implementación llama a la implementación base. En caso contrario, el <xref:System.Windows.ContentElement.GotFocus> durante las operaciones típicas del usuario que normalmente establecen el foco a este elemento no se provoca el evento. Si no desea que el elemento que se va a recibir el foco, puede evitar que el elemento que se va a recibir el foco estableciendo <xref:System.Windows.ContentElement.Focusable> a `false`.
Tenga en cuenta que, de forma predeterminada un <xref:System.Windows.ContentElement.Focusable> no es puede recibir el foco, por lo tanto establecer <xref:System.Windows.ContentElement.Focusable> deliberadamente no es posible que sea necesario.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> evento enrutado que se produce cuando se captura una entrada táctil en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.GotTouchCapture> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> los cambios de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca justo antes de que este elemento genere el evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsMouseCaptured%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsMouseCapturedChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.ContentElement.IsMouseCapturedChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Este método virtual se genera cuando el valor de la <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el evento no es un evento enrutado; Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsStylusCaptured%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsStylusCapturedChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se genera cuando el valor de la <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> cambia los valores de propiedad de dependencia. El método virtual se genera primero y puede manipular los datos del evento según sea necesario. El <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> evento se desencadena con esa misma instancia de datos de evento. Tenga en cuenta que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pulsaciones de teclas se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en las pulsaciones de teclas, por ejemplo, los enlaces de entrada y el comando, podrían controlar la pulsación de tecla antes de se expone como una pulsación de tecla general. Si estas características del sistema marcan el evento como controlado, a continuación, de entrada <xref:System.Windows.ContentElement.OnKeyDown%2A> no se invoca.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pulsaciones de teclas se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en las pulsaciones de teclas, por ejemplo, los enlaces de entrada y el comando, podrían controlar la pulsación de tecla antes de se expone como una pulsación de tecla general. Si estas características del sistema marcan el evento como controlado, a continuación, de entrada <xref:System.Windows.ContentElement.OnKeyUp%2A> no se invoca.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.RoutedEventArgs" /> que contiene datos de eventos. Estos datos de eventos deben contener el identificador para el evento <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <summary>Genera el evento enrutado <see cref="E:System.Windows.ContentElement.LostFocus" /> mediante el uso de los datos de eventos proporcionados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método, aunque sea virtual, tiene una implementación predeterminada que genera el evento.  
  
 Esto en * implementación del método está pensada para generar el evento, y esta misma implementación del método se invoca internamente para generar el evento cuando la <xref:System.Windows.ContentElement.IsFocused%2A> cambios de valor de propiedad. Esta implementación es diferente desde otro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] en * implementaciones, que solo proporcionan una manera cómoda para agregar el control de clases para ese evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A menos que tenga una necesidad imperiosa e inusual para no provocar eventos de foco, asegúrese de la implementación llama a la implementación base. En caso contrario, el <see cref="E:System.Windows.ContentElement.LostFocus" /> durante las operaciones típicas del usuario que normalmente establecen el foco a este elemento no se provoca el evento. Si no desea que el elemento que se va a recibir el foco, puede evitar que el elemento que se va a recibir el foco estableciendo <see cref="P:System.Windows.ContentElement.Focusable" /> a <see langword="false" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> evento enrutado que se produce cuando este elemento pierde una captura táctil.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.LostTouchCapture> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Estos datos de evento informan de detalles sobre el botón del mouse que se presionó y el estado controlado.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.MouseDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de botón del mouse también se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en acciones de botón del mouse, como entrada y enlaces de comandos, pueden invocar controladores para la acción antes de se expone como una acción del botón del mouse general. Si estos marca de características del sistema de entrada la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.ContentElement.OnMouseDown%2A> no se invoca.  
  
 Si usa este controlador de clase para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.ContentElement.MouseLeftButtonDown> y <xref:System.Windows.ContentElement.MouseRightButtonDown>. Cualquiera de estos eventos se pueden generar en el elemento receptor cuando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se generan eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si el evento se controla en el control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que use explícitamente <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` con el fin de asociar controladores. Los controladores de clase también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.ContentElement.OnMouseDown%2A>, son lo que implica que tienen en cuenta el control de clases para todas las acciones de presionar el botón del mouse posibles. Este comportamiento podría ser no deseada; por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlados.  
  
 Cada uno de los eventos directos específicos de los botones también tiene un virtual * método; Tenga en cuenta si reemplazar estos controladores de clase específica del botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado, con una estrategia de enrutamiento directo. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (aquellos que no especifican `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado, con una estrategia de enrutamiento directo. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (aquellos que no especifican `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se presionó el botón primario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> no controlado se genera en este elemento. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.MouseLeftButtonDown> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> es el evento subyacente que se enruta de burbujas y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Aunque puede marcar el <xref:System.Windows.ContentElement.MouseLeftButtonDown> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para cambiar el control de eventos para un estado específico del mouse. Si opta por llamar a la implementación base depende de su escenario. No se puede llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases de antecesor que también esperan invocar <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Button> e invalidar <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> en su clase derivada sin llamar a la implementación base; sin embargo, esta invalidación deshabilita la <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento notifican que se soltó el botón primario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.MouseLeftButtonUp> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> es el evento subyacente que se enruta de burbujas y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Aunque puede marcar el <xref:System.Windows.ContentElement.MouseLeftButtonUp> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.MouseMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se presionó el botón secundario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.MouseRightButtonDown> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> es el evento subyacente que se enruta de burbujas y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.MouseRightButtonDown>. Aunque puede marcar el <xref:System.Windows.ContentElement.MouseRightButtonDown> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para cambiar el control de eventos para un estado específico del mouse. Si opta por llamar a la implementación base depende de su escenario. No se puede llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases de antecesor que también esperan invocar <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Control> e invalidar <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> en su clase derivada sin base que realiza la llamada; sin embargo, esta invalidación deshabilita los servicios del menú contextual del control, que forman parte de la <xref:System.Windows.Controls.Control> comportamiento predeterminado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se soltó el botón derecho del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.MouseRightButtonUp> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> es el evento subyacente que se enruta de burbujas y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.MouseRightButtonUp>. Aunque puede marcar el <xref:System.Windows.ContentElement.MouseRightButtonUp> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento informan de que se soltó el botón del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.Input.Mouse.MouseUp" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de botón del mouse también se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en acciones de botón del mouse, como entrada y enlaces de comandos, pueden invocar controladores para la acción antes de se expone como una acción del botón del mouse general. Si estos marca de características del sistema de entrada la <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.ContentElement.OnMouseUp%2A> no se invoca.  
  
 Si usa este controlador de clase para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.ContentElement.MouseLeftButtonUp> y <xref:System.Windows.ContentElement.MouseRightButtonUp>. Cualquiera de estos eventos pueden generarse en el elemento receptor cuando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se generan eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si el evento se controla en el control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que use explícitamente <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` con el fin de asociar controladores. Los controladores de clase también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.ContentElement.OnMouseUp%2A>, son lo que implica que tienen en cuenta el control de clases para todas las acciones de soltar el botón del mouse posibles. Este comportamiento podría ser no deseada; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlados.  
  
 Cada uno de los eventos directos específicos de los botones también tiene un virtual * método; Tenga en cuenta si reemplazar estos controladores de clase específica del botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.DragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewDrop" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos de evento informan de que se presionaron uno o varios botones del mouse.</param>
        <summary>Se invoca cuando un evento enrutado adjunto <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> no controlado alcanza en su ruta un elemento derivado de esta clase. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de botón del mouse también se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en acciones de botón del mouse, como entrada y enlaces de comandos, pueden invocar controladores para la acción antes de se expone como una acción del botón del mouse general. Si estos marca de características del sistema de entrada la <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> no se invoca.  
  
 Si usa este controlador de clase para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> y <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Cualquiera de estos eventos se pueden generar en el elemento receptor cuando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se generan eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si el evento se controla en el control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que use explícitamente <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` con el fin de asociar controladores. Los controladores de clase también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, son lo que implica que tienen en cuenta el control de clases para todas las acciones de presionar el botón del mouse posibles. Este comportamiento podría ser no deseada; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlados.  
  
 Cada uno de los eventos directos específicos de los botones también tiene un virtual * método; Tenga en cuenta si reemplazar estos controladores de clase específica del botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se presionó el botón primario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> es el evento subyacente que se enruta de túnel y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Aunque puede marcar el <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para cambiar el control de eventos para un estado específico del mouse. Si opta por llamar a la implementación base depende de su escenario. No se puede llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases de antecesor que también esperan invocar <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Button> e invalidar <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> en su clase derivada sin llamar a la implementación base; sin embargo, esta invalidación deshabilita la <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento notifican que se soltó el botón primario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> es el evento subyacente que se enruta de túnel y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Aunque puede marcar el <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se presionó el botón secundario del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> es el evento subyacente que se enruta de túnel y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.MouseRightButtonDown>. Aunque puede marcar el <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para cambiar el control de eventos para un estado específico del mouse. Si opta por llamar a la implementación base depende de su escenario. No se puede llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases de antecesor que también esperan invocar <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Control> e invalidar <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> en su clase derivada sin base que realiza la llamada; sin embargo, esta invalidación deshabilita los servicios del menú contextual del control, que forman parte de la <xref:System.Windows.Controls.Control> comportamiento predeterminado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos del evento indican que se soltó el botón derecho del mouse.</param>
        <summary>Se invoca cuando un evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> no controlado alcanza un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> es el evento subyacente que se enruta de túnel y cada <xref:System.Windows.ContentElement> junto con el evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Aunque puede marcar el <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> evento como controlado para los fines de este elemento, no perpetuar el estado controlado a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado con el fin de evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada para los eventos de mouse generales de control en <xref:System.Windows.ContentElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registre un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse controlar el comportamiento de <xref:System.Windows.ContentElement> invalidando <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contiene los datos del evento. Los datos de evento informan de que se soltaron uno o varios botones del mouse.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de botón del mouse también se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en acciones de botón del mouse, como entrada y enlaces de comandos, pueden invocar controladores para la acción antes de se expone como una acción del botón del mouse general. Si estos marca de características del sistema de entrada la <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> no se invoca.  
  
 Si usa este controlador de clase para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> y <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Cualquiera de estos eventos pueden generarse en el elemento receptor cuando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se generan eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si el evento se controla en el control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que use explícitamente <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` con el fin de asociar controladores. Los controladores de clase también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, son lo que implica que tienen en cuenta el control de clases para todas las acciones de soltar el botón del mouse posibles. Este comportamiento podría ser no deseada; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlados.  
  
 Cada uno de los eventos directos específicos de los botones también tiene un virtual * método; Tenga en cuenta si reemplazar estos controladores de clase específica del botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario es específicamente para los eventos de vista previa es marcarlos como controlado para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> evento enrutado que se produce cuando una entrada táctil presiona este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.PreviewTouchDown> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> evento enrutado que se produce cuando una entrada táctil se mueve dentro de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.PreviewTouchMove> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> evento enrutado que se produce cuando se libera una entrada táctil dentro de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.PreviewTouchUp> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="contentElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusDown" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando este elemento genera un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> no controlado. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 El propósito de este método es similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (aquellos que no especifican `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando este elemento genera un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> no controlado. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de sus requisitos.  
  
 El propósito de este método es similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (aquellos que no especifican `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusMove" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.StylusEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.Stylus.StylusUp" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cuando un evento adjunto <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> sin controlar alcanza a un elemento derivado de esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso, el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque puede generarse un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de los datos del evento. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Invalidando este método o mediante el registro de controladores con la clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.ContentElement> puede llamar a métodos de controlador de clase privada cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.TouchDown" /> evento enrutado que se produce cuando una entrada táctil presiona dentro de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnTouchDown%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnTouchDown%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.TouchDown> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnTouchDown%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.TouchEnter" /> evento enrutado que se produce cuando una entrada táctil se mueve de afuera adentro de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnTouchEnter%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnTouchEnter%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.TouchEnter> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnTouchEnter%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.TouchLeave" /> evento enrutado que se produce cuando una entrada táctil se mueve de dentro afuera de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnTouchLeave%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnTouchLeave%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.TouchLeave> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnTouchLeave%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.TouchMove" /> evento enrutado que se produce cuando una entrada táctil se mueve dentro de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnTouchMove%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnTouchMove%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.TouchMove> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnTouchMove%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Input.TouchEventArgs" /> que contiene los datos del evento.</param>
        <summary>Proporciona control de clases para el <see cref="E:System.Windows.ContentElement.TouchUp" /> evento enrutado que se produce cuando se libera una entrada táctil dentro de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.OnTouchUp%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.ContentElement.OnTouchUp%2A> en una clase derivada para controlar la <xref:System.Windows.ContentElement.TouchUp> eventos. No olvide llamar a la clase base <xref:System.Windows.ContentElement.OnTouchUp%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="contentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">La dirección del recorrido de foco solicitado.</param>
        <summary>Cuando se invalida en una clase derivada, devuelve el elemento que recibiría el foco para una dirección de recorrido de foco especificado, sin mover realmente el foco a ese elemento.</summary>
        <returns>El elemento que recibiría el foco si <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> se invoca realmente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada de este método en esta clase está incompleta y siempre devuelve `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada notifica un evento de arrastre subyacente con este elemento como el destino del arrastre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewDragEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewDragEnter> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.DragEnter>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada informa de un evento de arrastre subyacente con este elemento como el origen del arrastre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewDragLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewDragLeave> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.DragLeave>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada informa de un evento de arrastre subyacente con este elemento como destino potencial para colocar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewDragOver> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewDragOver> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.DragOver>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el sistema de entrada notifica un evento de colocación subyacente con este elemento como el destino de la colocación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewDrop> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewDrop> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.Drop>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewDrop%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se inicia una operación de arrastrar y colocar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewGiveFeedback> evento permite al origen de un evento de arrastre para modificar la apariencia del puntero del mouse, con el fin de proporcionar información visual al usuario durante una operación de arrastrar y colocar.  
  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewGiveFeedback> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewGiveFeedback> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.GiveFeedback>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento recibe el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que este evento usa el enrutamiento de túnel, el elemento que tiene el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene el foco.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.GotKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al presionar una tecla mientras este elemento recibe el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de texto y los comandos. El <xref:System.Windows.ContentElement.KeyDown> evento es un evento de entrada de texto de nivel inferior que no funcionen según lo previsto en ciertos controles. Esto es porque algunos controles tienen la composición del control o el control de entrada de control de clases que proporciona una versión superior del texto y los eventos relacionados.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewKeyDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewKeyDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.KeyDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar una tecla mientras este elemento recibe el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de texto y los comandos. El <xref:System.Windows.ContentElement.KeyUp> evento es un evento de entrada de texto de nivel inferior que no funcionen según lo previsto en ciertos controles. Esto es porque algunos controles tienen la composición del control o el control de entrada de control de clases que proporciona una versión superior del texto y los eventos relacionados. Para obtener más información, consulte la documentación para los controles individuales.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewKeyUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewKeyUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.KeyUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento deja de recibir el foco del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que este evento usa el enrutamiento de túnel, el elemento que perdió el foco puede ser un elemento secundario, en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> se adjuntan eventos subyacente <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.LostKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al presionar cualquier botón del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewMouseDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewMouseDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.ContentElement.PreviewMouseDown> evento se genera a menudo junto a cualquiera <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> y <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando el <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento llega a este elemento a lo largo de la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.MouseDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al presionar el botón primario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de tunelización a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar el botón primario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de tunelización a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al mover el puntero del mouse mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento produce cuando el puntero del mouse entra por primera vez en los límites del elemento, y también cuando el puntero del mouse se desplaza mientras permanece dentro de los límites del elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewMouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewMouseMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.MouseMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al pulsar el botón secundario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de tunelización a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar el botón secundario del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) parece seguir una ruta de tunelización a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos por cada <xref:System.Windows.ContentElement>.  
  
 Este evento es uno de varios eventos relacionados que informa de los detalles del botón del mouse de una base <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento a lo largo de una ruta de evento.  
  
 Los argumentos de este evento exponen los argumentos de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.ContentElement.AddHandler%2A>, con la opción para controlar los eventos que ya están marcados como controlados, para que los agentes de escucha al evento.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.ContentElement>) como un mouse "servicio" (con la definición de servicio proporcionada por el <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no tener que comprobar el estado del botón del mouse (izquierda a derecha, arriba-abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándares, es posible que deba usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al soltar cualquier botón del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewMouseUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewMouseUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.ContentElement.PreviewMouseUp> evento se genera a menudo junto a cualquiera <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> y <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando el <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento llega a este elemento a lo largo de la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.MouseUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario gira la rueda del mouse mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura del foco o del mouse tienen prioridad sobre dónde está el puntero del mouse; por lo tanto, si recibe este evento de un elemento con foco o capturado, el puntero del mouse podría estar realmente sobre otro elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewMouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewMouseMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.MouseWheel>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando hay algún cambio en el estado del botón del mouse o del teclado durante una operación de arrastrar y colocar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> evento permite al origen de arrastre declarar si se debe cancelar la operación de arrastrar y colocar.  
  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.QueryContinueDrag>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se presiona el botón del lápiz mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusButtonDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusButtonDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusButtonDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se suelta el botón del lápiz mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusButtonUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusButtonUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusButtonUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz toca el digitalizador mientras se encuentra sobre el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz se mueve sobre un elemento sin tocar realmente el digitalizador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusInAirMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusInAirMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusInAirMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz está lo suficientemente cerca del digitalizador para que lo detecte mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusInRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusInRange> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusInRange>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se mueve el lápiz mientras se encuentra sobre el elemento. El lápiz se debe mover mientras el digitalizador lo detecta para generar este evento, de lo contrario, se genera <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> en su lugar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz está demasiado alejado del digitalizador y no lo detecta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusOutOfRange>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un usuario realiza uno de varios movimientos con el lápiz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de los movimientos del lápiz, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusSystemGesture>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario aleja el lápiz del digitalizador mientras el lápiz se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewStylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewStylusDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.StylusUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento obtiene texto de un modo independiente del dispositivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.PreviewTextInput> evento permite que un componente o aplicación para realizar escuchas de entrada de texto de una manera independiente del dispositivo. El teclado es el medio principal de <xref:System.Windows.ContentElement.PreviewTextInput>; pero también pueden generar voz, escritura a mano y otros dispositivos de entrada <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
 Debido a combinaciones de teclas - en los teclados predeterminados o a través de los editores de métodos de entrada - varios eventos de tecla pueden generar un solo evento de entrada de texto.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.PreviewTextInput> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.PreviewTextInput> se adjuntan eventos subyacente <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.TextInput>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un dedo toca la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Windows.ContentElement.PreviewTouchDown> y <xref:System.Windows.ContentElement.TouchDown> no se producen los eventos hasta que un dedo toca la pantalla y se mueve. Si se presiona un dedo en la pantalla y manteniendo sin moverlo hace que presione y mantenga el comportamiento de un <xref:System.Windows.Input.Stylus>. El comportamiento de mantener presionado es equivalente a un secundario del mouse.  
  
 Para hacer que el <xref:System.Windows.ContentElement.PreviewTouchDown> y <xref:System.Windows.ContentElement.TouchDown> eventos que se produzca en cuanto un dedo toca la pantalla, establezca la <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propiedad adjunta `false` para este elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.TouchDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se mueve un dedo en la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.TouchMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se quita un dedo de la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|Estrategia de enrutamiento|Túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.ContentElement.TouchUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando hay algún cambio en el estado del botón del mouse o del teclado durante una operación de arrastrar y colocar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.ContentElement.QueryContinueDrag> eventos permite que el origen de arrastre determinar si la operación de arrastrar y colocar tiene que cancelarse.  
  
 Este evento crea un alias para el <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.QueryContinueDrag> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.QueryContinueDrag> se adjuntan eventos subyacente <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se solicita que se muestre el cursor. Este evento genera en un elemento cada vez que el puntero del mouse se mueve a una nueva ubicación, lo que significa que es posible que haya que cambiar el objeto del cursor según la nueva posición.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.QueryCursor> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.QueryCursor> se adjuntan eventos subyacente <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El cursor que se hace referencia por nombre de este evento no es necesariamente el cursor de texto (a veces se conoce como el punto de inserción). En su lugar, el cursor en este contexto es el objeto que declara la presentación gráfica en la pantalla relacionados con varios posibles dispositivos relacionados con la entrada o los conceptos de programación de Windows. Ese objeto se representa mediante el <xref:System.Windows.Input.Cursor> clase en WPF. El sistema de entrada de WPF le permite cambiar este cursor cuando representa la posición del puntero del mouse en la pantalla. Puede usar valores predefinidos de la <xref:System.Windows.Input.Cursors> enumeración, o bien puede declarar un cursor personalizado como un archivo de imagen.  
  
 Escucha la <xref:System.Windows.ContentElement.QueryCursor> evento no es una técnica eficaz para la administración del cursor. En su lugar, cada elemento debe definir su propio comportamiento de cursor con <xref:System.Windows.FrameworkContentElement.Cursor%2A> y <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Solo debe confiar en <xref:System.Windows.ContentElement.QueryCursor> si no usa los elementos base del nivel de marco WPF o en extraordinaria circunstancias donde define el comportamiento del cursor en una base de cada elemento no satisfacen sus necesidades. Para obtener más información sobre cómo implementar el comportamiento del cursor en respuesta a <xref:System.Windows.ContentElement.QueryCursor>, consulte <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definida.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnQueryCursor%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.RoutedEventArgs" /> que contiene los datos del evento y que también identifica el evento se va a generar.</param>
        <summary>Genera un evento enrutado específico. El <see cref="T:System.Windows.RoutedEvent" /> que se va a generar se identifica en la instancia de <see cref="T:System.Windows.RoutedEventArgs" /> proporcionada (como la propiedad <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> de los datos de ese evento).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `e` parámetro es el tipo base común para todos los datos de evento enrutado; sin embargo, se deben proporcionar los datos del evento como el tipo de datos de evento más específico que está disponible para el evento que se genera, porque <xref:System.Windows.RoutedEventArgs> contienen las clases derivadas la propiedades de datos concretas que están pensadas para el evento específico cuando se generó.  
  
 <xref:System.Windows.RoutedEventArgs> no es simplemente las propiedades de estado para el evento; También identifica qué evento enrutado que se va a generar. Este patrón de generación de eventos y los datos del evento enrutado ambos diferencian [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] eventos y clases de datos, que normalmente sólo contienen las propiedades que están relacionados con el evento.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea datos de eventos, anexa el identificador de evento a los datos y, a continuación, usa la instancia de datos de evento para generar un evento enrutado personalizado.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="contentElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los dispositivos táctiles capturados desde este elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="contentElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera la captura del mouse, si este elemento la contiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento no tiene la captura, llamar a este método no tiene ningún efecto. Considere la posibilidad de comprobar el valor de <xref:System.Windows.ContentElement.IsMouseCaptured%2A> antes de llamar a este método.  
  
   
  
## Examples  
 El siguiente controlador de captura o libera la captura del mouse según los Estados del botón del mouse. En el ejemplo se muestra cómo usar el movimiento del mouse capturado para alternativa con fines distintos de mover el puntero del mouse el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="contentElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera la captura del dispositivo de lápiz óptico si este elemento la tiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento no tiene la captura, llamar a este método no tiene ningún efecto. Considere la posibilidad de comprobar el valor de <xref:System.Windows.ContentElement.IsStylusCaptured%2A> antes de llamar a este método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Para liberar el dispositivo.</param>
        <summary>Intenta liberar el dispositivo táctil especificado de este elemento.</summary>
        <returns><see langword="true" /> Si se libera el dispositivo táctil; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="touchDevice" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificador del evento enrutado para el que se asocia el controlador.</param>
        <param name="handler">Implementación de controlador específica que se va a quitar de la colección de controladores de eventos de este elemento.</param>
        <summary>Quita el controlador de eventos enrutados especificado de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El escenario más común para usar este [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] es cuando implementa el [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "contenedor" que está asociado a un evento enrutado personalizado específicamente al implementar la lógica de "remove" para los controladores en el [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] nivel. El ejemplo que sigue a esta sección muestra este escenario de comentarios.  
  
 Llamar a este método no tiene ningún efecto si no hubiera ningún controlador registrado con los criterios que coinciden con los parámetros de entrada para la llamada al método.  
  
 Si se asocia más de un controlador que coinciden con los criterios, solo el primer controlador en caso de que se quita el almacén de controladores. Este comportamiento es coherente con [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamiento de la `-=` operador.  
  
 Ni `routedEvent` ni `handler` puede ser `null`. Se intenta proporcionar cualquiera de los valores como `null` , se producirá una excepción.  
  
 Este método omite la `handledEventsToo` agrega información de parámetros, que se proporciona si el controlador fue el primero con el <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma que permite un control de eventos ya controlados. Se quita cualquier tipo de controlador.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve si los procesos de serialización deben serializar el contenido de la <see cref="P:System.Windows.ContentElement.CommandBindings" /> propiedad en las instancias de esta clase.</summary>
        <returns>Es <see langword="true" /> si el valor de propiedad <see cref="P:System.Windows.ContentElement.CommandBindings" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto devolverá `true` si <xref:System.Windows.ContentElement.CommandBindings%2A> se establece localmente.  
  
 Esto `ShouldSerialize` se proporciona el método porque el <xref:System.Windows.UIElement.CommandBindings%2A> propiedad no tiene valor predeterminado es simple. Este método indica si la propiedad ha cambiado desde su valor predeterminado. Este método se suele invocarse si se desarrolla un diseñador o desarrollar su propio control que incorpore un <xref:System.Windows.UIElement>.  
  
 Para obtener más información, consulte [definir valores predeterminados con los métodos ShouldSerialize y Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve si los procesos de serialización deben serializar el contenido de la <see cref="P:System.Windows.ContentElement.InputBindings" /> propiedad en las instancias de esta clase.</summary>
        <returns>Es <see langword="true" /> si el valor de propiedad <see cref="P:System.Windows.ContentElement.InputBindings" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto devolverá `true` si <xref:System.Windows.ContentElement.InputBindings%2A> se establece localmente.  
  
 Esto `ShouldSerialize` se proporciona el método porque el <xref:System.Windows.UIElement.InputBindings%2A> propiedad no tiene valor predeterminado es simple. Este método indica si la propiedad ha cambiado desde su valor predeterminado. Este método se suele invocarse si se desarrolla un diseñador o desarrollar su propio control que incorpore un <xref:System.Windows.UIElement>.  
  
 Para obtener más información, consulte [definir valores predeterminados con los métodos ShouldSerialize y Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se presiona el botón del lápiz mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusButtonDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusButtonDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se suelta el botón del lápiz mientras el puntero se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusButtonUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusButtonUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz toca el digitalizador mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusDown> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz entra dentro de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter> es un [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) que usa el control de la estrategia de enrutamiento de eventos directo. No se generan los eventos enrutados directos a lo largo de una ruta; en su lugar, se controlan en el mismo elemento donde se generan. Sin embargo, permiten otros aspectos del comportamiento del evento enrutado, como los desencadenadores de eventos en estilos.  
  
 Aunque <xref:System.Windows.ContentElement.StylusEnter> realiza un seguimiento cuando el lápiz entra en los límites de un elemento, este evento más literalmente informa de que el <xref:System.Windows.ContentElement.IsStylusOver%2A> ha cambiado el valor de propiedad de `false` a `true` en este elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusEnter> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusEnter%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz se mueve sobre un elemento sin tocar realmente el digitalizador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusInAirMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusInAirMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz está lo suficientemente cerca del digitalizador para que lo detecte mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusInRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusInRange> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusInRange>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusInRange%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz sale de los límites del elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave> es un [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) que usa el control de la estrategia de enrutamiento de eventos directo. No se generan los eventos enrutados directos a lo largo de una ruta; en su lugar, se controlan en el mismo elemento donde se generan. Sin embargo, permiten otros aspectos del comportamiento del evento enrutado, como los desencadenadores de eventos en estilos.  
  
 Aunque <xref:System.Windows.ContentElement.StylusLeave> realiza un seguimiento cuando el lápiz sale de los límites de un elemento, este evento más literalmente informa de que el <xref:System.Windows.ContentElement.IsStylusOver%2A> ha cambiado el valor de propiedad de `true` a `false` en este elemento.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusLeave> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusLeave%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz se mueve sobre este elemento. El lápiz debe moverse mientras se encuentra sobre el digitalizador para que se genere este evento. De lo contrario, se genera <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusMove> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el lápiz está demasiado alejado del digitalizador y no se detecta, mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusOutOfRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusOutOfRange> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un usuario realiza uno de varios movimientos con el lápiz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información acerca de los movimientos del lápiz, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusSystemGesture> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusSystemGesture> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario aleja el lápiz del digitalizador mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para el <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.StylusUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.StylusUp> se adjuntan eventos subyacente <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada de lápiz, mouse y toque existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewStylusUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnStylusUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando este elemento obtiene texto de un modo independiente del dispositivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Este evento ya podría marcarse como controlados por las implementaciones internas de controles compuestos. Vea Comentarios más adelante.  
  
 El <xref:System.Windows.ContentElement.TextInput> evento ya podría estar marcado como controlado por las implementaciones internas de controles compuestos. Por ejemplo, un <xref:System.Windows.Controls.TextBox> es un control compuesto donde el <xref:System.Windows.ContentElement.TextInput> evento ya está marcado como controlado; dentro de su composición. Controles hacen porque el control debe interpretar algunos tipos de entrada, como teclas de dirección, como si tuviera un significado especial para ese control. Si usa <xref:System.Windows.ContentElement.PreviewTextInput> como el evento donde adjuntar controladores para la entrada de texto, puede obtener mejores resultados. Esta técnica evita la mayoría de los casos donde la composición de control ya ha marcado este evento como controlado y evita que el controlador de recepción del evento a lo largo de la ruta del evento.  
  
 El <xref:System.Windows.ContentElement.TextInput> evento permite que un componente o aplicación para realizar escuchas de entrada de texto de una manera independiente del dispositivo. El teclado es el medio principal de <xref:System.Windows.ContentElement.TextInput>, pero también pueden generar voz, escritura a mano y otros dispositivos de entrada <xref:System.Windows.ContentElement.TextInput>.  
  
 Debido a combinaciones de teclas - en los teclados predeterminados o a través de los editores de métodos de entrada - varios eventos de tecla podrían generar un solo evento de entrada de texto.  
  
 Este evento crea un alias para el <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.ContentElement.TextInput> forma parte lista los miembros de la clase cuando <xref:System.Windows.ContentElement> se hereda como elemento base. Controladores de eventos que están asociados a la <xref:System.Windows.ContentElement.TextInput> se adjuntan eventos subyacente <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TextInputEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTextInput%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un dedo toca la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Windows.ContentElement.PreviewTouchDown> y <xref:System.Windows.ContentElement.TouchDown> no se producen los eventos hasta que un dedo toca la pantalla y se mueve. Si se presiona un dedo en la pantalla y manteniendo sin moverlo hace que presione y mantenga el comportamiento de un <xref:System.Windows.Input.Stylus>. El comportamiento de mantener presionado es equivalente a un secundario del mouse.  
  
 Para hacer que el <xref:System.Windows.ContentElement.PreviewTouchDown> y <xref:System.Windows.ContentElement.TouchDown> eventos que se produzca en cuanto un dedo toca la pantalla, establezca la <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propiedad adjunta `false` para este elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewTouchDown>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTouchDown%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando una entrada táctil se mueve de afuera adentro de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Siempre se genera este evento, si se captura el dispositivo táctil en este elemento de interfaz de usuario.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTouchEnter%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los dispositivos táctiles que se capturan en este elemento.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que se capturan en este elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los dispositivos táctiles que se capturan en este elemento o cualquier elemento secundario de su árbol visual.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que se capturan en este elemento o cualquier elemento secundario de su árbol visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los dispositivos táctiles que están sobre este elemento.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que están sobre este elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los dispositivos táctiles que están sobre este elemento o cualquier elemento secundario de su árbol visual.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que están sobre este elemento o cualquier elemento secundario de su árbol visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando una entrada táctil se mueve de dentro afuera de los límites de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTouchLeave%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se mueve un dedo en la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewTouchMove>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTouchMove%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se quita un dedo de la pantalla mientras se encuentra sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.ContentElement.PreviewTouchUp>.  
  
-   Invalidar <xref:System.Windows.ContentElement.OnTouchUp%2A> para implementar el control de clases para este evento en clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.ContentElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>