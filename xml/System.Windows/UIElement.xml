<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5601cb1e8ad2490345c7451a3466c301c12b131c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460002" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> Proporciona un punto de partida para las características de diseño de elemento y también expone los métodos virtuales que las clases derivadas pueden invalidar, que puede influir en el comportamiento del elemento y su elemento secundario de la representación, elementos de diseño.  
  
 Gran parte de la entrada y resaltar el comportamiento de los elementos en general también se define en la <xref:System.Windows.UIElement> clase. Esto incluye los eventos de teclado, mouse y entrada de lápiz y propiedades de estado relacionadas. Muchos de estos eventos son eventos enrutados, y muchos de los eventos relacionados con las entradas tienen ambos un enrutamiento de propagación versión, así como una versión de túnel del evento. Estos eventos emparejados son normalmente los eventos de mayor interés para los autores de controles.  
  
 <xref:System.Windows.UIElement> También incluye [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] relacionados con el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] el modelo de evento, incluidos los métodos que pueden generar especificadas eventos enrutan que se obtienen de una instancia del elemento.  
  
 En cuanto a la arquitectura, <xref:System.Windows.UIElement> pueden considerarse prácticamente equivalente a un identificador de ventana en [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programación o en un elemento [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] de programación. <xref:System.Windows.UIElement> es un elemento base en el nivel de núcleo WPF.  
  
 A <xref:System.Windows.UIElement> tiene las siguientes capacidades que se han definido específicamente por la <xref:System.Windows.UIElement> clase:  
  
-   Puede representar como un elemento secundario (<xref:System.Windows.UIElement> deriva de <xref:System.Windows.Media.Visual>, una clase de gráficos de nivel superior)  
  
-   Contiene la lógica que se usa para cambiar el tamaño y la posición de posibles elementos secundarios de un <xref:System.Windows.UIElement> (cuando lo interpreta un sistema de diseño)  
  
-   Puede responder a los proporcionados por el usuario (incluido el control de donde se envían los datos a través del control del evento enrutamiento o el enrutamiento de comandos)  
  
-   Puede provocar eventos enrutados que atraviesan una ruta en el árbol lógico de elementos  
  
-   Es compatible con algunos aspectos del sistema de animación  
  
 <xref:System.Windows.FrameworkElement> es la clase de implementación de nivel de marco WPF que se basa en <xref:System.Windows.UIElement>y agrega las interacciones específicas con el nivel de marco WPF. <xref:System.Windows.FrameworkElement> Agrega y define las siguientes capacidades:  
  
-   Características de diseño específicas del marco adicionales  
  
-   Compatibilidad con informes en las propiedades de metadatos enriquecidos  
  
-   Implementación específica de la clase de ciertas clases base y sus propiedades asociadas de entrada o eventos adjuntos  
  
-   Compatibilidad con estilos  
  
-   Compatibilidad con más de animación  
  
 Otro relacionados con la clase es <xref:System.Windows.ContentElement>. El <xref:System.Windows.ContentElement> clase implementa muchos de los mismos miembros que hace <xref:System.Windows.UIElement>; la diferencia entre estas dos clases tiene que con su lugar concebido en el modelo de contenido global. Un <xref:System.Windows.UIElement> clase derivada define normalmente un modelo de contenido relativamente rígido, lo que significa que no hay restricciones sobre qué elementos pueden ser elementos secundarios de marcado. Podría haber capacidad para realizar menos restrictivo contenido secundario un <xref:System.Windows.UIElement>, pero esa capacidad se centraliza normalmente en Propiedades de contenido designadas. Un <xref:System.Windows.ContentElement> clase derivada no suele ser tan restrictiva sobre el contenido, para admitir escenarios como los documentos con formato de flujo.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> estado afecta a todas las entradas de control de ese elemento. Elementos que no están visibles no participan en la prueba de posicionamiento y no recibe eventos de entrada, incluso si el mouse está encima de los límites que el elemento estaría si estaban visibles.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crear una nueva instancia que es realmente del tipo <xref:System.Windows.UIElement> es raro que aparezcan en el código de aplicación, porque <xref:System.Windows.UIElement> es un elemento base. Vea [Base información general de elementos](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">An identifier for the routed event to be handled.</param>
        <param name="handler">A reference to the handler implementation.</param>
        <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede agregar el mismo controlador para el mismo evento varias veces sin que se produzca una excepción. Sin embargo, realmente se invoca varias veces cuando se controla el evento al controlador. Por lo tanto, tenga en cuenta cómo este comportamiento podría tener efectos secundarios que deben tenerse en cuenta en la implementación del controlador.  
  
 Este método se utiliza normalmente para proporcionar la implementación del descriptor de acceso "Agregar" para el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] patrón de acceso de eventos de un evento enrutado personalizado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">An identifier for the routed event to be handled.</param>
        <param name="handler">A reference to the handler implementation.</param>
        <param name="handledEventsToo">
          <see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  The default is <see langword="false" />.  Do not routinely ask to rehandle a routed event.</param>
        <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Procesamiento de eventos de entrada de bajo nivel de una manera práctica es una tarea compleja. Muchos controles implementan el comportamiento en un determinado evento está marcado como controlado y se reemplaza por otro evento más intuitivo. Por lo general, un control solo marcar un evento de entrada de plataforma como controlado si hay alguna intención de diseño para hacerlo. En determinados escenarios, esas intenciones de diseño podrían no ser lo que requiere el control concreto del evento de entrada. Para estos escenarios es que registrar los controladores `handledEventsToo` como `true` es adecuado. Pero no debe hacerlo periódicamente. Invocar los controladores en respuesta a todos los eventos aunque controlen se complican su propia lógica de procesamiento de eventos de aplicación. Puede ver una disminución del rendimiento si la lógica de controlador es sustancial. Debe reservar el uso de adjuntar controladores de eventos ya controlados para las situaciones donde ya ha detectado durante el proceso de desarrollo que ciertos controles están controlando eventos que desea administrar con lógica de la aplicación.  
  
 Otra técnica para evitar el uso de la clase de comportamiento de ciertas combinaciones de control de eventos de control consiste en utilizar alternativa de vista previa de ese evento. Por ejemplo, si <xref:System.Windows.UIElement.MouseLeftButtonDown> está marcado como controlado por el control de clases, es posible que pueda agregar controladores para <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> en su lugar.  
  
 Puede agregar el mismo controlador para el mismo evento varias veces sin que se produzca una excepción. Sin embargo, realmente se invoca varias veces cuando se controla el evento al controlador. Por lo tanto, tenga en cuenta cómo este comportamiento podría tener efectos secundarios que deben tenerse en cuenta en la implementación del controlador.  
  
 Este método se utiliza normalmente para proporcionar la implementación del descriptor de acceso "Agregar" para el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] patrón de acceso de eventos de un evento enrutado personalizado.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que se invoca en el <xref:System.Windows.FrameworkElement.Initialized> eventos en una página que asocia un controlador definido a uno de los elementos con nombre en la página mediante `handledEventsToo` `true`. Este controlador se invocaría incluso si los datos del evento compartidos como administrados antes de alcanzar el elemento de control de la ruta de marcado de otro elemento en la ruta.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">The event route that handlers are added to.</param>
        <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</param>
        <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se puede utilizar elementos host de contenido (ya sean los que implementan <xref:System.Windows.IContentHost> o los que no) para agregar controladores para los elementos secundarios a la <xref:System.Windows.EventRoute>. Normalmente, esto no es necesario para <xref:System.Windows.UIElement>, porque los controladores se agregan automáticamente para todos los elementos que se encuentra en un árbol lógico completado. Sin embargo, en algunos casos donde <xref:System.Windows.ContentElement> y <xref:System.Windows.UIElement> se mezclan en árboles con plantilla, intermedias elementos que provienen de la plantilla tienen que agregarse a una ruta. Ambos <xref:System.Windows.ContentElement> y <xref:System.Windows.UIElement> admite una versión de este método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> si este elemento se puede usar como destino de una operación de arrastrar y colocar; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operaciones de arrastrar y colocar no están habilitadas de forma predeterminada y debe habilitarse deliberadamente estableciendo <xref:System.Windows.UIElement.AllowDrop%2A> a `true`. Más allá de esta configuración básica, el comportamiento de arrastrar y colocar es totalmente específico de la implementación y no está definido por <xref:System.Windows.UIElement> o cualquier otra clase de elemento base. Determinados controles como, por ejemplo, <xref:System.Windows.Controls.RichTextBox>, tiene un comportamiento predeterminado. Para obtener más información acerca de arrastrar y colocar, vea [de arrastrar y colocar, información general sobre](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> invalida los metadatos de esta propiedad de dependencia en su implementación. En concreto, <xref:System.Windows.FrameworkElement> designa esta propiedad para permitir la herencia del valor de propiedad (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> es `true` en los metadatos). Herencia de valores de propiedad en este contexto significa que si hay elementos secundarios con ningún otro valor para <xref:System.Windows.UIElement.AllowDrop%2A> asignado a través de valores locales o estilos, el valor del elemento primario más cercano que tenga asignado este valor (de nuevo, ya sea en los estilos, de forma predeterminada valores, o un valor local), a continuación, se le asignará el valor del elemento primario para todos los elementos secundarios no asignados previamente por el sistema de propiedades. En la práctica, esto significa que puede especificar si desea permitir que las operaciones de colocar en el elemento raíz y que el valor se propagará a todos los elementos secundarios que tengan específicamente no asignarlo como `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo de marcado siguiente se establece la <xref:System.Windows.UIElement.AllowDrop%2A> propiedad `true` mediante un atributo en un <xref:System.Windows.Controls.TextBox>, así como otra configuración relacionada con propiedades que, de forma agregada, permiten que <xref:System.Windows.Controls.TextBox> a ser el destino de un objeto de datos de texto multilínea cuando se arrastra. Para obtener un ejemplo completo, vea [cargar una muestra de archivo quitado](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applies an animation to a specified dependency property on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está sellado y no se puede invalidar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">The identifier for the property to animate.</param>
        <param name="clock">The animation clock that controls and declares the animation.</param>
        <summary>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar una animación de una propiedad, especifique el identificador de esa propiedad como `dp` y especifique `clock` como `null`. Esto quita la animación y la propiedad animada se establece en su valor base. Sin embargo, no se detiene el reloj de animación asociada originalmente. Cualquier otra animación asignada a ese reloj continuarán ejecutándose.  
  
   
  
## Examples  
 En el ejemplo siguiente, un <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` tiene una animación de tiempo particular aplicada a ella mediante una llamada a <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">The property to animate.</param>
        <param name="clock">The animation clock that controls and declares the animation.</param>
        <param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</param>
        <summary>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar una animación de una propiedad, especifique el identificador de esa propiedad como `dp` y especifique `clock` como `null`. Esto quita la animación y la propiedad animada se establece en su valor base. Sin embargo, no se detiene el reloj de animación asociada originalmente. Cualquier otra animación asignada a ese reloj continuarán ejecutándose.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether at least one touch is captured to this element.</summary>
        <value>
          <see langword="true" /> Si al menos un toque se captura en este elemento; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</summary>
        <value>
          <see langword="true" /> Si al menos un toque se captura en este elemento o los elementos secundarios de su árbol visual; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
        <value>
          <see langword="true" /> Si se presiona al menos una entrada táctil sobre este elemento; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</summary>
        <value>
          <see langword="true" /> Si se presiona al menos una entrada táctil sobre este elemento o los elementos secundarios de su árbol visual; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</param>
        <summary>Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para el elemento de nivel de marco WPF derivar escenarios, el comportamiento de <xref:System.Windows.UIElement.Arrange%2A> no deberían (y no es posible, a menos que sombrea) puede cambiar. En su lugar, debe invalidar el <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementación en la clase. Su <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> se llama internamente a implementación <xref:System.Windows.UIElement.Arrange%2A> como parte de las operaciones de diseño de nivel de marco WPF predeterminado. Su <xref:System.Windows.UIElement.ArrangeCore%2A> implementación también debe llamar a <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> en cada elemento secundario, si tiene elementos secundarios.  
  
 Para el elemento de nivel de núcleo WPF derivar escenarios, el comportamiento de <xref:System.Windows.UIElement.Arrange%2A> no deberían (y no es posible, a menos que sombrea) puede cambiar. En su lugar, debe invalidar <xref:System.Windows.UIElement.ArrangeCore%2A> en su clase. Su <xref:System.Windows.UIElement.ArrangeCore%2A> se llama internamente a implementación <xref:System.Windows.UIElement.Arrange%2A> como parte de las operaciones de diseño de nivel de marco WPF predeterminado. Sin embargo, esto supone que está usando Diseño de nivel de marco WPF y su sistema de diseño, que a menudo no es el caso si va a derivar específicamente elementos en el núcleo de WPF desde la <xref:System.Windows.UIElement> clase de elemento base. Su <xref:System.Windows.UIElement.ArrangeCore%2A> implementación también debe llamar a <xref:System.Windows.UIElement.Arrange%2A> en cada elemento secundario, si tiene elementos secundarios. Tenga en cuenta que el escenario de nivel de núcleo WPF implica que no está usando un <xref:System.Windows.FrameworkElement> clase derivada, porque <xref:System.Windows.FrameworkElement> sellos <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Cálculo de la posición del diseño de nivel de marco WPF en [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consta de un <xref:System.Windows.UIElement.Measure%2A> llamar y un <xref:System.Windows.UIElement.Arrange%2A> llamar. Durante la <xref:System.Windows.UIElement.Measure%2A> llamada, el sistema de diseño determina los requisitos de tamaño de un elemento mediante proporcionado <xref:System.Windows.Size> (`availableSize`) argumentos. Durante la <xref:System.Windows.UIElement.Arrange%2A> llamada, el sistema de diseño finaliza el tamaño y posición de un elemento del cuadro de límite.  Para obtener más información, consulte [diseño](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` puede ser cualquier número de cero a infinito. Elementos que se coloquen devuelven el mínimo <xref:System.Windows.Size> necesiten a través de la `availableSize` parámetro.  
  
 Cuando primero se crea una instancia de un diseño, siempre recibe una <xref:System.Windows.UIElement.Measure%2A> llamar antes de <xref:System.Windows.UIElement.Arrange%2A>. Sin embargo, después de la primera fase de diseño, puede recibir un <xref:System.Windows.UIElement.Arrange%2A> llamar sin una <xref:System.Windows.UIElement.Measure%2A>; Esto puede ocurrir cuando una propiedad que solo afecta a <xref:System.Windows.UIElement.Arrange%2A> se modifica (como la alineación), o cuando el elemento primario recibe un <xref:System.Windows.UIElement.Arrange%2A> sin un <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> llamada invalidará automáticamente un <xref:System.Windows.UIElement.Arrange%2A> llamar.  
  
 Las actualizaciones de diseño se producen generalmente asincrónicamente (en un momento determinado por el sistema de diseño). Un elemento podría no reflejar inmediatamente los cambios en las propiedades que afectan al tamaño del elemento (como <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Actualizaciones del diseño se pueden forzar mediante el uso de la <xref:System.Windows.UIElement.UpdateLayout%2A> método; sin embargo, al llamar a esta función no se recomienda, ya que normalmente no es necesario y puede provocar un rendimiento bajo. En muchas situaciones donde llamar a <xref:System.Windows.UIElement.UpdateLayout%2A> podría ser adecuado, el sistema de diseño probablemente ya está procesando las actualizaciones. El sistema de diseño puede procesar los cambios de diseño de forma que pueda optimizar todas las actualizaciones necesarias como parte de un paquete.  
  
 El sistema de diseño mantiene dos colas independientes de diseños no válidos, uno para <xref:System.Windows.UIElement.Measure%2A> y otro para <xref:System.Windows.UIElement.Arrange%2A>. La cola de diseño se ordena según el orden de los elementos en el árbol visual. Son superiores del árbol de elementos en la parte superior de la cola, con el fin de evitar diseños redundantes producidos por cambios repetidos en los elementos primarios. Las entradas duplicadas se quitan automáticamente de la cola y los elementos se quitan automáticamente de la cola si ya son válidos.  
  
 Al actualizar el diseño, la <xref:System.Windows.UIElement.Measure%2A> cola se vacía en primer lugar, seguido por el <xref:System.Windows.UIElement.Arrange%2A> cola. Un elemento en el <xref:System.Windows.UIElement.Arrange%2A> cola nunca se organizarán si hay un elemento en el <xref:System.Windows.UIElement.Measure%2A> cola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
        <summary>Defines the template for WPF core-level arrange layout definition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Invalidación de este método solo es adecuada si va a derivar en el nivel de núcleo WPF, y no está utilizando el sistema de diseño de nivel de marco WPF y <xref:System.Windows.FrameworkElement> clase derivada, porque <xref:System.Windows.FrameworkElement> sellos <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Si está utilizando el sistema de diseño de nivel de marco WPF, el método adecuado para invalidar de diseño específicos de la clase organizar el comportamiento es <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> las implementaciones deben llamar a la implementación base para devolver un tamaño, a continuación, llame a la <xref:System.Windows.UIElement.Arrange%2A> método de cada elemento secundario visible y reconciliar los tamaños devueltos por estos <xref:System.Windows.UIElement.Arrange%2A> llamadas con el tamaño de la implementación base. La lógica para el aspecto de conciliación de un <xref:System.Windows.UIElement.ArrangeCore%2A> implementación puede variar, según las características de diseño de su elemento. En la plantilla de ejemplo siguiente, `VisualChildren` es una propiedad hipotética que su elemento podría definir para ayudar a enumerar su contenido; <xref:System.Windows.UIElement> no define las colecciones de contenido en este nivel, la arquitectura de nivel de marco WPF aplaza el comportamiento del contenido para los elementos derivados como controles concretos o clases base de controles.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si está desarrollando elementos en el nivel de núcleo WPF, debe invalidar este método para proporcionar a su elemento de nivel de núcleo WPF única organizar un comportamiento de diseño, o para crear un diseño correcto de decisiones acerca de los elementos secundarios de los elementos. Una invalidación podría ser necesaria si esos elementos secundarios no son reconocibles en un patrón definido como un <see cref="T:System.Windows.Controls.ItemCollection" />.  Un elemento primario debe llamar a la clase específica <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> en cada elemento secundario, en caso contrario, esos elementos secundarios no se representan.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Starts an animation for a specified animated property on this element.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">The property to animate, which is specified as a dependency property identifier.</param>
        <param name="animation">The timeline of the animation to start.</param>
        <summary>Starts an animation for a specified animated property on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al comprobar si una propiedad está animada, tenga en cuenta que la animación se iniciará y se considera como animada cuando se represente el primer fotograma más allá del punto de partida no animadas.  
  
 Si el <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` es `null`, a continuación, se quitan las animaciones actuales y se mantiene el valor actual de la propiedad.  
  
 Si toda la `animation` valor es `null`, todas las animaciones se quitan de la propiedad y el valor de propiedad se revierte a su valor base. Sin embargo, la escala de tiempo de animación asociada originalmente no se detiene. Cualquier otra animación asignada a esa escala de tiempo continuarán ejecutándose.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una animación, lo asigna y, a continuación, llama a <xref:System.Windows.UIElement.BeginAnimation%2A> para iniciarlo.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">The property to animate, which is specified as the dependency property identifier.</param>
        <param name="animation">The timeline of the animation to be applied.</param>
        <param name="handoffBehavior">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</param>
        <summary>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al comprobar si una propiedad está animada, tenga en cuenta que la animación se iniciará y se considera como animada cuando se represente el primer fotograma más allá del punto de partida no animadas.  
  
 Si el <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` es `null`, a continuación, se quitan las animaciones actuales y se mantiene el valor actual de la propiedad.  
  
 Si toda la `animation` valor es `null`, todas las animaciones se quitan de la propiedad y el valor de propiedad se revierte a su valor base. Sin embargo, la escala de tiempo de animación asociada originalmente no se detiene. Cualquier otra animación asignada a esa escala de tiempo continuarán ejecutándose.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que obtiene una animación existente de un recurso y, a continuación, llama <xref:System.Windows.UIElement.BeginAnimation%2A> con un comportamiento de entrega especificado.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</summary>
        <value>Efecto de imagen que se va a aplicar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> es un tipo abstracto, por lo tanto, la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uso requiere una clase derivada implementada de <xref:System.Windows.Media.Effects.BitmapEffect>, como <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Tenga en cuenta que una clase derivada implementada es un tipo de colección que le permite especificar más de uno secuencial <xref:System.Windows.Media.Effects.BitmapEffect>, mediante una sintaxis de las etiquetas anidadas.  
  
 Ninguna clase derivada de <xref:System.Windows.Media.Effects.BitmapEffect> admite un convertidor de tipos, por lo que el [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis que se utiliza para esta propiedad generalmente es la sintaxis de elemento de propiedad.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se establece un mapa de bits surta efecto, mediante <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</summary>
        <value>Origen de los efectos de imagen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</summary>
        <value>A <see cref="T:System.Windows.Media.CacheMode" /> que contiene una representación en caché de la <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Windows.UIElement.CacheMode%2A> propiedad cuando necesite aumentar el rendimiento para el contenido que requiere tiempo para representar. Para obtener más información, consulta <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to force capture of the mouse to this element.</summary>
        <returns>
          <see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para ser capturado, un elemento debe estar habilitado. Compruebe si <xref:System.Windows.UIElement.IsEnabled%2A> es `true` antes de llamar a <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Si una llamada a <xref:System.Windows.UIElement.CaptureMouse%2A> devuelve `true`, a continuación, <xref:System.Windows.UIElement.IsMouseCaptured%2A> también es `true`.  
  
 Si una llamada a <xref:System.Windows.UIElement.CaptureMouse%2A> devuelve `true`, la <xref:System.Windows.UIElement.GotMouseCapture> y <xref:System.Windows.UIElement.IsMouseCapturedChanged> se generan eventos, con <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> en el evento informa de los datos como el elemento donde el <xref:System.Windows.UIElement.CaptureMouse%2A> se llama al método. Si se fuerza la captura, que podría interferir con las capturas existentes, especialmente con las capturas que se relacionan con arrastrar y colocar con el mouse.  
  
 Para borrar la captura del mouse de todos los elementos, llame a <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con el `element` parámetro proporcionado como `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un par de controladores para mouse (ratón) y combinación de teclas de entrada que capturar el mouse (y liberar) y habilitar un modo del mouse especial para ver un modelo 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to force capture of the stylus to this element.</summary>
        <returns>
          <see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada basada en el dispositivo de lápiz predeterminado subyacente siempre devuelve `true`. Sin embargo, si está ampliando los dispositivos de entrada que proporcionan la implementación de dispositivo para el sistema de entrada, es posible crear un sistema con una implementación de dispositivo de lápiz alternativo que podría devolver resultados diferentes.  
  
 Cuando un elemento captura el lápiz, recibe la entrada de lápiz incluso si el lápiz está fuera de los límites. Normalmente se captura el lápiz sólo durante las operaciones de arrastrar y colocar.  
  
 Llamar a este método llama a una subyacente estático <xref:System.Windows.Input.Stylus> método <xref:System.Windows.Input.Stylus.Capture%2A>. El comportamiento de captura real se implementa mediante la implementación de dispositivo de lápiz óptico activo.  
  
 Para ser capturado, un elemento debe estar habilitado. Compruebe si <xref:System.Windows.UIElement.IsEnabled%2A> es `true` devolver antes de llamar a <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Si una llamada a <xref:System.Windows.UIElement.CaptureStylus%2A> devuelve `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> también es `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">The device to capture.</param>
        <summary>Attempts to force capture of a touch to this element.</summary>
        <returns>
          <see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> devolverá `false` si el <xref:System.Windows.Input.TouchDevice> se captura actualmente en otro elemento.  
  
 Si <xref:System.Windows.UIElement.CaptureTouch%2A> devuelve `true`, la <xref:System.Windows.UIElement.GotTouchCapture> evento se desencadena.  
  
 Para liberar la captura de un solo punto táctil de este elemento, utilice la <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> método y especifique el dispositivo táctil para liberar. Para liberar todos los dispositivos táctiles de este elemento, utilice la <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.</summary>
        <value>Geometría que se usará para definir el tamaño del área de recorte. El valor predeterminado es una <see cref="T:System.Windows.Media.Geometry" /> nula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementos que estén fuera de la geometría se recortará visualmente en el diseño representado. La geometría no tiene que ser rectangular.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ClipProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 Este ejemplo muestra cómo definir un elemento de marco <xref:System.Windows.UIElement.Clip%2A> región. Para definir un clip, utilice un <xref:System.Windows.Media.Geometry> (por ejemplo, un <xref:System.Windows.Media.EllipseGeometry> para establecer el elemento <xref:System.Windows.UIElement.Clip%2A> propiedad. Solo el área que está dentro de la región de la geometría serán visible.  
  
 El ejemplo siguiente muestra un <xref:System.Windows.Controls.Image> elemento sin una región de recorte definida. Como no se define ninguna región de recorte, se muestra toda la imagen.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Un objeto antes de aplicar una región de recorte](~/add/media/mil-task-clip-region-noclip.png "un objeto antes de aplicar una región de recorte")  
Imagen con ninguna región de recorte  
  
 En el ejemplo siguiente, se crea una imagen idéntica, salvo que tenga una región de recorte definida. Solo la parte de la imagen que está dentro del área del <xref:System.Windows.Media.EllipseGeometry> se mostrará.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Objeto recortado](~/add/media/mil-task-clip-region-ellispe.PNG "objeto recortado")  
Imagen con una región de recorte elíptica  
  
 En el ejemplo siguiente se muestra cómo animar un elemento de marco <xref:System.Windows.UIElement.Clip%2A> región. En este ejemplo, un <xref:System.Windows.Media.EllipseGeometry> se utiliza para definir una región de recorte elíptica para un <xref:System.Windows.Controls.Image> elemento. A <xref:System.Windows.Media.Animation.PointAnimation> anima la geometría de elipse <xref:System.Windows.Media.EllipseGeometry.Center%2A> propiedad de (0, 0) a (200, 150). La animación comienza a reproducirse después de que la imagen se carga y se repite indefinidamente.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Para obtener el ejemplo completo, vea el [Clip Region Sample](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.</summary>
        <value>
          <see langword="true" /> si debe recortarse el contenido; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para los elementos secundarios, <xref:System.Windows.UIElement.ClipToBounds%2A> tiene efectos diferentes comportamientos de diseño dependiendo de si el alto y ancho del elemento primario se determina <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> o <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> del elemento primario siempre se respetan sin tener en cuenta el valor de <xref:System.Windows.UIElement.ClipToBounds%2A> y el recorte efectivo siempre recortará el contenido basándose en estos máximos. Del elemento primario <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> configuración no ajustará el contenido cuando <xref:System.Windows.UIElement.ClipToBounds%2A> es `false`, pero se recorta el contenido if <xref:System.Windows.UIElement.ClipToBounds%2A> es `true`.  
  
 Tenga en cuenta que el valor predeterminado `false` es el comportamiento general, tal como se implementa en el <xref:System.Windows.UIElement> clase. Es posible que cualquier elemento que se deriva de <xref:System.Windows.UIElement> para invalidar los metadatos de propiedad de dependencia para esta propiedad en esa instancia en de forma predeterminada `true` en su lugar. Varias clases derivadas existentes invalidan estos metadatos o ajustan el valor predeterminado de propiedad de dependencia.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, y <xref:System.Windows.Controls.Primitives.Popup> entre reemplazar el valor predeterminado sea `true`.  
  
 <xref:System.Windows.FrameworkElement> invalida los metadatos de esta propiedad de dependencia. En concreto, <xref:System.Windows.FrameworkElement> designa esta propiedad para permitir la herencia del valor de propiedad (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> es `true` en los metadatos). Herencia de valores de propiedad en este contexto significa que si hay elementos secundarios con ningún otro valor para <xref:System.Windows.UIElement.ClipToBounds%2A> asignado a través de valores locales o estilos, el valor del elemento primario más cercano que tenga asignado este valor (de nuevo, ya sea en los estilos, de forma predeterminada valores, o un valor local), a continuación, se asignará el valor del elemento primario para todos los elementos secundarios no asignados por el sistema de propiedades. En la práctica, esto significa que puede especificar si desea permitir recortes en límites en el elemento raíz y que el valor se propagará a todos los elementos secundarios que tengan específicamente no asignarlo como `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element. A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</summary>
        <value>La colección de todos los <see cref="T:System.Windows.Input.CommandBinding" /> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Otra forma habitual para rellenar el <xref:System.Windows.UIElement.CommandBindings%2A> colección consiste en usar <xref:System.Windows.Input.CommandManager> métodos mediante programación.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreCommandBindings*  
 Uno o más <xref:System.Windows.Input.CommandBinding> elementos. Cada uno de ellos debe tener un <xref:System.Windows.Input.CommandBinding.Command%2A> atributo establecido en un comando conocido y atributos establecidos para el <xref:System.Windows.Input.CommandBinding.CanExecute> y <xref:System.Windows.Input.CommandBinding.Executed> las implementaciones de controladores. Para obtener más información, vea <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega un <xref:System.Windows.Input.CommandBinding> a una ventana mediante marcado. Tenga en cuenta que en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> no se ha declarado en el marcado como un elemento; el tipo que la propiedad toma deduce el objeto de colección y rellenar el elemento de propiedad con uno o varios <xref:System.Windows.Input.CommandBinding> elementos:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Para obtener más información sobre la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis para las colecciones, vea [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 En el ejemplo siguiente se realiza básicamente lo mismo en el código:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size that this element computed during the measure pass of the layout process.</summary>
        <value>Tamaño calculado, que se convierte en el tamaño deseado para el paso de organización.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto por esta propiedad solo será una medida válida si el valor de la <xref:System.Windows.UIElement.IsMeasureValid%2A> propiedad es `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> Normalmente, se comprueba como uno de los factores de medida al implementar el comportamiento del diseño invalida como <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, o <xref:System.Windows.UIElement.OnRender%2A> (en el <xref:System.Windows.UIElement.OnRender%2A> caso, debe comprobar <xref:System.Windows.UIElement.RenderSize%2A> en su lugar, pero esto depende de su implementación). Según el escenario, <xref:System.Windows.UIElement.DesiredSize%2A> podría ser respetan totalmente la lógica de implementación, las restricciones en <xref:System.Windows.UIElement.DesiredSize%2A> podrían aplicarse, y estas restricciones también podrían cambiar otras características del elemento primario o del elemento secundario. Por ejemplo, un control que admite regiones desplazables (pero decide no derivar de los controles de nivel de marco WPF que ya habilitan las regiones desplazables) podría comparar el tamaño disponible para <xref:System.Windows.UIElement.DesiredSize%2A>. El control, a continuación, podría establecer un estado interno que habilite las barras de desplazamiento en el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] de ese control. O bien, <xref:System.Windows.UIElement.DesiredSize%2A> podría también se omite en ciertos escenarios.  
  
   
  
## Examples  
 El ejemplo siguiente muestra <xref:System.Windows.UIElement.DesiredSize%2A> como parte de una <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementación. Observe cómo <xref:System.Windows.UIElement.Measure%2A> se llama inmediatamente antes de obtener <xref:System.Windows.UIElement.DesiredSize%2A>. Esto garantiza que <xref:System.Windows.UIElement.DesiredSize%2A> contiene un valor legítimo.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the drag target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.DragEnter> eventos están conectados a subyacente <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnDragEnter%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.DragLeave> eventos están conectados a subyacente <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnDragLeave%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se produce incluso si la operación de arrastre se origine en los límites del elemento. Si la operación de arrastre inicia fuera de los límites y, a continuación, se mueve dentro, también se genera este evento, así como <xref:System.Windows.UIElement.DragEnter> y eventos de vista previa relacionados.  
  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.DragOver> eventos están conectados a subyacente <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.DragOverEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnDragOver%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drop event with this element as the drop target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.Drop> eventos están conectados a subyacente <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.DropEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnDrop%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />. This is a dependency property.</summary>
        <value>Un <see cref="T:System.Windows.Media.Effects.Effect" /> que representa el efecto de mapa de bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.UIElement.Effect%2A> propiedad que se va a aplicar un efecto de mapa de bits a una <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.EffectProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El código XAML siguiente muestra cómo asignar un personalizado <xref:System.Windows.Media.Effects.ShaderEffect> a la <xref:System.Windows.UIElement.Effect%2A> propiedad.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to set focus to this element.</summary>
        <returns>
          <see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para poder recibir el foco, <xref:System.Windows.UIElement.Focusable%2A> y <xref:System.Windows.UIElement.IsEnabled%2A> deben ser `true`.  
  
 Incluso si un elemento es el control de eventos puede recibir el foco y están habilitados, dentro de un árbol concreto, (por ejemplo, para un control compuesto) podría responder a los eventos de foco de vista previa no permitiendo foco allí, lo que este método devolvería `false`.  
  
 Foco en general se rige por dos conceptos independientes: foco del teclado y el foco lógico, que no siempre son idénticos.  Para obtener más información, consulte [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) o [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Si una llamada a <xref:System.Windows.UIElement.Focus%2A> devuelve `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> y <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> también son `true`.  
  
 Si las propiedades relacionadas ya no están `true`, al llamar a <xref:System.Windows.UIElement.Focus%2A>, uno o varios de los siguientes eventos se producen en el siguiente orden: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (el origen es el nuevo destino del foco), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (el origen es el nuevo destino del foco).  
  
 En orden para esta llamada se realice correctamente, de algún otro elemento en la aplicación necesaria para que el foco anteriormente.  
  
   
  
## Examples  
 En el ejemplo siguiente se establece el foco en un <xref:System.Windows.Controls.TextBox> referenciado por <xref:System.Windows.FrameworkElement.Name%2A>y, a continuación, se ajusta la posición del cursor dentro de la <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento se puede recibir el foco; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo el elemento enfocado recibe la entrada de teclado.  
  
 <xref:System.Windows.UIElement.Focusable%2A> es el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] descriptor de acceso de propiedad para lo que es en realidad una propiedad de dependencia. Esta propiedad de dependencia concreta con bastante frecuencia no tiene valor "predeterminado" aparente establecido de forma distinta en las clases de elemento derivadas, particularmente en los controles. Esto suele ocurrir en uno de dos maneras:  
  
-   La propiedad de dependencia es heredada por una clase derivada determinada, pero que deriva los metadatos de la propiedad de dependencia de invalidaciones de la clase y cambia el valor de propiedad predeterminado.  
  
-   Un estilo o plantilla se aplica a un elemento, que establece ese valor de propiedad de dependencia de manera diferente.  
  
 Por ejemplo, el "predeterminado" aparente de <xref:System.Windows.UIElement.Focusable%2A> para un <xref:System.Windows.Controls.Button> control estará `true`, aunque <xref:System.Windows.Controls.Button> hereda <xref:System.Windows.UIElement.Focusable%2A> como un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] propiedad directamente desde <xref:System.Windows.UIElement>. Esto es porque el valor de los metadatos aplicados para el <xref:System.Windows.UIElement.Focusable%2A> se ha reemplazado la propiedad de dependencia dentro del constructor estático de la <xref:System.Windows.Controls.Control> base (clase), que se encuentre entre <xref:System.Windows.Controls.Button> y <xref:System.Windows.UIElement> en la jerarquía de clases.  
  
 Cuando hereda <xref:System.Windows.Controls.Control> o sus clases derivadas, <xref:System.Windows.Controls.Control> vuelve a definir el valor predeterminado de esta propiedad para que sea `true`.  
  
 Cuando hereda <xref:System.Windows.Controls.Label> (que es un <xref:System.Windows.Controls.Control> clase derivada), el valor predeterminado nuevo se vuelve a definir para que sea `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.FocusableProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El código de ejemplo siguiente muestra una plantilla de control para un control personalizado determinado, que establece <xref:System.Windows.UIElement.Focusable%2A> `false` en uno de los elementos dentro de la plantilla.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al derivar de <see cref="T:System.Windows.UIElement" /> directamente (frente de <see cref="T:System.Windows.Controls.Control" />), tenga en cuenta si desea que el elemento que se va a recibir el foco, porque de forma predeterminada el elemento no se puede recibir el foco. Si desea que el elemento que se va a recibir el foco, invalide los metadatos de esta propiedad en el constructor estático de su tipo como sigue: [! [CorePseudocode #UIElementShortOverride] (~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/ de csharp de código CSharp/corepseudocode.cs#uielementshortoverride)] [! code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] donde <paramref name="myElement" /> debe ser el nombre de clase del tipo que se va a reemplazar el valor de metadatos.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">The dependency property to check.</param>
        <summary>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</summary>
        <returns>The property value as if no animations are attached to the specified dependency property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hubiera ninguna animación asociada a la propiedad, el <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> valor devuelto siempre es idéntica a la <xref:System.Windows.DependencyObject.GetValue%2A> valor devuelto. Si hay animaciones asociadas, a continuación, derivados valores, incluidos el inicio de la animación posibles todos los valores de detención se omiten y el valor de propiedad se determina basándose en todas las demás entradas posibles. Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que notifica el valor base de un elemento animado <xref:System.Windows.FrameworkElement.Width%2A> propiedad en un <xref:System.Windows.Controls.Button>, así como el valor base de una transformación.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">The available size provided by the element.</param>
        <summary>Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</summary>
        <returns>The potential clipping geometry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada devuelve un valor legítimo, pero no usa el `layoutSlotSize` parámetro en sus cálculos. En su lugar, usa el valor de <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Este método se reemplaza esencialmente por la clase derivada inmediatamente <xref:System.Windows.FrameworkElement> (clase) y el <xref:System.Windows.FrameworkElement> invalidación produce un comportamiento más sofisticado para los elementos de nivel de marco WPF generales. Para obtener información detallada, vea <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</summary>
        <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación virtual predeterminada de este método devuelve `null`. <xref:System.Windows.FrameworkElement> Proporciona una implementación práctica.  
  
 Los elementos primarios alternativos se utilizan para el enrutamiento de eventos, en casos donde un elemento crea una estructura primaria alternativa para que los eventos se enrutan de forma que difiera el patrón estándar de enrutamiento el árbol visual para el elemento primario estándar, o hacia abajo en la obtener una vista previa de estrategia de enrutamiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.GiveFeedback> evento permite al origen de un evento de arrastre para modificar la apariencia del puntero del mouse con el fin de proporcionar información visual al usuario durante una operación de arrastrar y colocar. Los comentarios visuales refuerzan que una operación de arrastrar y colocar está en proceso.  
  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.GiveFeedback> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.GiveFeedback> eventos están conectados a subyacente <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnGiveFeedback%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element gets logical focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El foco lógico es diferente del foco de teclado si el foco se impone deliberadamente mediante una llamada al método pero el foco de teclado anterior existe en otro ámbito. En este escenario, el foco de teclado permanece donde está y el elemento donde un <xref:System.Windows.UIElement.Focus%2A> se llama al método todavía obtiene el foco lógico.  
  
 Una interpretación más precisa de este evento es que se produce cuando el valor de la <xref:System.Windows.UIElement.IsFocused%2A> se cambia la propiedad de un elemento en la ruta de `false` a `true`.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que recibe el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que ha obtenido el foco.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente.  
  
-   Invalidar <xref:System.Windows.UIElement.OnGotFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the keyboard is focused on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> es un evento similar que realiza el seguimiento de cambios de estado en una propiedad que mantiene el estado del foco para un elemento; el <xref:System.Windows.UIElement.GotKeyboardFocus> evento se provoca en muchas de las mismas circunstancias.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que tiene el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene el foco.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.GotKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.GotKeyboardFocus> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element captures the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el mouse, recibe la entrada del mouse incluso si el puntero del mouse está fuera de los límites. El mouse se suele capturar sólo durante las operaciones de arrastrar y colocar y capturado se mantiene hasta que se produce la acción de colocación de la operación de arrastrar y colocar.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que tiene la captura puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en el evento de captura de datos para determinar el elemento real que tiene un mouse.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.GotMouseCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.GotMouseCapture> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definido.  
  
-   Invalidar <xref:System.Windows.UIElement.OnGotMouseCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element captures the stylus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el lápiz, recibe la entrada de lápiz incluso si el puntero está fuera de los límites. El lápiz se suele capturar sólo durante las operaciones de arrastrar y colocar y retiene la captura hasta que se produce la acción de colocación de la operación de arrastrar y colocar.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que tiene la captura puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene la captura.  
  
 Este evento crea un alias para el evento adjunto para esta clase para que <xref:System.Windows.UIElement.GotStylusCapture> forma parte de la clase miembros lista cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.GotStylusCapture> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definido.  
  
-   Invalidar <xref:System.Windows.UIElement.OnGotStylusCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a touch is captured to this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.UIElement.OnGotTouchCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this element has any animated properties.</summary>
        <value>
          <see langword="true" /> Si este elemento tiene animaciones asociadas a cualquiera de sus propiedades; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve `true` para las animaciones persistentes (no bloqueadas, siempre en ejecución) o para las animaciones que tienen una escala de tiempo específico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Windows.UIElement" /> tiene el foco; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las subclases pueden invalidar esta propiedad para especificar si el elemento tiene el foco de teclado.  Esto es útil cuando la <xref:System.Windows.UIElement> contiene elementos que pueden tener el foco del teclado y desea que su elemento de informe que tiene el foco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
        <summary>Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Results of the test, including the evaluated geometry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vea el método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> para obtener información sobre cómo reemplazar este método en más de las clases derivadas. Tenga en cuenta que varios controles concretos (<xref:System.Windows.Controls.TextBlock>, por ejemplo) tienen implementaciones distintas, que invalidan esta.  
  
 Este método no está pensado para ser llamado desde el código de aplicación. Este método es compatible con los comportamientos de pruebas llamados internos expuestos por varios aspectos del sistema de entrada (si el puntero del mouse está sobre un elemento, por ejemplo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
        <summary>Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Results of the test, including the evaluated point.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vea el método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> para obtener información sobre cómo reemplazar este método en más de las clases derivadas. Tenga en cuenta que varios controles concretos (<xref:System.Windows.Controls.TextBlock>, por ejemplo) tienen implementaciones distintas, que invalidan <xref:System.Windows.UIElement.HitTestCore%2A> tal como se define por <xref:System.Windows.UIElement>.  
  
 Este método no está pensado para ser llamado desde el código de aplicación. Este método es compatible con los comportamientos de pruebas llamados internos expuestos por varios aspectos del sistema de entrada (si el puntero del mouse está sobre un elemento, por ejemplo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of input bindings associated with this element.</summary>
        <value>La colección de enlaces de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enlaces de entrada admiten el enlace de comandos para dispositivos de entrada. Por ejemplo, <xref:System.Windows.Input.MouseBinding> implementa enlaces que incluyan las propiedades que son específicos de los dispositivos de mouse de entrada.  
  
 La colección de enlaces de entrada incluye enlaces de entrada que pertenecen al tipo así como los enlaces de entrada que se declaran en la instancia.  
  
 Una propiedad relacionada, <xref:System.Windows.UIElement.CommandBindings%2A>, mantiene una colección de enlaces de comando. Difieren de los enlaces de entrada en que representan el siguiente nivel hacia abajo del procesamiento de comandos - las acciones que están asociados a los comandos conocidos.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreInputBindings*  
 Uno o varios <xref:System.Windows.Input.InputBinding> elementos (normalmente el <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding> las clases derivadas). Se espera que cada uno de ellos tenga un <xref:System.Windows.Input.InputBinding.Command%2A> y <xref:System.Windows.Input.InputBinding.Gesture%2A> conjunto de atributos.  
  
   
  
## Examples  
 El ejemplo siguiente rellena esta propiedad en un <xref:System.Windows.Window>, con una sola <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Para obtener más información sobre la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis para las colecciones, vea [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">The offset coordinates within this element.</param>
        <summary>Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</summary>
        <returns>The element child that is located at the given position.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> se devuelve como el tipo de valor devuelto, porque ese tipo es una interfaz común para ambos <xref:System.Windows.UIElement> y <xref:System.Windows.ContentElement>. A continuación, puede convertir el tipo de valor devuelto correctamente, o usar la instancia de la interfaz para ciertos miembros definidos por el <xref:System.Windows.IInputElement> interfaz.  
  
 Normalmente no llama a este método desde el código de aplicación. Llamar a este método sólo es apropiado si piensa volver a implementar una cantidad considerable de las características de entrada de bajo niveles que ya están presentes, como volver a crear la lógica de dispositivo de mouse (ratón).  
  
 <xref:System.Windows.IContentHost> contratos de un <xref:System.Windows.IContentHost.InputHitTest%2A> método con la misma firma, que algunos elementos deciden implementar explícitamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las llamadas frecuentes a <xref:System.Windows.UIElement.InvalidateArrange%2A> o en particular, <xref:System.Windows.UIElement.UpdateLayout%2A> tiene consecuencias de rendimiento significativas. Por lo tanto, evite llamar a este método, a menos que requiera el estado de diseño preciso para las llamadas subsiguientes a otros [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] en el código. Un escenario avanzado que puede llamar a <xref:System.Windows.UIElement.InvalidateArrange%2A> es si va a crear un <xref:System.Windows.PropertyChangedCallback> para una propiedad de dependencia que no se encuentra en un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> clase derivada que todavía influye en el paso de organización del diseño cuando el estado cambia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the measurement state (layout) for the element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método también llama <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente, no es necesario llamar a <xref:System.Windows.UIElement.InvalidateMeasure%2A> y <xref:System.Windows.UIElement.InvalidateArrange%2A> en sucesión. Después de la invalidación, el elemento tiene su diseño actualizado, lo que ocurrirá de forma asincrónica, a menos que <xref:System.Windows.UIElement.UpdateLayout%2A> se llama para forzar un cambio de diseño sincrónico.  
  
 El sistema de diseño de nivel de marco WPF hace su propio control de cambios en el árbol visual de un elemento y, en casos más comunes de invalidación de diseño el sistema de diseño llama al equivalente de este método cuando sea necesario. Solo debe llamar a este método si se produce una implementación del diseño completa, que dirigen la manipulación del árbol de elementos, o similar escenarios avanzados. Uno de estos escenarios avanzado es si va a crear un <xref:System.Windows.PropertyChangedCallback> para una propiedad de dependencia que no se encuentra en un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> clase derivada que todavía influye en el paso de medición del diseño cuando el estado cambia.  
  
 Las llamadas frecuentes a <xref:System.Windows.UIElement.InvalidateMeasure%2A> o en particular, <xref:System.Windows.UIElement.UpdateLayout%2A> tiene consecuencias de rendimiento significativas. Por lo tanto, evite llamar a este método, a menos que requiera el estado de diseño preciso para las llamadas subsiguientes a otros [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] en el código.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the rendering of the element, and forces a complete new layout pass. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método llama <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente.  
  
 Por lo general no se llama a este método desde el código de aplicación. El sistema de diseño de nivel de marco WPF hace su propio control de cambios en el árbol visual de un elemento y llamaría el equivalente de este método cuando es necesario ya. Llamar a este método sólo es necesario para escenarios avanzados. Uno de estos escenarios avanzado es si va a crear un <xref:System.Windows.PropertyChangedCallback> para una propiedad de dependencia que no se encuentra en un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> clase derivada que todavía influye en el diseño cuando el estado cambia.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</summary>
        <value>
          <see langword="true" /> Si el tamaño y la posición del diseño son válidos; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede forzar la organización que se invalide mediante una llamada a <xref:System.Windows.UIElement.InvalidateArrange%2A> en este elemento (o sus elementos primarios). Esto marca el diseño para la recomposición en el momento que determina el sistema de diseño. O bien, una llamada inmediata a <xref:System.Windows.UIElement.UpdateLayout%2A> podría realizarse, pero esto solo debe realizarse si se tiene la certeza de que ninguna otras invalidaciones están pendientes (un gran número de actualizaciones innecesariamente impuestas tiene consecuencias de rendimiento).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> no puede ser `true` a menos que <xref:System.Windows.UIElement.IsMeasureValid%2A> también es `true` (en el proceso de diseño, la organización no puede ser válida si la medida no es válida).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento está habilitado; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que esta propiedad se ve influida por las implementaciones específicas de la clase de <xref:System.Windows.UIElement.IsEnabledCore%2A> en determinados elementos, a menudo en tiempo de ejecución. Por lo tanto, el valor predeterminado enumerado aquí a veces no es efectivo. Por ejemplo, un <xref:System.Windows.Controls.Primitives.ScrollBar> será <xref:System.Windows.UIElement.IsEnabled%2A> `false` cada vez que se determina que no es necesario para admitir una barra de desplazamiento. Al intentar establecer este valor también potencialmente serán reemplazado por el valor devuelto por <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Elementos que no están habilitados no participan en la prueba de posicionamiento o foco y, por tanto, no será orígenes de eventos de entrada.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador en un botón que cuando ejecuta establece <xref:System.Windows.UIElement.IsEnabled%2A> `false` en otro botón con nombre `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</summary>
        <value>
          <see langword="true" /> Si el elemento está habilitado; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>La implementación predeterminada de esta propiedad se almacena en caché el valor y también calcula si el elemento primario de este elemento está habilitado. (Si el elemento primario no está habilitado, el elemento secundario no podrá habilitarse eficazmente en aplicaciones prácticas [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].) Si opta por invalidar esta implementación, asegúrese de que se llame a la implementación base para conservar este comportamiento.  La <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> clase proporciona una implementación de invalidación existente de esta propiedad. Esta invalidación determina si el contenido dentro del área de presentación del contenido supera el área disponible. Si el contenido sobrepasa el área, se habilita la parte de la barra de desplazamiento. En caso contrario, la barra de desplazamiento no está habilitado.</para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines whether this element has logical focus.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si este elemento tiene foco lógico; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El foco lógico puede diferir del foco de teclado si una aplicación tiene varias divisiones de foco, por ejemplo, entre el contenido del menú y el resto de la aplicación. En este escenario, el foco de teclado sólo puede estar en un elemento del interfaz de usuario de la aplicación, sin embargo, ciertos elementos en otras divisiones de foco pueden retener el foco lógico. Para obtener más información sobre el foco lógico, consulte [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 No establecer el foco al establecer esta propiedad (es de sólo lectura). El uso típico de esta propiedad es utilizarlo como una propiedad de dependencia para un <xref:System.Windows.Setter> o <xref:System.Windows.EventTrigger>. Para establecer el foco mediante programación, llame a <xref:System.Windows.UIElement.Focus%2A>. También se puede establecer el enfoque por acción del usuario o las implementaciones de control, que posiblemente incluyen el comportamiento de captura del mouse.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo siguiente es un controlador de código que cambie el fondo de un control cuando recibe el foco.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Otra forma común de lograr este mismo efecto consiste en colocar un <xref:System.Windows.Trigger> en el <xref:System.Windows.Style> de un control de este enfoque no requiere control de eventos concretos con código subyacente y permite a los diseñadores mayor acceso a la naturaleza interactiva y gráfica de el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Para obtener un ejemplo, vea [Cómo: crear un efecto de iluminado exterior](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si este elemento puede devolverse como resultado de una prueba de posicionamiento desde al menos un punto; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor efectivo de esta propiedad se ve influenciado por las posiciones relativas de los elementos pueden someterse a prueba de posicionamiento en el árbol lógico. Por ejemplo, si un elemento es un elemento secundario de un elemento que es realizar pruebas de posicionamiento visible, el valor efectivo de la propiedad en el elemento secundario seguirá siendo `false`, incluso si se intenta establecer ese valor localmente. Por esta razón, es importante que establezca <xref:System.Windows.UIElement.IsHitTestVisible%2A> a `false` en un control compuesto, a menos que no desea ninguna entrada o pruebas de posicionamiento en ese control. Para más información acerca de las pruebas de posicionamiento, consulte [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md) (Pruebas de posicionamiento en la capa visual).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</summary>
        <value>
          <see langword="true" /> Si un método de entrada está activo; en caso contrario, <see langword="false" />. El valor predeterminado de la propiedad adjunta subyacente es <see langword="true;" /> sin embargo, esto se verán influido por el estado real de métodos de entrada en tiempo de ejecución.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve el valor devuelto por la propiedad adjunta <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> para los métodos de entrada actualmente habilitados (teclado, voz y otros dispositivos de entrada).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this element has keyboard focus.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si este elemento tiene el foco de teclado; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cambios en el valor predeterminado de esta propiedad pueden ir acompañados de eventos relacionados con el foco.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> y <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> usan habitualmente en los controladores de eventos de clase para otros eventos relacionados con la entrada, por ejemplo para determinar si el elemento ya tiene el foco del teclado o determinar al pasar el mouse eventos y eventos de teclado se producen conjuntamente.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el foco del teclado está en el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los cambios en el valor de esta propiedad normalmente provocan el <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> eventos, a menos que una clase derivada invalide <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> para suprimir el evento.  
  
 Esta propiedad no se establece directamente, pero puede establecer el foco a un elemento mediante una llamada a <xref:System.Windows.UIElement.Focus%2A>, o realizando una <xref:System.Windows.UIElement.MoveFocus%2A> solicitud. Cualquiera de estas llamadas al método puede cambiar este valor de propiedad.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> y <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> se suelen usar en los controladores de eventos de clase para otros eventos relacionados con la entrada, por ejemplo para determinar si el elemento ya tiene el foco del teclado o determinar al pasar el mouse eventos y eventos de teclado se producen conjuntamente.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          <see langword="true" /> Si se habilitan eventos de manipulación en el objeto <see cref="T:System.Windows.UIElement" />; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establezca esta propiedad en true si desea que la <xref:System.Windows.UIElement> para recibir la <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, y <xref:System.Windows.UIElement.ManipulationCompleted> eventos. Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una aplicación que tenga un rectángulo rojo.  El <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propiedad del rectángulo está establecida en true y la aplicación de la ventana se suscribe a la <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, y <xref:System.Windows.UIElement.ManipulationInertiaStarting> eventos. Este ejemplo forma parte de un ejemplo más extenso en [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current size returned by layout measure is valid.</summary>
        <value>
          <see langword="true" /> Si pasa la medida de diseño devolvió un valor válido y actual; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede forzar la medida y organización que se invalide mediante una llamada a <xref:System.Windows.UIElement.InvalidateMeasure%2A> en este elemento (o cualquier elemento primario del árbol visual). Esto hace que designe el diseño para la recomposición de forma asincrónica, que se producen en un momento determinado por el sistema de diseño. Como alternativa, podría realizar una llamada inmediata a <xref:System.Windows.UIElement.UpdateLayout%2A>. Sin embargo, debería llamar a <xref:System.Windows.UIElement.UpdateLayout%2A> si es probable que no hay más invalidaciones pendientes (un gran número de actualizaciones impuestas innecesariamente tendrá consecuencias en el rendimiento).  
  
 Si <xref:System.Windows.UIElement.IsMeasureValid%2A> es `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> también debe ser `false` (por la lógica aplicada del proceso de diseño, la organización no puede ser válida si la medida no es válida).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento tiene la captura del mouse (ratón); en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estado de la captura del mouse está relacionado con las operaciones de arrastrar y colocar en proceso.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo siguiente activa el estado de la captura del mouse o desactivar en función de si ya se captura el mouse para el elemento.  
  
 Si captura del mouse está en otra parte, que la captura del mouse está establecida en ese elemento. Si el elemento tiene la captura del mouse, se borra llamando <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con una entrada nula.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si este elemento o un elemento que contiene tiene la captura del mouse (ratón); en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el puntero del mouse está sobre el mismo resultado del elemento que una prueba de posicionamiento; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.Windows.UIElement.IsMouseOver%2A>, esta propiedad sólo es `true` si el puntero del mouse está sobre el elemento literal, ya que es para una prueba de posicionamiento. Si el puntero del mouse está sobre un elemento secundario, en particular sobre los elementos que forman parte de un elemento de la plantilla más profunda y la composición, esta propiedad será `false`. A menos que sepa cómo un control es compuesto (por ejemplo, utilice esta propiedad en una plantilla de control personalizado para un control que defina), esta propiedad podría devolver resultados inesperados. Para la mayoría de los escenarios donde no esté creando controles, use <xref:System.Windows.UIElement.IsMouseOver%2A> en su lugar.  
  
 Si este elemento captura el mouse, y esta propiedad es `true` en el momento de la captura, esta propiedad continuará devolviendo `true` hasta que se pierda la captura del mouse y el puntero no es a través de sus límites.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el puntero del mouse está sobre el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, los controles son compuestos tal que todos los distintos elementos dentro del control (el árbol visual) va a notificar el estado del mouse para el control contenedor. Por ejemplo, un <xref:System.Windows.Controls.ListBox> informará de control de estilo de <xref:System.Windows.UIElement.IsMouseOver%2A> como `true` si el mouse se encuentra en cualquier parte sobre su geometría, incluidos los <xref:System.Windows.Controls.ListBoxItem>.  
  
 Aunque no exista un evento "IsMouseOverChanged análogo" análogo, realice varios eventos similares. Por ejemplo, puede controlar <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, y <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Si este elemento captura el mouse, esta propiedad permanece `true` hasta que se pierda la captura del mouse y el puntero del mouse deja los límites del elemento.  
  
 Algunos controles capturan deliberadamente el mouse en determinadas acciones que no parecen implicar directamente el mouse. Esto puede conducir a <xref:System.Windows.UIElement.IsMouseOver%2A> que se va a `true` aunque aparentemente no ha movido el mouse.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se hace referencia a esta propiedad como el tipo de propiedad de un <xref:System.Windows.Trigger>, parte de un \<Style.Triggers > bloque. Si el mouse está sobre el control, el texto del control se vuelve azul y el cursor se convierte en una mano.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento tiene la captura del lápiz; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si este elemento o un elemento que contiene tiene la captura del lápiz; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) y [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se trata de un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el puntero del lápiz está sobre el mismo resultado del elemento que una prueba de posicionamiento; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.Windows.UIElement.IsStylusOver%2A>, esta propiedad sólo es `true` si el lápiz está sobre el elemento. Si en su lugar, el lápiz está sobre un elemento secundario o sobre los elementos que forman parte de la composición más profunda de un elemento (el árbol visual), esta propiedad será `false`.  
  
 A menos que sepa cómo un control es compuesto (por ejemplo, utilice esta propiedad en una plantilla de control personalizado para un control que defina), esta propiedad podría devolver resultados inesperados. Para la mayoría de los escenarios donde no esté creando controles, use <xref:System.Windows.UIElement.IsStylusOver%2A> en su lugar.  
  
 Si este elemento tiene la captura del lápiz y esta propiedad es `true` en el momento de la captura, esta propiedad permanece `true` hasta que se pierde la captura del lápiz y el lápiz no está por encima de sus límites.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el cursor del lápiz está sobre el elemento o sus elementos secundarios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento tiene la captura del lápiz, esta propiedad continuará devolviendo `true` hasta que se pierde la captura del lápiz y el puntero está fuera de sus límites.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento está visible; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determinación de la <xref:System.Windows.UIElement.IsVisible%2A> valor tiene todos los factores de diseño en cuenta. En cambio, <xref:System.Windows.UIElement.Visibility%2A>, que es una propiedad configurable, solamente indica la intención de realizar mediante programación un elemento visible o invisible.  
  
 Elementos donde <xref:System.Windows.UIElement.IsVisible%2A> es `false` no participan en eventos de entrada (o comandos), realice no influyen en la medida de cualquiera o pasos de diseño de organización, no son puede recibir el foco, no están en una secuencia de tabulación y no se incluirán en la prueba de posicionamiento. En cambio, los elementos donde <xref:System.Windows.UIElement.IsEnabled%2A> es `false` todavía participará en la prueba de posicionamiento, eventos y comandos, pero también no son puede recibir el foco.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no se desencadena si el elemento no se está representando por el sistema de diseño, por motivos que no sea el valor de la <xref:System.Windows.UIElement.IsVisible%2A> propiedad. Por ejemplo, el elemento no puede tener un objeto visual asociado.  
  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is pressed while focus is on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de comandos y el texto. El <xref:System.Windows.UIElement.KeyDown> evento es un evento de entrada de texto de nivel inferior que podría no funcionar como se esperaba en ciertos controles. Esto es debido a que algunos controles tienen la composición del control o control de clases que proporciona una versión de un nivel más alto del texto de entrada de control y eventos relacionados.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.KeyDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.KeyDown> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnKeyDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is released while focus is on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> adjunta eventos para esta clase para que <xref:System.Windows.UIElement.KeyUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.KeyUp> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnKeyUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una actualización de diseño puede deberse a un cambio de propiedad, un cambio de tamaño de ventana o una solicitud explícita del usuario.  
  
 Este miembro es una [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, no un evento enrutado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element loses logical focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El foco lógico es diferente del foco de teclado si el foco se aleja deliberadamente mediante una llamada a un método pero el foco de teclado anterior existe en otro ámbito. En este escenario, donde resulta sigue siendo de foco de teclado y el elemento donde un <xref:System.Windows.UIElement.Focus%2A> se llama al método todavía obtiene el foco lógico.  
  
 Una interpretación más precisa de este evento es que se produce cuando el valor de la <xref:System.Windows.UIElement.IsFocused%2A> cambios en las propiedades de un elemento en la ruta de `true` a `false`.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que pierde el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que ha obtenido el foco.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente.  
  
-   Invalidar <xref:System.Windows.UIElement.OnLostFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the keyboard is no longer focused on this element,.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como este evento usa el enrutamiento de propagación, el elemento que perdió el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.LostKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.LostKeyboardFocus> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element loses mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el mouse, recibe la entrada del mouse incluso si el puntero está fuera de los límites. Normalmente se captura el mouse sólo durante las operaciones de arrastrar y colocar.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que pierde la captura puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que pierde la captura.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.LostMouseCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.LostMouseCapture> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definido.  
  
-   Invalidar <xref:System.Windows.UIElement.OnLostMouseCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element loses stylus capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un elemento captura el lápiz, recibe la entrada de lápiz incluso si el puntero está fuera de los límites. Normalmente se captura el lápiz sólo durante las operaciones de arrastrar y colocar.  
  
 Como este evento usa el enrutamiento de propagación, el elemento que pierde el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.LostStylusCapture> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.LostStylusCapture> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definido.  
  
-   Invalidar <xref:System.Windows.UIElement.OnLostStylusCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element loses a touch capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.UIElement.OnLostTouchCapture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the manipulation encounters a boundary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este evento para obtener información acerca de la manipulación cuando se complete.  Por ejemplo, puede usar el <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> propiedad para determinar la cantidad total de la posición de la manipulación ha cambiado.  
  
 Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input device changes position during a manipulation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.ManipulationDelta> evento aparece varias veces cuando el usuario arrastra dedos sobre la pantalla durante una manipulación y nuevo cuando se produce la inercia.  Puede usar el <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> propiedad para comprobar si el evento tiene lugar durante la inercia.  
  
 El elemento con el <xref:System.Windows.UIElement.ManipulationDelta> caso no se ve afectado en modo alguno cuando se produce el evento.  Debe proporcionar la lógica para el elemento que se pueden manipular.  El <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> y <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedades, que son de tipo <xref:System.Windows.Input.ManipulationDelta>, contienen datos acerca de cómo cambiar la posición de las manipulaciones y se interpretan como mover, cambiar el tamaño o girar un objeto.  Esa información se aplican al elemento que es para su manipulación.  
  
 Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> eventos. El ejemplo se utiliza la <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedad para mover, cambiar el tamaño y girar un <xref:System.Windows.Shapes.Rectangle>.  El ejemplo también se comprueba si el <xref:System.Windows.UIElement.ManipulationDelta> se ha producido un evento durante la inercia y si el rectángulo toca el borde de una ventana.  Si se cumplen esos casos, la aplicación detiene la manipulación para evitar que el rectángulo deje el área visible de la aplicación. Este ejemplo forma parte de un ejemplo más extenso en [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.ManipulationInertiaStarting> evento tiene lugar cuando el usuario levanta todos los dedos de la pantalla durante una manipulación. Por ejemplo, si un usuario "produce" un <xref:System.Windows.UIElement> a través de una superficie, el usuario tocará los <xref:System.Windows.UIElement> para comenzar la acción, mueva el dedo por la pantalla una distancia corta y, a continuación, suelte el <xref:System.Windows.UIElement>. Cuando el usuario suelta el elemento, comienza la inercia y <xref:System.Windows.UIElement.ManipulationInertiaStarting> se produce el evento.  El <xref:System.Windows.UIElement> continúa recibiendo <xref:System.Windows.UIElement.ManipulationDelta> eventos para indicar que se está produciendo inercia en el elemento.  
  
 Puede usar este evento para especificar el comportamiento de la inercia.  Por ejemplo, puede establecer el progreso inicial que se usa cuando la inercia comienza.  También puede especificar la cantidad de inercia estableciendo la desaceleración deseada o estableciendo la posición deseada.  Puede establecer estos valores para cada tipo de manipulación (traducción, expansión o giro) de forma independiente.  Para obtener más información, consulta <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 El siguiente ejemplo se muestra la <xref:System.Windows.UIElement.ManipulationInertiaStarting> controlador de eventos y establece la desaceleración deseada para la traducción, expansión y rotación que se usa durante la inercia. Este ejemplo forma parte de un ejemplo más extenso en [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.ManipulationStarted> evento tiene lugar después de la <xref:System.Windows.UIElement.ManipulationStarting> eventos.  Puede hacer lo siguiente con el <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Obtiene el elemento de la posición de la manipulación es relativo a mediante el <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> propiedad.  
  
-   Obtener el origen de la manipulación mediante la <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> propiedad.  
  
-   Cancele la manipulación mediante una llamada a la <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> método.  
  
 Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the manipulation processor is first created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.ManipulationStarting> evento se produce en un elemento que tiene el <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propiedad establecida en `true` cuando el usuario coloca un dedo en él. De forma predeterminada, los eventos de manipulación subsiguientes notifican la posición de la manipulación en relación con el elemento que tiene <xref:System.Windows.UIElement.IsManipulationEnabled%2A> establecido en `true`.  Puede especificar que la posición debe ser relativa a otro elemento estableciendo la <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> propiedad. Por ejemplo, puede realizar la manipulación en relación con el elemento primario del elemento.  
  
 También puede hacer lo siguiente en un controlador de eventos para <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Especifique si el usuario necesita más de un solo dedo para realizar las manipulaciones estableciendo la <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> propiedad.  
  
-   Especificar qué tipos de manipulación están habilitados estableciendo la <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> propiedad a un <xref:System.Windows.Input.ManipulationModes> enumeración.  
  
-   Especificar el centro de rotación de un solo dedo estableciendo la <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> propiedad.  
  
-   Cancele la manipulación mediante una llamada a la <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> método.  
  
 Para obtener más información acerca de las manipulaciones, vea el [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Para obtener un ejemplo de una aplicación que responde a manipulaciones, vea [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el controlador de eventos para el <xref:System.Windows.UIElement.ManipulationStarting> eventos y establece el <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> al elemento primario que recibe los eventos de manipulación de modo que las coordenadas de la manipulación en relación con el elemento primario.  Este ejemplo forma parte de un ejemplo más extenso en [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</param>
        <summary>Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update. Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cálculo de colocación del diseño en [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] está formada por un <xref:System.Windows.UIElement.Measure%2A> llamar y un <xref:System.Windows.UIElement.Arrange%2A> llamar. Durante la <xref:System.Windows.UIElement.Measure%2A> llamada, un elemento determina sus requisitos de tamaño mediante el uso de un `availableSize` entrada. Durante el <xref:System.Windows.UIElement.Arrange%2A> se finaliza la llamada, el tamaño del elemento.  
  
 `availableSize` puede ser cualquier número de cero a infinito. Elementos que participan en el diseño deben devolver como mínimo <xref:System.Windows.Size> que necesitan para un determinado `availableSize`.  
  
 Cuando primero se crea una instancia de un diseño, siempre recibe una <xref:System.Windows.UIElement.Measure%2A> llamar antes de <xref:System.Windows.UIElement.Arrange%2A>. Sin embargo, después de la primera fase de diseño, puede recibir un <xref:System.Windows.UIElement.Arrange%2A> llamar sin una <xref:System.Windows.UIElement.Measure%2A>; Esto puede ocurrir cuando una propiedad que solo afecta a <xref:System.Windows.UIElement.Arrange%2A> se modifica (como la alineación), o cuando el elemento primario recibe un <xref:System.Windows.UIElement.Arrange%2A> sin un <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> llamada invalidará automáticamente un <xref:System.Windows.UIElement.Arrange%2A> llamar.  
  
 Las actualizaciones de diseño se realizan de forma asincrónica, por ejemplo, que el subproceso principal no está esperando para cada cambio de diseño posible. Consultar un elemento a través de la comprobación de los valores de propiedad de código subyacente puede no reflejar inmediatamente los cambios en las propiedades que interactúan con las características de ajuste de tamaño ni el diseño (el <xref:System.Windows.FrameworkElement.Width%2A> propiedad, por ejemplo).  
  
> [!NOTE]
>  Actualizaciones del diseño se pueden forzar mediante el uso de la <xref:System.Windows.UIElement.UpdateLayout%2A> método. Sin embargo, al llamar a este método normalmente no es necesario y puede provocar un rendimiento bajo.  
  
 El sistema de diseño mantiene dos colas independientes de diseños no válidos, uno para <xref:System.Windows.UIElement.Measure%2A> y otro para <xref:System.Windows.UIElement.Arrange%2A>. La cola de diseño se ordena según el orden de los elementos en el árbol visual del elemento que realiza el diseño; son superiores del árbol de elementos en la parte superior de la cola para evitar diseños redundantes producidos por cambios repetidos en los elementos primarios. Las entradas duplicadas se quitan automáticamente de la cola y los elementos se quitan automáticamente de la cola si ya están validados por el diseño.  
  
 Al actualizar el diseño, la <xref:System.Windows.UIElement.Measure%2A> cola se vacía en primer lugar, seguido por el <xref:System.Windows.UIElement.Arrange%2A> cola. Un elemento en el <xref:System.Windows.UIElement.Arrange%2A> cola nunca se organizarán si hay un elemento en el <xref:System.Windows.UIElement.Measure%2A> cola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that the parent element can allocate for the child.</param>
        <summary>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</summary>
        <returns>The desired size of this element in layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es más habitual para derivar un elemento de <xref:System.Windows.FrameworkElement> en lugar de <xref:System.Windows.UIElement>. Si va a derivar de <xref:System.Windows.FrameworkElement>, tenga en cuenta que una invalidación de <xref:System.Windows.UIElement.MeasureCore%2A> en <xref:System.Windows.FrameworkElement> sellos el <xref:System.Windows.UIElement.MeasureCore%2A> método. Por lo tanto, sólo reemplazar <xref:System.Windows.UIElement.MeasureCore%2A> como un medio para modificar las características de medida del diseño si deriva de <xref:System.Windows.UIElement> a través de una herencia que no incluye <xref:System.Windows.FrameworkElement>. Esto puede suceder si está intentando crear su propia implementación en el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] nivel básico. En caso contrario, si va a derivar de <xref:System.Windows.FrameworkElement>, a continuación, la plantilla de implementación para el comportamiento de medida es el <xref:System.Windows.FrameworkElement> implementación de.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Debe llamar un elemento primario con elementos secundarios <xref:System.Windows.UIElement.Measure%2A> en cada elemento secundario, en caso contrario, estos elementos secundarios no o un tamaño organizan y eficazmente desaparecerá del diseño.  
  
   
  
## Examples  
 Una invalidación típica de <xref:System.Windows.UIElement.MeasureCore%2A> sigue este patrón aproximado (no es una colección integrada denominada `VisualChildren`; `VisualChildren` es un marcador de posición que representa la colección de elementos secundarios mantiene su elemento).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Debe llamar a <xref:System.Windows.UIElement.Measure%2A> en cada elemento secundario.  
  
-   Por lo general, la implementación debe almacenar en caché información de medida entre el <xref:System.Windows.UIElement.MeasureCore%2A> y <xref:System.Windows.UIElement.ArrangeCore%2A> llamadas a métodos en el mismo elemento.  
  
-   Al llamar a las implementaciones base de <xref:System.Windows.UIElement.MeasureCore%2A> no es necesario, pero podría ser adecuado si la implementación base proporciona una capacidad de distribución deseada.  
  
-   Las llamadas a <xref:System.Windows.UIElement.Measure%2A> en elemento secundario elementos deben pasar la misma `availableSize` como el elemento primario o un subconjunto del área, según el tipo de diseño del elemento primario admite. Por ejemplo, sería válido para quitar el área para un borde específico del elemento, relleno, una barra de desplazamiento o un control personalizado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Las implementaciones deben ser capaces de procesar un valor proporcionado para <paramref name="availableSize" /> que es infinito. Un valor infinito indica ninguna restricción solicitada y eficazmente aplaza la opción de medida al elemento primario, a través de recursiva que llama a medida.  Las implementaciones pueden considerar el valor proporcionado para <paramref name="availableSize" /> como una restricción de software. El elemento secundario podría especificar un tamaño mayor, incluso si otros aspectos del código de aplicación se pudo determinar el tamaño real actual del elemento primario. La solicitud de gran tamaño es una convención que indica que el elemento secundario está consultando si el elemento primario puede admitir contenido que se desplaza dentro de una región de contenido que se muestra.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseDown> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.UIElement.MouseDown> evento se genera a menudo junto con cualquiera <xref:System.Windows.UIElement.MouseLeftButtonDown> o <xref:System.Windows.UIElement.MouseRightButtonDown>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.UIElement.MouseLeftButtonDown> y <xref:System.Windows.UIElement.MouseRightButtonDown> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento llega a este elemento en la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.UIElement.MouseLeftButtonDown> o <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Algunos controles podrían tener inherentes a control de clases para los eventos de botón del mouse. El botón primario del mouse hacia abajo de evento es el caso más probable tener control en un control de clases. La clase de control a menudo marca subyacente <xref:System.Windows.Input.Mouse> eventos de clase como controlado. Una vez que el evento está marcado como controlado, no se generan normalmente otros controladores de instancia que están conectados a ese elemento. Cualquier otro controlador instancia o clase que se adjunta a los elementos de la dirección de propagación hacia la raíz en el árbol de la interfaz de usuario también normalmente no se producen.  
  
 Puede resolver el problema que se describe en la sección anterior importante y seguir recibiendo <xref:System.Windows.UIElement.MouseDown> eventos del botón primario del mouse hacia abajo de eventos en una clase derivada que tiene el control de clases, use cualquiera de estas soluciones:  
  
-   Adjuntar controladores para la <xref:System.Windows.UIElement.PreviewMouseDown> evento, que no está marcado como controlado por los controles. Observe que, dado que se trata de un evento de vista previa, la ruta comienza en la raíz y desciende hasta el control.  
  
-   Registrar un controlador en el control mediante procedimientos llamando <xref:System.Windows.UIElement.AddHandler%2A> y eligiendo la opción de firma que habilita los controladores escuchar eventos incluso si ya está marcados como controlado en los datos del evento enrutado.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer enters the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> es un objeto que usa la estrategia de enrutamiento de control de eventos directo. Los eventos enrutados directos no se generan a lo largo de una ruta; en su lugar, se administran en el mismo elemento que se generan. Sin embargo, permiten otros aspectos del comportamiento de los eventos enrutados, como los desencadenadores de eventos en los estilos.  
  
 Aunque <xref:System.Windows.UIElement.MouseEnter> literalmente le hace un seguimiento cuando el puntero del mouse entra en los límites de un elemento, aún más este evento indica que el <xref:System.Windows.UIElement.IsMouseOver%2A> valor de propiedad ha cambiado de `false` a `true` en este elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseEnter> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 A <xref:System.Windows.Controls.Button> (o cualquier <xref:System.Windows.Controls.Primitives.ButtonBase> clase derivada) tiene un control nativo para un <xref:System.Windows.UIElement.KeyDown> eventos cuando el botón tiene el foco y la tecla presionada es la barra espaciadora. El control nativo provoca el <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos con el botón como origen y también captura el mouse, incluso si no aparece el puntero del mouse mover. Como resultado de la captura del mouse, un <xref:System.Windows.UIElement.MouseEnter> evento también se genera con el botón como origen. En general, si un elemento captura el mouse, a continuación, <xref:System.Windows.UIElement.MouseEnter> se genera, así como <xref:System.Windows.UIElement.GotMouseCapture> y posiblemente otros eventos específicos del control.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseEnter%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer leaves the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> es un objeto que usa la estrategia de enrutamiento de control de eventos directo. Los eventos enrutados directos no se generan a lo largo de una ruta; en su lugar, se administran en el mismo elemento que se generan. Sin embargo, permiten otros aspectos del comportamiento de los eventos enrutados, como los desencadenadores de eventos en los estilos.  
  
 Aunque <xref:System.Windows.UIElement.MouseLeave> realiza seguimiento cuando el mouse sale de un elemento, este evento más literalmente informa de que el <xref:System.Windows.UIElement.IsMouseOver%2A> valor de propiedad ha cambiado de `true` a `false` en este elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseLeave> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseLeave%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.MouseLeftButtonDown> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados. Esto posiblemente incluye los eventos generado en el controlador de clase como <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Algunas clases de control podrían tener inherentes a control de clases para los eventos de botón del mouse. El botón primario del mouse hacia abajo de evento es el caso más probable tener control en un control de clases. La clase de control a menudo marca subyacente <xref:System.Windows.Input.Mouse> eventos de clase como controlado. Una vez que el evento está marcado como controlado, no se generan normalmente otros controladores de instancia que están conectados a ese elemento. Cualquier otro controlador instancia o clase que se adjunta a los elementos de la dirección de propagación hacia la raíz en el árbol de la interfaz de usuario también normalmente no se producen.  
  
 Puede resolver el problema que se describe en la sección anterior importante y seguir recibiendo <xref:System.Windows.UIElement.MouseLeftButtonDown> eventos del botón primario del mouse hacia abajo de eventos en una clase derivada que tiene el control de clases, use cualquiera de estas soluciones:  
  
-   Adjuntar controladores para la <xref:System.Windows.UIElement.PreviewMouseDown> evento, que no está marcado como controlado por los controles. Observe que, dado que se trata de un evento de vista previa, la ruta comienza en la raíz y desciende hasta el control.  
  
-   Registrar un controlador en el control mediante procedimientos llamando <xref:System.Windows.UIElement.AddHandler%2A> y eligiendo la opción de firma que habilita los controladores escuchar eventos incluso si ya está marcados como controlado en los datos del evento enrutado.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the left mouse button is released while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.MouseLeftButtonUp> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer moves while over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseMove> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.MouseRightButtonDown> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados. Esto posiblemente incluye los eventos generado en el controlador de clase como <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
 Eventos del botón secundario del mouse con frecuencia tienen control nativo en escenarios de aplicación. Por ejemplo, un botón secundario del mouse hacia abajo puede mostrar un menú contextual. Vea [información general de ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the right mouse button is released while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece seguir una ruta de propagación a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.MouseRightButtonUp> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any mouse button is released over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseUp> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.UIElement.MouseUp> evento se genera a menudo junto con cualquiera <xref:System.Windows.UIElement.MouseLeftButtonUp> o <xref:System.Windows.UIElement.MouseRightButtonUp>, que corresponden a una versión de uno de los dos botones del mouse estándar. <xref:System.Windows.UIElement.MouseLeftButtonUp> y <xref:System.Windows.UIElement.MouseRightButtonUp> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento llega a este elemento en la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.UIElement.MouseLeftButtonUp> o <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura del foco o del mouse tienen prioridad sobre dónde está el puntero del mouse; por lo tanto, si recibe el <xref:System.Windows.UIElement.MouseWheel> evento desde un elemento enfocado o capturado, el puntero del mouse podría estar realmente sobre otro elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.MouseWheel> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.MouseWheel> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnMouseWheel%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
        <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</summary>
        <returns>
          <see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asegúrese de que comprobar el valor devuelto de este método. Un valor devuelto de `false` pueden obtenerse si el recorrido se encuentra con una posición de tabulación definida por la composición de un control y la solicitud de recorrido no incluía el ajuste.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data to the access key event. The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</param>
        <summary>Provides class handling for when an access key that is meaningful for this element is invoked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No hay ningún evento AccessKey real en la <xref:System.Windows.UIElement> clase o en otro lugar, que puede generar o asociar controladores. En su lugar, el evento se origina a través de una clase de administrador dedicada, <xref:System.Windows.Input.AccessKeyManager>, que procesa posteriormente todas las entradas que se buscarán las teclas de acceso que se aplican a todo el modelo de entrada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La implementación predeterminada de este método en <see cref="T:System.Windows.UIElement" /> establece el foco a este elemento del teclado (mediante una llamada a <see cref="M:System.Windows.UIElement.Focus" />). Las implementaciones deben perpetuarse este comportamiento si fueran puede recibir el foco, porque es un comportamiento normal de escenarios de accesibilidad. Tenga en cuenta que la implementación base no hace nada con los datos de evento pasados y no se genera ningún otro evento; simplemente establece el foco.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">The child element that is being resized.</param>
        <summary>Supports layout behavior when a child element is resized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, este método no se llama por el código de aplicación. Se expone para que ese elemento derivado clases pueden realizar otras comprobaciones en su propio estado de diseño posiblemente no sea válido. Las clases también pudieron intentar optimizaciones para minimizar el tiempo de procesamiento para un paso de diseño según los cambios de tamaño a los elementos secundarios. Un ejemplo elemento clase derivada que implementa <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> es el <xref:System.Windows.Controls.Grid> control.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> método tiene la implementación predeterminada de llamar al método <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> por sí sola. Una implementación típica sería: realice la optimización de su propio elemento admite y, a continuación, normalmente llama a base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> de al menos una de las bifurcaciones de código (lo que indica el estado "sucias" por su propia medida lógica el almacenamiento en caché).  Solo se llama a este método en el procesamiento del diseño si fue el propio elemento secundario que se originaron los cambios de tamaño. En caso contrario, si el elemento primario inicia el <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pasa, según las reglas del sistema de diseño, el elemento primario está actualizando el diseño ya. El diseño de procesos del sistema de diseño en el orden a-elementos primarios y secundarios, por lo que no es necesario ningún volver al tamaño del elemento primario de las llamadas de diseño del elemento secundario.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</summary>
        <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>La implementación de este método suele ser llamar al constructor de un determinado <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementación y devolverlo como el valor devuelto.  Todos los <see cref="T:System.Windows.UIElement" /> las clases derivadas deben implementar este método para proporcionar sus propios específicos <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> las implementaciones de la [! Infraestructura de include[TLA#tla_winclient](~/includes/tlasharptla-WinClient-MD.MD)]. Para obtener más información sobre cómo implementar este patrón, vea <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</param>
        <summary>Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método, aunque sea virtual, tiene una implementación predeterminada que genera el evento.  
  
 Esto en * implementación del método está pensada para generar el evento y esta misma implementación del método se invoca internamente para generar el evento cuando la <xref:System.Windows.UIElement.IsFocused%2A> cambios de valor de propiedad. El <xref:System.Windows.UIElement.OnGotFocus%2A> implementación difiere de alguna otra [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] en * implementaciones, que solo proporcionan una manera cómoda para agregar el control de clases para ese evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A menos que tenga una necesidad imperiosa y no habitual para no provocar los eventos de foco, asegúrese de la implementación llama a la implementación base. En caso contrario, el <see cref="E:System.Windows.UIElement.GotFocus" /> evento no se produce durante las operaciones típicas del usuario que normalmente establecen el foco a este elemento. Si no desea que el elemento que se va a recibir el foco, puede evitar que el elemento que se va a recibir el foco estableciendo <see cref="P:System.Windows.UIElement.Focusable" /> a <see langword="false" />.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnGotTouchCapture%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnGotTouchCapture%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.GotTouchCapture> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnGotTouchCapture%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsKeyboardFocused%2A> cambios de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> evento se provoca con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> cambios de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> evento se provoca con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsMouseCaptured%2A> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsMouseCapturedChanged> evento se provoca con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.UIElement.IsMouseCapturedChanged> evento no es un evento enrutado; Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Este método virtual se produce cuando el valor de la <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> evento se provoca con esa misma instancia de datos de evento. Observe que el evento no es un evento enrutado; Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> evento se provoca con esa misma instancia de datos de evento. Tenga en cuenta que el <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsStylusCaptured%2A> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsStylusCapturedChanged> evento se provoca con esa misma instancia de datos de evento. Observe que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> evento se provoca con esa misma instancia de datos de evento. Observe que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método virtual se produce cuando el valor de la <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> cambia los valores de propiedad de dependencia. El método virtual se produce en primer lugar y puede manipular los datos del evento según sea necesario. La <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> evento se provoca con esa misma instancia de datos de evento. Observe que el evento no es un evento enrutado. Por lo tanto, no puede marcarlo como controlado en el controlador de clase.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pulsaciones de teclas se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en las pulsaciones de tecla, por ejemplo, los enlaces de entrada y de comando, pueden controlar la pulsación de tecla antes de que se expone como una pulsación de tecla general. Si estas características del sistema marcan el evento como controlado, a continuación, de entrada <xref:System.Windows.UIElement.OnKeyDown%2A> no se invoca.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pulsaciones de teclas se controlan mediante un administrador de entrada dedicado. Otras características de programación que se basan en las pulsaciones de tecla, por ejemplo, los enlaces de entrada y de comando, pueden controlar la pulsación de tecla antes de que se expone como una pulsación de tecla general. Si estas características del sistema marcan el evento como controlado, a continuación, de entrada <xref:System.Windows.UIElement.OnKeyUp%2A> no se invoca.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</param>
        <summary>Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método, aunque sea virtual, tiene una implementación predeterminada que genera el evento.  
  
 Esto en * implementación del método está pensada para generar el evento y esta misma implementación del método se invoca internamente para generar el evento cuando la <xref:System.Windows.UIElement.IsFocused%2A> cambios de valor de propiedad. Esta implementación es distinto de alguna otra [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] en * implementaciones, que solo proporcionan una manera cómoda para agregar el control de clases para ese evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A menos que tenga una necesidad imperiosa y no habitual para no provocar los eventos de foco, asegúrese de la implementación llama a la implementación base. En caso contrario, el <see cref="E:System.Windows.UIElement.LostFocus" /> evento no se produce durante las operaciones típicas del usuario que normalmente establecen el foco a este elemento. Si no desea que el elemento que se va a recibir el foco, puede evitar que el elemento que se va a recibir el foco estableciendo <see cref="P:System.Windows.UIElement.Focusable" /> a <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnLostTouchCapture%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnLostTouchCapture%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.LostTouchCapture> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnLostTouchCapture%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> eventos. No olvide llamar el <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> método de la clase base para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationCompleted%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationCompleted%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationCompleted> eventos. No olvide llamar el <xref:System.Windows.UIElement.OnManipulationCompleted%2A> método de la clase base para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationDelta%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationDelta%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationDelta> eventos. No olvide llamar el <xref:System.Windows.UIElement.OnManipulationDelta%2A> método de la clase base para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationInertiaStarting> eventos. No olvide llamar el <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> método de la clase base para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationStarted%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationStarted%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationStarted> eventos. No olvide llamar el <xref:System.Windows.UIElement.OnManipulationStarted%2A> método de la clase base para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnManipulationStarting%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnManipulationStarting%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.ManipulationStarting> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnManipulationStarting%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de los botones del mouse también las controla un administrador de entrada dedicado. Otras características de programación que se basan en acciones de los botones del mouse, como entrada y enlaces de comando, pueden invocar controladores para la acción antes de que se expone como una acción de botón de mouse general. Si estos marca de características de sistema de entrada del <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.UIElement.OnMouseDown%2A> no se invoca.  
  
 Si usa este controlador de clases para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.UIElement.MouseLeftButtonDown> y <xref:System.Windows.UIElement.MouseRightButtonDown>. Uno de estos eventos se pueden generar en el elemento receptor cuando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se siguen provocando los eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si se controló el evento de control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que utilice explícitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` para adjuntar controladores. Controladores de clases también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.UIElement.OnMouseDown%2A>, son lo que implica que el control de clases tiene en cuenta para todas las acciones de presionar el botón del mouse posibles. Este comportamiento puede ser no deseado; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlado.  
  
 Cada uno de los eventos directos específicos de los botones también tiene una máquina * método; Tenga en cuenta si reemplazar estos controladores de clase específica de botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado, con una estrategia de enrutamiento directo. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (los que no se especifica `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado, con una estrategia de enrutamiento directo. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (los que no se especifica `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.MouseLeftButtonDown> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> es el evento subyacente que se enrutan de burbujas y cada uno de ellos <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.MouseLeftButtonDown>. Aunque puede marcar el <xref:System.Windows.UIElement.MouseLeftButtonDown> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para modificar el control de eventos para un estado de mouse específico. Si opta por llamar a la implementación base depende de su escenario. Error al llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases antecesoras que también esperan invocar <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Button> e invalide <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> en su clase derivada sin llamar a la implementación base; sin embargo, esta invalidación deshabilita la <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.MouseLeftButtonUp> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> es el evento subyacente que se enrutan de burbujas y cada uno de ellos <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.MouseLeftButtonUp>. Aunque puede marcar el <xref:System.Windows.UIElement.MouseLeftButtonUp> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.MouseRightButtonDown> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> es el evento subyacente que se enrutan de burbujas y cada uno de ellos <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.MouseRightButtonDown>. Aunque puede marcar el <xref:System.Windows.UIElement.MouseRightButtonDown> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para modificar el control de eventos para un estado de mouse específico. Si opta por llamar a la implementación base depende de su escenario. Error al llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases antecesoras que también esperan invocar <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Control> e invalide <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> en su clase derivada sin base que realiza la llamada; sin embargo, esta invalidación deshabilita los servicios de menú contextual en el control, que forman parte de la <xref:System.Windows.Controls.Control> comportamiento predeterminado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.MouseRightButtonUp> evento parece atravesar una ruta de propagación pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> es el evento subyacente que se enrutan de burbujas y cada uno de ellos <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.MouseRightButtonUp>. Aunque puede marcar el <xref:System.Windows.UIElement.MouseRightButtonUp> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de los botones del mouse también las controla un administrador de entrada dedicado. Otras características de programación que se basan en acciones de los botones del mouse, como entrada y enlaces de comando, pueden invocar controladores para la acción antes de que se expone como una acción de botón de mouse general. Si estos marca de características de sistema de entrada del <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.UIElement.OnMouseUp%2A> no se invoca.  
  
 Si usa este controlador de clases para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.UIElement.MouseLeftButtonUp> y <xref:System.Windows.UIElement.MouseRightButtonUp>. Uno de estos eventos puede producir en el elemento receptor cuando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se siguen provocando los eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si se controló el evento de control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que utilice explícitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` para adjuntar controladores. Controladores de clases también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.UIElement.OnMouseUp%2A>, son lo que implica que el control de clases tiene en cuenta para todos los posibles botón las acciones. Este comportamiento puede ser no deseado; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlado.  
  
 Cada uno de los eventos directos específicos de los botones también tiene una máquina * método; Tenga en cuenta si reemplazar estos controladores de clase específica de botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de los botones del mouse también las controla un administrador de entrada dedicado. Otras características de programación que se basan en acciones de los botones del mouse, como entrada y enlaces de comando, pueden invocar controladores para la acción antes de que se expone como una acción de botón de mouse general. Si estos marca de características de sistema de entrada del <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> no se invoca.  
  
 Si usa este controlador de clases para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> y <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Uno de estos eventos se pueden generar en el elemento receptor cuando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se siguen provocando los eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si se controló el evento de control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que utilice explícitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` para adjuntar controladores. Controladores de clases también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, son lo que implica que el control de clases tiene en cuenta para todas las acciones de presionar el botón del mouse posibles. Este comportamiento puede ser no deseado; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlado.  
  
 Cada uno de los eventos directos específicos de los botones también tiene una máquina * método; Tenga en cuenta si reemplazar estos controladores de clase específica de botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> es el evento subyacente que se enrutan de túnel y cada <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Aunque puede marcar el <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para modificar el control de eventos para un estado de mouse específico. Si opta por llamar a la implementación base depende de su escenario. Error al llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases antecesoras que también esperan invocar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Button> e invalide <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> en su clase derivada sin llamar a la implementación base; sin embargo, esta invalidación deshabilita la <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> es el evento subyacente que se enrutan de túnel y cada <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Aunque puede marcar el <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> es el evento subyacente que se enrutan de túnel y cada <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.MouseRightButtonDown>. Aunque puede marcar el <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Como alternativa, puede invalidar este método para modificar el control de eventos para un estado de mouse específico. Si opta por llamar a la implementación base depende de su escenario. Error al llamar a la base deshabilita el control de entrada predeterminado para ese evento del mouse en las clases antecesoras que también esperan invocar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Por ejemplo, puede derivar de <xref:System.Windows.Controls.Control> e invalide <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> en su clase derivada sin base que realiza la llamada; sin embargo, esta invalidación deshabilita los servicios de menú contextual en el control, que forman parte de la <xref:System.Windows.Controls.Control> comportamiento predeterminado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento parece atravesar una ruta de tunelización pero realmente se desplaza de forma indirecta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> es el evento subyacente que se enrutan de túnel y cada <xref:System.Windows.UIElement> a lo largo del evento ruta usa el control idéntico para generar el evento enrutado directo <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Aunque puede marcar el <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento como controlado para los fines de este elemento, el estado controlado no perpetuarse a otros elementos a lo largo de la ruta del evento. Sin embargo, puede marcar el evento como controlado para evitar que los controladores de instancia general (aquellos que no especificó `handledEventsToo`) desde que se va a invocar.  
  
 La implementación predeterminada de mouse general control de eventos en <xref:System.Windows.UIElement> escucha <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> y lo convierte en un evento local adecuado. Si desea invalidar esta lógica, debe crear una clase derivada. En el constructor estático de la clase derivada, registra un controlador de clase alternativa para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. No se puede cambiar el mouse (ratón) comportamiento de <xref:System.Windows.UIElement> invalidando <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acciones de los botones del mouse también las controla un administrador de entrada dedicado. Otras características de programación que se basan en acciones de los botones del mouse, como entrada y enlaces de comando, pueden invocar controladores para la acción antes de que se expone como una acción de botón de mouse general. Si estos marca de características de sistema de entrada del <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento como controlado, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> no se invoca.  
  
 Si usa este controlador de clases para marcar el evento como controlado, podría afectar los siguientes eventos: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> y <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Uno de estos eventos puede producir en el elemento receptor cuando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> se recibe.  
  
 Si marca este evento como controlado en el control de clases, se siguen provocando los eventos secundarios; Sin embargo, pasan el estado controlado en los datos del evento. Si se controló el evento de control de clases, no se invocan controladores de instancia para los eventos secundarios a menos que utilice explícitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` para adjuntar controladores. Controladores de clases también no se invocan a menos que se registraron los controladores de clases con el <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Controlando <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, son lo que implica que el control de clases tiene en cuenta para todos los posibles botón las acciones. Este comportamiento puede ser no deseado; Por lo tanto, tenga cuidado cuando use este método virtual para marcar eventos como controlado.  
  
 Cada uno de los eventos directos específicos de los botones también tiene una máquina * método; Tenga en cuenta si reemplazar estos controladores de clase específica de botón puede ser más adecuado.  
  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado. Otro escenario que es específicamente para los eventos de vista previa es marcarlos como administrados para que no se invocan controladores de clase de propagación coincidentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.PreviewTouchDown> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.PreviewTouchMove> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.PreviewTouchUp> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada la <xref:System.Windows.UIElement> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una posible implementación para una clase derivada de panel.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> método se puede invalidar para agregar más elementos gráficos (no previamente definidos en un árbol lógico) a un elemento representado, como efectos o adornos. Un <see cref="T:System.Windows.Media.DrawingContext" /> objeto se pasa como argumento, que proporciona métodos para dibujar formas, texto, imágenes o vídeos.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</param>
        <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Un elemento de nivel de marco WPF típico utiliza la implementación de invalidación de <xref:System.Windows.FrameworkElement>. El <xref:System.Windows.FrameworkElement> implementación invalida la <xref:System.Windows.FrameworkElement.Width%2A> y <xref:System.Windows.FrameworkElement.Height%2A> propiedades e identificadores de los fundamentos de rehacer el diseño. Reemplazar <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> en el <xref:System.Windows.UIElement> nivel implica que su implementación de elemento no usa deliberadamente la implementación de nivel de marco WPF, y, por tanto, el elemento debe administrar la lógica de diseño más fácilmente, normalmente escribiendo un sistema de diseño de reemplazo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 El propósito de este método es similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (los que no se especifica `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación. Puede llamar a base antes o después de su tratamiento especial, dependiendo de los requisitos.  
  
 El propósito de este método es similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. Marcar el evento como controlado sigue siendo útil para evitar que los controladores de instancias típicos (los que no se especifica `handledEventsToo`) desde que se va a invocar.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
        <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Dado que una clase intermedia en la herencia podría implementar este método, se recomienda que llame a la implementación base en su implementación.  
  
 El propósito de este método es similar a la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: este método proporciona los medios para controlar el evento correspondiente de las clases derivadas mediante el establecimiento de un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se puede generar un evento enrutado por un elemento secundario, que no es necesariamente el elemento que va a invocar los controladores. Por lo tanto, la implementación debe examinar las propiedades del origen de datos de eventos. No debe intentar reraise () el evento en la mayoría de los casos.  
  
 Mediante la invalidación de este método o registrando los controladores de clase <xref:System.Windows.EventManager.RegisterClassHandler%2A>, las clases derivadas de <xref:System.Windows.UIElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta del evento. Es un escenario donde el control de clases es adecuado manipular los datos del evento y marcar el evento enrutado como controlado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnTouchDown%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnTouchDown%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.TouchDown> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnTouchDown%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnTouchEnter%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnTouchEnter%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.TouchEnter> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnTouchEnter%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnTouchLeave%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnTouchLeave%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.TouchLeave> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnTouchLeave%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnTouchMove%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnTouchMove%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.TouchMove> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnTouchMove%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.OnTouchUp%2A> método no tiene ninguna implementación predeterminada. Invalidar <xref:System.Windows.UIElement.OnTouchUp%2A> en una clase derivada para controlar la <xref:System.Windows.UIElement.TouchUp> eventos. No olvide llamar a la clase base <xref:System.Windows.UIElement.OnTouchUp%2A> método para que las clases base reciban el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">The previous parent. This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</param>
        <summary>Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Si invalida este método, llame siempre a la implementación base. La implementación base predeterminada realiza un mantenimiento interno del estado de propiedad heredado en orden inverso. No puede llamar a la implementación base, se invalidará este estado.  Este método invalida <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> y <see cref="T:System.Windows.Window" /> también invalidar el <see cref="T:System.Windows.UIElement" /> implementación de <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, y <see cref="T:System.Windows.Window" /> sella.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.</summary>
        <value>Factor de opacidad. La opacidad predeterminada es 1.0. Se esperaban valores entre 0.0 y 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor 1,0 predeterminado es el valor predeterminado proporcionado por los metadatos iniciales de esta propiedad de dependencia en el <xref:System.Windows.UIElement> clase. Otras clases derivadas potencialmente pueden cambiar este valor predeterminado mediante la invalidación de los metadatos desde dentro de su constructor de clase.  
  
 El valor de <xref:System.Windows.UIElement.Opacity%2A> no se aplicará al diseño real a menos que el elemento también es visible (<xref:System.Windows.UIElement.IsVisible%2A> es `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> se aplica desde los elementos primarios en profundidad del árbol de elementos a los elementos secundarios, pero los efectos visibles de la configuración no se indica en el valor de propiedad de los elementos secundarios individuales de opacidad anidado. Por ejemplo, si una lista tiene una opacidad del 50% (0,5) y uno de sus elementos de lista tiene su propia opacidad establecida en 20% (0,2), la opacidad visible neta para ese elemento de lista se representará como si fuera 10% (0,1), pero el valor de propiedad del elemento de lista <xref:System.Windows.UIElement.Opacity%2A> propiedad todavía sería  0,2 cuando realiza una consulta.  
  
 Aunque la opacidad declarada o evaluada es 0, un elemento todavía participa en los comandos y eventos de entrada y puede recibir el foco. Este aspecto puede ser útil, por ejemplo puede utilizar un objeto de opacidad cero (por ejemplo, una forma) para enmascarar los objetos subyacentes con elementos transparentes. El objeto de opacidad cero, a continuación, puede controlar todo el evento de entrada de procesamiento de un área subyacente. Sin embargo, el `Background` o `Fill` del objeto o la forma debe establecerse en un valor, incluso si es <xref:System.Windows.Media.Brushes.Transparent%2A>, en caso contrario, la prueba de posicionamiento no está habilitada y no se recibe ningún evento.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.OpacityProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.</summary>
        <value>Pincel que se usará para la máscara de opacidad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad utiliza solo lo que es el valor de canal alfa para suministrado <xref:System.Windows.Media.Brush>. Los otros canales de la <xref:System.Windows.Media.Brush>de representar el contenido (rojo, verde o azul) se omiten.  
  
 Más típico <xref:System.Windows.Media.Brush> para este propósito es un <xref:System.Windows.Media.ImageBrush>, que puede utilizarse para una variedad de técnicas como una viñeta de máscara de foto. Pero los define <xref:System.Windows.Media.Brush> (como <xref:System.Windows.Media.LinearGradientBrush>) se puede utilizar.  
  
 En [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], este valor de propiedad puede usar una sintaxis insertada específica de cada implementación de la <xref:System.Windows.Media.Brush> clase abstracta. Para obtener más información, consulte [pintar con colores sólidos y degradados información general sobre](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 El ejemplo de marcado siguiente se muestra un <xref:System.Windows.Media.ImageBrush> máscara de opacidad aplicada a otra <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that uniquely identifies this element.</summary>
        <value>El identificador único para este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> identifica de forma exclusiva cada elemento. Un elemento mantiene el mismo <xref:System.Windows.UIElement.PersistId%2A> cada vez que el mismo [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] se carga (incluidas las representaciones binarias). Este identificador se usa para los requisitos de carga, análisis y serialización internos. No está pensado para utilizarse en el código de aplicación.  
  
 Esta propiedad no tiene ninguna relación con la <xref:System.Object.GetHashCode%2A> resultado para cualquier instancia dada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">The direction of the requested focus traversal.</param>
        <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
        <returns>The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada de este método en esta clase está incompleta y siempre devuelve `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the drag target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewDragEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewDragEnter> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.DragEnter>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewDragLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewDragLeave> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.DragLeave>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewDragOver> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewDragOver> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.DragOver>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewDragOver%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input system reports an underlying drop event with this element as the drop target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewDrop> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewDrop> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.Drop>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewDrop%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a drag-and-drop operation is started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewGiveFeedback> evento permite al origen de un evento de arrastre para modificar la apariencia del puntero del mouse (ratón), con el fin de proporcionar información visual al usuario durante una operación de arrastrar y colocar.  
  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewGiveFeedback> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewGiveFeedback> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the keyboard is focused on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que este evento usa enrutamiento de túnel, el elemento que tiene el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que tiene el foco.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is pressed while focus is on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de comandos y el texto. El <xref:System.Windows.UIElement.KeyDown> evento es un evento de entrada de texto de nivel inferior que podría no funcionar como se esperaba en ciertos controles. Esto es debido a que algunos controles tienen la composición del control o control de clases que proporciona una versión de un nivel más alto del texto de entrada de control y eventos relacionados.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewKeyDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewKeyDown> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.KeyDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is released while focus is on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de claves interactúa con otras características de la plataforma, como la composición de comandos y el texto. El <xref:System.Windows.UIElement.KeyUp> evento es un evento de entrada de texto de nivel inferior que podría no funcionar como se esperaba en ciertos controles. Esto es debido a que algunos controles tienen la composición del control o control de clases que proporciona una versión de un nivel más alto del texto de entrada de control y eventos relacionados. Para obtener más información, consulte la documentación de los controles individuales.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewKeyUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewKeyUp> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.KeyUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the keyboard is no longer focused on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que este evento usa enrutamiento de túnel, el elemento que perdió el foco puede ser un elemento secundario en lugar del elemento que está asociado actualmente el controlador de eventos. Compruebe el <xref:System.Windows.RoutedEventArgs.Source%2A> en los datos del evento para determinar el elemento real que perdió el foco.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> eventos están conectados a subyacente <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewMouseDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewMouseDown> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.UIElement.PreviewMouseDown> evento se genera a menudo junto con cualquiera <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> y <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando la <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento llega a este elemento en la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.MouseDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece siguen una ruta túnel a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados. Esto posiblemente incluye los eventos generado en el controlador de clase como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the left mouse button is released while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece siguen una ruta túnel a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento produce cuando el puntero del mouse entra por primera vez en los límites del elemento, y también cuando el puntero del mouse se desplaza mientras permanece dentro de los límites del elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewMouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewMouseMove> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.MouseMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece siguen una ruta túnel a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados. Esto posiblemente incluye los eventos generado en el controlador de clase como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the right mouse button is released while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque esto parece siguen una ruta túnel a través de un árbol de elementos, en realidad es un evento enrutado directo que se genera y se vuelven a generar a lo largo del árbol de elementos cada uno <xref:System.Windows.UIElement>.  
  
 Este evento es uno de los diversos eventos relacionados que informa de los detalles del botón del mouse de un subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que es un evento adjunto que es procesado por cada elemento en una ruta del evento.  
  
 Los datos del evento de este evento exponen los datos del evento de subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Si ese evento está marcado como controlado en la ruta del evento, aún se producen los eventos específicos del botón del mouse; Sin embargo, los controladores de los eventos específicos del botón del mouse se deben agregar llamando explícitamente a <xref:System.Windows.UIElement.AddHandler%2A>, con la opción para controlar los eventos que ya se ha marcado como controlado, para ser conforme a los agentes de escucha al evento. Si marca <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> controlado, está marcando fundamentalmente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> el sistema controla todos los demás agentes de escucha a lo largo de la ruta y en todos los eventos relacionados.  
  
 Conceptualmente, considere este evento (y otros eventos del botón del mouse en <xref:System.Windows.UIElement>) como un mouse "servicio" (con la definición de servicio proporcionada por la <xref:System.Windows.Input.Mouse> clase). El evento agrega la comodidad de no se necesita comprobar el estado del botón del mouse (izquierda, arriba y abajo) de los eventos de mouse originales en los datos del evento. Para escenarios más avanzados, como la comprobación de los Estados de botones no estándar, deberá usar el [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] en el <xref:System.Windows.Input.Mouse> clase en lugar de aquellos en <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewMouseUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewMouseUp> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El <xref:System.Windows.UIElement.PreviewMouseUp> evento se genera a menudo junto con cualquiera <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, que corresponde a una pulsación de uno de los dos botones del mouse estándar. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> y <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> también son eventos enrutados, pero son eventos enrutados directos y se genera el evento específicos de los botones adecuado cuando la <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento llega a este elemento en la ruta del evento. Vea la sección Comentarios para <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.MouseUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura del foco o del mouse tienen prioridad sobre dónde está el puntero del mouse; por lo tanto, si recibe este evento desde un elemento enfocado o capturado, el puntero del mouse podría estar realmente sobre otro elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewMouseMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewMouseMove> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewQueryContinueDrag> evento permite al origen de arrastre declarar si la operación de arrastrar y colocar tiene que cancelarse.  
  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewQueryContinueDrag> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewQueryContinueDrag> eventos están conectados a subyacente <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusButtonDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusButtonDown> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) y [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusButtonUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusButtonUp> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus touches the digitizer while it is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusDown> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus moves over an element without actually touching the digitizer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusInAirMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusInAirMove> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusInRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusInRange> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusMove> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus is too far from the digitizer to be detected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusOutOfRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusOutOfRange> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user performs one of several stylus gestures.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de los gestos de lápiz, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusSystemGesture> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusSystemGesture> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewStylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewStylusDown> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.StylusUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element gets text in a device-independent manner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.PreviewTextInput> evento permite que un componente o una aplicación para realizar escuchas de entrada de texto de una manera independiente del dispositivo. El teclado es el medio principal de <xref:System.Windows.UIElement.PreviewTextInput>; pero también pueden generar la voz, escritura a mano y otros dispositivos de entrada <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 Debido a combinaciones de teclas, ya sea en los teclados predeterminados o a través de los editores de métodos de entrada, varios eventos de tecla pueden producir un solo evento de entrada de texto.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.PreviewTextInput> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.PreviewTextInput> eventos están conectados a subyacente <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.TextInput>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewTextInput%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger touches the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Windows.UIElement.PreviewTouchDown> y <xref:System.Windows.UIElement.TouchDown> eventos no se producen hasta que un dedo toca la pantalla y se mueve. Si se presiona un dedo en la pantalla y manteniendo sin moverlo hace que la acción de presionar y mantener el comportamiento de un <xref:System.Windows.Input.Stylus>. El comportamiento de presionar y mantener presionado es equivalente a un clic del mouse.  
  
 Para hacer que el <xref:System.Windows.UIElement.PreviewTouchDown> y <xref:System.Windows.UIElement.TouchDown> eventos que se produzca cuando un dedo toca la pantalla, establezca la <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propiedad adjunta `false` para este elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.TouchDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.TouchMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger is raised off of the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Estrategia de enrutamiento|Protocolo de túnel|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de propagación correspondiente es <xref:System.Windows.UIElement.TouchUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.UIElement.QueryContinueDrag> evento permite al origen de arrastre determinar si la operación de arrastrar y colocar tiene que cancelarse.  
  
 Este evento crea un alias para la <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.QueryContinueDrag> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.QueryContinueDrag> eventos están conectados a subyacente <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.QueryCursor> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.QueryCursor> eventos están conectados a subyacente <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 El cursor que se va a la que hace referencia a este nombre de evento no es necesariamente el cursor de texto (a veces conocido como el punto de inserción). En su lugar, el cursor en este contexto es el objeto que declara la presentación gráfica en la pantalla relacionados con varios posibles dispositivos relacionados con la entrada o conceptos de programación de Windows. Ese objeto se representa mediante la <xref:System.Windows.Input.Cursor> clase en WPF. El sistema de entrada de WPF permite cambiar este cursor cuando representa la posición en la pantalla del puntero del mouse. Puede usar valores predefinidos de la <xref:System.Windows.Input.Cursors> enumeración, o bien puede declarar un cursor personalizado como un archivo de imagen.  
  
 Realizar escuchas para el <xref:System.Windows.UIElement.QueryCursor> evento no es una técnica eficaz para la administración del cursor. En su lugar, cada elemento debe definir su propio comportamiento de cursor con <xref:System.Windows.FrameworkContentElement.Cursor%2A> y <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Solo debe confiar en <xref:System.Windows.UIElement.QueryCursor> si no usa los elementos de base de nivel de marco WPF o en extraordinarios circunstancias que definir el comportamiento del cursor en una base por cada elemento no satisfagan sus necesidades. Para obtener más información sobre cómo implementar el comportamiento del cursor en respuesta a <xref:System.Windows.UIElement.QueryCursor>, consulte <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   No hay ningún evento de tunelización correspondiente definido.  
  
-   Invalidar <xref:System.Windows.UIElement.OnQueryCursor%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</param>
        <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `e` parámetro se escribe como el tipo base común para todos los datos del evento enrutado; sin embargo, se deben proporcionar los datos del evento como el tipo de datos de evento más específico que está disponible para el evento que se está generando, porque <xref:System.Windows.RoutedEventArgs> contienen las clases derivadas el propiedades de datos concretas que están diseñados para el evento específico cuando se genera.  
  
 <xref:System.Windows.RoutedEventArgs> no es simplemente las propiedades de estado para el evento; También identifica qué evento enrutado que se va a generar. Este patrón cuando se genera el evento y los datos del evento enrutado ambos diferencian [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] eventos y clases de datos, que normalmente sólo contienen las propiedades que están relacionados con el evento.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea datos de eventos, anexa el identificador de evento a los datos y, a continuación, usa la instancia de datos de evento para provocar un evento enrutado personalizado.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all captured touch devices from this element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the mouse capture, if this element held the capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento no tiene la captura, llamar a este método no tiene ningún efecto. Considere la posibilidad de comprobar el valor de <xref:System.Windows.UIElement.IsMouseCaptured%2A> antes de llamar a este método.  
  
   
  
## Examples  
 El ejemplo siguiente es el paralelo en el ejemplo presentado para <xref:System.Windows.UIElement.CaptureMouse%2A>: lo controla el botón del mouse hasta la captura del mouse de versión y volver a habilitar mueve el mouse.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the stylus device capture, if this element held the capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento no tiene la captura, llamar a este método no tiene ningún efecto. Considere la posibilidad de comprobar el valor de <xref:System.Windows.UIElement.IsStylusCaptured%2A> antes de llamar a este método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">The device to release.</param>
        <summary>Attempts to release the specified touch device from this element.</summary>
        <returns>
          <see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
        <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
        <summary>Removes the specified routed event handler from this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El escenario más común para usar este [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] es al implementar la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "contenedor" que está asociado a un evento enrutado personalizado, específicamente al implementar la lógica de "quitar" para los controladores de la [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] nivel. El ejemplo que sigue a esta sección Comentarios muestra este escenario.  
  
 Llamar a este método no tiene ningún efecto si se ha registrado ningún controlador con criterios que coincidan con los parámetros de entrada para la llamada al método.  
  
 Si hay más de un controlador asociado que coincide con los criterios, solo el primer controlador en caso de que se quita el almacén de controladores. Este comportamiento es coherente con [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamiento de la `-=` operador.  
  
 Ni `routedEvent` ni `handler` puede ser `null`. Se intenta proporcionar cualquier valor como `null` , se producirá una excepción.  
  
 Este método omite la `handledEventsToo` agrega información de parámetros, que se proporciona si el controlador fue el primero con el <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma que habilita el control de eventos ya controlados. Se quita cualquier tipo de controlador.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Windows.UIElement.RemoveHandler%2A> como parte de una definición de contenedor de eventos.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets (or sets) the final render size of this element.</summary>
        <value>Tamaño presentado para este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  No intente establecer esta propiedad, ya sea en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] o en el código, si utiliza el sistema de diseño de nivel de marco WPF. Casi todos los escenarios de aplicación típica utilizará este sistema de diseño. El sistema de diseño no respeta los tamaños establecidos en el <xref:System.Windows.UIElement.RenderSize%2A> propiedad directamente. El <xref:System.Windows.UIElement.RenderSize%2A> propiedad se declara como grabable solo para habilitar cierto casos que evitan deliberadamente los protocolos de diseño típico, como la compatibilidad con el protocolo de puente de nivel de núcleo WPF el <xref:System.Windows.Documents.Adorner> clase.  
  
 Esta propiedad puede usarse para comprobar el tamaño de representación aplicable en el sistema de diseño como invalida <xref:System.Windows.UIElement.OnRender%2A> o <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Un escenario muy común lleva a cabo la <xref:System.Windows.FrameworkElement.SizeChanged> invalidar el evento con el controlador de clase o la <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> eventos.  
  
## Examples  
 En el ejemplo siguiente se muestra cómo un adorno personalizado usa el <xref:System.Windows.UIElement.RenderSize%2A> valor con el fin de crear y cambiar el tamaño del gráfico de rectángulo que define el adorno, como parte de su <xref:System.Windows.UIElement.OnRender%2A> implementación.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.</summary>
        <value>Describe los detalles de la transformación de representación deseada. De manera predeterminada, es <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una transformación de representación no regenerar el tamaño de presentación o presentar información de tamaño. Representar transformaciones normalmente están pensadas para animar o aplicar un efecto temporal a un elemento. Por ejemplo, puede ampliar el elemento cuando centrado o colocado el puntero sobre o podría vibración en carga para dibujar el ojo en esa parte de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.  This is a dependency property.</summary>
        <value>El valor que declara la transformación de representación. El valor predeterminado es una <see cref="T:System.Windows.Point" /> con las coordenadas (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> tiene un uso de algún modo no estándar de la <xref:System.Windows.Point> estructura valor, en el que el <xref:System.Windows.Point> no representa una ubicación absoluta en un sistema de coordenadas. En su lugar, los valores entre 0 y 1 se interpretan como un factor para el intervalo del elemento actual en cada eje x, y. Por ejemplo, (0,5.0,5) hace que la transformación de representación se centre en el elemento o (1,1), debe colocar la transformación de representación en la parte inferior derecha del elemento. <xref:System.Double.NaN> no es un valor aceptado.  
  
 Los valores superiores a 0 y 1 también se aceptan y producirán más efectos de transformación no convencionales. Por ejemplo, si establece <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5,5) y, a continuación, aplique un <xref:System.Windows.Media.RotateTransform>, el punto de giro estará completamente fuera de los límites del propio elemento. La transformación girará el elemento alrededor de un círculo grande que se origina más allá de la parte inferior derecha. El origen puede estar en algún lugar dentro de su elemento primario y posiblemente podría estar fuera del marco o vista. Valores de punto negativos son similares, estos irá más allá de la parte superior izquierda de límites.  
  
 Representar transformaciones no afectan al diseño y se utiliza normalmente para animar o aplicar un efecto temporal a un elemento.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *xOrigin*  
 El factor de origen horizontal. Esto normalmente se proporciona como un valor entre 0 y 1. Vea la sección Comentarios.  
  
 *yOrigin*  
 El factor de origen vertical. Esto normalmente se proporciona como un valor entre 0 y 1. Vea la sección Comentarios.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se crea elementos de código, se aplica un <xref:System.Windows.UIElement.RenderTransformOrigin%2A>y, a continuación, se aplica un <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto será `true` si <xref:System.Windows.UIElement.CommandBindings%2A> se establece localmente.  
  
 Esto `ShouldSerialize` se proporciona el método porque el <xref:System.Windows.UIElement.CommandBindings%2A> propiedad no tiene un valor predeterminado simple. Este método indica si la propiedad ha cambiado respecto de su valor predeterminado. Normalmente se invoca este método si se desarrolla un diseñador o desarrollar su propio control que incorpore un <xref:System.Windows.UIElement>.  
  
 Para obtener más información, consulte [definir valores predeterminados con los métodos ShouldSerialize y Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto será `true` si <xref:System.Windows.UIElement.InputBindings%2A> se establece localmente.  
  
 Esto `ShouldSerialize` se proporciona el método porque el <xref:System.Windows.UIElement.InputBindings%2A> propiedad no tiene un valor predeterminado simple. Este método indica si la propiedad ha cambiado respecto de su valor predeterminado. Normalmente se invoca este método si se desarrolla un diseñador o desarrollar su propio control que incorpore un <xref:System.Windows.UIElement>.  
  
 Para obtener más información, consulte [definir valores predeterminados con los métodos ShouldSerialize y Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.</summary>
        <value>
          <see langword="true" /> Si el elemento debe representarse de acuerdo con los píxeles del dispositivo; en caso contrario, <see langword="false" />. El valor predeterminado declarado en <see cref="T:System.Windows.UIElement" /> es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer esta propiedad en `true` en el elemento raíz para habilitar píxel de ajuste de representación a lo largo de la interfaz de usuario. Para dispositivos que funcionan con más de 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], píxel ajustar representación puede minimizar los artefactos visuales del suavizado en la proximidad de líneas sólidas sola unidad.  
  
 Cuando hereda <xref:System.Windows.FrameworkElement> o posibles las clases derivadas, <xref:System.Windows.FrameworkElement> invalida los metadatos de esta propiedad de dependencia para establecer el <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> propiedad de metadatos para `true`. ¿Qué se obtiene es que debe especificar solo el elemento más externo en un subárbol <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> como `true`, y, a continuación, va a notificar todos los elementos secundarios de ese subárbol <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> como `true` y tendrá el <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> efecto visual posible.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusButtonDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusButtonDown> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusButtonDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusButtonUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusButtonUp> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusButtonUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus touches the digitizer while the stylus is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusDown> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusDown> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus enters the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> es un objeto que usa la estrategia de enrutamiento de control de eventos directo. Los eventos enrutados directos no se generan a lo largo de una ruta; en su lugar, se administran en el mismo elemento que se generan. Sin embargo, permiten otros aspectos del comportamiento de los eventos enrutados, como los desencadenadores de eventos en los estilos.  
  
 Aunque <xref:System.Windows.UIElement.StylusEnter> literalmente le hace un seguimiento cuando el lápiz entra en los límites de un elemento, aún más este evento indica que el <xref:System.Windows.UIElement.IsStylusOver%2A> valor de propiedad ha cambiado de `false` a `true` en este elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusEnter> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusEnter> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusEnter%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus moves over an element without actually touching the digitizer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusInAirMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusInAirMove> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusInAirMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusInRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusInRange> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusInRange%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus leaves the bounds of the element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> es un objeto que usa la estrategia de enrutamiento de control de eventos directo. Los eventos enrutados directos no se generan a lo largo de una ruta; en su lugar, se administran en el mismo elemento que se generan. Sin embargo, permiten otros aspectos del comportamiento de los eventos enrutados, como los desencadenadores de eventos en los estilos.  
  
 Aunque <xref:System.Windows.UIElement.StylusLeave> realiza seguimiento cuando el lápiz sale de los límites de un elemento, este evento más literalmente informa de que el <xref:System.Windows.UIElement.IsStylusOver%2A> valor de propiedad ha cambiado de `true` a `false` en este elemento.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusLeave> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusLeave> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusLeave%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusMove> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusMove> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusOutOfRange> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusOutOfRange> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of all stylus plug-in (customization) objects associated with this element.</summary>
        <value>La colección de complementos de lápiz, como una colección especializada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un ejemplo de un control que rellena esta colección es <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> Agrega el <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> como un elemento de recopilación, lo que permite el <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> para interactuar con la entrada de lápiz y genera una representación única en respuesta a eventos controlados por el lápiz.  
  
 Para obtener información acerca de cómo crear complementos personalizados que puede recibir e interpretar la entrada de lápiz, consulte [interceptando entrada del lápiz óptico](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instancia y lo agrega a la <xref:System.Windows.UIElement.StylusPlugIns%2A> colección para una control de control de tinta personalizados.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user performs one of several stylus gestures.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información acerca de los gestos de lápiz, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusSystemGesture> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusSystemGesture> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user raises the stylus off the digitizer while it is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.StylusUp> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.StylusUp> eventos están conectados a subyacente <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
 Entrada táctil, mouse y entrada de lápiz existen en una relación determinada. Para obtener más información, consulte [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnStylusUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this element gets text in a device-independent manner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Este evento ya podría marcarse como controlado por las implementaciones internas de controles compuestos. Vea la sección comentarios a continuación.  
  
 El <xref:System.Windows.UIElement.TextInput> eventos ya podrán estar marcado como controlado por las implementaciones internas de controles compuestos. Por ejemplo, un <xref:System.Windows.Controls.TextBox> es un control compuesto donde el <xref:System.Windows.UIElement.TextInput> eventos ya está marcado como controlado; en su composición. Controles de hacen esto, dado que el control debe interpretar algunos tipos de entrada, como las teclas de flecha, que tienen un significado especial para ese control. Si usa <xref:System.Windows.UIElement.PreviewTextInput> como el evento donde adjunta los controladores para la entrada de texto, puede obtener mejores resultados. Esta técnica, evita la mayoría de los casos donde la composición de controles ya ha marcado este evento como controlado y evita que el controlador de recibir el evento a lo largo de la ruta del evento.  
  
 El <xref:System.Windows.UIElement.TextInput> evento permite que un componente o una aplicación para realizar escuchas de entrada de texto de una manera independiente del dispositivo. El teclado es el medio principal de <xref:System.Windows.UIElement.TextInput>, pero también pueden generar la voz, escritura a mano y otros dispositivos de entrada <xref:System.Windows.UIElement.TextInput>.  
  
 Debido a combinaciones de teclas, ya sea en los teclados predeterminados o a través de los editores de métodos de entrada, varios eventos claves podrían provocar un solo evento de entrada de texto.  
  
 Este evento crea un alias para la <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> adjunta eventos para esta clase, por lo que <xref:System.Windows.UIElement.TextInput> forma parte lista los miembros de la clase cuando <xref:System.Windows.UIElement> se hereda como elemento base. Controladores de eventos que están conectados a la <xref:System.Windows.UIElement.TextInput> eventos están conectados a subyacente <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento adjunto y reciben la misma instancia de datos de evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TextInputEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnTextInput%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger touches the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Windows.UIElement.PreviewTouchDown> y <xref:System.Windows.UIElement.TouchDown> eventos no se producen hasta que un dedo toca la pantalla y se mueve. Si se presiona un dedo en la pantalla y manteniendo sin moverlo hace que la acción de presionar y mantener el comportamiento de un <xref:System.Windows.Input.Stylus>. El comportamiento de presionar y mantener presionado es equivalente a un clic del mouse.  
  
 Para hacer que el <xref:System.Windows.UIElement.PreviewTouchDown> y <xref:System.Windows.UIElement.TouchDown> eventos que se produzca cuando un dedo toca la pantalla, establezca la <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propiedad adjunta `false` para este elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnTouchDown%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a touch moves from outside to inside the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Siempre se genera este evento, si no se captura el dispositivo táctil a este elemento.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.UIElement.OnTouchEnter%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all touch devices that are captured to this element.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que se capturan en este elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que se capturan en este elemento o los elementos secundarios de su árbol visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all touch devices that are over this element.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que están sobre este elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
        <value>Una enumeración de <see cref="T:System.Windows.Input.TouchDevice" /> objetos que están sobre este elemento o los elementos secundarios de su árbol visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a touch moves from inside to outside the bounds of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Siempre se genera este evento, si no se captura el dispositivo táctil a este elemento.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Invalidar <xref:System.Windows.UIElement.OnTouchLeave%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnTouchMove%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a finger is raised off of the screen while the finger is over this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.EventHandler%601> de tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   El evento de tunelización correspondiente es <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Invalidar <xref:System.Windows.UIElement.OnTouchUp%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">The point value, as relative to this element.</param>
        <param name="relativeTo">The element to translate the given point into.</param>
        <summary>Translates a point relative to this element to coordinates that are relative to the specified element.</summary>
        <returns>A point value, now relative to the target element rather than this source element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pasar `null` para `relativeTo` se permite y se indica que deberían estar coordenadas en relación con el elemento raíz del árbol lógico que pertenece este elemento.  
  
 Este método se usa para traducir los valores de punto de prueba de aciertos. Llamar a este método es principalmente relevante si va a crear un control y necesita procesar las entradas en un nivel inferior. Si usas los controles existentes, generalmente puede suponer que controles completados notificará los resultados de la prueba de posicionamiento traducidos correctamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the unique identifier (for localization) for this element. This is a dependency property.</summary>
        <value>Cadena que es el identificador único de este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizan los diseñadores para obtener el `x:Uid` valor (vea [información general de localización y globalización de WPF](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) para obtener más información).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.UidProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ensures that all visual child elements of this element are properly updated for layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama a este método, los elementos con <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` o <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` llamará específico del elemento <xref:System.Windows.UIElement.MeasureCore%2A> y <xref:System.Windows.UIElement.ArrangeCore%2A> actualizan métodos, lo que obliga al diseño y se validarán todos los tamaños calculados.  
  
 Llamar a este método no tiene ningún efecto si no se ha modificado el diseño, o si estado organización ni medida de un diseño no es válido. Sin embargo, si el diseño no es válido en cualquier sentido, el <xref:System.Windows.UIElement.UpdateLayout%2A> llamada Rehacer todo el diseño. Por lo tanto, debe evitar llamar a <xref:System.Windows.UIElement.UpdateLayout%2A> después de cada cambio incremental y secundario en el árbol de elementos. El sistema de diseño realizará el diseño de un elemento de forma diferida, mediante un algoritmo que equilibra rendimiento y la divisa, y con una estrategia de ponderación para aplazar los cambios en las raíces hasta que todos los elementos secundarios son válidos. Sólo debe llamar a <xref:System.Windows.UIElement.UpdateLayout%2A> si necesita realmente tamaños y posiciones actualizados, y solo después de que esté seguro de que se completan todos los cambios de propiedades que controla y que puede afectar al diseño.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.  This is a dependency property.</summary>
        <value>Valor de la enumeración. El valor predeterminado es <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer esta propiedad afecta al valor de <xref:System.Windows.UIElement.IsVisible%2A>, que a su vez pueden producir el <xref:System.Windows.UIElement.IsVisibleChanged> eventos. Sin embargo, <xref:System.Windows.UIElement.IsVisible%2A> tiene otros factores que influyen en él, por ejemplo, la configuración de visibilidad de los elementos primarios que lo contienen.  
  
 Elementos donde <xref:System.Windows.UIElement.Visibility%2A> no es <xref:System.Windows.Visibility.Visible> no participan en eventos de entrada (o comandos), no influyen en las fases de la medida o la organización del diseño, no están en una secuencia de tabulación y no se incluirán en la prueba de posicionamiento.  
  
 Cuando hereda <xref:System.Windows.Window> o sus clases derivadas, <xref:System.Windows.Window> vuelve a definir el valor predeterminado de esta propiedad para que sea <xref:System.Windows.Visibility.Collapsed>. Esto tiene el efecto de no ejecutar el paso de medición del diseño en creado inicialmente <xref:System.Windows.Window>, y <xref:System.Windows.UIElement.RenderSize%2A> devuelve (0,0). Para obtener información detallada, vea <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> También redefine el valor predeterminado para que sea <xref:System.Windows.Visibility.Collapsed>, con un comportamiento resultante similar para <xref:System.Windows.Controls.Primitives.Popup> y sus clases derivadas.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que hace referencia a dos botones con nombre diferentes que están pensadas para formar un par mutuamente excluyente en la interfaz de usuario. Antes de ejecutar la lógica del programa real asociada con el botón, el propio botón se establece como <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, y el otro botón del par se establece en <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>