<Type Name="RequestBringIntoViewEventHandler" FullName="System.Windows.RequestBringIntoViewEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="29f709ce2f7161f5a13d7d2836d9dadeb6349dcc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36457659" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void RequestBringIntoViewEventHandler(object sender, RequestBringIntoViewEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestBringIntoViewEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RequestBringIntoViewEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RequestBringIntoViewEventHandler(sender As Object, e As RequestBringIntoViewEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RequestBringIntoViewEventHandler(System::Object ^ sender, RequestBringIntoViewEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RequestBringIntoViewEventHandler = delegate of obj * RequestBringIntoViewEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RequestBringIntoViewEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Objeto en que está asociado el controlador de eventos.</param>
    <param name="e">Datos del evento.</param>
    <summary>Representa el método que controlará el evento enrutado <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar este evento es normalmente solo dentro de los elementos que admiten una región desplazable o, en caso contrario deliberadamente establecen su tamaño de representación sea menor que combinado deseado tamaño de su contenido del elemento secundario y solo se realiza si se controla deliberadamente el evento una vez que se ha enrutado hacia arriba en el árbol de elementos y ha alcanzado al primer elemento primario que ofrece compatibilidad con el área desplazable. Es una implementación existente que controla las áreas de desplazamiento de forma que es típicamente deseable para los controles de usuario <xref:System.Windows.Controls.ScrollViewer>. Si deriva de <xref:System.Windows.Controls.ScrollViewer>, puede registrar un controlador de clase para <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> y complementar la clase base que controla el evento. También debe considerar el uso o definido por la clase de control de clases <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> eventos en lugar de <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>. O bien, si creas una clase completamente personalizada que no se deriva de <xref:System.Windows.Controls.ScrollViewer>, aún puede agregar clase de control mediante una llamada a <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=nameWithType> en la creación de instancias de clase.  Para obtener detalles sobre el control de clases, consulte [Marcar eventos enrutados como Handled and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Elementos de contenido pueden provocar el evento que se genera por sus hosts de contenido (llamando a <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> y generar <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> desde el host de contenido). De igual forma, puede solicitar elementos del árbol lógico para poner en la vista con el método auxiliar <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=nameWithType>.  
  
 A <xref:System.Windows.Controls.ListBox> implementa un método relacionado pero diferente <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.RequestBringIntoViewEventArgs" />
    <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
    <altmember cref="T:System.Windows.Controls.Primitives.ScrollBar" />
    <altmember cref="T:System.Windows.Controls.ScrollViewer" />
    <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
    <altmember cref="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
  </Docs>
</Type>