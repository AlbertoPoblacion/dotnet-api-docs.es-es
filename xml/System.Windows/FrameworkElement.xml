<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52bb34d9daddff99314e23014e5d61909a488206" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660155" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ofrece un conjunto de nivel de marco de trabajo WPF de propiedades, eventos y métodos para elementos de Windows Presentation Foundation (WPF). Esta clase representa la implementación de nivel de marco de trabajo WPF proporcionada que se basa en las API de nivel de núcleo de WPF que están definidas por <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> es el punto de conexión entre las clases de elemento de nivel de marco WPF y el conjunto de nivel de núcleo WPF de <xref:System.Windows.UIElement> servicios de presentación. Para obtener más información acerca de estos conceptos, vea [arquitectura de WPF](~/docs/framework/wpf/advanced/wpf-architecture.md).  
  
 <xref:System.Windows.FrameworkElement> extiende <xref:System.Windows.UIElement> y agrega las siguientes funcionalidades:  
  
-   **Definición del sistema de diseño**: <xref:System.Windows.FrameworkElement> proporciona implementaciones de nivel de marco WPF específicas para determinados métodos que se definieron como miembros virtuales en <xref:System.Windows.UIElement>. En concreto, <xref:System.Windows.FrameworkElement> sella ciertos invalidaciones de diseño de nivel de núcleo WPF y en su lugar, proporciona un equivalente de nivel de marco WPF que las clases derivadas debe invalidar en su lugar. Por ejemplo, <xref:System.Windows.FrameworkElement> sellos <xref:System.Windows.UIElement.ArrangeCore%2A> pero proporciona <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. Estos cambios reflejan el hecho de que en el nivel de marco de WPF hay un sistema de diseño completa en lugar al que puede representar cualquiera <xref:System.Windows.FrameworkElement> clase derivada. En WPF principales del nivel, ciertos miembros que se estructura general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] diseño basado en soluciones están en vigor, pero no se ha definido el motor real del sistema de diseño. Para obtener más información, consulte [diseño](~/docs/framework/wpf/advanced/layout.md).  
  
-   **El árbol lógico:** general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelo de programación a menudo se expresa en términos de un árbol de elementos. Compatibilidad para expresar el árbol de elementos como un árbol lógico y que acompaña a soporte técnico para definir ese árbol en el marcado se implementa en el <xref:System.Windows.FrameworkElement> nivel. Tenga en cuenta sin embargo que <xref:System.Windows.FrameworkElement> deliberadamente no define un modelo de contenido y deja esa responsabilidad a las clases derivadas. Para obtener más información, consulte [Árboles en WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
-   **Eventos de duración de objetos:** a menudo resulta útil saber cuando se inicializa un elemento (se llama al constructor) o cuando se carga primero el elemento en un árbol lógico. <xref:System.Windows.FrameworkElement> define varios eventos relacionados con la duración de los objetos que proporcionan enlaces útiles para las operaciones de código subyacente que implican elementos, como agregar más elementos secundarios. Para obtener más información, consulte [eventos de duración de objetos](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
-   **Compatibilidad con enlace de datos y las referencias de recursos dinámicos:** la compatibilidad de nivel de propiedad para el enlace de datos y los recursos se implementa mediante la <xref:System.Windows.DependencyProperty> clase e incluidas en el sistema de propiedades, pero la capacidad de resolver un valor de miembro que es almacena como un <xref:System.Windows.Expression> (la construcción de programación que subyace a enlace de datos y los recursos dinámicos) se implementa mediante <xref:System.Windows.FrameworkElement>. Para obtener más información, consulte [información general sobre el enlace de datos](~/docs/framework/wpf/data/data-binding-overview.md) y [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   **Estilos:** <xref:System.Windows.FrameworkElement> define la <xref:System.Windows.FrameworkElement.Style%2A> propiedad. Sin embargo, <xref:System.Windows.FrameworkElement> aún no definir admiten plantillas o admitir decoradores. Estas características se introducen las clases de control como <xref:System.Windows.Controls.Control> y <xref:System.Windows.Controls.ContentControl>.  
  
-   **Compatibilidad con más de animación:** cierta compatibilidad animación ya se ha definido en el nivel de núcleo WPF, pero <xref:System.Windows.FrameworkElement> extiende esta característica mediante la implementación de <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> y relacionados con los miembros.  
  
 Tal y como se puede ver en la jerarquía de clases, muchas [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] clases se derivan de <xref:System.Windows.FrameworkElement>, ya sea directamente o a través de las clases base intermedias como <xref:System.Windows.Controls.Panel> o <xref:System.Windows.Controls.Control>.  
  
 Si piensa utilizar <xref:System.Windows.FrameworkElement> como una clase base, puede examinar en primer lugar las clases derivadas existentes. <xref:System.Windows.FrameworkElement> proporciona compatibilidad para varios escenarios básicos, pero también carece de una serie de características que son deseables para un "elemento" en el sentido de un bloque de creación que se usa para crear [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] en [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]. Por ejemplo, un <xref:System.Windows.FrameworkElement> no define ningún modelo de contenido es true; <xref:System.Windows.FrameworkElement> como una clase base no define una propiedad que se puede crear [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] los elementos secundarios. En concreto, podría interesarle consultar <xref:System.Windows.Controls.Control> y <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el alto representado de este elemento.</summary>
        <value>Alto del elemento, como un valor en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es 0 (cero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es un valor calculado en función de otras entradas de alto y el sistema de diseño. El valor se establece mediante el sistema de diseño, basándose en un paso de representación real y puede, por tanto, retrasarse ligeramente el valor de conjunto de propiedades como <xref:System.Windows.FrameworkElement.Height%2A> que son la base del cambio de entrada.  
  
 Dado que <xref:System.Windows.FrameworkElement.ActualHeight%2A> es un valor calculado, debe tener en cuenta que podría haber varios incremental notificados o cambian a él como resultado varias operaciones mediante el sistema de diseño. El sistema de diseño puede calcular el espacio de medida necesario para los elementos secundarios, las restricciones impuestas por el elemento primario y así sucesivamente.  
  
 Aunque no se puede establecer esta propiedad desde [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], puede basar un <xref:System.Windows.Trigger> tras su valor en un estilo.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 El ejemplo siguiente muestra varias propiedades de alto.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.ActualHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el ancho representado de este elemento.</summary>
        <value>Ancho del elemento, como un valor en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es 0 (cero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es un valor calculado en función de otras entradas de ancho y el sistema de diseño. El valor se establece mediante el sistema de diseño, basándose en un paso de representación real y puede, por tanto, retrasarse ligeramente el valor de conjunto de propiedades como <xref:System.Windows.FrameworkElement.Width%2A> que son la base del cambio de entrada.  
  
 Dado que <xref:System.Windows.FrameworkElement.ActualWidth%2A> es un valor calculado, debe tener en cuenta que podría haber varios incremental notificados o cambian a él como resultado varias operaciones mediante el sistema de diseño. El sistema de diseño puede calcular el espacio de medida necesario para los elementos secundarios, las restricciones impuestas por el elemento primario y así sucesivamente.  
  
 Aunque no se puede establecer esta propiedad desde [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], puede basar un <xref:System.Windows.Trigger> tras su valor en un estilo.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 El ejemplo siguiente muestra varias propiedades de ancho.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.ActualWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Elemento secundario que se va a agregar.</param>
        <summary>Agrega el objeto proporcionado al árbol lógico de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para la implementación de las colecciones de objetos que representan los elementos secundarios lógicos de un elemento. Mantenimiento de la colección de colecciones de elementos secundarios se podría hacer en captadores de propiedades o establecedores, control de eventos Changed, constructores, o dentro de los propios tipos de colección de clases.  
  
 Para los autores de controles, manipular el árbol lógico en este nivel no es la práctica recomendada, a menos que ninguno de los modelos de contenido para las clases de control base disponibles son adecuados para su escenario de control. Considere la posibilidad de crear subclases de una en el nivel de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, y <xref:System.Windows.Controls.HeaderedItemsControl>. Estas clases proporcionan un modelo de contenido con la aplicación determinada de elementos secundarios del árbol lógico a través de dedicado [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], así como la compatibilidad de otras características suele ser recomendable en un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control como un estilo a través de plantillas. Para obtener más información sobre cómo usar <xref:System.Windows.FrameworkElement.LogicalChildren%2A> y <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consulte [árboles de WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> puede producir una excepción si se llama a la vez cuando el árbol lógico es que se recorren en iteración por otro proceso.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un `Child` propiedad un personalizada <xref:System.Windows.FrameworkElement> que realiza su propia implementación de la capa visual. El establecedor de propiedad está diseñado para que si cambia el valor, el valor anterior se quitará del árbol lógico, así como una colección visual específica de la clase. El valor de propiedad se almacena en caché y, a continuación, se agrega el nuevo valor del árbol lógico y la colección visual personalizada.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compila el árbol visual de la plantilla actual si es necesario y devuelve un valor que indica si esta llamada volvió a compilar el árbol visual.</summary>
        <returns>
          <see langword="true" /> si se han agregado elementos visuales al árbol; devuelve <see langword="false" /> en caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones pueden llamar a este método para garantizar que el árbol visual de un elemento es completado. Este paso de garantía podría ser necesario si el código se puede comprobar los elementos secundarios en el árbol. Para la lógica de elementos típicos de aplicaciones que llamen a <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> no es necesario, porque las plantillas se aplicarán automáticamente a los elementos en un punto adecuado en sus duraciones.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> se llama en cada medida pasa por el sistema de diseño de nivel de marco WPF.  
  
 <xref:System.Windows.FrameworkElement> las clases derivadas pueden utilizar la <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> controlador de clase para recibir notificaciones de casos que se llama a este método explícitamente, o mediante el sistema de diseño. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> se llama después de la plantilla se genera completamente y se adjunta al árbol lógico.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Área final dentro del elemento primario que este elemento debe usar para organizarse a sí mismo y a los elementos secundarios.</param>
        <summary>Implementa <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (que se define como virtual en <see cref="T:System.Windows.UIElement" />) y sella la implementación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está sellado. Para invalidar la lógica en su elemento personalizado específicamente para el paso de organización del diseño de un elemento, su <xref:System.Windows.FrameworkElement> clase derivada debe reemplazar <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">Área final dentro del elemento primario que este elemento debe usar para organizarse a sí mismo y a los elementos secundarios.</param>
        <summary>Si se reemplaza en una clase derivada, coloca los elementos secundarios y determina un tamaño para una clase derivada <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Tamaño real usado.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Los autores de controles que deseen personalizar el paso de organización del procesamiento de diseño deben invalidar este método. El modelo de implementación debe llamar a <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> en cada elemento secundario visible y pase el final deseado tamaño para cada elemento secundario como la <paramref name="finalRect" /> parámetro. Deben llamar los elementos primarios <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> en cada elemento secundario, en caso contrario, los elementos secundarios no se representará.  
  
 Muchas clases derivadas proporcionan implementaciones de este método. Las más importantes son: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> y <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia el proceso de inicialización para este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede llamar a este método en elementos individuales si está ajustando de forma que aún no se exponen o conectar el elemento a cualquier árbol de elementos. Por ejemplo, podría haber creado un nuevo <xref:System.Windows.FrameworkElement>, pero no tiene aún conectado para cualquier árbol lógico. O bien, el árbol lógico donde el elemento es un elemento secundario dentro de él no puede estar conectado a una ventana o página de la aplicación.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implemente este método para proporcionar un control especial que debe tener lugar antes de que el elemento se inicialice durante el proceso de carga de elemento.  
  
 Su implementación debe llamar a la implementación base, porque la implementación base (valor predeterminado) establece algunos marcadores internos para realizar un seguimiento de la inicialización. Una posible implementación consiste en usar este método como un enlace en sus propias rutinas de inicialización de clase privada que ya no están habilitados los constructores.  
  
 La implementación base producirá una excepción si <see cref="M:System.Windows.FrameworkElement.BeginInit" /> se llama más de una vez en el mismo elemento antes de <see cref="M:System.Windows.FrameworkElement.EndInit" /> que se va a llamar.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Empieza la secuencia de acciones contenidas en el guión gráfico proporcionado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">Guión gráfico que se va a iniciar.</param>
        <summary>Empieza la secuencia de acciones contenidas en el guión gráfico proporcionado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Escenarios de animación más típicos no utilizan este método. Normalmente, se crea el <xref:System.Windows.Media.Animation.Storyboard> o <xref:System.Windows.Media.Animation.BeginStoryboard> elemento de marcado y, a continuación, colocarlos como el <xref:System.Windows.EventTrigger> contenido en un elemento. Cuando se desencadena el evento, se ejecuta, a continuación, la animación. La mayoría de los aspectos de control de un <xref:System.Windows.Media.Animation.Storyboard> pueden resolverse mediante las propiedades que se exponen en el marcado.  
  
 Para las firmas que no usan el `isControllable`, parámetro, o cuando se especifica ese parámetro `false`, se quitan los relojes de la escala de tiempo que están asociados a la animación tan pronto como la animación alcanza el período de "Relleno". Por lo tanto, la animación no se puede reiniciar después de ejecutar una vez. Controlar una animación también requiere que el guión gráfico tiene una [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) o ser accesible por referencia en el código.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.Windows.Media.Animation.Storyboard> de recursos, y, a continuación, ejecuta que <xref:System.Windows.Media.Animation.Storyboard> cuando un evento interno es administrado por la clase.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">Guión gráfico que se va a iniciar.</param>
        <param name="handoffBehavior">Valor de la enumeración que describe el comportamiento que se va a usar si ya está animada una propiedad descrita en el guión gráfico.</param>
        <summary>Comienza la secuencia de acciones contenidas en el guión gráfico proporcionado, con opciones especificadas para lo que debería ocurrir si la propiedad ya está animada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Escenarios de animación más típicos no utilizan este método. Normalmente, se crea el <xref:System.Windows.Media.Animation.Storyboard> o <xref:System.Windows.Media.Animation.BeginStoryboard> elemento de marcado y, a continuación, colocarlos como el <xref:System.Windows.EventTrigger> contenido en un elemento. Cuando se desencadena el evento, se ejecuta, a continuación, la animación. La mayoría de los aspectos de control de un <xref:System.Windows.Media.Animation.Storyboard> pueden resolverse mediante las propiedades que se exponen en el marcado.  
  
 Para las firmas que no usan el `isControllable`, parámetro, o cuando se especifica ese parámetro `false`, se quitan los relojes de la escala de tiempo que están asociados a la animación tan pronto como la animación alcanza el período de "Relleno". Por lo tanto, la animación no se puede reiniciar después de ejecutar una vez. Controlar una animación también requiere que el guión gráfico tiene una [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) o ser accesible por referencia en el código.  
  
 Comportamiento de entrega puede especificarse como un atributo de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Mediante el campo Compose de HandoffBehavior  
 Al aplicar un <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una propiedad mediante el uso de la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, cualquier <xref:System.Windows.Media.Animation.Clock> objetos asociados anteriormente a esa propiedad siguen consumiendo recursos del sistema; el sistema de temporización no quita automáticamente los relojes.  
  
 Para evitar problemas de rendimiento al aplicar un gran número de relojes mediante <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, debe quitar los relojes de composición de la propiedad animada cuando se hayan completado. Hay varias maneras de quitar un reloj:  
  
-   Para quitar todos los relojes de una propiedad, utilice la <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método del objeto animado. Especifique la propiedad que se está animada como el primer parámetro, y `null` como el segundo. Esto quita todos los relojes de animación de la propiedad.  
  
-   Para quitar un determinado <xref:System.Windows.Media.Animation.AnimationClock> en una lista de relojes, use la <xref:System.Windows.Media.Animation.Clock.Controller%2A> propiedad de la <xref:System.Windows.Media.Animation.AnimationClock> para recuperar un <xref:System.Windows.Media.Animation.ClockController>, a continuación, llame a la <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método de la <xref:System.Windows.Media.Animation.ClockController>. Esto se hace normalmente en el <xref:System.Windows.Media.Animation.Clock.Completed> controlador de eventos para un reloj. Tenga en cuenta que los relojes de raíz única pueden controlarse mediante una <xref:System.Windows.Media.Animation.ClockController>; el <xref:System.Windows.Media.Animation.Clock.Controller%2A> propiedad de un reloj secundario devuelve `null`. Tenga en cuenta también que la <xref:System.Windows.Media.Animation.Clock.Completed> no se produce el evento si la duración efectiva del reloj es para siempre.  En ese caso, el usuario debe determinar cuándo se debe llamar a <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Este problema se produce principalmente en las animaciones de objetos que tienen un período de duración prolongado.  Si un objeto se han recopilado, sus relojes también se desconectan y el recolector.  
  
 Para obtener más información acerca de los objetos de reloj, consulte [animación y temporización información general del sistema](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.Windows.Media.Animation.Storyboard> de recursos, y, a continuación, ejecuta que <xref:System.Windows.Media.Animation.Storyboard> cuando un evento interno es administrado por la clase.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">Guión gráfico que se va a iniciar.</param>
        <param name="handoffBehavior">Valor de la enumeración que describe el comportamiento que se va a usar si ya está animada una propiedad descrita en el guión gráfico.</param>
        <param name="isControllable">Declara si la animación se puede controlar (se puede pausar) después de que se ha iniciado.</param>
        <summary>Comienza la secuencia de acciones contenidas en el guión gráfico proporcionado, con el estado especificado para el control de la animación una vez iniciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Escenarios de animación más típicos no utilizan este método. Normalmente, se crea el <xref:System.Windows.Media.Animation.Storyboard> o <xref:System.Windows.Media.Animation.BeginStoryboard> elemento de marcado y, a continuación, colocarlos como el <xref:System.Windows.EventTrigger> contenido en un elemento. Cuando se desencadena el evento, se ejecuta, a continuación, la animación. La mayoría de los aspectos de control de un <xref:System.Windows.Media.Animation.Storyboard> pueden resolverse mediante las propiedades que se exponen en el marcado.  
  
 Para las firmas que no usan el `isControllable`, parámetro, o cuando se especifica ese parámetro `false`, se quitan los relojes de la escala de tiempo que están asociados a la animación tan pronto como la animación alcanza el período de "Relleno". Por lo tanto, la animación no se puede reiniciar después de ejecutar una vez. Controlar una animación también requiere que el guión gráfico tiene una [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) o ser accesible por referencia en el código.  
  
 Comportamiento de entrega puede especificarse como un atributo de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Mediante el campo Compose de HandoffBehavior  
 Al aplicar un <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una propiedad mediante el uso de la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, cualquier <xref:System.Windows.Media.Animation.Clock> objetos asociados anteriormente a esa propiedad siguen consumiendo recursos del sistema; el sistema de temporización no quita automáticamente los relojes.  
  
 Para evitar problemas de rendimiento al aplicar un gran número de relojes mediante <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, debe quitar los relojes de composición de la propiedad animada cuando se hayan completado. Hay varias maneras de quitar un reloj:  
  
-   Para quitar todos los relojes de una propiedad, utilice la <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método del objeto animado. Especifique la propiedad que se está animada como el primer parámetro, y `null` como el segundo. Esto quita todos los relojes de animación de la propiedad.  
  
-   Para quitar un determinado <xref:System.Windows.Media.Animation.AnimationClock> en una lista de relojes, use la <xref:System.Windows.Media.Animation.Clock.Controller%2A> propiedad de la <xref:System.Windows.Media.Animation.AnimationClock> para recuperar un <xref:System.Windows.Media.Animation.ClockController>, a continuación, llame a la <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método de la <xref:System.Windows.Media.Animation.ClockController>. Esto se hace normalmente en el <xref:System.Windows.Media.Animation.Clock.Completed> controlador de eventos para un reloj. Tenga en cuenta que los relojes de raíz única pueden controlarse mediante una <xref:System.Windows.Media.Animation.ClockController>; el <xref:System.Windows.Media.Animation.Clock.Controller%2A> propiedad de un reloj secundario devuelve `null`. Tenga en cuenta también que la <xref:System.Windows.Media.Animation.Clock.Completed> no se produce el evento si la duración efectiva del reloj es para siempre.  En ese caso, el usuario debe determinar cuándo se debe llamar a <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Este problema se produce principalmente en las animaciones de objetos que tienen un período de duración prolongado.  Si un objeto se han recopilado, sus relojes también se desconectan y el recolector.  
  
 Para obtener más información acerca de los objetos de reloj, consulte [animación y temporización información general del sistema](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Data.BindingGroup" /> que se usa para el elemento.</summary>
        <value>Objeto <see cref="T:System.Windows.Data.BindingGroup" /> que se usa para el elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Data.BindingGroup> puede usarse para validar los valores de varias propiedades de un objeto. Por ejemplo, suponga que una aplicación solicita al usuario que escriba una dirección y, a continuación, rellena un objeto de tipo `Address`, que tiene las propiedades `Street`, `City`, `ZipCode`, y `Country`, con los valores que el usuario especificado. La aplicación tiene un panel que contiene cuatro <xref:System.Windows.Controls.TextBox> controles, cada uno de los cuales se enlaza a una de las propiedades del objeto. Puede usar un <xref:System.Windows.Controls.ValidationRule> en un <xref:System.Windows.Data.BindingGroup> para validar la `Address` objeto. Por ejemplo, el <xref:System.Windows.Controls.ValidationRule> puede asegurarse de que el código postal es válido para el país de la dirección.  
  
 Los elementos secundarios heredan la <xref:System.Windows.Data.BindingGroup> de sus elementos principales, al igual que con cualquier otra propiedad heredable.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|Propiedades de metadatos establecidas **es true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Los ejemplos siguientes forman parte de una aplicación que comprueba si el usuario ha establecido las propiedades de dos objetos en los mismos valores. El primer ejemplo crea dos <xref:System.Windows.Controls.TextBox> controles, cada uno de los cuales está enlazado a un origen de datos diferente. El <xref:System.Windows.Controls.StackPanel> tiene un <xref:System.Windows.Data.BindingGroup> que contiene un <xref:System.Windows.Controls.ValidationRule> que comprueba que las dos cadenas son iguales.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 El siguiente ejemplo se muestra el <xref:System.Windows.Controls.ValidationRule> que utiliza el ejemplo anterior.  En el <xref:System.Windows.Controls.ValidationRule.Validate%2A> invalidación del método, el ejemplo obtiene cada objeto de origen de la <xref:System.Windows.Data.BindingGroup> y comprueba si las propiedades de los objetos son iguales.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 Para invocar la <xref:System.Windows.Controls.ValidationRule>, llame a la <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> método.  El ejemplo siguiente se llama <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> cuando se produce el evento click del botón.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.BindingGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Intenta mostrar este elemento, en cualquier región desplazable que lo contenga.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Intenta mostrar este elemento, en cualquier región desplazable que lo contenga.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a este método, genera un <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos que se originan en el elemento actual. Este evento se desencadena para que pueda ser controlada por un <xref:System.Windows.Controls.ScrollViewer>, o una clase derivada o similar. El comportamiento esperado es que el evento está controlado por el elemento primario, marcado como controlado en los datos del evento, y el origen del evento se incorporan a la vista a través de la lógica incrustada en el <xref:System.Windows.Controls.ScrollViewer> control. Ni el <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos ni <xref:System.Windows.FrameworkElement.BringIntoView%2A> método transmitirá ninguna información sobre éxito o error, distinto del que normalmente es el evento marcado administrado en correcto. Motivos de error puede incluir los valores del elemento, como <xref:System.Windows.UIElement.Visibility%2A> sea un valor distinto de <xref:System.Windows.Visibility.Visible>.  
  
 Si utiliza la firma que no especifica un `targetRectangle`, a continuación, el tamaño del elemento completo (su <xref:System.Windows.UIElement.RenderSize%2A>) estará visible.  
  
 Al llamar a este método, potencialmente llamará <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> en cualquier área desplazable primaria que contiene el elemento. Si este elemento no está contenida en un área desplazable, el <xref:System.Windows.FrameworkElement.RequestBringIntoView> todavía se provoca el evento, pero no habrá ningún efecto porque no hay ningún agente de escucha de eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador para un evento de navegación de aplicación cada vez que responde el [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] que se navega incluye un fragmento. El fragmento se denomina en la [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] después del inicio de sesión de hash (#), y el comportamiento implementado hace que el elemento que se va a desplazar en la vista dentro del marco. <xref:System.Windows.FrameworkElement.BringIntoView%2A> y <xref:System.Windows.FrameworkElement.RequestBringIntoView> solicitar ese comportamiento de desplazamiento en el ejemplo.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Tamaño especificado del elemento que también se debe mostrar.</param>
        <summary>Intenta mostrar el tamaño de la región proporcionado de este elemento, dentro de cualquier región desplazable que lo contenga.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a este método, genera un <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos que se originan en el elemento actual. Este evento se desencadena para que pueda ser controlada por un <xref:System.Windows.Controls.ScrollViewer>, o una clase derivada o similar. El comportamiento esperado es que el evento está controlado por el elemento primario, marcado como controlado en los datos del evento, y el origen del evento se incorporan a la vista a través de la lógica incrustada en el <xref:System.Windows.Controls.ScrollViewer> control. Ni el <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos ni <xref:System.Windows.FrameworkElement.BringIntoView%2A> método transmitirá ninguna información sobre éxito o error, distinto del que normalmente es el evento marcado administrado en correcto. Motivos de error puede incluir los valores del elemento, como <xref:System.Windows.UIElement.Visibility%2A> sea un valor distinto de <xref:System.Windows.Visibility.Visible>.  
  
 Si utiliza la firma que no especifica un `targetRectangle`, a continuación, el tamaño del elemento completo (su <xref:System.Windows.UIElement.RenderSize%2A>) estará visible.  
  
 Al llamar a este método, potencialmente llamará <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> en cualquier área desplazable primaria que contiene el elemento. Si este elemento no está contenida en un área desplazable, el <xref:System.Windows.FrameworkElement.RequestBringIntoView> todavía se provoca el evento, pero no habrá ningún efecto porque no hay ningún agente de escucha de eventos.  
  
   
  
## Examples  
 En el siguiente ejemplo tiene un gráfico grande en una región de desplazamiento restringida. Un botón en la página tiene un controlador que se desplaza la vista a una región determinada del gráfico grande.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el elemento de menú contextual que debe aparecer cuando se solicita el menú contextual a través de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] desde este elemento.</summary>
        <value>Menú contextual asignado a este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> es un <xref:System.Windows.FrameworkElement> clase derivada y es técnicamente posible <xref:System.Windows.Controls.ContextMenu> para tener un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propiedad. Sin embargo, esto crea una experiencia de menú contextual confusa para el usuario y no se recomienda esta práctica.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce inmediatamente antes de que se cierre cualquier menú contextual en el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para suprimir el cierre menús contextuales, los controladores del evento deben marcarlo a como controlado.  
  
 Para usar este evento como un <xref:System.Windows.EventTrigger> en un estilo, debe hacer referencia a definición del servicio subyacente del evento:  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (Se requiere este uso porque la implementación de eventos en <xref:System.Windows.FrameworkElement> que expone el evento de servicio subyacente no se asigna el <xref:System.Windows.FrameworkElement.ContextMenuClosing> identificador que se puede usar como desencadenador).  
  
 <xref:System.Windows.Controls.ContextMenu> es un <xref:System.Windows.FrameworkElement> clase derivada, pero la <xref:System.Windows.FrameworkElement.ContextMenuClosing> eventos no se producen por un menú contextual directamente. En su lugar, el evento se provoca desde el elemento que "posee" el menú contextual como una propiedad y sólo se produce cuando un usuario intenta cerrar un menú contextual en la interfaz de usuario. Sin embargo, es posible <xref:System.Windows.Controls.ContextMenu> para tener un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propiedad (un menú contextual anidado). En este caso el <xref:System.Windows.Controls.ContextMenu> realmente el propietario anidado <xref:System.Windows.Controls.ContextMenu> y podría provocar el evento, con el origen del evento está en el menú contextual anidado.  
  
 El <xref:System.Windows.Controls.ContextMenu> propia clase también tiene un evento similar (<xref:System.Windows.Controls.ContextMenu.Closed>), pero la <xref:System.Windows.Controls.ContextMenu.Closed> eventos no le proporciona la oportunidad de cancelar la acción del usuario.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Invalidar <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se abre cualquier menú contextual en el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para abrir manualmente los menús contextuales, controladores de los eventos deben marcar el evento pertinente como controlado. En caso contrario, el valor existente de la <xref:System.Windows.FrameworkElement.ContextMenu%2A> propiedad se utilizará para abrir automáticamente un menú contextual. Marcar el evento como controlado eficazmente cancelará la acción predeterminada y podría ser una oportunidad para restablecer el valor de la <xref:System.Windows.FrameworkElement.ContextMenu%2A> propiedad y, a continuación, abra el nuevo <xref:System.Windows.Controls.ContextMenu>. Sin embargo, hay un problema de tiempo que debe tener en cuenta. Para reemplazar completamente el menú contextual a través de un <xref:System.Windows.FrameworkElement.ContextMenuOpening> controlador, el menú contextual inicial no debe ser null o vacía. O bien, tendrá que controlar el evento y, a continuación, abrir manualmente un nuevo menú contextual. Para obtener más información, consulte [Cómo: controlar el evento ContextMenuOpening](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).  
  
 Para usar este evento como un <xref:System.Windows.EventTrigger> en un estilo, debe hacer referencia el evento adjunto subyacente:  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (Se requiere este uso porque la implementación de eventos en <xref:System.Windows.FrameworkElement> que expone el evento de servicio subyacente no se asigna el <xref:System.Windows.FrameworkElement.ContextMenuOpening> identificador que se puede usar en los desencadenadores).  
  
 <xref:System.Windows.Controls.ContextMenu> es un <xref:System.Windows.FrameworkElement> clase derivada, pero este evento no se provocarán en el menú contextual que se abre como un origen. El evento se provoca desde el elemento que "posee" el menú contextual como una propiedad y sólo se produce cuando un usuario intenta abrir un menú contextual en la interfaz de usuario. Es posible que <xref:System.Windows.Controls.ContextMenu> para tener un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propiedad, pero se debe evitar esta situación (para obtener más información, consulte <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 El <xref:System.Windows.Controls.ContextMenu> propia clase también tiene un evento similar (<xref:System.Windows.Controls.ContextMenu.Opened>) pero <xref:System.Windows.Controls.ContextMenu.Opened> no le proporciona la oportunidad de cancelar la acción del usuario.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Invalidar <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.ContextMenu" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el cursor que aparecerá cuando el puntero del mouse se encuentre sobre este elemento.</summary>
        <value>Cursor que se va a mostrar. El valor predeterminado se define como <see langword="null" /> para esta propiedad de dependencia. Sin embargo, el valor predeterminado en la práctica en tiempo de ejecución depende de diversos factores.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer esta propiedad [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] procesador se basa en la conversión de tipos para la <xref:System.Windows.Input.Cursor> clase para evaluar la cadena. La cadena proporcionada se debe evaluar como un <xref:System.Windows.Input.CursorType> valor. Para obtener información más detallada, vea <xref:System.Windows.Input.Cursor>.  
  
 Si el cursor según lo establecido por esta propiedad se o no se mostrará cuando el puntero del mouse está sobre este elemento también depende del valor de la <xref:System.Windows.FrameworkElement.ForceCursor%2A> propiedad. Además, las consideraciones relacionadas con el evento como un arrastre activo, captura del mouse, modos de controles y así sucesivamente, de edición de texto también afectará el cursor con prioridad más alta que el valor especificado en esta propiedad.  
  
 Para revertir el comportamiento de establecer esta propiedad en el valor predeterminado eventual, establézcalo en `null` nuevo.  
  
 El `null` predeterminado en realidad significa que la determinación del valor de cursor viable se retarda aquí y debe obtenerse desde cualquier otro punto. Si se presenta sin valores de programación de cualquier origen, el cursor predeterminado que está visualmente en un [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] aplicación será una flecha. Sin embargo, los cambios del cursor transitorios no se establecen en el <xref:System.Windows.FrameworkElement.Cursor%2A> valores de los elementos cuando se pasan a través. El <xref:System.Windows.FrameworkElement.Cursor%2A> propiedad will solo informes de valores no nulos en los casos donde que se estableció realmente, por ejemplo mediante código o un estilo. Cada movimiento del mouse sobre un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] aplicación genera una <xref:System.Windows.UIElement.QueryCursor> eventos. El evento se propaga y cualquier elemento en la ruta tiene la oportunidad de controlar el evento y para establecer el valor del cursor a través de los argumentos de este evento. Este es el mecanismo que genera el cursor en la mayoría de los casos. Si un <xref:System.Windows.UIElement.QueryCursor> controlador devuelve un resultado del cursor, a continuación, el hecho de que el evento se controla y tenga un valor cambiado en los argumentos tiene prioridad sobre el valor de la <xref:System.Windows.FrameworkElement.Cursor%2A> propiedad en cualquier nivel, a menos que <xref:System.Windows.FrameworkElement.ForceCursor%2A> se establece.  
  
 Si no está creando un cursor personalizado, normalmente se establece esta propiedad en un valor de propiedad estática de la <xref:System.Windows.Input.Cursors> clase. Establecer <xref:System.Windows.FrameworkElement.Cursor%2A> en el código requiere uno de los siguientes:  
  
-   Llame a la <xref:System.Windows.Input.Cursor> constructor para obtener un <xref:System.Windows.Input.Cursor> instancia. Las firmas de los <xref:System.Windows.Input.Cursor> constructor usan secuencias o archivos, con el fin de que se va a crear la <xref:System.Windows.Input.Cursor> objeto para un cursor personalizado.  
  
-   Use la <xref:System.Windows.Input.CursorConverter> clase y su <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> método para especificar un cursor mediante <xref:System.Windows.Input.CursorType>, o una cadena que puede evaluarse como un <xref:System.Windows.Input.CursorType>y convierte el valor devuelto a <xref:System.Windows.Input.Cursor>.  
  
 Establecer el <xref:System.Windows.Input.Cursor> no está habilitado en un valor personalizado en confianza parcial. Para obtener más información sobre los cursores personalizados, vea [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer deliberadamente el gráfico del cursor.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el contexto de datos para un elemento cuando participa en un enlace de datos.</summary>
        <value>Objeto que se va a usar como contexto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Contexto de datos* es un concepto que permite a los elementos heredar información de sus elementos principales sobre el origen de datos que se usa para enlazar, así como otras características del enlace, como la ruta de acceso.  
  
 Contexto de datos se puede establecer directamente en un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] objeto, con los enlaces que se evalúe como propiedades de ese objeto. Como alternativa, puede establecer el contexto de datos en un <xref:System.Windows.Data.DataSourceProvider> objeto.  
  
 Esta propiedad de dependencia hereda los valores de propiedad. Si no hay elementos secundarios sin otros valores para <xref:System.Windows.FrameworkElement.DataContext%2A> establece a través de valores o estilos, locales, a continuación, el sistema de propiedad establecerá el valor sea el <xref:System.Windows.FrameworkElement.DataContext%2A> valor del elemento primario más próximo con este valor asignado.  
  
 Como alternativa, puede usar una de las siguientes propiedades de la <xref:System.Windows.Data.Binding> clase para especificar explícitamente el origen de enlace: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, o <xref:System.Windows.Data.Binding.RelativeSource%2A>. Para obtener más información, consulte [Cómo: especificar el origen de enlace](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 En [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkElement.DataContext%2A> se establece normalmente como un <xref:System.Windows.Data.Binding> declaración. Puede usar la sintaxis de elemento de propiedad o la sintaxis de atributo. La sintaxis de atributo se muestra en el ejemplo de esta página. También puede usar código para establecer <xref:System.Windows.FrameworkElement.DataContext%2A>.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> es una propiedad enlazable que simplifica los escenarios donde un contexto podría enlazarse a otro. Sin embargo, si enlaza a <xref:System.Windows.FrameworkElement.DataContext%2A>, tenga cuidado de no crear referencias de enlace circulares (no enlace un <xref:System.Windows.FrameworkElement.DataContext%2A> a sí mismo, que es posible hacerlo debido a la naturaleza de herencia del valor de propiedad de la <xref:System.Windows.FrameworkElement.DataContext%2A> propiedad).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *dataContextObject*  
 Un objeto directamente incrustado que actúa como contexto de datos para todos los enlaces dentro del elemento primario. Normalmente, este objeto es un <xref:System.Windows.Data.Binding> u otro <xref:System.Windows.Data.BindingBase> clase derivada. Como alternativa, los datos sin procesar de cualquier [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] diseñado para el enlace se puede colocar aquí, con los enlaces reales que defina más adelante el tipo de objeto.  
  
 *bindingUsage*  
 Uso de enlace que se evalúa como un contexto de datos adecuado. Para obtener más información, consulte [Binding (extensión de marcado)](~/docs/framework/wpf/advanced/binding-markup-extension.md).  
  
 *resourceExtension*  
 Uno de los siguientes: o. Este uso se utiliza cuando se hace referencia a los datos sin procesar definidos como un objeto de recursos. Vea [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *contextResourceKey*  
 El identificador de clave para el objeto que se solicita desde un <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo un contexto de datos actúa en un enlace y proporciona la información que define los valores concretos de propiedades enlazadas.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el contexto de datos de este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener una explicación de los contextos de datos y el enlace de datos, vea [información general sobre el enlace de datos](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!IMPORTANT]
>  Cuando el <xref:System.Windows.FrameworkElement.DataContext%2A> para los cambios de un elemento, todas las propiedades de enlace a datos en este elemento podrían verse afectadas. Esto se aplica a los elementos que son elementos secundarios del elemento actual en el árbol lógico, que heredan el contexto de datos, y también el propio elemento actual. Todos los enlaces existentes de este tipo deben interpretar otra vez la nueva <xref:System.Windows.FrameworkElement.DataContext%2A> y volverá a evaluar los resultados de enlace. El motor de enlace de datos no es determinista sobre el orden de estas reevaluaciones, en relación con la generación de la <xref:System.Windows.FrameworkElement.DataContextChanged> eventos. Las reevaluaciones se pueden producir antes del evento después del evento, o en cualquier combinación.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.DataContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la clave que usará para hacer referencia al estilo de este control, cuando se utilicen o se definan estilos de tema.</summary>
        <value>La clave de estilo. Para que funcione correctamente como parte de la búsqueda de estilo de tema, se espera que este valor sea el elemento <see cref="T:System.Type" /> del control al que se está aplicando un estilo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no se establece normalmente a través de cualquiera de sus descriptores de acceso directo. En su lugar, invalide los metadatos específicos del tipo de esta propiedad de dependencia cada vez que cree un nuevo <xref:System.Windows.FrameworkElement> clase derivada. Al derivar un control, llame a la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método con el <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identificador dentro del constructor estático del control derivado de clase (o la inicialización de clase equivalente).  
  
 Normalmente, un control invalida el valor predeterminado de esta propiedad para que sea su propio tipo, pero en algunos casos, también podría utilizar un tipo base para el que existe un estilo en los diccionarios del tema. Esto solo es práctico si las plantillas de control del control base definen completamente la representación visual de ese control derivado y si cualquier miembro adicional que se exponen los tipos derivados no requiere elementos adicionales como parte de la plantilla de control.  
  
 Si desea que el elemento o control no use deliberadamente estilos de tema, establezca la <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> propiedad `true`.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de invalidación de metadatos de propiedad de dependencia que se describe en la sección Comentarios. Este código define una clase de control personalizado `NumericUpDown` diseñada para utilizarse desde un ensamblado de biblioteca de control dedicado. El constructor estático se ilustra hace referencia a alguna función de inicialización privada, registra un controlador de clase (otro escenario común de creación de subclases de control, consulte [Marcar eventos enrutados como Handled and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) y, finalmente, invalida el <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> metadatos de la propiedad de dependencia en el `NumericUpDown` clase. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> siempre devuelve su propio tipo como la clave deseada, que es la convención que utiliza el sistema de estilo de tema para buscar el estilo de cierto control en caso contrario, no con tipos arbitrario. El ejemplo completo también define el estilo de tema del control real que se hace referencia a la clave; vea [NumericUpDown (Control) personalizada con tema y un ejemplo de compatibilidad de automatización de interfaz de usuario](http://go.microsoft.com/fwlink/?LinkID=160025).  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica que el proceso de inicialización del elemento se ha completado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.FrameworkElement.BeginInit%2A> se ha llamado anteriormente, la base de implementación, se producirá la <xref:System.Windows.FrameworkElement.Initialized> eventos. En caso contrario, si <xref:System.Windows.FrameworkElement.BeginInit%2A> no se llamó o no se pudo determinar si <xref:System.Windows.FrameworkElement.BeginInit%2A> llamó, <xref:System.Windows.FrameworkElement.Initialized> no se produce y se produce una excepción en su lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se llamó a <see cref="M:System.Windows.FrameworkElement.EndInit" /> sin llamar antes a <see cref="M:System.Windows.FrameworkElement.BeginInit" /> en el elemento.</exception>
        <block subset="none" type="overrides">
          <para>Implemente este método para proporcionar un control especial que debe ocurrir cuando el elemento se inicialice durante el proceso de carga de elemento.  
  
 Su implementación debe llamar a la implementación base, porque la implementación base (valor predeterminado) establece algunos marcadores internos para realizar un seguimiento de la inicialización.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre de la codificación solicitada.</param>
        <summary>Busca un elemento que tiene el nombre de identificador proporcionado.</summary>
        <returns>Elemento solicitado. Puede ser <see langword="null" /> si no se encontró ningún elemento correspondiente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el elemento tiene elementos secundarios, estos elementos secundarios son todas de forma recursiva búsqueda para el elemento con nombre solicitado.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> funciona en el ámbito de nombres del elemento actual. Para obtener más información, consulte [ámbitos de nombres de XAML de WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificador de clave para el recurso solicitado.</param>
        <summary>Busca un recurso con la clave especificada y produce una excepción si no se encuentra el recurso solicitado.</summary>
        <returns>Recurso solicitado. Si no se encuentra un recurso con la clave proporcionada, se produce una excepción. También se podría devolver un valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> en caso de excepción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Si se llama a este método para una clave que no se encuentra, se produce una excepción. Si no desea controlar las excepciones que son el resultado de llamar al método <xref:System.Windows.FrameworkElement.FindResource%2A>, llame a <xref:System.Windows.FrameworkElement.TryFindResource%2A> en su lugar. <xref:System.Windows.FrameworkElement.TryFindResource%2A> Devuelve `null` cuando no se puede encontrar un recurso solicitado y no produce una excepción.  
  
 Si no se encuentra el recurso en el elemento que realiza la llamada, el elemento primario del árbol lógico es siguiente buscada, a continuación, la aplicación, a continuación, temas y finalmente recursos del sistema. Esta metodología de búsqueda es idéntica a cómo se busca en el árbol si se solicita un recurso mediante una referencia de recurso dinámico en el marcado. Para obtener más información acerca de las búsquedas de recursos, consulte [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 Normalmente, se convierte de forma inmediata una <xref:System.Windows.FrameworkElement.FindResource%2A> valor devuelto al tipo de la propiedad que se establece con el valor de recurso devuelto.  
  
 Las claves de recursos no son necesariamente cadenas. Por ejemplo, los estilos para los controles en el nivel de tema deliberadamente estén clasificados en el <xref:System.Type> del control y los estilos de aplicación o página para controles normalmente utilizan esta misma clave convención. Para obtener más información, consulte [estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md) o [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se obtiene un recurso con nombre y lo convierte a un tipo adecuado para rellenar una propiedad.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          No se encontró <paramref name="resourceKey" /> y un controlador de eventos no existe para el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.  
  
 O bien  
  
 No se encontró <paramref name="resourceKey" /> y la propiedad <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> es <see langword="false" /> en el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección en la que el texto y otros elementos de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] fluyen dentro de cualquier elemento primario que controla su diseño.</summary>
        <value>La dirección en la que el texto y otros elementos de la [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] fluyen dentro de su elemento primario, como un valor de la enumeración. El valor predeterminado es <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los conjuntos de uso de propiedades de dependencia del <xref:System.Windows.FrameworkElement.FlowDirection%2A> en este elemento. Debido a la herencia del valor de propiedad, establecer <xref:System.Windows.FrameworkElement.FlowDirection%2A> en un elemento puede establecer potencialmente <xref:System.Windows.FrameworkElement.FlowDirection%2A> en todos los elementos secundarios que no haya establecido <xref:System.Windows.FrameworkElement.FlowDirection%2A> localmente o a través de otros medios como estilos.  
  
 Esta propiedad no se establece automáticamente como parte de cualquier información de referencia cultural de la aplicación, ya que un elemento puede contener contenido que no es necesariamente diseñado para cumplir con la dirección del flujo general implicada en la información de referencia cultural. Para obtener más información sobre las consideraciones de globalización, vea [globalización de WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).  
  
 Esta propiedad no tiene definida una [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] descriptor de acceso de propiedad, por lo que funciona como una propiedad de dependencia. Sin embargo, también se registra como conectado, por lo que también puede funcionar como una propiedad adjunta. El registro asociado es principalmente para que se admite la herencia del valor de propiedad, pero la propiedad también puede utilizarse como una propiedad adjunta es true. El uso de la propiedad adjunta solo es pertinente si el objeto que se va a establecer la dirección del flujo en tiene una <xref:System.Windows.FrameworkElement> elemento primario que realiza el diseño en él, no es propio un <xref:System.Windows.FrameworkElement>y no se ha definido más fácilmente un `FlowDirection` propiedad. (Parte del flujo de las clases de documento como <xref:System.Windows.Documents.Block> y <xref:System.Windows.Documents.Inline> definir sus propios `FlowDirection`, y esta propiedad también puede establecer la dirección del flujo. El valor de propiedad, a continuación, lee el host de contenido eventual sin necesidad de uso de la propiedad adjunta.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
 \<*objeto* **FlowDirection**= "<xref:System.Windows.FlowDirection>" / >  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad también puede establecerse en clases que no son <xref:System.Windows.FrameworkElement> las clases derivadas, por el texto siguiente [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] adjunta el uso de propiedad:  
  
 `<` *objeto* `FrameworkElement.` **FlowDirection**= "<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 Esta propiedad es una propiedad de dependencia y una propiedad adjunta; vea la sección Comentarios.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.FlowDirection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una propiedad que habilita la personalización de apariencia, efectos u otras características de estilo que se aplicarán a este elemento cuando capture el foco del teclado.</summary>
        <value>Estilo deseado que se aplicará en el foco. El valor predeterminado declarado en la propiedad de dependencia es un objeto <see cref="T:System.Windows.Style" /> estático vacío. Sin embargo, el valor efectivo en tiempo de ejecución suele ser (aunque no siempre) un estilo que la compatibilidad de tema proporciona para los controles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad afecta al aspecto visual pero no informa de <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> en los metadatos. Esto es porque el cambio de apariencia visual está orientado a eventos y no se aplica en todo momento y, por tanto, no debe notificar generalmente de cualquier información visual o de diseño en los metadatos.  
  
 Conceptualmente, el comportamiento visual de foco aplicado a un control debe ser coherente de un control a otro. La manera más conveniente para exigir la coherencia es cambiar sólo el estilo visual del foco si está creando un tema completo. Establecer esta propiedad en los estilos de control individual y no como parte de un tema, no es el uso previsto de esta propiedad, porque puede llevar a una experiencia de usuario confusa con respecto al foco de teclado. Si desea un comportamiento específico del control que, deliberadamente, no sea coherente en todo el tema, un enfoque mucho mejor es usar desencadenadores en los estilos para las propiedades de estado de entradas individuales, como <xref:System.Windows.UIElement.IsFocused%2A> o <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>y para hacerlo de forma que no interfieran visualmente con cualquier estilo visual del foco existente. Para obtener más información sobre la intención de diseño de <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> y alternativas centrarse propiedades, vea [aplicación de estilos para se centran en los controles y FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Uno de los siguientes:, o. Vea [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La clave que identifica el estilo que se solicita. La clave hace referencia a un recurso existente en un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Sintaxis de elemento de propiedad es técnicamente posible, pero no se recomienda. Vea [plantillas y estilos insertados](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Una referencia de enlace mediante o <xref:System.Windows.Data.Binding> también es posible, pero es poco común.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si <see cref="T:System.Windows.FrameworkElement" /> debería forzar que la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] represente el cursor declarado por la propiedad <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <value>
          <see langword="true" /> si se fuerza que la presentación del cursor use los valores actuales de <see cref="P:System.Windows.FrameworkElement.Cursor" /> para el cursor (incluidos todos los elementos secundarios) mientras está sobre este elemento; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si establece esta propiedad en `true` invalidará las preferencias del cursor establecidas por los elementos secundarios. Al hacerlo así en general aplicación [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] puede resultar confuso para el usuario, especialmente si los elementos secundarios intentan especificar los cursores. Establecer <xref:System.Windows.FrameworkElement.ForceCursor%2A> es más adecuado en escenarios de creación de subclases o la composición del control.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se fuerza el valor de cursor.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.ForceCursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Objeto <see cref="T:System.Windows.DependencyProperty" /> de destino del que se obtiene el enlace.</param>
        <summary>Devuelve el valor <see cref="T:System.Windows.Data.BindingExpression" /> que representa el enlace en la propiedad especificada.</summary>
        <returns>
          <see cref="T:System.Windows.Data.BindingExpression" /> si la propiedad de destino tiene un enlace activo; de lo contrario, devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comprobar el valor devuelto de `null` es una técnica que puede usar para determinar si una propiedad tiene un enlace activo.  
  
 Este método es simplemente un contenedor de conveniencia alrededor de la <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> método. <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> pasa la instancia actual y la `dp` parámetro <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Elemento para el que se devuelve <see cref="P:System.Windows.FrameworkElement.FlowDirection" />.</param>
        <summary>Obtiene el valor de la propiedad adjunta <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> de la clase <see cref="T:System.Windows.DependencyObject" /> especificada.</summary>
        <returns>Dirección de flujo solicitada, como un valor de la enumeración.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El propósito principal de este método es admitir la sintaxis de la propiedad adjunta para la <xref:System.Windows.FrameworkElement.FlowDirection%2A> propiedad, por lo tanto, permite que los secundarios elementos de proporcionado <xref:System.Windows.FrameworkElement> para especificar la dirección de flujo para la organización dentro de su elemento primario. Para obtener el valor actual <xref:System.Windows.FrameworkElement>, usar el direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] descriptor de acceso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Tamaño de la parte del elemento que realiza la presentación visual.</param>
        <summary>Devuelve una geometría para una máscara de recorte. La máscara se aplica si el sistema de diseño intenta organizar un elemento que es mayor que el espacio de presentación disponible.</summary>
        <returns>Geometría del recorte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los márgenes se va a restar de las `layoutSlotSize` como parte del comportamiento del sistema de diseño.  
  
 Devuelve una referencia nula indica que no se produzca ningún recorte. La implementación predeterminada siempre devuelve `null` cuando <xref:System.Windows.UIElement.ClipToBounds%2A> es `false`. Este método invalida <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>. El <xref:System.Windows.FrameworkElement> implementación utiliza <xref:System.Windows.FrameworkElement.MaxHeight%2A> y <xref:System.Windows.FrameworkElement.MaxWidth%2A> en sus cálculos. Varias subclases de <xref:System.Windows.FrameworkElement> invalide este método nuevo. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, las invalidaciones siempre devuelven `null` porque los adornos suelen estar fuera de los límites normales. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> y <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> devolver `null` si <xref:System.Windows.UIElement.ClipToBounds%2A> es `false`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La implementación predeterminada siempre devuelve <see langword="null" /> cuando <see cref="P:System.Windows.UIElement.ClipToBounds" /> es <see langword="false" />. Por lo general se espera que invalidaciones conservar este comportamiento, aunque hay excepciones, según la relación y el propósito de la clase derivada y su lógica de diseño en lugar de la clase base.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Nombre del elemento secundario que se busca.</param>
        <summary>Devuelve el elemento con nombre del árbol visual de <see cref="T:System.Windows.Controls.ControlTemplate" /> con instancias.</summary>
        <returns>Elemento solicitado. Puede ser <see langword="null" /> si no existe ningún elemento con el nombre solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plantillas de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] tienen un ámbito de nombres independiente. Esto es porque las plantillas son volver a usar y los nombres definidos en una plantilla no sean únicos cuando varias instancias de un control crea una instancia de la plantilla. Llame a la <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> método para devolver referencias a objetos que proceden de la plantilla después de que se crea una instancia. No se puede utilizar el <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> método para buscar elementos de plantillas porque <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> actúa en un más general de ámbito, y no hay ninguna conexión entre el <xref:System.Windows.Controls.ControlTemplate> sí mismo y a la plantilla de creación de instancias de clase una vez que se aplica.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> proporciona la misma función que este método. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> es pública en lugar de protegida y usa consideraciones de ámbito de nombre correctas que le permiten tener acceso a la plantilla dentro de un elemento y buscar elementos dentro de él con nombre. Utilice <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> cuando necesite obtener un elemento fuera de su control primario.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve a un elemento primario lógico alternativo para este elemento si no hay ningún elemento primario visual.</summary>
        <returns>Devuelve un valor distinto de <see langword="null" /> cada vez que una implementación de nivel de marco de WPF de este método tiene una conexión de elemento primario no visual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>. El valor predeterminado <xref:System.Windows.FrameworkElement> implementación devuelve el único elemento primario visual esperado, que es el mismo resultado que obtener el <xref:System.Windows.FrameworkElement.Parent%2A> valor. Implementaciones de la clase derivada podrían devolver relaciones primarias alternativas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del elemento secundario solicitado de la colección.</param>
        <summary>Invalida <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /> y devuelve un elemento secundario situado en el índice especificado de una colección de elementos secundarios.</summary>
        <returns>Elemento secundario solicitado. Esto no debería devolver <see langword="null" />; si el índice proporcionado está fuera del intervalo, se produce una excepción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el <xref:System.Windows.FrameworkElement> implementación, el único índice válido es cero. El modelo de contenido <xref:System.Windows.FrameworkElement.GetVisualChild%2A> es compatible con cero o un elemento secundario, no es una colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo un adorno personalizado usa los valores declarados por un <xref:System.Windows.Media.VisualCollection> que mantiene para sus diversos elementos secundarios visuales. Estos valores se notifican a través de las invalidaciones de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> y <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta implementación solo es válida para los elementos que no mantienen una colección descriptiva de elementos secundarios visuales. Cualquier elemento que tiene este tipo de colección debe invalidar este método y el índice se asignan a un índice equivalente en la colección de elementos secundarios que sea compatible con ese elemento. Un índice en el intervalo entre cero y <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (menos uno) debe devolver un elemento válido; cualquier otro índice debe producir una excepción fuera del intervalo. Un ejemplo de un tipo de elemento que admite una colección secundaria y reemplaza <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> devolver más de un posible elemento secundario es <see cref="T:System.Windows.Controls.Panel" />.  
  
 La implementación predeterminada de <see cref="T:System.Windows.FrameworkElement" /> asume que se usa solo un elemento secundario visual. Cualquier valor pasado a <paramref name="index" /> distinto de cero, se produce una excepción que se produzca. Varios elementos comunes, como decoradores, adornos o elementos con representación especializada, invalidación el <see cref="T:System.Windows.FrameworkElement" /> implementación (de la implementación de las clases base intermedias). Algunas implementaciones todavía exigen a un elemento secundario visual mientras que otras permiten una colección.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el alto sugerido del elemento.</summary>
        <value>Alto máximo del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es <see cref="F:System.Double.NaN" />. Este valor debe ser igual o mayor que 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> es una de las tres propiedades de escritura en <xref:System.Windows.FrameworkElement> que especifican la información de alto. Las otras dos son <xref:System.Windows.FrameworkElement.MinHeight%2A> y <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Si hay un conflicto entre estos valores, el orden de aplicación para determinar el alto real es que el primero <xref:System.Windows.FrameworkElement.MinHeight%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxHeight%2A>y por último, si está dentro de límites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Si este elemento es un elemento secundario dentro de algún otro elemento, a continuación, establecer esta propiedad en un valor es realmente solo un valor sugerido. El sistema de diseño, así como la lógica de diseño concreta del elemento primario usará el valor como una entrada no enlazada durante el proceso de diseño. En términos prácticos, un <xref:System.Windows.FrameworkElement> casi siempre es el elemento secundario de otra cosa; incluso cuando se configuran los <xref:System.Windows.FrameworkElement.Height%2A> en <xref:System.Windows.Window>. (Para <xref:System.Windows.Window>, que el valor se utiliza cuando el modelo de aplicación subyacente establece las suposiciones de representación básicas que crean el Hwnd que hospeda la aplicación.)  
  
 Además de a aceptable <xref:System.Double> valores, esta propiedad también puede ser <xref:System.Double.NaN?displayProperty=nameWithType>. Se trata cómo especificar el comportamiento de ajuste de tamaño automático en el código. En [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] establece el valor en la cadena "Auto" (con distinción entre mayúsculas y minúsculas) para habilitar el comportamiento de ajuste de tamaño de automático. Comportamiento de ajuste de tamaño automático implica que el elemento rellenará el alto disponible para él. Sin embargo, tenga en cuenta que controles concretos proporcionan frecuentemente valores predeterminados a través de sus estilos de tema predeterminados que se deshabilitan el comportamiento de ajuste de tamaño a menos que se vuelva a habilitar específicamente de automático.  
  
 El valor devuelto de esta propiedad siempre es igual a cualquier valor que se ha establecido en él. En cambio, el valor de la <xref:System.Windows.FrameworkElement.ActualHeight%2A> puede variar. Esto puede ocurrir estáticamente, porque el diseño rechazó el tamaño sugerido por alguna razón, o momentáneamente. El propio sistema de diseño funciona de forma asincrónica con respecto al conjunto del sistema de propiedades de <xref:System.Windows.FrameworkElement.Height%2A> y no haber procesado es determinada ajustar el tamaño de cambio de propiedad todavía.  
  
 Las restricciones de valor en el <xref:System.Double> valor se aplican mediante un <xref:System.Windows.ValidateValueCallback> mecanismo. Si se intenta establecer un valor no válido, se produce una excepción en tiempo de ejecución.  
  
 Además de la comprobación de validación, hay un valor superior no determinista enlazado para <xref:System.Windows.FrameworkElement.Height%2A> que se aplica por el sistema de diseño (se trata de un número muy grande, mayor que <xref:System.Single.MaxValue?displayProperty=nameWithType> pero menor que <xref:System.Double.MaxValue?displayProperty=nameWithType>). Si se supera este límite, el elemento no se representará y se inicia ninguna excepción. No establezca <xref:System.Windows.FrameworkElement.Height%2A> en un valor que es significativamente mayor que el tamaño máximo de cualquier posible presentación visual, o bien puede superar este límite superior no determinista.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Vea Comentarios para obtener información sobre el límite superior. Este valor se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
 **Auto**  
 Habilita el comportamiento de ajuste automático de tamaño. Vea la sección Comentarios.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Height" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las características de la alineación horizontal aplicada a este elemento cuando se encuentra dentro de un elemento primario, como un panel o control de elementos.</summary>
        <value>Un valor de alineación horizontal, como un valor de la enumeración. El valor predeterminado es <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Windows.FrameworkElement.Height%2A> y <xref:System.Windows.FrameworkElement.Width%2A> propiedades se establecen explícitamente en un elemento, estas medidas toman el precedente más alto durante el diseño y cancelarán los efectos del valor típicos <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> a <xref:System.Windows.HorizontalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> es el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] descriptor de acceso de propiedad para lo que es en realidad una propiedad de dependencia. Esta propiedad de dependencia concreta con bastante frecuencia tiene el valor "predeterminado" aparente establecido de forma distinta en elementos de la subclase, particularmente los controles. Esto se suele producir en una de estas dos formas: la propiedad de dependencia se registre de nuevo a una subclase concreta, pero con distintos metadatos para establecer sus valores predeterminados; o bien, hay que se va a aplicar un estilo predeterminado que establece ese valor de propiedad de dependencia de manera diferente. Por ejemplo, el "predeterminado" aparente de <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> para un <xref:System.Windows.Controls.Label> control estará <xref:System.Windows.HorizontalAlignment.Left>, aunque <xref:System.Windows.Controls.Label> hereda <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> directo de <xref:System.Windows.FrameworkElement>. Esto es porque ese valor se restableció dentro del estilo predeterminado de <xref:System.Windows.Controls.Label>, en la plantilla de control del estilo.  
  
 <xref:System.Windows.Controls.Canvas> No utilice <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> al crear el diseño, porque <xref:System.Windows.Controls.Canvas> se basa en la posición absoluta.  
  
 Cuando hereda <xref:System.Windows.Controls.Label> o las clases derivadas, <xref:System.Windows.Controls.Label> vuelve a definir el valor predeterminado de esta propiedad de dependencia como <xref:System.Windows.HorizontalAlignment.Left>.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los límites del ámbito para la herencia del valor de propiedad, la búsqueda de claves de recursos y la búsqueda FindAncestor de RelativeSource.</summary>
        <value>Valor de la enumeración. El valor predeterminado es <see cref="F:System.Windows.InheritanceBehavior.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algunos límites en el elemento de árbol conjunto <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> para limitar deliberadamente el ámbito del comportamiento de la herencia, para una búsqueda de recursos force para comprobar los recursos de aplicación, o para impedir que una búsqueda RelativeSource FindAncestor consultar el elemento actual o cualquier aún más. Búsqueda RelativeSource FindAncestor se produce cuando un enlace utiliza un <xref:System.Windows.Data.RelativeSource> que tiene su <xref:System.Windows.Data.RelativeSource.Mode%2A> propiedad establecida en el <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> valor.  
  
 Si desea que la clase derivada para establecer esta propiedad, debe hacerlo dentro del constructor estático o en otras rutinas de inicialización.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se inicializa <see cref="T:System.Windows.FrameworkElement" />. Este evento coincide con los casos donde el valor de la propiedad <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> cambia de <see langword="false" /> (o no definida) a <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento será genera cada vez que la <xref:System.Windows.FrameworkElement.EndInit%2A> o <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> se llaman a métodos. Las llamadas a cualquier método podrían provenir del código de aplicación, o mediante el [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] comportamiento del procesador cuando un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] se procesa la página.  
  
 Si opta por controlar <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> depende de sus requisitos. Si no necesita leer las propiedades del elemento, va a restablecer las propiedades y no necesita ninguna información de diseño, <xref:System.Windows.FrameworkElement.Initialized> podría ser mejor actuar sobre el evento. Si necesita que todas las propiedades del elemento que se va a estar disponible y se va a establecer propiedades que es probables que restablecer el diseño, <xref:System.Windows.FrameworkElement.Loaded> podría ser mejor actuar sobre el evento. Tenga cuidado de reentrada si el controlador restablece todas las propiedades que son interpretadas por el sistema de diseño para indicar que se requiere un nuevo paso de diseño. (Es posible que deba comprobar la <xref:System.Windows.FrameworkPropertyMetadata> valores en la propiedad si no está seguro de qué propiedades pueden requerir un nuevo diseño pasan si se cambian.)  
  
 Para obtener más información acerca de la secuencia de eventos de objeto para un <xref:System.Windows.FrameworkElement>y también para varios relacionados con la aplicación y clases de elementos, vea [eventos de duración de objetos](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el contexto de entrada usado por este objeto <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>Ámbito de entrada, que modifica cómo se interpreta la entrada desde métodos de entrada alternativos. El valor predeterminado es <see langword="null" /> (que tiene como resultado un control predeterminado de comandos).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia hereda los valores de propiedad. Si no hay elementos secundarios sin otros valores para <xref:System.Windows.FrameworkElement.InputScope%2A> establece a través de valores o estilos, locales, a continuación, el sistema de propiedad establecerá el valor sea el <xref:System.Windows.FrameworkElement.InputScope%2A> valor del elemento antecesor más cercano con este valor asignado.  
  
 Aunque un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uso de sintaxis se muestra y se permite sintácticamente, establecer esta propiedad [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] no es muy común.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.InputScope" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se inicializó este elemento, ya sea durante el procesamiento por un procesador [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] o mediante una llamada explícita a su método <see cref="M:System.Windows.FrameworkElement.EndInit" />.</summary>
        <value>
          <see langword="true" /> si las llamadas al método o el procesamiento [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] mencionados anteriormente inicializan el elemento; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad también se pueden `true` si este elemento se ha movido dentro del árbol lógico, que tiene un nuevo elemento primario y, por lo tanto, se vuelve a cargar nuevo.  
  
 Esta propiedad es útil si también usa <xref:System.Windows.FrameworkElement.BeginInit%2A> y <xref:System.Windows.FrameworkElement.EndInit%2A>. Elementos del árbol lógico que es cargado por una [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] procesador se asegura de que se inicialice. Elementos no está en el árbol lógico se inicializan cuando <xref:System.Windows.FrameworkElement.EndInit%2A> se llama. En ausencia de cualquier control concreto de <xref:System.Windows.FrameworkElement.BeginInit%2A> y <xref:System.Windows.FrameworkElement.EndInit%2A>, esto ocurrirá en cuanto el constructor devuelva el resultado inicializado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este elemento se ha cargado para la presentación.</summary>
        <value>
          <see langword="true" /> si el elemento actual está asociado a un árbol de elementos; <see langword="false" /> si el elemento nunca se ha asociado a un árbol de elementos cargado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Desde un recién construido <xref:System.Windows.FrameworkElement>, esta propiedad comienza `false`y sigue siendo `true` después de que se establece en `true`, incluso si posteriormente se eliminará el elemento de un árbol lógico conectado por código. `true` la lógica de presentación general establece estado cuando se cargan los elementos en el motor de presentación.  
  
 Normalmente, los elementos cargados son representado, pero no todos los <xref:System.Windows.FrameworkElement> las clases derivadas tengan una presentación y otras propiedades como <xref:System.Windows.UIElement.Visibility%2A> puede influir en la presentación.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa dos controladores: uno está controlando el <xref:System.Windows.FrameworkElement.Loaded> evento del elemento raíz, por lo que se tiene la certeza de que el elemento de raíz de la página se carga porque esa es la importancia del evento. El otro controlador se enlaza a un control de usuario y las llamadas <xref:System.Windows.FrameworkElement.IsLoaded%2A> para asegurarse de que el elemento raíz se carga por completo. Ambos controladores llaman a la misma función (no mostrada) que rellenará los elementos secundarios con datos nuevos.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la información del idioma de localización o globalización que se aplica a un elemento.</summary>
        <value>Información del idioma para este elemento. El valor predeterminado es <see cref="T:System.Windows.Markup.XmlLanguage" /> con el valor <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> establecido en la cadena "en-US".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los formatos de cadena siguen el estándar RFC 3066. Por ejemplo, EE. UU. Inglés es "en-US". Para obtener más información sobre los valores y el formato, vea <xref:System.Windows.Markup.XmlLanguage>.  
  
 Esta propiedad de dependencia hereda los valores de propiedad. Si no hay elementos secundarios sin otros valores para <xref:System.Windows.FrameworkElement.Language%2A> establecido a través de valores o estilos locales, el sistema de propiedad establecerá el valor sea el <xref:System.Windows.FrameworkElement.Language%2A> valor del elemento antecesor más cercano con este valor asignado.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] define el significado general de los `xml:lang` atributo. <xref:System.Windows.FrameworkElement.Language%2A> Básicamente, expone el significado de este atributo como una propiedad de dependencia. <xref:System.Windows.FrameworkElement.Language%2A> se puede ajustar mediante programación y pueden participar en la herencia del valor de sistema de propiedad de forma que se asemeja a cómo el `xml:lang` atributo puede heredar al ámbito de elemento secundarios en [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Si establece <xref:System.Windows.FrameworkElement.Language%2A>, ese valor se convierte en el `xml:lang` y sobrescribe cualquier valor anterior. Para obtener más información, consulte [XML: lang en XAML de control](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Language" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una transformación gráfica que debe aplicarse a este elemento cuando se realiza el diseño.</summary>
        <value>Transformación que este elemento debe utilizar. El valor predeterminado es <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diferencia <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> afectarán a los resultados del diseño.  
  
 Al establecer una transformación proporciona capacidades eficaces de escala y giro. Sin embargo, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> omite <xref:System.Windows.Media.TranslateTransform> operaciones. Esto es porque el comportamiento del sistema de diseño para los elementos secundarios de un <xref:System.Windows.FrameworkElement> corrige automáticamente cualquier desplazamiento a la posición de un elemento escalado o girado en el diseño y el sistema de coordenadas del elemento primario.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> puede llevar a rendimiento de la aplicación si se invoca en un escenario que no requiere un recorrido completo por el sistema de diseño. Al aplicar un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> a la <xref:System.Windows.Controls.Panel.Children%2A> colección de la <xref:System.Windows.Controls.Panel>, desencadena un nuevo paso por el sistema de diseño y fuerza objetos todos los que aparecen en pantalla para repetir la medición y reorganizar. Si va a actualizar la aplicación completa [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], esta funcionalidad podría ser exactamente lo que necesita. Sin embargo, si no es necesario un paso de diseño completa, use la <xref:System.Windows.UIElement.RenderTransform%2A> propiedad, que no invoca el sistema de diseño y, por lo tanto, normalmente es mejor usar para este escenario.  
  
 Escenarios de ejemplo donde <xref:System.Windows.FrameworkElement.LayoutTransform%2A> sería útil son: girar elementos como componentes de menú de horizontal a vertical o viceversa, escalar elementos (acercar) en el foco, proporcionar el comportamiento de edición, etcetera.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo aplicar un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> a un elemento. En el ejemplo se crea una instancia de <xref:System.Windows.Controls.Button> y se hospeda dentro de un elemento primario <xref:System.Windows.Controls.Grid>. También usa el <xref:System.Windows.FrameworkElement.LayoutTransform%2A> propiedad que se va a aplicar un <xref:System.Windows.Media.RotateTransform> a la <xref:System.Windows.Controls.Button>.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.LayoutTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento se presenta, se representa y está listo para la interacción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> es normalmente el último evento produce en una secuencia de inicialización del elemento. Siempre se producirá después de <xref:System.Windows.FrameworkElement.Initialized>. Si opta por controlar <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> depende de sus requisitos. Si no necesita leer las propiedades del elemento, va a restablecer las propiedades y no necesita ninguna información de diseño, <xref:System.Windows.FrameworkElement.Initialized> podría ser mejor actuar sobre el evento. Si necesita que todas las propiedades del elemento que se va a estar disponible y se va a establecer propiedades que es probables que restablecer el diseño, <xref:System.Windows.FrameworkElement.Loaded> podría ser mejor actuar sobre el evento. Tenga cuidado de reentrada si el controlador restablece todas las propiedades que son interpretadas por el sistema de diseño para indicar que se requiere un nuevo paso de diseño. (Es posible que deba comprobar la <xref:System.Windows.FrameworkPropertyMetadata> valores en la propiedad si no está seguro de qué propiedades pueden requerir un nuevo diseño pasan si se cambian.)  
  
 Para obtener más información acerca de la secuencia de eventos de objeto para un <xref:System.Windows.FrameworkElement>y también para varios relacionados con la aplicación y clases de elementos, vea [eventos de duración de objetos](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 Los eventos enrutados directos no siguen una ruta, sólo se controlan dentro del mismo elemento en el que se generan. Dirigir los eventos enrutados admiten otro comportamiento de evento enrutado: admiten una colección de controladores accesible y se pueden usar como un <xref:System.Windows.EventTrigger> en un estilo.  
  
 <xref:System.Windows.FrameworkElement.Loaded> y <xref:System.Windows.FrameworkElement.Unloaded> ambos puede producir en los controles como resultado de los cambios de tema del sistema iniciado por el usuario. Un cambio de tema produce una invalidación de la plantilla de control y el árbol visual contenido, que a su vez hace que el control completo descargar y volver a cargar. Por lo tanto, <xref:System.Windows.FrameworkElement.Loaded> no se puede suponer que se produzca solo cuando una página se carga por primera vez a través de la navegación a la página.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.Loaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un enumerador para los elementos secundarios lógicos de este elemento.</summary>
        <value>Enumerador para los elementos secundarios lógicos de este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> le permite recorrer en iteración los elementos secundarios. Esto es útil para los elementos que pueden no tener una colección definida dedicada, pero sigue sin contener más de un elemento secundario, especialmente <xref:System.Windows.FrameworkContentElement> los elementos secundarios.  
  
 Para obtener más información sobre cómo usar <xref:System.Windows.FrameworkElement.LogicalChildren%2A> y <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consulte [árboles de WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el margen externo de un elemento.</summary>
        <value>Proporciona valores de margen para el elemento. El valor predeterminado es <see cref="T:System.Windows.Thickness" /> con todas las propiedades igual a 0 (cero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El margen es el espacio entre este elemento y otros elementos que serán adyacentes cuando se cree el [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]. Elementos compartidos podrían ser elementos del mismo nivel (como otros elementos de la colección de un control de elemento primario común) o también podrían ser primario de este elemento.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> se establece como un <xref:System.Windows.Thickness> estructura en lugar de como un número para que se puede establecer el margen asimétrica. El <xref:System.Windows.Thickness> propia estructura admite la conversión de tipo de cadena para que pueda especificar un asimétrica <xref:System.Windows.FrameworkElement.Margin%2A> en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] también de la sintaxis de atributo.  
  
 Un margen distinto de cero aplica espacio fuera el diseño de elemento <xref:System.Windows.FrameworkElement.ActualWidth%2A> y <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  
  
 Los márgenes son adicionales para los elementos del mismo nivel en un diseño; Por ejemplo, dos elementos adyacentes que con un margen de 30 establecidos en el borde adyacente tendría 60 unidades de espacio entre ellos.  
  
 Elementos que tienen márgenes establecidos no restringen normalmente el tamaño del elemento especificado <xref:System.Windows.FrameworkElement.Margin%2A> si el espacio del rectángulo asignado no es lo suficientemente grande como para que el margen más el área de contenido del elemento. En su lugar se restringirá el área de contenido del elemento cuando se calcula el diseño. El único caso donde se pueden restringir los márgenes también es si el contenido ya está restringido a cero.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *izquierda, arriba, derecha, abajo*  
 Valores numéricos entre 0 y <xref:System.Double.PositiveInfinity> que especifican las cuatro propiedades posibles de dimensión de una <xref:System.Windows.Thickness> estructura.  
  
 El uso de atributos también acepta valores abreviados que se aplican en el orden proporcionado, simétricamente y lógicamente. Por ejemplo, `Margin="20"` se interpretarán implica un <xref:System.Windows.Thickness> con todas las propiedades establecidas en 20. `Margin="20,50"` se interpretarán implica un <xref:System.Windows.Thickness> con <xref:System.Windows.Thickness.Left%2A> y <xref:System.Windows.Thickness.Right%2A> establecido en 20, y <xref:System.Windows.Thickness.Top%2A> y <xref:System.Windows.Thickness.Bottom%2A> establecido en 50.  
  
 La unidad predeterminada para una <xref:System.Windows.Thickness> medida es [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]. También puede especificar otras unidades si anexa las cadenas de tipo de unidad `cm`, `in`, o `pt` a cualquier medida.  
  
 Número de valores que se proporcionan como [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] atributos no necesitan especificar los separadores decimales (0 es aceptable, no tiene que ser debe proporcionarse como 0,0). Para obtener más información sobre [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] uso, consulte <xref:System.Windows.Thickness>.  
  
 *thicknessReference*  
 Una referencia de objeto a un archivo <xref:System.Windows.Thickness>. Podría tratarse de un `}`, a, o `}` referencia. Para obtener más información sobre [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] uso, consulte <xref:System.Windows.Thickness>.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Margin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la máxima altura a la que queda restringido el elemento.</summary>
        <value>Alto máximo del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es <see cref="F:System.Double.PositiveInfinity" />. Este valor puede ser cualquier valor igual o superior a 0,0. El valor de <see cref="F:System.Double.PositiveInfinity" /> también es válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es una de las tres propiedades en <xref:System.Windows.FrameworkElement> que especifican la información de alto. Las otras dos son <xref:System.Windows.FrameworkElement.MinHeight%2A> y <xref:System.Windows.FrameworkElement.Height%2A>.  Si hay un conflicto entre estos valores, el orden de aplicación para determinar el alto real es primero <xref:System.Windows.FrameworkElement.MinHeight%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxHeight%2A>y, finalmente, si cada una de ellas está dentro de límites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Las restricciones de valor en el <xref:System.Double> valor se aplican mediante un <xref:System.Windows.ValidateValueCallback> mecanismo. Si se intenta establecer un valor no válido se produce una excepción en tiempo de ejecución.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Esto se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 El mismo <xref:System.Double> se aplican restricciones de intervalo como se mencionó en la sección de valor de propiedad, salvo que se deba utilizar [extensión de marcado x: Static](~/docs/framework/xaml-services/x-static-markup-extension.md) si debe establecer explícitamente el valor sea <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.MaxHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor máximo que puede tomar el ancho del elemento.</summary>
        <value>Ancho máximo del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es <see cref="F:System.Double.PositiveInfinity" />. Este valor puede ser cualquier valor igual o superior a 0,0. El valor de <see cref="F:System.Double.PositiveInfinity" /> también es válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es una de las tres propiedades en <xref:System.Windows.FrameworkElement> que especifican la información de ancho. Las otras dos son <xref:System.Windows.FrameworkElement.MinWidth%2A> y <xref:System.Windows.FrameworkElement.Width%2A>. Si hay un conflicto entre estos valores, el orden de aplicación para determinar el ancho real es primero <xref:System.Windows.FrameworkElement.MinWidth%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxWidth%2A>y, finalmente, si cada una de ellas está dentro de límites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Las restricciones de valor en el <xref:System.Double> valor se aplican mediante un <xref:System.Windows.ValidateValueCallback> mecanismo. Si se intenta establecer un valor no válido, se produce una excepción en tiempo de ejecución.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Esto se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 El mismo <xref:System.Double> se aplican restricciones de intervalo como se mencionó en la sección de valor de propiedad, salvo que se deba utilizar [extensión de marcado x: Static](~/docs/framework/xaml-services/x-static-markup-extension.md) para establecer el valor sea <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.MaxWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Tamaño disponible que el elemento primario puede otorgar a los elementos secundarios.</param>
        <summary>Implementa el comportamiento básico del sistema de diseño de paso de medida para <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Tamaño deseado de este elemento en el diseño.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> para conectar el núcleo de WPF y las implementaciones de medida del diseño de nivel de marco WPF. El <xref:System.Windows.FrameworkElement> implementación sella el método. Para ajustar el comportamiento de diseño del paso de medida de cualquier elemento que se basa en el nivel de marco WPF, invalide <xref:System.Windows.FrameworkElement.MeasureOverride%2A> en su lugar. Para ajustar la medida pasar el comportamiento del diseño de un elemento que deliberadamente no se basan en el nivel de marco de WPF o usar <xref:System.Windows.FrameworkElement>, invalidar <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Tamaño disponible que este elemento puede otorgar a los elementos secundarios. Se puede usar infinito como valor para indicar que el elemento se ajustará a cualquier contenido disponible.</param>
        <summary>Cuando se invalida en una clase derivada, mide el tamaño del diseño necesario para los elementos secundarios y determina un tamaño para la clase derivada de <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Tamaño que este elemento determina que necesita durante el diseño, según sus cálculos de los tamaños de los elementos secundarios.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidar <xref:System.Windows.FrameworkElement.MeasureOverride%2A> para implementar el comportamiento de ajuste de tamaño de diseño personalizado para su elemento cuando participa en la [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sistema de diseño. Su implementación debe hacer lo siguiente:  
  
1.  Recorrer en iteración la colección en particular de su elemento de elementos secundarios que forman parte del diseño, llamada <xref:System.Windows.UIElement.Measure%2A> en cada elemento secundario.  
  
2.  Obtener inmediatamente <xref:System.Windows.UIElement.DesiredSize%2A> en el elemento secundario (Esto se establece como una propiedad después de <xref:System.Windows.UIElement.Measure%2A> se denomina).  
  
3.  Calcule el tamaño deseado neto del elemento primario según la medida de los elementos secundarios.  
  
 El valor devuelto de <xref:System.Windows.FrameworkElement.MeasureOverride%2A> debe tener el tamaño del elemento propio deseado, que, a continuación, se convierte en la medida de entrada para el elemento primario del elemento actual. Este mismo proceso continúa a través del sistema de diseño hasta que se alcanza el elemento raíz de la página.  
  
 Durante este proceso, los elementos secundarios podrían devolver un mayor <xref:System.Windows.UIElement.DesiredSize%2A> tamaño que la inicial `availableSize` para indicar que el elemento secundario requiere más espacio. Podría tratarse de su propia implementación mediante la introducción de una región desplazable, al cambiar el tamaño del control primario, mediante el establecimiento de alguna manera de orden apilado o cualquier número de soluciones para medir u organizar el contenido.  
  
> [!IMPORTANT]
>  Deben llamar elementos <xref:System.Windows.UIElement.Measure%2A> en cada elemento secundario durante este proceso, en caso contrario, los elementos secundarios no volverá correctamente tamaño ni se organizan.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El código sin compilar siguiente muestra este modelo de implementación.  <c>VisualChildren</c> representa una propiedad de colección enumerable de elementos secundarios que se debe definir su propio elemento. La propiedad puede tener cualquier nombre. <c>VisualChildren</c> es un nombre de marcador de posición para los fines de este ejemplo, <c>VisualChildren</c> no es un [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] proporcionados por [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] o una parte de un modelo de nomenclatura...  
  
 [!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)]
 [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor mínimo que puede tomar el alto del elemento.</summary>
        <value>Alto mínimo del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es 0.0. Este valor puede ser cualquier valor igual o superior a 0,0. Sin embargo, <see cref="F:System.Double.PositiveInfinity" /> y <see cref="F:System.Double.NaN" /> NO son valores válidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es una de las tres propiedades en <xref:System.Windows.FrameworkElement> que especifican la información de alto.  Las otras dos son <xref:System.Windows.FrameworkElement.Height%2A> y <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Si hay un conflicto entre estos valores, el orden de aplicación para determinar el alto real es primero <xref:System.Windows.FrameworkElement.MinHeight%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxHeight%2A>y, finalmente, si cada una de ellas está dentro de límites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Las restricciones de valor en el <xref:System.Double> valor se aplican mediante un <xref:System.Windows.ValidateValueCallback> mecanismo. Si se intenta establecer un valor no válido, se produce una excepción en tiempo de ejecución.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Esto se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 El mismo <xref:System.Double> se aplican restricciones de intervalo como se mencionó en la sección de valor de propiedad.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.MinHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor mínimo que puede tomar el ancho del elemento.</summary>
        <value>Ancho mínimo del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es 0.0. Este valor puede ser cualquier valor igual o superior a 0.0. Sin embargo, <see cref="F:System.Double.PositiveInfinity" /> y <see cref="F:System.Double.NaN" /> no son valores válidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es una de las tres propiedades en <xref:System.Windows.FrameworkElement> que especifican la información de ancho.  Las otras dos son <xref:System.Windows.FrameworkElement.Width%2A> y <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Si hay un conflicto entre estos valores, el orden de aplicación para determinar el ancho real es primero <xref:System.Windows.FrameworkElement.MinWidth%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxWidth%2A>y, finalmente, si cada una de ellas está dentro de límites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Las restricciones de valor en el <xref:System.Double> valor se aplican mediante un <xref:System.Windows.ValidateValueCallback> mecanismo. Si se intenta establecer un valor no válido, se produce una excepción en tiempo de ejecución.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Esto se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 El mismo <xref:System.Double> se aplican restricciones de intervalo como se mencionó en la sección de valor de propiedad.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.MinWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Dirección en la que se mueve el foco, como valor de la enumeración.</param>
        <summary>Aleja el foco de teclado de este elemento y lo mueve a otro elemento en la dirección de recorrido proporcionada.</summary>
        <returns>Devuelve <see langword="true" /> si el foco se mueve correctamente; <see langword="false" /> si el elemento de destino en la dirección especificada no existe o no puede recibir el foco del teclado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación invalida <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> y sella el método.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que administra varias posibles entradas del botón. Cada botón representa una posible <xref:System.Windows.Input.FocusNavigationDirection>. El controlador realiza un seguimiento del elemento con foco de teclado actual y llama a <xref:System.Windows.FrameworkElement.MoveFocus%2A> en ese elemento, especificando la correspondiente <xref:System.Windows.Input.FocusNavigationDirection> como inicialización para el <xref:System.Windows.Input.TraversalRequest> proporciona el parámetro de tipo.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de identificación del elemento. El nombre proporciona una referencia para que el código subyacente, por ejemplo el código de controlador de eventos, pueda hacer referencia a un elemento de marcado después de construirlo durante su procesamiento por [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</summary>
        <value>Nombre del elemento. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso más común de esta propiedad es especificar un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] nombre del elemento como un atributo en el marcado.  
  
 Básicamente, esta propiedad proporciona una propiedad de comodidad de nivel de marco WPF para establecer el [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md).  
  
 Nombres deben ser únicos dentro de un ámbito de nombres. Para obtener más información, consulte [ámbitos de nombres de XAML de WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Obtener un <xref:System.Windows.FrameworkElement.Name%2A> si va a crear elementos de código no es común. Si ya tiene la referencia adecuada en el código, simplemente puede llamar a métodos y propiedades en el elemento de referencia y no suelen necesidad el <xref:System.Windows.FrameworkElement.Name%2A>. Una excepción a esto es si la <xref:System.Windows.FrameworkElement.Name%2A> cadena tiene algún significado sobrecargado, por ejemplo si es útil mostrar el nombre en [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Establecer un <xref:System.Windows.FrameworkElement.Name%2A> desde el código subyacente si original <xref:System.Windows.FrameworkElement.Name%2A> se estableció en marcado también se recomienda no y cambiar la propiedad después de cargar el [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] no cambiará la referencia al objeto original. Las referencias a objetos se crean solo cuando los ámbitos de nombre subyacentes se crean explícitamente durante el análisis. Debe llamar específicamente a <xref:System.Windows.FrameworkElement.RegisterName%2A> para realizar un cambio efectivo en el <xref:System.Windows.FrameworkElement.Name%2A> propiedad de un elemento ya cargado.  
  
 Una notable es el caso de que el valor <xref:System.Windows.FrameworkElement.Name%2A> desde el código es importante es al registrar los nombres para los elementos que guiones gráficos will ejecutan, por lo que sí pueden hacer referencia en tiempo de ejecución. Para poder registrar un nombre, también deba crear una instancia y asignar un <xref:System.Windows.NameScope> instancia. Vea la sección ejemplo o [información general de guiones gráficos](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 Establecer <xref:System.Windows.FrameworkElement.Name%2A> desde el código tiene limitado a las aplicaciones, pero no recibe un elemento <xref:System.Windows.FrameworkElement.Name%2A> es más frecuente. Un escenario determinado es si la aplicación admite un modelo de navegación donde se recargan las páginas en la aplicación y el código de tiempo de ejecución no es necesariamente definido para esa página de código subyacente. El método de utilidad <xref:System.Windows.FrameworkElement.FindName%2A>, que está disponible desde cualquier <xref:System.Windows.FrameworkElement>, puede buscar cualquier elemento por <xref:System.Windows.FrameworkElement.Name%2A> en el árbol lógico de ese elemento, buscar en el árbol de forma recursiva según sea necesario. O bien puede usar el <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> método estático de <xref:System.Windows.LogicalTreeHelper>, que también toma un <xref:System.Windows.FrameworkElement.Name%2A> cadena como argumento.  
  
 Normalmente utiliza elementos raíz (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> por ejemplo) implementan la interfaz <xref:System.Windows.Markup.INameScope>. Las implementaciones de esta interfaz se deben exigir que los nombres sean inequívocos en su ámbito. Los elementos raíz que definen esta interfaz también definen los límites de comportamiento de ámbito de nombres para todas las relacionadas [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].  
  
 El <xref:System.Windows.FrameworkElement.Name%2A> propiedad también actúa como identificador para otros procesos. Por ejemplo, el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] utilizará el modelo de automatización <xref:System.Windows.FrameworkElement.Name%2A> como AutomationId para los clientes y los proveedores.  
  
 Los valores de cadena usados para <xref:System.Windows.FrameworkElement.Name%2A> presentan algunas restricciones, como impuestas por subyacente [Directiva x: Name](~/docs/framework/xaml-services/x-name-directive.md) definido por el [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] especificación. En concreto, un <xref:System.Windows.FrameworkElement.Name%2A> debe comenzar con una letra o el carácter de subrayado (_) y debe contener solo letras, dígitos o caracteres de subrayado. Para obtener más información, consulte [ámbitos de nombres de XAML de WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 <xref:System.Windows.FrameworkElement.Name%2A> es uno de las muy pocas propiedades de dependencia que no se pueden animar (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> es `true` en los metadatos), ya que el propio nombre es vital para dirigirse a una animación. Enlace de datos un <xref:System.Windows.FrameworkElement.Name%2A> es técnicamente posible, pero es un escenario muy poco común porque un enlace de datos <xref:System.Windows.FrameworkElement.Name%2A> no puede atender el propósito principal de la propiedad: proporcionar un punto de conexión del identificador para el código subyacente.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.NameProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Windows.FrameworkElement.Name%2A> propiedad en el código y, a continuación, registra el nombre en el recién creado <xref:System.Windows.NameScope> mediante una llamada a <xref:System.Windows.FrameworkElement.RegisterName%2A>. La técnica que se muestra aquí es un requisito para animar con guiones gráficos, porque los guiones gráficos requieren que el <xref:System.Windows.FrameworkElement.Name%2A>y no se puede destinar por referencia de objeto.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Name" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, se invoca siempre que el código de aplicación o los procesos internos llaman a <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada.  
  
 Las plantillas son la sección del árbol visual completa de un elemento que proviene de la propiedad de la plantilla de un <xref:System.Windows.Style> que se aplica para el elemento. Para obtener más información, consulte [Aplicar estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Las clases derivadas de <see cref="T:System.Windows.FrameworkElement" /> puede usar este método como una notificación para una variedad de escenarios posibles:  
  
-   Puede llamar a su propia implementación de código que construye el resto de un árbol visual del elemento.  
  
-   Puede ejecutar código que se basa en el árbol visual a partir de plantillas que se hayan aplicado, como obtener referencias a elementos con nombre que provienen de una plantilla.  
  
-   Puede introducir servicios que solo tienen sentido que existan una vez completado el árbol visual a partir de plantillas.  
  
-   Puede establecer los Estados y las propiedades de elementos dentro de la plantilla que dependen de otros factores. Por ejemplo, valores de propiedad podrían estar solo puede detectarlos si se conoce el elemento primario, o cuando se deriva de una determinada clase usa una plantilla común.  
  
 Los implementadores siempre deben llamar a la implementación base antes de su propia implementación. <see cref="T:System.Windows.FrameworkElement" /> él mismo no tiene ningún valor predeterminado podrían implementación, pero las clases que intervengan.  
  
 <see cref="T:System.Windows.Controls.Control" /> Proporciona una invalidación similar, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Proporciona datos sobre el evento.</param>
        <summary>Se invoca cada vez que un evento enrutado <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> no administrado llega a esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Todavía debe llamar a la implementación base en caso de que una clase intermedia en la herencia ha implementado este método.  
  
 El propósito de este método es algo similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: proporciona los medios para controlar el evento correspondiente de las clases derivadas con un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se ha generado el evento enrutado por un elemento secundario, no necesariamente el elemento que se va a invocar controladores, por lo que la implementación deberá tener en cuenta el evento propiedades del origen de argumentos (y no debe intentar volver a generar el evento en la mayoría de los casos). Las subclases de <xref:System.Windows.FrameworkElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta. Un escenario potencial es tomar los argumentos del evento y marcar deliberadamente el evento como controlado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.RoutedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cada vez que un evento enrutado <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> no administrado llega a esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Todavía debe llamar a la implementación base en caso de que una clase intermedia en la herencia ha implementado este método.  
  
 El propósito de este método es algo similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: proporciona los medios para controlar el evento correspondiente de las clases derivadas con un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se ha generado el evento enrutado por un elemento secundario, no necesariamente el elemento que se va a invocar controladores, por lo que la implementación deberá tener en cuenta el evento propiedades del origen de argumentos (y no debe intentar volver a generar el evento en la mayoría de los casos). Las subclases de <xref:System.Windows.FrameworkElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta. Un escenario potencial es tomar los argumentos del evento y marcar deliberadamente el evento como controlado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.RoutedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Se invoca cada vez que un evento enrutado <see cref="E:System.Windows.UIElement.GotFocus" /> no administrado llega a este elemento en su ruta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de otros en * métodos expuestos por los elementos base, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> tiene una implementación predeterminada. En concreto, tiene una implementación que invalida la implementación nula en el siguiente nivel del elemento base hacia abajo, <xref:System.Windows.UIElement.OnGotFocus%2A>. Cuando se invoca, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> establece el comportamiento de foco adecuado en este elemento en los casos donde se originó el evento desde el elemento actual debido al foco del teclado. El <xref:System.Windows.FrameworkElement.OnGotFocus%2A> controlador no marca los argumentos de evento como controlado, incluso cuando se establece foco al elemento actual. Si el origen del evento fuera otro elemento en el árbol (no el elemento actual), el controlador no hace nada.  
  
 Puede invalidar este método para cambiar el comportamiento de foco predeterminado en el elemento, pero tenga en cuenta que cambiar el comportamiento de foco de esta manera se lograría mejor no permitiendo que el elemento poder recibir el foco en absoluto (vea <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si piensa marcar el evento como controlado en los argumentos, debe tener en cuenta las consecuencias en control de eventos en los otros elementos primarios en el árbol de elementos. Dado que este controlador actúa sobre un evento con el enrutamiento de propagación, establecer el foco al actual <paramref name="sender" /> por el evento argumentos pueden no ser adecuados. Enfoque posible que deba ir a un elemento secundario compuesto o a un elemento primario, dependiendo de la composición de ciertos controles. Por consiguiente, marcar un evento de foco como administrado sólo se recomienda si la totalidad del árbol visual que el evento está distribuyendo a través de forma parte de la composición de un control que crearon.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.RoutedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.FrameworkElement.Initialized" />. Este método se invoca cada vez que <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> se establece en <see langword="true" /> internamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este determinado en * método no es un enlace de controlador de clase. Ni sigue exactamente la establecida [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] en * convención de método que se puede suprimir el evento invalidando este método y no llamando a la implementación base.  
  
 Tenga en cuenta que la <xref:System.Windows.FrameworkElement.IsInitialized%2A> propiedad es de solo lectura, por lo que no se puede establecer <xref:System.Windows.FrameworkElement.IsInitialized%2A> para forzar el comportamiento de inicialización. Establecer el estado de inicialización está diseñada para realizarse únicamente por el [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La implementación predeterminada de este método virtual genera el evento como se describió anteriormente. Las invalidaciones deben llamar a la implementación base para conservar este comportamiento. Si no se llama a la implementación base, no sólo no genera el <see cref="E:System.Windows.FrameworkElement.Initialized" /> eventos tal y como se espera que por lo general de un <see cref="T:System.Windows.FrameworkElement" /> clase derivada, pero también se suprimirá dos importantes estilo y el tema de estilo inicialización operaciones que son se implementa mediante la implementación base.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos de evento que describen la propiedad que cambió, así como los valores antiguos y nuevos.</param>
        <summary>Se invoca cada vez que se actualiza el valor efectivo de una propiedad de dependencia de este control <see cref="T:System.Windows.FrameworkElement" />. Propiedad de dependencia concreta que cambió se notifica en el parámetro de argumentos. Invalida <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no está pensado para detectar generalmente cambios de propiedad o invalidaciones. En su lugar, está diseñado para que las modificaciones del modelo de invalidación general si se conoce cierta información sobre amplias clasificaciones de propiedades.  
  
 Este método se invoca posiblemente muchas veces durante la vida de un objeto. Por lo tanto, puede lograr un mejor rendimiento si invalida los metadatos de propiedades concretas y, a continuación, adjuntar <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funciones para las propiedades individuales. Sin embargo, use este método si un <xref:System.Windows.FrameworkElement> incluye un número significativo de propiedades de dependencia interrelacionadas por valor, o si incluye lógica como el comportamiento de representación que se debe volver a ejecutar para varios casos de invalidaciones de propiedad relacionados.  
  
 Tenga en cuenta que hay una con el mismo nombre `OnPropertyChanged` método con una firma diferente (el tipo de parámetro es <xref:System.ComponentModel.PropertyChangedEventArgs>) que pueden aparecer en una serie de clases. Que `OnPropertyChanged` se usa para las notificaciones del objeto de datos y forma parte del contrato para <xref:System.ComponentModel.INotifyPropertyChanged>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Llame siempre a la implementación base, como la primera operación en la implementación. Si no es así, se deshabilitará significativamente toda la matriz [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades, lo que produce valores incorrectos que se notificarán. Específico del <see cref="T:System.Windows.FrameworkElement" /> implementación también es responsable de mantener el estado apropiado para una variedad de propiedades que afectan a la interfaz de usuario visible. Puede tratarse invalidando el árbol visual según los cambios para definir el estilo en los momentos adecuados.</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Detalles del tamaño anterior y nuevo implicado en el cambio.</param>
        <summary>Provoca el evento <see cref="E:System.Windows.FrameworkElement.SizeChanged" />, utilizando la información especificada como parte de los datos de evento virtuales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. Si se llama a este método se restablecerá la <xref:System.Windows.FrameworkElement.ActualWidth%2A> propiedad, el <xref:System.Windows.FrameworkElement.ActualHeight%2A> propiedad, o ambos, dependiendo de lo que se especifica como cambian en los argumentos proporcionados y siempre es conveniente provocar el evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>No invalide este método para escenarios de diseño habitual. El sistema de diseño funciona de forma asincrónica deliberadamente para garantizar que todo el diseño posible organizar y casos de medida se tienen en cuenta. El sistema de diseño invalidar métodos <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> y <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> normalmente son suficientes para cualquier personalización de diseño necesarias. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> se expone como un virtual. Puede invalidar <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> para corregir para casos excepcionales, donde un cambio de comportamiento en tiempo de ejecución relacionados con los eventos que se combina con el control de entrada recomposición en respuesta puede proporcionar información de diseño inexacta.  
  
 Todavía puede invalidar este método en clases derivadas (se protege pero no sellado). Llame siempre a la implementación base para conservar el comportamiento mencionado anteriormente, a menos que tenga razones muy concretas para deshabilitar el comportamiento predeterminado de la representación de nivel de marco WPF. Error al generar el <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> evento producirá un comportamiento de diseño no estándar si utiliza la implementación de sistema de diseño de nivel de marco WPF estándar.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">El estilo anterior.</param>
        <param name="newStyle">El nuevo estilo.</param>
        <summary>Se invoca cuando el estilo en uso en este elemento cambia, lo que invalidará el diseño.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método tiene una implementación predeterminada que establece un marcador interno que indica la condición de estilo que ha cambiado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Por lo general, no debe tener invalidar este método. Cualquier cambiar a un estilo que implica una medida o la organización cambio ya activaría otro ciclo de representación, suponiendo una implementación típica de <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, o los valores predeterminados. Invalidaciones de <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> podría ser adecuado si el <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementaciones se optimizando deliberadamente o admitir actualizaciones parciales, pero todavía desea aplicar más fácilmente los cambios en los estilos. (Las actualizaciones parciales serían un intento para evitar varias llamadas incrementales a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> y <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> en los elementos secundarios).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Proporciona datos sobre el evento.</param>
        <summary>Se invoca cada vez que un evento enrutado <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> no administrado llega a esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Todavía debe llamar a la implementación base en caso de que una clase intermedia en la herencia ha implementado este método.  
  
 El propósito de este método es algo similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: proporciona los medios para controlar el evento correspondiente de las clases derivadas con un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se ha generado el evento enrutado por un elemento secundario, no necesariamente el elemento que se va a invocar controladores, por lo que la implementación deberá tener en cuenta el evento propiedades del origen de argumentos (y no debe intentar volver a generar el evento en la mayoría de los casos). Las subclases de <xref:System.Windows.FrameworkElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta. Un escenario potencial es tomar los argumentos del evento y marcar deliberadamente el evento como controlado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Proporciona datos sobre el evento.</param>
        <summary>Se invoca cada vez que el evento enrutado <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> llega a esta clase en su ruta. Implemente este método a fin de agregar el control de clases para este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no tiene ninguna implementación predeterminada. Todavía debe llamar a la implementación base en caso de que una clase intermedia en la herencia ha implementado este método.  
  
 El propósito de este método es algo similar a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] patrón de eventos en * métodos: proporciona los medios para controlar el evento correspondiente de las clases derivadas con un controlador de clase en lugar de un controlador de instancia. En este caso el evento correspondiente es un evento enrutado. El modelo de implementación de los métodos On * es diferente para los eventos enrutados porque se ha generado el evento enrutado por un elemento secundario, no necesariamente el elemento que se va a invocar controladores, por lo que la implementación deberá tener en cuenta el evento propiedades del origen de argumentos (y no debe intentar volver a generar el evento en la mayoría de los casos). Las subclases de <xref:System.Windows.FrameworkElement> puede llamar a métodos de controlador de clase privados cuando se recibe el evento a lo largo de la ruta. Un escenario potencial es tomar los argumentos del evento y marcar deliberadamente el evento como administrado para acortar la ruta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Elemento primario anterior. Puede ser <see langword="null" /> para indicar que el elemento no tenía previamente un elemento primario visual.</param>
        <summary>Se invoca cuando se cambia el elemento primario de este elemento en el árbol visual. Invalida <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El árbol visual es potencialmente diferente del árbol lógico porque omite los elementos que no se representan visualmente, como colecciones y expande algunos elementos según su composición de tema y estilo. Para obtener más información, consulte [Árboles en WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La implementación predeterminada de este método virtual consulta el nuevo elemento primario, genera varios eventos de inicialización y establece marcadores internos sobre el estado de inicialización de la <see cref="T:System.Windows.FrameworkElement" /> según corresponda. Por último, llama a las implementaciones base sucesivas tal como declara <see cref="T:System.Windows.UIElement" />, que a su vez llama a su base <see cref="T:System.Windows.Media.Visual" />. Llame siempre a la implementación base para conservar este comportamiento, de lo contrario, el comportamiento del árbol de elemento para este elemento cuando se declara como un elemento secundario de otro elemento no puede ser diferente al esperado.  
  
 Existente unos [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] clases invalidación este método, por ejemplo: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />. El escenario más común es exigir que el nuevo elemento primario debe ser un tipo determinado. Ello puede significar tener producir una excepción si el nuevo elemento primario no pudo alguna manera de prueba del tipo. Una versión especializada de este escenario existe en implementaciones para los elementos de lista y elementos de menú, que no tienen ningún sentido fuera de un elemento primario visual que posee una colección adecuada para almacenarlos. Tenga en cuenta que estos casos no necesariamente producen excepciones, porque puede haber escenarios del diseñador que se basan en elementos que están temporalmente sin sus elementos primarios "normales" cambiar el elemento primario.  
  
 Este método también se invalida en ciertos elementos que suelen ser el elemento raíz, como <see cref="T:System.Windows.Window" />. Otro caso es elementos que son el elemento raíz aparente en el marcado pero generar automáticamente una infraestructura mayor en un árbol lógico compilado (como <see cref="T:System.Windows.Controls.Page" />). El <see cref="T:System.Windows.Window" /> y <see cref="T:System.Windows.Controls.Page" /> implementaciones sellan deliberadamente el método.</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si este elemento incorpora propiedades de estilo de los estilos de tema.</summary>
        <value>
          <see langword="true" /> si este elemento no utiliza las propiedades de estilo de tema; todas las propiedades que originan un estilo provienen de los estilos de aplicación locales y las propiedades de estilo de tema no se aplican. <see langword="false" /> si primero se aplican los estilos de aplicación y, a continuación, se aplican los estilos de tema para las propiedades que no se establecieron específicamente en estilos de aplicación. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso más común de esta propiedad es un uso indirecto dentro del establecedor de un estilo que se suministra un estilo con temas.  
  
> [!IMPORTANT]
>  Si establece <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> a `true` en un control, se suprime la plantilla de control predeterminada proporcionada por los estilos del tema. Esa plantilla de control incluye normalmente el presentador del contenido y otros elementos compuestos que proporcionan básica [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] funcionalidad y la visualización del control. Si desea que el control continúe admitiendo las mismas características que los estilos de tema predeterminados, debe proporcionar un estilo alternativo con una plantilla de control que se replica la misma estructura. Para obtener más información, consulte [Información general sobre la creación de controles](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento primario lógico de este elemento.</summary>
        <value>Elemento primario lógico de este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> puede ser `null` en casos donde se creó una instancia de un elemento, pero no está conectado a cualquier árbol lógico que finalmente se conecta con el elemento raíz de nivel de página o el objeto de aplicación.  
  
 Tenga en cuenta que el elemento primario lógico de un elemento puede cambiar según la funcionalidad de la aplicación, y mantener el valor de esta propiedad no reflejarán dicho cambio. Normalmente, debe obtener el valor inmediatamente antes de que lo necesite.  
  
 Vea [árboles de WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) para obtener más información acerca de recorrido del árbol lógico y los escenarios donde utilizando <xref:System.Windows.FrameworkElement.Parent%2A> como una técnica del elemento principal de detección es apropiada.  
  
 El motor de propiedad vuelve a calcular potencialmente todos los valores de propiedad de un elemento cuando cambia de elemento primario, porque algunas propiedades heredan los valores a través del árbol lógico. El <xref:System.Windows.FrameworkElement.DataContext%2A> que se aplica a los enlaces también pueden cambiar cuando los elementos cambian de elemento primario.  
  
 Cambiar primario de un elemento solo se realiza normalmente mediante la manipulación de colecciones, mediante dedicado agregar o quitar métodos, o a través de establecer propiedades de contenido de elementos.  
  
 El escenario más típico para usar el <xref:System.Windows.FrameworkElement.Parent%2A> propiedad consiste en obtener una referencia y, a continuación, obtener diversos <xref:System.Windows.FrameworkElement> valores de propiedad del elemento primario. Para las plantillas, el <xref:System.Windows.FrameworkElement.Parent%2A> de la plantilla finalmente será `null`. Para obtener más allá de este punto y ampliar en el árbol lógico donde se aplica realmente la plantilla, utilice <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  
  
 Tenga en cuenta que esta propiedad no informa de elementos primarios del árbol visual en casos donde son diferentes de los elementos primarios del árbol lógico. Elementos primarios del árbol visual normalmente no son importantes para los casos de aplicación general pero pueden ser los elementos padre deseado para determinados casos de nivel visuales. Vea <xref:System.Windows.Media.VisualTreeHelper>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra código que busca primario un elemento y, a continuación, utiliza los valores de las propiedades del elemento primario para establecer propiedades en el elemento secundario debe coincidir. En este caso, estas son propiedades que afectan al tamaño de presentación.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Elemento secundario que notifica el cambio.</param>
        <summary>Admite implementaciones de diseño incremental en subclases especializadas de <see cref="T:System.Windows.FrameworkElement" />. Se llama a <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> cuando un elemento secundario ha invalidado una propiedad que, según indican los metadatos, afecta a los pasos de medida u organización del elemento primario durante el diseño.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este elemento tiene un elemento secundario en el que se ha invalidado alguna propiedad y la propiedad se marca como <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> o <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> en los metadatos durante el registro, se invoca este método. La invocación del método notifica el elemento primario debe ser medido volver a qué elemento secundario determinado si este elemento admite la actualización parcial de (incremental) del diseño.  
  
 De forma predeterminada, <xref:System.Windows.FrameworkElement> no admite el diseño de incremental y en la <xref:System.Windows.FrameworkElement> clase este método no tiene ninguna implementación predeterminada. El escenario donde invalidando este método sería necesario no es común, porque es necesario modificar el comportamiento predeterminado del sistema de diseño.  
  
 Un escenario de implementación de ejemplo podría ser que una clase tuviera limitaciones de tipo para los posibles elementos secundarios que son significativamente más restrictivos que el sistema de diseño de nivel de marco WPF. Dada la naturaleza de estos elementos personalizados, los cambios de propiedad se podrían retardar deliberadamente al implementar algún comportamiento de diseño personalizado. Por ejemplo, se puede aplazar medida/organizar reemplazos de método, que intentan optimizar el elemento secundario de paso de representación, para ciertos tipos de cambios que se obtendría normalmente en otro paso de diseño.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Dirección para la que se debe determinar un cambio de foco probable.</param>
        <summary>Determina el elemento siguiente que recibiría el foco relativo a este elemento para una dirección de movimiento de foco proporcionada, pero realmente no mueve el foco.</summary>
        <returns>Elemento siguiente al que el foco se movería si se atravesara el foco realmente. Puede devolver <see langword="null" /> si el foco no se puede mover en relación con este elemento para la dirección proporcionada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> es el método relacionado que realmente mueve el foco.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un controlador que administra varias posibles entradas de botones, cada botón que representa una posible <xref:System.Windows.Input.FocusNavigationDirection>. El controlador realiza un seguimiento del elemento con foco de teclado actual y llama a <xref:System.Windows.FrameworkElement.PredictFocus%2A> en ese elemento y especifica la correspondiente <xref:System.Windows.Input.FocusNavigationDirection> como inicialización para el <xref:System.Windows.Input.TraversalRequest> proporciona el parámetro de tipo. En lugar de moverse a ese elemento como <xref:System.Windows.FrameworkElement.MoveFocus%2A> haría, el controlador cambia las dimensiones físicas del destino del foco previsto para fines de visualización.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Especificó una de las direcciones siguientes en <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. Estas direcciones no son válidas para <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (pero son válidas para <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nombre que se debe usar para la asignación de objeto y nombre especificada.</param>
        <param name="scopedElement">Objeto para la asignación.</param>
        <summary>Proporciona un descriptor de acceso que simplifica el acceso al método de registro <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es un método útil para llamar a <xref:System.Windows.NameScope.RegisterName%2A>. La implementación comprobará los elementos primarios sucesivos hasta que encuentra el aplicable <xref:System.Windows.NameScope> implementación, que se encuentra mediante la búsqueda de un elemento que implementa <xref:System.Windows.Markup.INameScope>. Para obtener más información acerca de los ámbitos de nombres, vea [ámbitos de nombres de XAML de WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Una llamada a <xref:System.Windows.FrameworkElement.RegisterName%2A> es necesario para enlazar correctamente los guiones gráficos de animación de aplicaciones cuando se crean en el código. Esto es porque una de la clave de guión gráfico propiedades, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, usa una búsqueda de nombre de tiempo de ejecución en lugar de poder tomar una referencia a un elemento de destino. Esto ocurre incluso si el elemento es accesible por referencia desde el código. Para obtener más información sobre por qué necesita registrar los nombres para los destinos de guión gráfico, vea [información general de guiones gráficos](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Elemento que se va a quitar.</param>
        <summary>Quita el objeto proporcionado del árbol lógico de este elemento. <see cref="T:System.Windows.FrameworkElement" /> actualiza los punteros primarios correspondientes del árbol lógico para mantenerlos sincronizados con esta eliminación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para la implementación de las colecciones de objetos que representan a elementos secundarios lógicos de un elemento. Esto puede hacerse en captadores de propiedades o establecedores, controladores de clases de `Changed` eventos, constructores, o dentro de la colección de tipos por sí mismos.  
  
 Para los autores de controles, manipular el árbol lógico en este nivel no es la práctica recomendada, a menos que ninguno de los modelos de contenido de la clase control base disponibles son adecuados. Considere la posibilidad de crear subclases de una en el nivel de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, y <xref:System.Windows.Controls.HeaderedItemsControl>. Estas clases proporcionan un modelo de contenido con la aplicación determinada de elementos secundarios lógicos a través de dedicado [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], así como la compatibilidad de otras características suele ser recomendable en un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control como un estilo a través de plantillas.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa un `Child` propiedad un personalizada <xref:System.Windows.FrameworkElement> que realiza su propia implementación de la capa visual. Establecedor de la propiedad está diseñado para que si cambia el valor, el valor anterior se quitará del árbol lógico, así como una colección visual específica de la clase. Los valores se almacenan en caché y, a continuación, se agrega el nuevo valor para el estándar framework nivel árbol lógico de WPF y la colección visual personalizada.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se llama a <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento indica a la tarea primaria <xref:System.Windows.Controls.ScrollViewer> (o clase derivada) que el elemento que genera el <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento debe estar visible en la región desplazable. El <xref:System.Windows.Controls.ScrollViewer> , a continuación, se marcará la <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento como controlado mediante el control de la clase del evento. Por lo general <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos datos deben no ser marcado como controlados por cualquier clase que controlan una región desplazable, o por cualquier instancia de controlador, porque esto interferiría con el objetivo deseado del elemento que se llama <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|Estrategia de enrutamiento|Propagación|  
|delegado|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el diccionario de recursos definido localmente.</summary>
        <value>El diccionario de recursos actual definido localmente, donde se puede obtener acceso a cada recurso por clave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los diccionarios de recursos que se pueden definir por completo o parcial en [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] normalmente se crean como un elemento de propiedad y suelen encontrarse en el elemento raíz de cualquier página individual o de la aplicación. Colocar el diccionario de recursos en este nivel resulta más fácil encontrar desde los elementos secundarios individuales de la página (o desde cualquier página, en el caso de la aplicación). En la mayoría de los escenarios de aplicación, recomendamos que se defina estilos como elementos de objeto dentro de un diccionario de recursos, o se define como recursos externos para que el recurso de estilo completo pueda ser autónomo (este enfoque ayuda a separar diseñadores responsabilidades de responsabilidades del programador separando los archivos físicos que deben modificarse).  
  
 Tenga en cuenta que esta propiedad devuelve el diccionario de recursos declarado directamente dentro de ese elemento. Esto es diferente que el proceso de búsqueda de recurso real, donde un elemento secundario puede tener acceso a cualquiera de los recursos definidos en cada elemento primario, buscar hacia arriba de forma recursiva.  
  
 También puede hacer referencia a código desde dentro de la colección de recursos, pero tenga en cuenta que los recursos se crean en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] definitivamente no será accesible hasta después de <xref:System.Windows.FrameworkElement.Loaded> se genera mediante el elemento que declara el diccionario. De hecho, se analizan los recursos de forma asincrónica y no incluso la <xref:System.Windows.FrameworkElement.Loaded> evento es una garantía de que puede hacer referencia a un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] recurso definido. Por esta razón debe generalmente solo se acceder a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] define recursos como parte del código en tiempo de ejecución o a través de otra [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] técnicas como estilos o referencias de extensión de recursos para los valores de atributo. Cuando tiene acceso a recursos a través del código, es básicamente equivalente a una referencia de [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 Subyacente <xref:System.Windows.ResourceDictionary> es compatible con los métodos necesarios para agregar, quitar o consultar recursos desde dentro de la colección mediante código. El <xref:System.Windows.FrameworkElement.Resources%2A> propiedad es configurable para admitir el escenario de reemplazar completamente la colección de recursos de un elemento que se va a ser un nuevo o diferente <xref:System.Windows.ResourceDictionary>.  
  
 Tenga en cuenta que la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis que se muestra no incluyen un elemento para el <xref:System.Windows.ResourceDictionary>. Este es un ejemplo de sintaxis de colección implícita; se puede omitir una etiqueta que representa el elemento de la colección. En su lugar, se especifican los elementos que se agregan como elementos a la colección. Para obtener más información acerca de colecciones implícitas y [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], consulte [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md). Un caso donde un <xref:System.Windows.ResourceDictionary> todavía está especificada explícitamente como un elemento es si se introduce un diccionario combinado, en cuyo caso normalmente no hay ningún elemento secundario para que <xref:System.Windows.ResourceDictionary>. Para obtener más información, consulte [combinado los diccionarios de recursos](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreResourceElements*  
 Uno o más elementos de objeto, cada uno de los cuales define un recurso. Cada elemento de propiedad de recurso dentro de cada <xref:System.Windows.ResourceDictionary> debe tener un valor único para la [x: Key (directiva)](~/docs/framework/xaml-services/x-key-directive.md), que actúa como clave única cuando se recuperan valores de la <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asocia un enlace a este elemento para la propiedad de dependencia especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifica la propiedad de destino en la que se debe establecer el enlace.</param>
        <param name="path">Nombre de la propiedad de origen o de la ruta de acceso a la propiedad que se va a usar para el enlace.</param>
        <summary>Asocia un enlace a este elemento, basado en el nombre de propiedad de origen proporcionado como calificación de la ruta de acceso al origen de datos.</summary>
        <returns>Registra las condiciones del enlace. Este valor devuelto puede ser útil para la comprobación de errores.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es un método útil para llamar a <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, que pasa la instancia actual como el <xref:System.Windows.DependencyObject>y crea un nuevo <xref:System.Windows.Data.Binding> tomando como base proporcionado `path` parámetro. Esta firma es más conveniente si va a establecer un enlace simple predeterminado. Si tiene que especificar ninguna propiedad de enlace para condiciones no predeterminadas o desea usar un <xref:System.Windows.Data.MultiBinding> o <xref:System.Windows.Data.PriorityBinding>, debe utilizar el <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> firma.  
  
   
  
## Examples  
 En el ejemplo siguiente se establece un enlace mediante una ruta de acceso específica.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifica la propiedad en la que se debe establecer el enlace.</param>
        <param name="binding">Representa los elementos específicos del enlace de datos.</param>
        <summary>Asocia un enlace a este elemento, basado en el objeto de enlace ofrecido.</summary>
        <returns>Registra las condiciones del enlace. Este valor devuelto puede ser útil para la comprobación de errores.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es un método útil para llamar a <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, que pasa la instancia actual como el <xref:System.Windows.DependencyObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">Elemento que especifica una dirección de flujo.</param>
        <param name="value">Valor de la enumeración, que especifica la dirección.</param>
        <summary>Establece el valor de la propiedad adjunta <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> para el elemento especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es compatible con la sintaxis de la propiedad adjunta para la <xref:System.Windows.FrameworkElement.FlowDirection%2A> propiedad, por lo tanto, permite que los secundarios elementos de proporcionado <xref:System.Windows.FrameworkElement> para especificar la dirección de flujo para la organización dentro de su elemento primario. Para establecer el valor en la actual <xref:System.Windows.FrameworkElement>, usar el direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] descriptor de acceso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">Propiedad a la que está enlazado el recurso.</param>
        <param name="name">Nombre del recurso.</param>
        <summary>Busca un recurso con el nombre especificado y establece en él una referencia de recurso para la propiedad especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una referencia de recurso es similar al uso de un [extensión de marcado DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) en el marcado. La referencia de recurso crea una expresión interna que proporciona el valor de la propiedad especificada en diferido de tiempo de ejecución. La expresión se evaluará volver a cada vez que el diccionario de recursos indica un valor cambiado a través de los eventos internos o cada vez que se cambia de elemento primario del elemento actual (un cambio de elemento primario cambiaría la ruta de acceso de búsqueda de diccionario).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que indica si los procesos de serialización deben serializar el contenido de la propiedad <see cref="P:System.Windows.FrameworkElement.Resources" />.</summary>
        <returns>
          Es <see langword="true" /> si el valor de propiedad <see cref="P:System.Windows.FrameworkElement.Resources" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto será `true` siempre que hay al menos un recurso con clave local <xref:System.Windows.FrameworkElement.Resources%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que indica si los procesos de serialización deben serializar el contenido de la propiedad <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <returns>
          Es <see langword="true" /> si el valor de propiedad <see cref="P:System.Windows.FrameworkElement.Style" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto será `true` si el <xref:System.Windows.Style> se establece localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que indica si los procesos de serialización deben serializar el contenido de la propiedad <see cref="P:System.Windows.FrameworkElement.Triggers" />.</summary>
        <returns>
          Es <see langword="true" /> si el valor de propiedad <see cref="P:System.Windows.FrameworkElement.Triggers" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve `true` si el <xref:System.Windows.FrameworkElement.Triggers%2A> localmente se establece la propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando las propiedades <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> o <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> cambian el valor en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los eventos enrutados directos no siguen una ruta, sólo se controlan dentro del mismo elemento en el que se generan. Dirigir los eventos enrutados admiten otro comportamiento de evento enrutado: admiten una colección de controladores accesible y se pueden usar como un <xref:System.Windows.EventTrigger> en un estilo.  
  
 El sistema de diseño lee las propiedades dentro del <xref:System.Windows.SizeChangedEventArgs> clase de argumento de este evento, para determinar si los cambios de tamaño notificados deben considerarse significativos. Esto permite que el sistema de diseño o en sus implementaciones de diseño específicas del control eviten forzar un cambio de diseño debido a diferencias visualmente imperceptibles entre los valores de ancho o alto antiguo y nuevo. Las diferencias imperceptibles podrían deberse a cálculos de redondeo o el mismo resultado de los tipos de datos de punto flotante.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.SizeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el valor de origen cambia para cualquier enlace de propiedad existente en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Data.Binding.SourceUpdated> eventos que se generan mediante cualquier <xref:System.Windows.Data.Binding> asociado a este elemento.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo que se usa este elemento cuando se representa.</summary>
        <value>Estilo aplicado, no predeterminado para el elemento, si está presente. En caso contrario, es <see langword="null" />. El valor predeterminado para un objeto <see cref="T:System.Windows.FrameworkElement" /> construido de forma predeterminada es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para los controles, el estilo actual es a menudo proporcionado por un estilo predeterminado de los temas de control o desde estilos suelen aplicar a los controles de ese tipo por los recursos en el nivel de página o de aplicación (un estilo implícito). Esta propiedad no predeterminada establece o devuelve estilos (tema), sino que devuelve un estilo implícito o un estilo explícito que actúa en el elemento. En el caso de los estilos implícitos o explícitos, no importa si el estilo se especifica como un recurso o se define localmente.  
  
 Establecer los estilos tiene algunas restricciones. Puede restablecer todo el <xref:System.Windows.FrameworkElement.Style%2A> propiedad a una nueva <xref:System.Windows.Style> en cualquier momento, lo que forzará una recomposición del diseño. Sin embargo, tan pronto como un elemento cargado, coloca ese estilo en uso el <xref:System.Windows.Style> debe considerarse sellado. Intento de realizar un cambio en cualquier propiedad individual de un estilo en uso (como cualquier elemento dentro de la colección de <xref:System.Windows.Style.Setters%2A>) hace que se produzca una excepción. Un estilo que se define en el marcado se considera que están en uso en cuanto se carga desde un diccionario de recursos (para los recursos) o se carga la página se encuentra en (para los estilos insertados).  
  
 <xref:System.Windows.FrameworkElement.Style%2A> es una propiedad de dependencia con prioridad especial. Establecida localmente estilo suele funciona con la prioridad más alta en el sistema de propiedades. Si la <xref:System.Windows.FrameworkElement.Style%2A> es null en este momento, durante la carga el sistema de propiedades comprueba los estilos implícitos en recursos locales o de aplicación que especifican ese tipo. Si el estilo todavía es nulo después de este paso, a continuación, el estilo que sirve para fines de presentación generalmente proviene el estilo predeterminado (tema), pero el estilo predeterminado no se devuelve en la <xref:System.Windows.FrameworkElement.Style%2A> valor de propiedad. Vea [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) o [estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Uno de los siguientes:, o. Vea [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La clave que identifica el estilo que se solicita. La clave hace referencia a un recurso existente en un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Sintaxis de elemento de propiedad es técnicamente posible, pero no se recomienda para la mayoría de los escenarios de estilo. Vea [plantillas y estilos insertados](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Una referencia de enlace mediante o <xref:System.Windows.Data.Binding> también es posible, pero es poco común.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 En el ejemplo siguiente se define un estilo en un diccionario de recursos.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nombre de la propiedad de ambiente solicitada.</param>
        <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />.</summary>
        <returns>
          Es <see langword="true" /> si <paramref name="propertyName" /> está disponible; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.FrameworkElement> se convierte en una interfaz <xref:System.Windows.Markup.IQueryAmbient>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor de objeto arbitrario que se puede usar para almacenar información personalizada sobre este elemento.</summary>
        <value>Valor deseado. Esta propiedad no tiene ningún valor predeterminado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es análoga a las propiedades de etiqueta en otros modelos de programación de Microsoft, como Visual Basic para aplicaciones o Windows Forms. <xref:System.Windows.FrameworkElement.Tag%2A> está diseñado para proporcionar una ubicación de propiedad preexistente donde puede almacenar información personalizada básica sobre cualquier <xref:System.Windows.FrameworkElement> sin que sea necesario para crear subclases de un elemento.  
  
 Dado que esta propiedad toma un objeto, debe usar el uso de elementos de propiedad para establecer el <xref:System.Windows.FrameworkElement.Tag%2A> propiedad en XAML a algo distinto de un objeto con un convertidor de tipos conocidos e integradas, como una cadena. Objetos utilizados de esta manera no están normalmente dentro de los espacios de nombres estándar de WPF y, por tanto, pueden requerir la asignación de espacio de nombres al espacio de nombres externo con el fin de introducirán como elementos XAML. Para obtener más información, consulte [XAML Namespaces and Namespace Mapping para XAML de WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) y [clases XAML y personalizadas para WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.TagProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Tag" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de destino de cualquier enlace de propiedad en este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento crea un alias para la <xref:System.Windows.Data.Binding.TargetUpdated> eventos que se generan mediante cualquier <xref:System.Windows.Data.Binding> asociado a este elemento. Normalmente, esto significa que el enlace en cuestión es un enlace bidireccional, y que la propiedad de dependencia enlazada afirma el valor de propiedad anterior es ahora válido según cualquier validación o esquema de almacenamiento en caché que admiten la propiedad o el origen de datos.  
  
 Utilice los datos de evento de la <xref:System.Windows.FrameworkElement.TargetUpdated> evento para determinar la propiedad específica que está informando de la actualización del valor de destino.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a la plantilla primaria de este elemento. Esta propiedad no es relevante si el elemento no se creó mediante una plantilla.</summary>
        <value>El elemento cuyo <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> produjo este elemento que se va a crear. Este valor suele <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> suele ser `null` para los objetos que se crean en su código o marcado de la aplicación. Esto es porque se crean esos objetos directamente, no a través de una plantilla. Obtener recorriendo el árbol lógico desde la raíz, o las referencias al nombre típico de referencias a objetos, no proceden de una plantilla.  
  
 Casos donde <xref:System.Windows.FrameworkElement.TemplatedParent%2A> podría no ser `null` incluyen operaciones como la prueba de posicionamiento, control de eventos para ciertos eventos de entrada bajo nivel, recorrer el árbol visual con <xref:System.Windows.Media.VisualTreeHelper>, o trabajar con los enumeradores, que pueden devolver elementos que provienen de plantillas. Otro caso es si ha de llamar específicamente <xref:System.Windows.FrameworkTemplate.FindName%2A> en una existente <xref:System.Windows.FrameworkTemplate> y son de trabajo con el objeto devuelto.  
  
 Las plantillas son realmente objetos compartidos, donde el contenido de la plantilla se crea una sola vez. Por lo tanto, si obtiene una referencia de objeto a un elemento que proviene de una plantilla, es posible que el árbol lógico aparente no llega a la raíz de la página. Para conectar una referencia de plantilla al árbol lógico de la página, debe obtener el <xref:System.Windows.FrameworkElement.TemplatedParent%2A> valor y continuar navegar por el árbol de elementos como desee.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto de información sobre herramientas que se muestra para este elemento en la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>Objeto de información sobre herramientas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de esta propiedad es de tipo <xref:System.Windows.Controls.ToolTip>, a continuación, ese valor es la información sobre herramientas que se utilizarán en la [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  Si el valor es de cualquier otro tipo, ese valor se usará como el *contenido* para un <xref:System.Windows.Controls.ToolTip> proporcionado (generada) por el sistema. Para obtener más información, vea <xref:System.Windows.Controls.ToolTipService>. La clase de servicio proporciona las propiedades asociadas que pueden usarse para personalizar aún más una <xref:System.Windows.Controls.ToolTip>.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *toolTipContent*  
 Una cadena que se convierte en el texto para mostrar el <xref:System.Windows.FrameworkElement.ToolTip%2A>.  
  
 *toolTipObjectContent*  
 Algún objeto, proporcionado en el formulario de elemento de objeto, que debe usarse como el contenido de la <xref:System.Windows.FrameworkElement> . Por lo general, esto sería un <xref:System.Windows.FrameworkElement> o algún otro elemento que crea la composición de diseño para el <xref:System.Windows.FrameworkElement.ToolTip%2A>, que finalmente contiene contenido de texto dentro de la composición. En este uso, el <xref:System.Windows.Controls.ToolTip> elemento se crea implícitamente desde el objeto analizado [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]y el *toolTipObjectContent* contenido está establecido como su <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> propiedad.  
  
 <`ToolTip` ... / >  
 Vea <xref:System.Windows.Controls.ToolTip>.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Controls.ToolTip> en código y, a continuación, Establece la <xref:System.Windows.FrameworkElement.ToolTip%2A> propiedad en un <xref:System.Windows.Controls.Primitives.StatusBar> control.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce inmediatamente antes de que se cierre cualquier información sobre herramientas en el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marcar el <xref:System.Windows.FrameworkElement.ToolTipClosing> evento como controlado no cancela el cierre de la información sobre herramientas. Una vez que se muestra la información sobre herramientas, cierre la información sobre herramientas se realiza únicamente en respuesta a la interacción del usuario con la interfaz de usuario.  
  
 Este evento no puede ser un <xref:System.Windows.EventTrigger> en un estilo. Esto es porque el campo de identificador de este evento vuelve a utiliza una implementación de un servicio que no expone los métodos de agregar o quitar eventos para el evento de nivel de servicio.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Invalidar <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se abre cualquier información sobre herramientas en el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para impedir que una información sobre herramientas que aparece en la interfaz de usuario del controlador para <xref:System.Windows.FrameworkElement.ToolTipOpening> puede marcar la <xref:System.Windows.Controls.ToolTipEventArgs> los datos de evento que controla. En caso contrario, se muestra la información sobre herramientas, utilizando el valor de la <xref:System.Windows.FrameworkElement.ToolTip%2A> propiedad como el contenido de la información sobre herramientas. Otro escenario posible es que puede escribir un controlador que restablece el valor de la <xref:System.Windows.FrameworkElement.ToolTip%2A> propiedad para el elemento que es el origen del evento, justo antes de que se muestra la información sobre herramientas.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> no se generará si el valor de <xref:System.Windows.FrameworkElement.ToolTip%2A> es `null` u otro sin establecer. No establezca deliberadamente <xref:System.Windows.FrameworkElement.ToolTip%2A> a `null` mientras una información sobre herramientas está abierto o abrir; esto no tendrá el efecto de cerrar la información sobre herramientas y en su lugar, creará un efecto visual no deseado en la interfaz de usuario.  
  
 El <xref:System.Windows.FrameworkElement.ToolTipOpening> evento no puede ser un <xref:System.Windows.EventTrigger> en un estilo. Esto es porque el campo de identificador de este evento vuelve a utiliza una implementación de un servicio que no expone los métodos de agregar o quitar eventos para el evento de nivel de servicio.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Invalidar <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> para implementar el control de clases para este evento en las clases derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.ToolTip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de desencadenadores establecida directamente en este elemento, o en los elementos secundarios.</summary>
        <value>Colección de objetos <see cref="T:System.Windows.Trigger" /> fuertemente tipada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esta propiedad solo puede establecerse [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] mediante la sintaxis de colección mostrada o tener acceso al objeto de colección y utilizando sus diversos métodos, como Add. La propiedad para tener acceso el propio objeto de colección es de solo lectura, la propia colección es de lectura y escritura. La propiedad sólo existe en los elementos raíz; intentar buscarlo o establecerlo en otra parte, provocará que se produzca una excepción.  
  
 Esta propiedad no le permite examinar los desencadenadores que existen como parte de estilos en uso en este elemento. Solo informa de la colección de desencadenadores que se agregan literalmente a la colección, ya sea en código o marcado. Elementos normalmente no tiene estos elementos existentes de forma predeterminada (a través de una plantilla para la instancia); es más habitual para los desencadenadores que proceden de la composición del control que se establezca en los estilos en su lugar.  
  
 En términos de comportamiento (y al intentar establecer el efecto de que proviene de qué elemento declarado del <xref:System.Windows.FrameworkElement.Triggers%2A> colección), la condición desencadenadora y el efecto del desencadenador puede estar en este elemento, o podría estar en sus elementos secundarios del árbol lógico. Tenga en cuenta que si usa eventos de duración como <xref:System.Windows.FrameworkElement.Loaded> para obtener esta colección, los desencadenadores del elemento secundario podrían no estar totalmente cargados y la colección será menor que sería realmente en tiempo de ejecución.  
  
 Tenga en cuenta que la colección de desencadenadores establecida en un elemento sólo admite <xref:System.Windows.EventTrigger>, no los desencadenadores de propiedad (<xref:System.Windows.Trigger>). Si necesita que los desencadenadores de propiedad, debe colocarlos dentro de un estilo o plantilla y, a continuación, asignar ese estilo o una plantilla para el elemento ya sea directamente desde el <xref:System.Windows.FrameworkElement.Style%2A> propiedad, o indirectamente a través de una referencia de estilo implícita.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreTriggers*  
 Uno o varios definido <xref:System.Windows.EventTrigger> elementos. Cada desencadenador este tipo se espera que contenga referencias y acciones de guión gráfico válido. Tenga en cuenta que esta colección solo se puede establecer en el elemento raíz de una página. Para obtener más información, consulte [Información general sobre objetos Storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificador de clave del recurso que se va a buscar.</param>
        <summary>Busca un recurso con la clave especificada y lo devuelve si lo encuentra.</summary>
        <returns>Recurso buscado o <see langword="null" /> si no se encuentra un recurso con el valor de <paramref name="key" /> proporcionado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se encuentra el recurso en el elemento que realiza la llamada, se busca en el árbol de recursos primario hacia arriba a través del árbol lógico, de la misma manera que sería el árbol de la búsqueda si el recurso se solicitaron por clave en tiempo de ejecución. El método devuelve `null` sólo si ningún recurso de esa clave existía en cualquier lugar en el árbol de recursos, por las condiciones existentes del árbol en el momento en que <xref:System.Windows.FrameworkElement.TryFindResource%2A> se llama.  
  
 Normalmente, convertiría inmediatamente el valor devuelto al tipo de la propiedad que se ha intentado establecer con el valor de recurso devuelto.  
  
 El <xref:System.Windows.FrameworkElement.FindResource%2A> método tiene un comportamiento similar, salvo que produce una excepción si se ha devuelto ningún recurso con la clave proporcionada.  
  
   
  
## Examples  
 En el siguiente ejemplo se implementa como un controlador de botón, donde el botón que se va a hacer clic en conjuntos de su información general de un pincel definido como recurso obtenido mediante una llamada a <xref:System.Windows.FrameworkElement.TryFindResource%2A> por sí sola. Para ello recorre el árbol de elementos y se encuentra el recurso (el propio recurso se define en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] y no se muestra).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento se quita desde un árbol de elementos cargados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los eventos enrutados directos no siguen una ruta, sólo se controlan dentro del mismo elemento en el que se generan. Dirigir los eventos enrutados admiten otro comportamiento de evento enrutado: admiten una colección de controladores accesible y se pueden usar como un <xref:System.Windows.EventTrigger> en un estilo.  
  
 <xref:System.Windows.FrameworkElement.Loaded> y <xref:System.Windows.FrameworkElement.Unloaded> ambos puede producir en los controles como resultado de los cambios de tema del sistema iniciado por el usuario. Un cambio de tema produce una invalidación de la plantilla de control y el árbol visual contenido, que a su vez hace que el control completo descargar y volver a cargar. Por lo tanto, <xref:System.Windows.FrameworkElement.Unloaded> no se puede suponer que se produzca solo en el panel de navegación fuera de la página.  
  
 Tenga en cuenta que el <xref:System.Windows.FrameworkElement.Unloaded> no se produce el evento después de que una aplicación comience a cerrar. Cierre de la aplicación se produce cuando la condición definido por el <xref:System.Windows.Application.ShutdownMode%2A> se produce la propiedad. Si coloca el código de limpieza dentro de un controlador para el <xref:System.Windows.FrameworkElement.Unloaded> eventos, como para un <xref:System.Windows.Window> o <xref:System.Windows.Controls.UserControl>, no puede llamarse según lo previsto.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>Información sobre eventos enrutados  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|Estrategia de enrutamiento|Directa|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento enrutado <see cref="E:System.Windows.FrameworkElement.Unloaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los identificadores de eventos enrutados se crean cuando se registran eventos enrutados. Estos identificadores contienen un nombre para identificar, el tipo de propietario, el tipo de controlador, la estrategia de enrutamiento y el método de utilidad para agregar propietarios al evento. Estos identificadores se pueden usar para agregar controladores de clases.  
  
 Para obtener más información sobre el registro de eventos enrutados, vea <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obtener más información sobre el uso de identificadores de eventos enrutados para agregar controladores de clases, vea <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del par de objeto y nombre que se debe quitar del ámbito actual.</param>
        <summary>Simplifica el acceso al método de anulación de registro de <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Basta con nombres de anular el registro si va a volver a registrar otro elemento con el mismo nombre.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vuelve a aplicar el estilo predeterminado al <see cref="T:System.Windows.FrameworkElement" /> actual.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el redondeo del diseño se debe aplicar a este tamaño y posición del elemento durante el diseño.</summary>
        <value>
          Es <see langword="true" /> si se aplica el redondeo del diseño; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> es propiedad de un elemento `true`, todos los valores de píxel no enteros que se calculan durante el <xref:System.Windows.UIElement.Measure%2A> y <xref:System.Windows.UIElement.Arrange%2A> pasadas se redondean a valores de píxel enteros.  
  
 Esta propiedad es heredada por los elementos secundarios.  
  
> [!NOTE]
>  Debe establecer <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> a `true` en el elemento raíz. El sistema de diseño agrega coordenadas secundarias a las coordenadas primarias; por lo tanto, si las coordenadas primarias no están en un límite de píxeles, las coordenadas secundarias también no están en un límite de píxeles. Si <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> no se puede establecer en la raíz, establezca <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> en el elemento secundario para obtener el efecto que desee.  
  
 Dibujar objetos en los límites de píxeles elimina los perímetros semitransparentes generados por suavizado, cuando un borde cae en medio de un píxel de dispositivo. En la siguiente ilustración muestra el resultado de una línea de ancho de píxel único que queda dentro de un píxel de dispositivo. La línea de la izquierda no usa el redondeo del diseño y es AntiAlias. La línea de la derecha usa el redondeo del diseño.  
  
 ![Anti&#45;con alias línea comparada con línea solo pixel. ] (~/add/media/pixelsnaplinecompare.PNG "Línea suavizada en comparación con solo pixel.")  
  
 Cuando se usa el redondeo del diseño y <xref:System.Windows.GridUnitType.Star> ajustar el tamaño, el sistema de diseño crea pequeñas variaciones en las mediciones de columna o fila para evitar la representación de subpíxeles. Por ejemplo, si una cuadrícula tiene un ancho total de 100 con 3 columnas de tamaño <xref:System.Windows.GridUnitType.Star>, en lugar de crear tres columnas que tienen un ancho igual de 33,3, el sistema de diseño crea 2 columnas que tienen un ancho de 33 y que tienen un ancho de 34.  
  
> [!NOTE]
>  En .NET 4.6 se realizaron cambios en el redondeo del diseño para reducir las instancias de recorte en los controles con bordes. De forma predeterminada, esta característica está habilitada si la plataforma de destino es .NET Framework 4.6 o posterior. Las aplicaciones que tienen como destino versiones anteriores de framework pueden participar en el nuevo comportamiento agregando la siguiente configuración en un archivo app.config: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` la configuración solo surte efecto cuando se ejecuta la aplicación en .NET Framework 4.6.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto que el <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> tiene propiedad en una línea única de ancho de píxel. La línea de la izquierda no usa el redondeo del diseño y la línea de la derecha usa el redondeo del diseño. Si cambia el tamaño de la ventana despacio, puede ver la diferencia que aporta el redondeo de diseño.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las características de la alineación vertical aplicada a este elemento cuando se encuentra dentro de un elemento primario, como un panel o control de elementos.</summary>
        <value>Configuración de alineación vertical. El valor predeterminado es <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Windows.FrameworkElement.Height%2A> y <xref:System.Windows.FrameworkElement.Width%2A> propiedades se establecen explícitamente en un elemento, estas medidas tienen prioridad en el diseño y cancelan los efectos normales de establecer esta propiedad en <xref:System.Windows.VerticalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> es el [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] descriptor de acceso de propiedad para lo que es en realidad una propiedad de dependencia. Esta propiedad de dependencia concreta con bastante frecuencia tiene el valor "predeterminado" aparente establecido de forma distinta en clases de elemento derivadas, particularmente los controles. Esto se suele producir en una de estas dos formas: la propiedad de dependencia se registre de nuevo a una clase derivada determinada, pero con distintos metadatos para establecer sus valores predeterminados; o bien, hay que se va a aplicar un estilo predeterminado que establece ese valor de propiedad de dependencia de manera diferente. Por ejemplo, el "predeterminado" aparente de <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> para un <xref:System.Windows.Controls.ComboBoxItem> control estará <xref:System.Windows.VerticalAlignment.Center>, aunque <xref:System.Windows.Controls.ComboBoxItem> hereda <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> directo de <xref:System.Windows.FrameworkElement>. Esto es porque ese valor se restableció dentro del estilo predeterminado de <xref:System.Windows.Controls.ComboBoxItem>, en la plantilla de control del estilo.  
  
 <xref:System.Windows.Controls.Canvas> No utilice <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> al crear el diseño, porque <xref:System.Windows.Controls.Canvas> se basa en la posición absoluta.  
  
 Cuando hereda <xref:System.Windows.Controls.ComboBoxItem> o cualquiera de las clases, derivadas <xref:System.Windows.Controls.ComboBoxItem> vuelve a definir el valor predeterminado de esta propiedad para que sea <xref:System.Windows.VerticalAlignment.Center>.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos secundarios visuales de este elemento.</summary>
        <value>Número de elementos secundarios visuales para este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.FrameworkElement> implementación de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> siempre devuelve cero o uno. Las clases que mantienen una colección de elementos secundarios que puede superar uno deben invalidar esta propiedad y <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 Esta propiedad se utiliza normalmente para determinar los límites superiores de la colección secundaria actual para los fines de implementar las invalidaciones del diseño (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo un adorno personalizado usa los valores declarados por un <xref:System.Windows.Media.VisualCollection> que se mantiene para sus diversos elementos secundarios visuales e informa de estos valores a través de las invalidaciones de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> y <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si su clase admite a más de un elemento secundario visual en una colección de elementos secundarios, invalide esta propiedad para devolver el número de elementos de la colección. Debe hacerlo incluso si el propio objeto de colección devuelve un recuento. Lógica de diseño de elemento en el nivel de marco WPF se da por supuesto que todos los elementos devolverán un recuento válido a través de sus <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el ancho del elemento.</summary>
        <value>Ancho del elemento, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. El valor predeterminado es <see cref="F:System.Double.NaN" />. Este valor debe ser igual o mayor que 0,0. Vea Comentarios para obtener información sobre el límite superior.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es una de las tres propiedades en <xref:System.Windows.FrameworkElement> que especifican la información de ancho.  Las otras dos son <xref:System.Windows.FrameworkElement.MinWidth%2A> y <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Si hay un conflicto entre estos valores, el orden de aplicación para determinar el ancho real es primero <xref:System.Windows.FrameworkElement.MinWidth%2A> debe respetar, a continuación, <xref:System.Windows.FrameworkElement.MaxWidth%2A>y, finalmente, si cada una de ellas está dentro de límites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 El valor devuelto de esta propiedad siempre es igual a cualquier valor que se ha establecido en él. En cambio, el valor de la <xref:System.Windows.FrameworkElement.ActualWidth%2A> puede variar. El diseño puede haber rechazado el tamaño sugerido por alguna razón. Además, el propio sistema de diseño funciona de forma asincrónica en relación con el conjunto del sistema de propiedades de <xref:System.Windows.FrameworkElement.Width%2A> y no haber procesado es determinada ajustar el tamaño de cambio de propiedad todavía.  
  
 Además de a aceptable <xref:System.Double> valores, esta propiedad también puede ser <xref:System.Double.NaN?displayProperty=nameWithType>. Se trata cómo especificar el comportamiento de ajuste de tamaño automático. En [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] establece el valor en la cadena "Auto" (con distinción entre mayúsculas y minúsculas) para habilitar el comportamiento de ajuste de tamaño de automático. Comportamiento de ajuste de tamaño automático implica que el elemento rellenará el ancho disponible para él. Sin embargo, tenga en cuenta que controles concretos proporcionan frecuentemente valores predeterminados en sus estilos predeterminados que se deshabilitan el comportamiento de ajuste de tamaño a menos que se vuelva a habilitar específicamente de automático.  
  
 Además de la comprobación de validación, hay un valor superior no determinista enlazado para <xref:System.Windows.FrameworkElement.Width%2A> que se aplica por el sistema de diseño (se trata de un número muy grande, mayor que <xref:System.Single.MaxValue?displayProperty=nameWithType> pero menor que <xref:System.Double.MaxValue?displayProperty=nameWithType>). Si se supera este límite, el elemento no se representará y se inicia ninguna excepción. No establezca <xref:System.Windows.FrameworkElement.Width%2A> en un valor que es significativamente mayor que el tamaño máximo de cualquier posible presentación visual, o bien puede superar este límite superior no determinista.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0. Vea Comentarios para obtener información sobre el límite superior. Este valor se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de `1` es aceptable.  
  
 *qualifiedDouble*  
 A *doble* valor, tal como se ha descrito anteriormente, seguido de una de las siguientes cadenas de declaración de unidad: `px`, `in`, `cm`, `pt`.  
  
 `px` (valor predeterminado) es [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pulgadas; 1 in == 96 px  
  
 `cm` es centímetros; 1cm==(96/2.54) px  
  
 `pt` es puntos; 1pt==(96/72) px  
  
 `Auto`  
 Habilita el comportamiento de ajuste automático de tamaño. Vea la sección Comentarios.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.FrameworkElement.Width" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>