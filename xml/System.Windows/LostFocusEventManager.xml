<Type Name="LostFocusEventManager" FullName="System.Windows.LostFocusEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cec9851297228ee26837f562465b4f7cf14e0866" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37491601" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LostFocusEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LostFocusEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LostFocusEventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class LostFocusEventManager&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LostFocusEventManager : System::Windows::WeakEventManager" />
  <TypeSignature Language="F#" Value="type LostFocusEventManager = class&#xA;    inherit WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para los eventos <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para que los agentes de escucha en este patrón, deben implementar los objetos del agente de escucha <xref:System.Windows.IWeakEventListener>. No es necesario implementar <xref:System.Windows.IWeakEventListener> en la clase que es el origen de los eventos.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] enlace de datos usa este <xref:System.Windows.WeakEventManager> para que las clases internas que actualizan los enlaces pueden adjuntar agentes de escucha para un <xref:System.Windows.UIElement.LostFocus?displayProperty=nameWithType> o <xref:System.Windows.ContentElement.LostFocus?displayProperty=nameWithType> eventos en un objeto que es el destino de un enlace. Esto es compatible con la notificación para el <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> hace referencia modo de enlace de datos, sin necesidad de crear seguro a los destinos de enlace de datos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As DependencyObject, handler As EventHandler(Of RoutedEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(System::Windows::DependencyObject ^ source, EventHandler&lt;System::Windows::RoutedEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.RoutedEventArgs&gt; -&gt; unit" Usage="System.Windows.LostFocusEventManager.AddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">Objeto de origen que provoca el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <param name="handler">Delegado que controla el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use este método para especificar el controlador de eventos que desea usar para suscribirse a la <xref:System.Windows.UIElement.LostFocus?displayProperty=nameWithType> o <xref:System.Windows.ContentElement.LostFocus?displayProperty=nameWithType> eventos...  Cuando se usa este método, el objeto de agente de escucha no se necesita implementar el <xref:System.Windows.IWeakEventListener> interfaz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="handler" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddListener (source As DependencyObject, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddListener(System::Windows::DependencyObject ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="static member AddListener : System.Windows.DependencyObject * System.Windows.IWeakEventListener -&gt; unit" Usage="System.Windows.LostFocusEventManager.AddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Objeto con el evento.</param>
        <param name="listener">Objeto que se va a agregar como agente de escucha.</param>
        <summary>Agrega el agente de escucha proporcionado a la lista de agentes de escucha en el origen proporcionado.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::WeakEventManager::ListenerList ^ NewListenerList();" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="lostFocusEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
        <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As DependencyObject, handler As EventHandler(Of RoutedEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(System::Windows::DependencyObject ^ source, EventHandler&lt;System::Windows::RoutedEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.RoutedEventArgs&gt; -&gt; unit" Usage="System.Windows.LostFocusEventManager.RemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">Objeto de origen que provoca el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <param name="handler">Delegado que controla el evento <see cref="E:System.Windows.UIElement.LostFocus" /> o <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="handler" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveListener (source As DependencyObject, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveListener(System::Windows::DependencyObject ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="static member RemoveListener : System.Windows.DependencyObject * System.Windows.IWeakEventListener -&gt; unit" Usage="System.Windows.LostFocusEventManager.RemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Objeto que se va a quitar del agente de escucha.</param>
        <param name="listener">Agente de escucha que se va a quitar.</param>
        <summary>Quita el agente de escucha especificado de la lista de agentes de escucha en el origen proporcionado.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit&#xA;override this.StartListening : obj -&gt; unit" Usage="lostFocusEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Objeto en el que se inicia la escucha del evento <see cref="E:System.Windows.UIElement.LostFocus" /> pertinente.</param>
        <summary>Se inicia la escucha del evento <see cref="E:System.Windows.UIElement.LostFocus" /> en el origen especificado, asociando un controlador de clase interno a ese origen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se comprueba el origen proporcionado para que el tipo ver si es <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement> , y, a continuación, agrega el controlador de clase para el evento adecuado para ese origen.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LostFocusEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit&#xA;override this.StopListening : obj -&gt; unit" Usage="lostFocusEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Objeto de origen en el que se detiene la escucha de <see cref="E:System.Windows.UIElement.LostFocus" />.</param>
        <summary>Detiene la escucha del evento <see cref="E:System.Windows.UIElement.LostFocus" /> en el origen especificado.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.WeakEventManager" />
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
  </Members>
</Type>