<Type Name="FontTypeConverter" FullName="System.Windows.Xps.Serialization.FontTypeConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c8610cf55868323ace8bff57044504a4b42d58f" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53494722" /></Metadata><TypeSignature Language="C#" Value="public class FontTypeConverter : System.ComponentModel.ExpandableObjectConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FontTypeConverter extends System.ComponentModel.ExpandableObjectConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Xps.Serialization.FontTypeConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class FontTypeConverter&#xA;Inherits ExpandableObjectConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class FontTypeConverter : System::ComponentModel::ExpandableObjectConverter" />
  <TypeSignature Language="F#" Value="type FontTypeConverter = class&#xA;    inherit ExpandableObjectConverter" />
  <AssemblyInfo>
    <AssemblyName>ReachFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.ExpandableObjectConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona convertidores de tipos para convertir objetos <see cref="T:System.Windows.Media.GlyphRun" /> hacia y desde objetos de otros tipos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acceso a esta clase solo a través del <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> método. Vea las clases base <xref:System.ComponentModel.TypeConverter> y <xref:System.ComponentModel.ExpandableObjectConverter> para otras notas importantes de uso.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FontTypeConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acceso a esta clase solo a través del <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> método. Vea las clases base <xref:System.ComponentModel.TypeConverter> y <xref:System.ComponentModel.ExpandableObjectConverter> para otras notas importantes de uso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="fontTypeConverter.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona información contextual.</param>
        <param name="sourceType">Tipo de objeto que se va a convertir.</param>
        <summary>Devuelve un valor que indica si este convertidor puede convertir una instancia de un tipo especificado en un objeto <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <returns>Es <see langword="true" /> si la cadena de datos especificada se puede convertir en el tipo de datos especificado; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como se implementa en esta clase, este método devuelve `true` solo si `sourceType` es <xref:System.Uri>.  
  
 El `context` no se usa el parámetro. Vea las notas para los herederos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Invalide este método para proporcionar sus propios requisitos de conversión. Utilice el parámetro <paramref name="context" /> para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Este parámetro puede ser <see langword="null" />; por lo tanto, compruébelo siempre. Además, las propiedades del objeto <paramref name="context" /> pueden devolver una referencia nula (<see langword="Nothing" />).</para></block>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="fontTypeConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona información contextual.</param>
        <param name="destinationType">El tipo de objeto en el que desea convertir una ejecución de glifos.</param>
        <summary>Devuelve un valor que indica si este objeto <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" /> puede convertir un <see cref="T:System.Windows.Media.GlyphRun" /> en una instancia de un tipo especificado.</summary>
        <returns>Es <see langword="true" /> si la conversión es posible; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como se implementa en esta clase, este método devuelve `true` solo si `destinationType` es <xref:System.Uri>.  
  
 El `context` no se usa el parámetro. Vea las notas para los herederos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Invalide este método para proporcionar sus propios requisitos de conversión. Utilice el parámetro <paramref name="context" /> para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Este parámetro puede ser <see langword="null" />; por lo tanto, compruébelo siempre. Además, las propiedades del objeto <paramref name="context" /> pueden devolver una referencia nula (<see langword="Nothing" />).</para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="fontTypeConverter.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona información contextual.</param>
        <param name="culture">Idioma y referencia cultural que se utilizan durante la conversión.</param>
        <param name="value">Objeto que se convierte.</param>
        <summary>Convierte el objeto especificado en un tipo <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <returns>El nuevo objeto <see cref="T:System.Windows.Media.GlyphRun" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no se implementa en esta clase - excepto para producir las excepciones. Vea las notas para los herederos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Se llama a este método desde esta clase, no desde una clase derivada.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="value" /> no es un tipo que se pueda convertir.</exception>
        <block subset="none" type="overrides"><para>Invalide este método para proporcionar un método de conversión. Utilice el parámetro <paramref name="context" /> para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Use el <paramref name="culture" /> parámetro para proporcionar información sobre la referencia cultural o idioma.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="fontTypeConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona información contextual.</param>
        <param name="culture">Idioma y referencia cultural que se utilizan durante la conversión.</param>
        <param name="value">El objeto que desea convertir.</param>
        <param name="destinationType">El tipo en el que desea convertir <paramref name="value" />.</param>
        <summary>Convierte una estructura <see cref="T:System.Windows.Media.GlyphRun" /> en un objeto del tipo especificado.</summary>
        <returns>El nuevo <see cref="T:System.Object" /> del tipo designado. Como se implementa en esta clase, debe ser <see cref="T:System.Uri" />. Expresa el [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del subconjunto de fuentes que utiliza el parámetro <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como se implementa en esta clase, `value` debe ser un <xref:System.Windows.Media.GlyphRun>.  
  
 Como se implementa en esta clase, `destinationType` debe ser un <xref:System.Uri> o <xref:System.NotSupportedException> se produce.  
  
 El `culture` no se usa el parámetro. Vea las notas para los herederos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El <paramref name="destinationType" /> no se puede convertir en el tipo <paramref name="value" />.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="context" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Windows.Xps.XpsSerializationException">Se produce un error al serializar la ejecución de glifos.</exception>
        <block subset="none" type="overrides"><para>Invalide este método para proporcionar su propia conversión. Use el <paramref name="culture" /> parámetro para especificar el idioma y referencia cultural. Utilice el parámetro <paramref name="context" /> para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Este parámetro puede ser <see langword="null" />; por lo tanto, compruébelo siempre. Además, las propiedades del objeto <paramref name="context" /> pueden devolver una referencia nula (<see langword="Nothing" />).</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetProperties(class System.ComponentModel.ITypeDescriptorContext context, object value, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.Serialization.FontTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::PropertyDescriptorCollection ^ GetProperties(System::ComponentModel::ITypeDescriptorContext ^ context, System::Object ^ value, cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="override this.GetProperties : System.ComponentModel.ITypeDescriptorContext * obj * Attribute[] -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="fontTypeConverter.GetProperties (context, value, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="attributes" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona información contextual.</param>
        <param name="value">Un objeto para el que necesita descripciones de propiedad.</param>
        <param name="attributes">Matriz de atributos que filtran la colección devuelta para excluir las propiedades no pertinentes.</param>
        <summary>Obtiene una colección de descripciones de propiedades para el tipo especificado.</summary>
        <returns><see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las descripciones de propiedad que se exponen para el componente; o <see langword="null" /> si no se devuelve ninguna descripción de propiedad.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no se implementa en esta clase - excepto para producir la excepción. Vea las notas para los herederos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Se llama a este método desde esta clase, no desde una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Invalide este método para proporcionar un método para obtener seleccionado <see cref="T:System.ComponentModel.PropertyDescriptor" /> objetos o los tipos. Utilice el parámetro <paramref name="context" /> para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Use el <paramref name="attributes" /> matriz para designar las propiedades para incluir o excluir.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>