<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b5bfbae4e9f03399e51aa17e50a0dca89d6d74d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37471775" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <TypeSignature Language="F#" Value="type ApplicationActivator = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona la clase base para la activación de ensamblados basados en manifiestos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay una sola instancia designada de la <xref:System.Runtime.Hosting.ApplicationActivator> clase en cada <xref:System.AppDomain> qué activación todas las llamadas se enrutan. El <xref:System.AppDomainManager> actual <xref:System.AppDomain> puede proporcionar su propio custom <xref:System.Runtime.Hosting.ApplicationActivator> para este propósito. Si un personalizado <xref:System.Runtime.Hosting.ApplicationActivator> no se proporciona, una instancia de la predeterminada <xref:System.Runtime.Hosting.ApplicationActivator> se crea.  
  
 Los pasos siguientes describen el comportamiento predeterminado <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> implementación del método:  
  
1.  Comprueba si el <xref:System.ActivationContext> del complemento para ser coincidencias activadas el <xref:System.ActivationContext> del actual dominio; en caso contrario, continúa en el paso 2. De lo contrario, ejecuta el ensamblado y devuelve el resultado empaquetado en un identificador de objeto.  
  
2.  Activa el complemento en un nuevo <xref:System.AppDomain>. Se realizan los pasos siguientes para inicializar un nuevo <xref:System.AppDomain> utilizando el <xref:System.Runtime.Hosting.ActivationArguments> para el complemento.  
  
    1.  Crea un nuevo <xref:System.AppDomainSetup> objeto utilizando un <xref:System.Runtime.Hosting.ActivationArguments> objeto que contiene el contexto de activación para el complemento.  
  
    2.  Las llamadas del <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> método para crear un nuevo dominio con el <xref:System.AppDomainSetup> objeto.  
  
    3.  El <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> llamadas al método el <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> método para adquirir un <xref:System.Security.Policy.ApplicationTrust> objeto para el complemento. Si el <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> propiedad devuelve `true`, se ejecuta el complemento. Si no es así, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> produce una <xref:System.Security.Policy.PolicyException> que indica que no se pudo adquirir el permiso de ejecución.  
  
    4.  Si el complemento es de confianza para la ejecución, aparecerá un nuevo <xref:System.AppDomain> se creará y configurará el <xref:System.ActivationContext> el complemento, y el complemento se carga y ejecuta.  
  
    5.  Se devuelve el resultado de la activación del complemento, empaquetado en un identificador de objeto.  
  
 Un activador personalizado puede adaptar la activación de un complemento a un conjunto determinado de circunstancias. Por ejemplo, que encontró un activador personalizado existente <xref:System.AppDomain> para activar este complemento en lugar de crear un nuevo dominio cada vez.  
  
 Los pasos siguientes describen el comportamiento de un personalizado <xref:System.Runtime.Hosting.ApplicationActivator> que activa un complemento en una existente <xref:System.AppDomain>:  
  
1.  El activador personalizado encuentra un dominio que tiene el mismo <xref:System.ActivationContext> como el complemento que se está activando.  
  
2.  Si el <xref:System.ActivationContext> nunca se ha visto antes en el proceso, el activador personalizado crea un nuevo <xref:System.AppDomain> para este <xref:System.ActivationContext> mediante una llamada a la <xref:System.AppDomain.CreateDomain%2A> método directamente, o delegar esta actividad a la <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> en la clase base.  
  
3.  Si hay un dominio existente con el mismo <xref:System.ActivationContext>, a continuación, puede delegar el activador del <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> llamada al método el <xref:System.Runtime.Hosting.ApplicationActivator> en el dominio de destino. Tenga en cuenta que esto sería una llamada entre dominios a un <xref:System.Runtime.Hosting.ApplicationActivator> que reside en el destino <xref:System.AppDomain>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo obtener un <xref:System.Runtime.Hosting.ApplicationActivator> objeto desde la actual <xref:System.AppDomain.DomainManager%2A> para una aplicación basada en manifiesto.  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Hosting.ApplicationActivator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una instancia de la aplicación que se va a activar, utilizando un contexto de activación que identifica la aplicación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> que identifica la aplicación que se va a activar.</param>
        <summary>Crea una instancia de la aplicación que se va a activar, utilizando el contexto de activación especificado.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> que es un contenedor del valor devuelto de la ejecución de la aplicación. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está pensado para la activación basada en manifiestos de aplicaciones.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> que identifica la aplicación que se va a activar.</param>
        <param name="activationCustomData">Datos de activación personalizados.</param>
        <summary>Crea una instancia de la aplicación que se va a activar utilizando el contexto de activación especificado y los datos de activación personalizados.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> que es un contenedor del valor devuelto de la ejecución de la aplicación. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está pensado para la activación basada en manifiestos de aplicaciones. Los datos de activación se componen de información como parte de la cadena de consulta de una dirección URL.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceHelper : AppDomainSetup -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper adSetup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">Objeto <see cref="T:System.AppDomainSetup" /> cuya propiedad <see cref="P:System.AppDomainSetup.ActivationArguments" /> identifica la aplicación que se va a activar.</param>
        <summary>Crea una instancia de una aplicación utilizando el objeto <see cref="T:System.AppDomainSetup" /> especificado.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> que es un contenedor del valor devuelto de la ejecución de la aplicación. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está pensado para la activación basada en manifiestos de aplicaciones.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.AppDomainSetup.ActivationArguments" /> de <paramref name="adSetup" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.Policy.PolicyException">No se pudo ejecutar la instancia de la aplicación porque la configuración de la directiva para el dominio de aplicación actual no proporciona permiso para ejecutar esta aplicación.</exception>
      </Docs>
    </Member>
  </Members>
</Type>