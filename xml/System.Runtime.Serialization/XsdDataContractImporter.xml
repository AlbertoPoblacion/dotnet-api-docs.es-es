<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c600d02a71598cc91bb93a6e0e0a1c10a38021ea" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46634684" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7eafb-101">Permite la transformación de un conjunto de archivos de esquema XML (.xsd) en los tipos de Common Language Runtime (CLR).</span>
      <span class="sxs-lookup">
        <span data-stu-id="7eafb-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-102">Use <xref:System.Runtime.Serialization.XsdDataContractImporter> si está creando un servicio Web que debe interoperar con un servicio Web existente, o si desea crear tipos de contrato de datos a partir de esquemas XML.</span><span class="sxs-lookup"><span data-stu-id="7eafb-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="7eafb-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> transformará un conjunto de esquemas XML y creará tipos [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] que representan el contrato de datos en un lenguaje de programación seleccionado.</span><span class="sxs-lookup"><span data-stu-id="7eafb-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="7eafb-104">Para crear el código, use las clases en el espacio de nombres <xref:System.CodeDom>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="7eafb-105">A la inversa, use la clase <xref:System.Runtime.Serialization.XsdDataContractExporter> cuando haya creado un servicio Web que incorpore datos representados por tipos de CLR y cuando deba exportar esquemas XML para cada tipo de datos que vayan a usar otros servicios Web.</span><span class="sxs-lookup"><span data-stu-id="7eafb-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="7eafb-106">Es decir, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforma un conjunto de tipos de CLR en un conjunto de esquemas XML.</span><span class="sxs-lookup"><span data-stu-id="7eafb-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7eafb-107">Para generar tipos CLR de esquemas XML en tiempo de diseño, use la [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span><span class="sxs-lookup"><span data-stu-id="7eafb-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="7eafb-108">Para generar código a partir de archivos XSD, use el `/dataContractOnly` switch de la herramienta.</span><span class="sxs-lookup"><span data-stu-id="7eafb-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="7eafb-109">También puede usar <xref:System.Runtime.Serialization.XsdDataContractImporter> si necesita más control sobre el proceso o necesita hacerlo mediante programación.</span><span class="sxs-lookup"><span data-stu-id="7eafb-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7eafb-110">En el ejemplo siguiente, se crea un <xref:System.Xml.Schema.XmlSchemaSet> y se llama al método <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> para crear una <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="7eafb-111">A continuación se usa <xref:System.CodeDom.CodeCompileUnit> para crear archivos de código Visual C# y Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7eafb-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md">
      <span data-ttu-id="7eafb-112">Utilización de contratos de datos</span>
      <span class="sxs-lookup">
        <span data-stu-id="7eafb-112">Using Data Contracts</span>
      </span>
    </related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md">
      <span data-ttu-id="7eafb-113">Tipos admitidos por el serializador de contrato de datos</span>
      <span class="sxs-lookup">
        <span data-stu-id="7eafb-113">Types Supported by the Data Contract Serializer</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-114">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-115">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">
          <span data-ttu-id="7eafb-116">La <see cref="T:System.CodeDom.CodeCompileUnit" /> que se usará para almacenar el código.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-117">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> con la <see cref="T:System.CodeDom.CodeCompileUnit" /> que se usara para generar el código de CLR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-118">Use este constructor para agregar más código a una <xref:System.CodeDom.CodeCompileUnit> que ya se haya generado.</span><span class="sxs-lookup"><span data-stu-id="7eafb-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7eafb-119">En el ejemplo siguiente, se crea un <xref:System.Xml.Schema.XmlSchemaSet> y se llama al método <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> para crear una <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="7eafb-120">A continuación se usa <xref:System.CodeDom.CodeCompileUnit> para crear archivos de código Visual C# y Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7eafb-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-121">Obtiene un valor que indica si los esquemas se pueden transformar en <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-122">Para obtener más información acerca de los tipos que pueden importarse, consulte [tipos admitidos por el serializador de contratos de datos](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="7eafb-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-123">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene los esquemas para transformar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-124">Obtiene un valor que indica si los esquemas incluidos en un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> se pueden transformar en <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-125">
            <see langword="true" /> si los esquemas se pueden transformar en tipos de contrato de datos; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-125">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7eafb-126">El ejemplo siguiente llama al método <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> para determinar si se puede generar <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-127">El parámetro <paramref name="schemas" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="7eafb-128">Un contrato de datos implicado en la importación no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-128">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-129">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene los esquemas para transformar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="7eafb-130">Un <see cref="T:System.Collections.Generic.ICollection`1" /> de <see cref="T:System.Xml.XmlQualifiedName" /> que representa el conjunto de tipos de esquema para importar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-131">Obtiene un valor que indica si el conjunto especificado de tipos incluidos en la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" /> se puede transformar en los tipos de CLR generados en la clase <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-132">
            <see langword="true" /> si se pueden transformar los esquemas; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-132">
              <see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-133">El parámetro <paramref name="schemas" /> o <paramref name="typeNames" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="7eafb-134">Un contrato de datos implicado en la importación no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-134">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-135">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> para importar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="7eafb-136">Un <see cref="T:System.Xml.Schema.XmlSchemaElement" /> específico para proteger el conjunto de esquemas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-137">Obtiene un valor que indica si un elemento de esquema específico incluido en un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> se puede importar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-138">
            <see langword="true" /> si se puede importar el elemento; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-138">
              <see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-139">Este método comprueba el tipo y todos los tipos de esquema a los que hace referencia.</span><span class="sxs-lookup"><span data-stu-id="7eafb-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-140">El parámetro <paramref name="schemas" /> o <paramref name="element" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="7eafb-141">Un contrato de datos implicado en la importación no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-141">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-142">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene las representaciones del esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="7eafb-143">
            <see cref="T:System.Collections.IList" /> de <see cref="T:System.Xml.XmlQualifiedName" /> que especifica los nombres de los tipos de esquema que deben importarse de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-144">Obtiene un valor que indica si los esquemas incluidos en un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> se pueden transformar en <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-145">
            <see langword="true" /> si los esquemas se pueden transformar en tipos de contrato de datos; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-145">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-146">Para obtener más información acerca de los tipos que pueden importarse, consulte [tipos admitidos por el serializador de contratos de datos](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="7eafb-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-147">El parámetro <paramref name="schemas" /> o <paramref name="typeName" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="7eafb-148">Un contrato de datos implicado en la importación no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-148">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-149">Obtiene <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para almacenar los tipos de CLR generados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7eafb-150">
            <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para almacenar los tipos de CLR generados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-151">Llame a esta propiedad tras importar esquemas con <xref:System.Runtime.Serialization.XsdDataContractImporter> para tener acceso al <xref:System.CodeDom.CodeCompileUnit> en el que todo el código generado está almacenado.</span><span class="sxs-lookup"><span data-stu-id="7eafb-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7eafb-152">En el ejemplo siguiente se crea un <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="7eafb-153">A continuación se usa <xref:System.CodeDom.CodeCompileUnit> para crear un archivo de código Visual C# y otro de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7eafb-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-154">Devuelve una <see cref="T:System.CodeDom.CodeTypeReference" /> para el elemento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="7eafb-155">
            <see cref="T:System.Xml.XmlQualifiedName" /> que especifica el tipo de esquema para buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-156">Devuelve <see cref="T:System.CodeDom.CodeTypeReference" /> al tipo de CLR generado para el tipo de esquema con el <see cref="T:System.Xml.XmlQualifiedName" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-157">Una referencia <see cref="T:System.CodeDom.CodeTypeReference" /> al tipo de CLR generado para el tipo de esquema con el <paramref name="typeName" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-158">Use este método para buscar la referencia a un tipo de CLR generado tras llamar al método <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="7eafb-159"><xref:System.CodeDom.CodeTypeReference> contiene el nombre del tipo generado y se puede usar para buscar el <xref:System.CodeDom.CodeTypeDeclaration> correspondiente en <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="7eafb-160">Un <see cref="T:System.Xml.XmlQualifiedName" /> que especifica el nombre calificado de XML del tipo de esquema para buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="7eafb-161">
            <see cref="T:System.Xml.Schema.XmlSchemaElement" /> que especifica un elemento en un esquema XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-162">Devuelve <see cref="T:System.CodeDom.CodeTypeReference" /> para el elemento XML calificado especificado y el elemento de esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-163">Un <see cref="T:System.CodeDom.CodeTypeReference" /> que representa el tipo que se generó para el tipo de esquema especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-164">El elemento de esquema es necesario para los datos sobre el tipo que se especifica en el ámbito del elemento.</span><span class="sxs-lookup"><span data-stu-id="7eafb-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="7eafb-165">El principal ejemplo de esto es el atributo XSD `nillable`.</span><span class="sxs-lookup"><span data-stu-id="7eafb-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="7eafb-166">En el esquema, el valor `nillable` establecido en `true` se especifica en el elemento de esquema incluido mientras que el concepto de null se expresa en el tipo de CLR <xref:System.Nullable%601>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="7eafb-167">El elemento se pasa para que este importador pueda buscar la información del nivel de elemento y devolver la referencia de tipo correcto según corresponda.</span><span class="sxs-lookup"><span data-stu-id="7eafb-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="7eafb-168">Al importar WSDL, se importa cada parámetro por separado y, por tanto, los elementos de cada parámetro deben pasarse por separado.</span><span class="sxs-lookup"><span data-stu-id="7eafb-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="7eafb-169">Un <see cref="T:System.Xml.XmlQualifiedName" /> que representa el tipo de esquema para buscar los tipos conocidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-170">Devuelve una lista de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> que representa los tipos conocidos generados al generar código para el tipo de esquema especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-171">
            <see cref="T:System.Collections.Generic.IList`1" /> de tipo <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-172">Al generar los tipos de CLR para los tipos de esquema, los tipos conocidos también se generan para todos los tipos derivados que se encuentran en el esquema.</span><span class="sxs-lookup"><span data-stu-id="7eafb-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="7eafb-173">En muchos casos, estos tipos conocidos se agregan con atributos al código generado.</span><span class="sxs-lookup"><span data-stu-id="7eafb-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="7eafb-174">(Por ejemplo, vea el <xref:System.Runtime.Serialization.KnownTypeAttribute> clase.</span><span class="sxs-lookup"><span data-stu-id="7eafb-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="7eafb-175">) Sin embargo, para el tipo de nivel superior, debe haber una manera de devolver el conjunto de tipos conocidos generados.</span><span class="sxs-lookup"><span data-stu-id="7eafb-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="7eafb-176">Este método devuelve <xref:System.CodeDom.CodeTypeReference> para los tipos conocidos que se generaron para un tipo de esquema específico.</span><span class="sxs-lookup"><span data-stu-id="7eafb-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="7eafb-177">Para obtener más información, consulte [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span><span class="sxs-lookup"><span data-stu-id="7eafb-177">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="http://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337">
          <span data-ttu-id="7eafb-178">Tipos conocidos de contratos de datos</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-178">Data Contract Known Types</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-179">Transforma un conjunto de esquemas XML en <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para generar código de CLR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-180">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene las representaciones de esquema para generar los tipos de CLR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-181">Transforma el conjunto especificado de esquemas XML incluido en un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en una <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7eafb-182">En el ejemplo siguiente se usa el método <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> para probar si se puede importar un conjunto de esquemas.</span><span class="sxs-lookup"><span data-stu-id="7eafb-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="7eafb-183">Si el método <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> devuelve `true`, el código invoca el método <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>.</span><span class="sxs-lookup"><span data-stu-id="7eafb-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-184">El parámetro <paramref name="schemas" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-185">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene las representaciones del esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="7eafb-186">
            <see cref="T:System.Collections.Generic.ICollection`1" /> (de <see cref="T:System.Xml.XmlQualifiedName" />) que representa el conjunto de tipos de esquema para importar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-187">Transforma el conjunto especificado de tipos de esquema incluido en la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en los tipos de CLR generados en la clase <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-188">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene los esquemas para transformar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="7eafb-189">Un <see cref="T:System.Xml.Schema.XmlSchemaElement" /> que representa el elemento de esquema específico para transformar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-190">Transforma el elemento de esquema especificado en el conjunto de esquemas XML especificados en <see cref="T:System.CodeDom.CodeCompileUnit" /> y devuelve <see cref="T:System.Xml.XmlQualifiedName" /> que representa el nombre de contrato de datos para el elemento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7eafb-191">Una <see cref="T:System.Xml.XmlQualifiedName" /> que representa el elemento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-192">El parámetro <paramref name="schemas" /> o <paramref name="element" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="7eafb-193">Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene las representaciones del esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="7eafb-194">Un <see cref="T:System.Xml.XmlQualifiedName" /> que representa un tipo de esquema específico para importar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7eafb-195">Transforma el tipo de esquema XML especificado incluido en <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7eafb-196">El parámetro <paramref name="schemas" /> o <paramref name="typeName" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7eafb-197">Obtiene o establece <see cref="T:System.Runtime.Serialization.ImportOptions" /> que contiene opciones que se pueden establecer para la operación de importación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7eafb-198">
            <see cref="T:System.Runtime.Serialization.ImportOptions" /> que contiene las opciones que se pueden establecer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7eafb-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7eafb-199">Use la clase <xref:System.Runtime.Serialization.ImportOptions> para personalizar cómo los tipos de CLR se deben generar durante la importación del esquema.</span><span class="sxs-lookup"><span data-stu-id="7eafb-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>