<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XsdDataContractImporter.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d1e9a9c7ca5420f198e5489d5848a82e872d5211.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1e9a9c7ca5420f198e5489d5848a82e872d5211</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</source>
          <target state="translated">Permite la transformación de un conjunto de archivos de esquema XML (.xsd) en los tipos de Common Language Runtime (CLR).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> si está creando un servicio Web que debe interoperar con un servicio Web existente, o si desea crear tipos de contrato de datos a partir de esquemas XML.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> will transform a set of XML schemas and create the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> types that represent the data contract in a selected programming language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> transformará un conjunto de esquemas XML y creará tipos <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> que representan el contrato de datos en un lenguaje de programación seleccionado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To create the code, use the classes in the <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> namespace.</source>
          <target state="translated">Para crear el código, use las clases en el espacio de nombres <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Conversely, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</source>
          <target state="translated">A la inversa, use la clase <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> cuando haya creado un servicio Web que incorpore datos representados por tipos de CLR y cuando deba exportar esquemas XML para cada tipo de datos que vayan a usar otros servicios Web.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>That is, <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> transforms a set of CLR types into a set of XML schemas.</source>
          <target state="translated">Es decir, <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> transforma un conjunto de tipos de CLR en un conjunto de esquemas XML.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To generate CLR types from XML schemas at design time, use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
          <target state="translated">Para generar tipos CLR de esquemas XML en tiempo de diseño, use la <bpt id="p1">[</bpt>la herramienta de utilidad de metadatos de ServiceModel (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To generated code from XSD files, use the <ph id="ph1">`/dataContractOnly`</ph> switch of the tool.</source>
          <target state="translated">Para generar código a partir de archivos XSD, use la <ph id="ph1">`/dataContractOnly`</ph> conmutador de la herramienta.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> if you need more control over the process or need to do it programmatically.</source>
          <target state="translated">También puede usar <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> si necesita más control sobre el proceso o necesita hacerlo mediante programación.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method to create a <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente, se crea un <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> y se llama al método <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> para crear una <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both Visual C# and Visual Basic code files.</source>
          <target state="translated">A continuación se usa <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> para crear archivos de código Visual C# y Visual Basic.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that will be used to store the code.</source>
          <target state="translated">La <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> que se usará para almacenar el código.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class with the <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that will be used to generate CLR code.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> con la <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> que se usara para generar el código de CLR.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>Use this constructor to add more code into a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> that has already been generated.</source>
          <target state="translated">Use este constructor para agregar más código a una <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> que ya se haya generado.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method to create a <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente, se crea un <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> y se llama al método <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> para crear una <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both Visual C# and Visual Basic code files.</source>
          <target state="translated">A continuación se usa <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> para crear archivos de código Visual C# y Visual Basic.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Gets a value that indicates whether the schemas can be transformed into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtiene un valor que indica si los esquemas se pueden transformar en <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>For more information about types that can be imported, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de los tipos que se pueden importar, consulte <bpt id="p1">[</bpt>tipos admitidos por el serializador de contratos de datos<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene los esquemas para transformar.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>Gets a value that indicates whether the schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtiene un valor que indica si los esquemas incluidos en un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> se pueden transformar en <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed to data contract types; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los esquemas se pueden transformar en tipos de contrato de datos; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method to determine whether the <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> can be generated.</source>
          <target state="translated">El ejemplo siguiente llama al método <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> para determinar si se puede generar <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrato de datos implicado en la importación no es válido.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene los esquemas para transformar.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the set of schema types to import.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que representa el conjunto de tipos de esquema para importar.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>Gets a value that indicates whether the specified set of types contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into CLR types generated into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtiene un valor que indica si el conjunto especificado de tipos incluidos en la clase <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> se puede transformar en los tipos de CLR generados en la clase <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se pueden transformar los esquemas; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeNames" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> o <ph id="ph2">&lt;paramref name="typeNames" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrato de datos implicado en la importación no es válido.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> to import.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> para importar.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>A specific <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> to check in the set of schemas.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> específico para proteger el conjunto de esquemas.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>Gets a value that indicates whether a specific schema element contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be imported.</source>
          <target state="translated">Obtiene un valor que indica si un elemento de esquema específico incluido en un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> se puede importar.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element can be imported; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede importar el elemento; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>This method checks the type and all schema types referenced from it.</source>
          <target state="translated">Este método comprueba el tipo y todos los tipos de esquema a los que hace referencia.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> o <ph id="ph2">&lt;paramref name="element" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrato de datos implicado en la importación no es válido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene las representaciones del esquema.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the names of the schema types that need to be imported from the <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que especifica los nombres de los tipos de esquema que deben importarse de <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>Gets a value that indicates whether the schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtiene un valor que indica si los esquemas incluidos en un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> se pueden transformar en <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed to data contract types; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los esquemas se pueden transformar en tipos de contrato de datos; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>For more information about types that can be imported, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de los tipos que se pueden importar, consulte <bpt id="p1">[</bpt>tipos admitidos por el serializador de contratos de datos<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> o <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrato de datos implicado en la importación no es válido.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used for storing the CLR types generated.</source>
          <target state="translated">Obtiene <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> usado para almacenar los tipos de CLR generados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used to store the CLR types generated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> usado para almacenar los tipos de CLR generados.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>Call this property after importing schemas using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> to access the <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> in which all the generated code is stored.</source>
          <target state="translated">Llame a esta propiedad tras importar esquemas con <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> para tener acceso al <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> en el que todo el código generado está almacenado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>The following example uses creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both a Visual C# and Visual Basic code file.</source>
          <target state="translated">A continuación se usa <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> para crear un archivo de código Visual C# y otro de Visual Basic.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the specified element.</source>
          <target state="translated">Devuelve una <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> para el elemento especificado.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the schema type to look up.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que especifica el tipo de esquema para buscar.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> to the CLR type generated for the schema type with the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> al tipo de CLR generado para el tipo de esquema con el <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> reference to the CLR type generated for the schema type with the <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> specified.</source>
          <target state="translated">Una referencia <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> al tipo de CLR generado para el tipo de esquema con el <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>Use this method to look up the reference to a generated CLR type after calling the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method.</source>
          <target state="translated">Use este método para buscar la referencia a un tipo de CLR generado tras llamar al método <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> contains the name of the generated type and can be used to look up the corresponding <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> in the <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> contiene el nombre del tipo generado y se puede usar para buscar el <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> correspondiente en <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the XML qualified name of the schema type to look up.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que especifica el nombre calificado de XML del tipo de esquema para buscar.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> that specifies an element in an XML schema.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> que especifica un elemento en un esquema XML.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the specified XML qualified element and schema element.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> para el elemento XML calificado especificado y el elemento de esquema.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that represents the type that was generated for the specified schema type.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que representa el tipo que se generó para el tipo de esquema especificado.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The schema element is needed for data about the type that is specified at the element scope.</source>
          <target state="translated">El elemento de esquema es necesario para los datos sobre el tipo que se especifica en el ámbito del elemento.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The main example of this is the XSD attribute <ph id="ph1">`nillable`</ph>.</source>
          <target state="translated">El principal ejemplo de esto es el atributo XSD <ph id="ph1">`nillable`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>In schema, setting <ph id="ph1">`nillable`</ph> to <ph id="ph2">`true`</ph> is specified on the containing schema element whereas the concept of null is expressed in the CLR type <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph>.</source>
          <target state="translated">En el esquema, el valor <ph id="ph1">`nillable`</ph> establecido en <ph id="ph2">`true`</ph> se especifica en el elemento de esquema incluido mientras que el concepto de null se expresa en el tipo de CLR <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</source>
          <target state="translated">El elemento se pasa para que este importador pueda buscar la información del nivel de elemento y devolver la referencia de tipo correcto según corresponda.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</source>
          <target state="translated">Al importar WSDL, se importa cada parámetro por separado y, por tanto, los elementos de cada parámetro deben pasarse por separado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the schema type to look up known types for.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que representa el tipo de esquema para buscar los tipos conocidos.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> objects that represents the known types generated when generating code for the specified schema type.</source>
          <target state="translated">Devuelve una lista de objetos <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que representa los tipos conocidos generados al generar código para el tipo de esquema especificado.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> de tipo <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</source>
          <target state="translated">Al generar los tipos de CLR para los tipos de esquema, los tipos conocidos también se generan para todos los tipos derivados que se encuentran en el esquema.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>In many cases, these known types are added using attributes to the generated code.</source>
          <target state="translated">En muchos casos, estos tipos conocidos se agregan con atributos al código generado.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>(For example, see the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> class.</source>
          <target state="translated">(Por ejemplo, vea la <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>) However, for the top-level type, there needs to be a way to return the set of known types generated.</source>
          <target state="translated">) Sin embargo, para el tipo de nivel superior, debe haber una manera para devolver el conjunto de tipos conocidos generados.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>This method returns the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for known types that were generated for a specific schema type.</source>
          <target state="translated">Este método devuelve <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> para los tipos conocidos que se generaron para un tipo de esquema específico.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>tipos conocidos de contrato de datos<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Transforms a set of XML schemas into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used to generate CLR code.</source>
          <target state="translated">Transforma un conjunto de esquemas XML en <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> usado para generar código de CLR.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations to generate CLR types for.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene las representaciones de esquema para generar los tipos de CLR.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>Transforms the specified set of XML schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforma el conjunto especificado de esquemas XML incluido en un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en una <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method to test whether a set of schemas can be imported.</source>
          <target state="translated">En el ejemplo siguiente se usa el método <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> para probar si se puede importar un conjunto de esquemas.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>If the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, the code invokes the <ph id="ph3">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method.</source>
          <target state="translated">Si el método <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> devuelve <ph id="ph2">`true`</ph>, el código invoca el método <ph id="ph3">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene las representaciones del esquema.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> (of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>) that represents the set of schema types to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> (de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>) que representa el conjunto de tipos de esquema para importar.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>Transforms the specified set of schema types contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into CLR types generated into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforma el conjunto especificado de tipos de esquema incluido en la clase <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en los tipos de CLR generados en la clase <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene los esquemas para transformar.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> that represents the specific schema element to transform.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> que representa el elemento de esquema específico para transformar.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>Transforms the specified schema element in the set of specified XML schemas into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> and returns an <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the data contract name for the specified element.</source>
          <target state="translated">Transforma el elemento de esquema especificado en el conjunto de esquemas XML especificados en <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> y devuelve <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que representa el nombre de contrato de datos para el elemento especificado.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the specified element.</source>
          <target state="translated">Una <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que representa el elemento especificado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> o <ph id="ph2">&lt;paramref name="element" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> que contiene las representaciones del esquema.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents a specific schema type to import.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> que representa un tipo de esquema específico para importar.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>Transforms the specified XML schema type contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforma el tipo de esquema XML especificado incluido en <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> o <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> that contains settable options for the import operation.</source>
          <target state="translated">Obtiene o establece <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> que contiene opciones que se pueden establecer para la operación de importación.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> that contains settable options.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> que contiene las opciones que se pueden establecer.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> class to customize how the CLR types are generated during schema import.</source>
          <target state="translated">Use la clase <ph id="ph1">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> para personalizar cómo los tipos de CLR se deben generar durante la importación del esquema.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>