<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70d94daed131fd169a9e7dd76c788d9dfcaaed62" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755897" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que un objeto controle su propia serialización y deserialización.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cualquier clase que puede serializarse debe marcarse con el <xref:System.SerializableAttribute>. Si una clase necesita controlar su proceso de serialización, se puede implementar el <xref:System.Runtime.Serialization.ISerializable> interfaz. El <xref:System.Runtime.Serialization.Formatter> llamadas la <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> durante la serialización y rellena proporcionado <xref:System.Runtime.Serialization.SerializationInfo> con todos los datos necesarios para representar el objeto. El <xref:System.Runtime.Serialization.Formatter> crea un <xref:System.Runtime.Serialization.SerializationInfo> con el tipo del objeto en el gráfico. Los objetos que necesitan enviar proxies para ellos mismos pueden utilizar el <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> y <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> métodos en <xref:System.Runtime.Serialization.SerializationInfo> para cambiar la información transmitida.  
  
 En el caso de herencia de clases, es posible serializar una clase que deriva de una clase base que implementa <xref:System.Runtime.Serialization.ISerializable>. En este caso, la clase derivada debe llamar a la implementación de clase base <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> dentro de su implementación <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. En caso contrario, no se serializará los datos de la clase base.  
  
 El <xref:System.Runtime.Serialization.ISerializable> interfaz implica un constructor con la firma del constructor (<xref:System.Runtime.Serialization.SerializationInfo> información, <xref:System.Runtime.Serialization.StreamingContext> contexto). Durante la deserialización, se llama al constructor actual sólo después de los datos en el <xref:System.Runtime.Serialization.SerializationInfo> se ha deserializado el formateador. En general, este constructor debe protegerse si la clase no está sellada.  
  
 No se puede garantizar el orden en el que se deserializan los objetos. Por ejemplo, si un tipo hace referencia a un tipo que no se ha deserializado todavía, se producirá una excepción. Si va a crear los tipos que tienen tales dependencias, puede solucionar el problema implementando el `IDeserializationCallback` interfaz y la `OnDeserialization` método.  
  
 La arquitectura de serialización controla los tipos de objetos que extienden <xref:System.MarshalByRefObject> igual que los tipos que amplían <xref:System.Object>. Estos tipos se pueden marcar con el <xref:System.SerializableAttribute> e implemente el <xref:System.Runtime.Serialization.ISerializable> interfaz como cualquier otro tipo de objeto. Su estado de objeto se capturarán y persistirá en la secuencia.  
  
 Cuando se utilizan estos tipos a través de <xref:System.Runtime.Remoting>, la infraestructura de comunicación remota proporciona un suplente que anticipa la serialización típica y en su lugar, serializa un proxy para el <xref:System.MarshalByRefObject>. Un suplente es una aplicación auxiliar que sabe cómo serializar y deserializar objetos de un tipo determinado. El proxy, invisible para el usuario en la mayoría de los casos, será del tipo <xref:System.Runtime.Remoting.ObjRef>.  
  
 Como un patrón de diseño general, sería poco común en una clase se marca con el atributo serializable y ampliar <xref:System.MarshalByRefObject>. Los programadores deben pensar sobre los posibles escenarios de serialización y la comunicación remota al combinar estas dos características. Es un ejemplo donde podría ser aplicable con un <xref:System.IO.MemoryStream>. Mientras que la clase base de <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) se extiende desde <xref:System.MarshalByRefObject>, es posible capturar el estado de un <xref:System.IO.MemoryStream> y restaurarlo a voluntad. Podría, por lo tanto, ser significativo para serializar el estado de esta secuencia en una base de datos y restaurarla en algún momento posterior en el tiempo. Sin embargo, cuando se utilizan a través de comunicación remota, un objeto de este tipo sería con proxy.  
  
 Para obtener más información acerca de la serialización de clases que extienden <xref:System.MarshalByRefObject>, consulte <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Para obtener más información acerca de cómo implementar <xref:System.Runtime.Serialization.ISerializable>, consulte [serialización personalizada](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Runtime.Serialization.ISerializable> interfaz para definir el comportamiento de serialización personalizado para una clase.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implemente esta interfaz para permitir que un objeto participe en su propia serialización y deserialización.</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</param>
        <param name="context">Destino (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />) de esta serialización.</param>
        <summary>Llena <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar el objeto de destino.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los objetos que se incluyen en el <xref:System.Runtime.Serialization.SerializationInfo> automáticamente se realiza un seguimiento y serializan el formateador.  
  
 Código que llama a <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requiere el <xref:System.Security.Permissions.SecurityPermission> para proporcionar servicios de serialización. Enumeración asociada: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  No se garantiza que este método se llamará solo una vez por cada instancia de objeto durante la serialización. Por lo tanto, el método debe implementarse de manera que su comportamiento será el mismo independientemente del número de veces que se llama.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> método para establecer valores alternativos para un objeto serializado. El código usa el <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> método de la <xref:System.Runtime.Serialization.SerializationInfo> clase para almacenar los valores alternativos cuando se serializa el objeto. Por el contrario, cuando el constructor de la `Person` clase se llama durante la deserialización, se recuperan los valores alternativos utilizando el <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> método y se reasignan a los campos del objeto.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
  </Members>
</Type>