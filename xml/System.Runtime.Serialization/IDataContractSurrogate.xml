<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1cac75517244a76ca60844bef5ed5d639855c317" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36533695" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b8dcd-101">Proporciona los métodos necesarios para sustituir un tipo por otro mediante <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> durante la serialización, la deserialización y la exportación e importación de documentos de esquema XML (XSD).</span>
      <span class="sxs-lookup">
        <span data-stu-id="b8dcd-101">Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> during serialization, deserialization, and export and import of XML schema documents (XSD).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-102">Use <xref:System.Runtime.Serialization.IDataContractSurrogate> al usar <xref:System.Runtime.Serialization.DataContractSerializer> si necesita realizar una de las siguientes acciones: sustituir un tipo u objeto por otro o generar dinámicamente variaciones de esquema.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-102">Use the <xref:System.Runtime.Serialization.IDataContractSurrogate> when using the <xref:System.Runtime.Serialization.DataContractSerializer> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</span></span> <span data-ttu-id="b8dcd-103">Para una aplicación de ejemplo, vea [suplente de DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span><span class="sxs-lookup"><span data-stu-id="b8dcd-103">For a sample application, see [DataContract Surrogate](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span></span> <span data-ttu-id="b8dcd-104">Para obtener más información acerca de los contratos de datos, vea [usar contratos de datos](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="b8dcd-104">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="b8dcd-105">En tiempo de ejecución, puede buscar el <xref:System.Runtime.Serialization.DataContractSerializer> específico para cualquier operación en un servicio con <xref:System.ServiceModel.Description.OperationDescription> para buscar la instancia <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-105">At run time, you can find the specific <xref:System.Runtime.Serialization.DataContractSerializer> for any operation in a service by using the <xref:System.ServiceModel.Description.OperationDescription> to find the <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> instance.</span></span> <span data-ttu-id="b8dcd-106">Para obtener más información acerca de cómo implementar la interfaz para crear un suplente, consulte [suplentes del contrato de datos](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span><span class="sxs-lookup"><span data-stu-id="b8dcd-106">For more information about implementing the interface to create a surrogate, see [Data Contract Surrogates](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span></span>  
  
 <span data-ttu-id="b8dcd-107">También puede usar <xref:System.Runtime.Serialization.IDataContractSurrogate> para afectar a la importación y exportación de esquemas XML al usar las clases <xref:System.Runtime.Serialization.XsdDataContractExporter> y <xref:System.Runtime.Serialization.XsdDataContractImporter>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-107">You can also use the <xref:System.Runtime.Serialization.IDataContractSurrogate> to affect the import and export of XML schemas when you are using the <xref:System.Runtime.Serialization.XsdDataContractExporter> and <xref:System.Runtime.Serialization.XsdDataContractImporter> classes.</span></span> <span data-ttu-id="b8dcd-108">Para ello, asigne <xref:System.Runtime.Serialization.IDataContractSurrogate> a la propiedad <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ExportOptions> o a la propiedad <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ImportOptions>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-108">You can do so by assigning the <xref:System.Runtime.Serialization.IDataContractSurrogate> to the <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ExportOptions> class, or to the <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ImportOptions> class.</span></span>  <span data-ttu-id="b8dcd-109">Para obtener más información, consulte [esquema de importación y exportación](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span><span class="sxs-lookup"><span data-stu-id="b8dcd-109">For more information, see [Schema Import and Export](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dcd-110">En el siguiente ejemplo se muestra una implementación de la interfaz <xref:System.Runtime.Serialization.IDataContractSurrogate>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-110">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate> interface.</span></span> <span data-ttu-id="b8dcd-111">El código sustituye la serialización del tipo `Person` para una clase `PersonSurrogated`.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-111">The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b8dcd-112">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-112">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">
          <span data-ttu-id="b8dcd-113">
            <see cref="T:System.Reflection.MemberInfo" /> que describe el miembro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-113">A <see cref="T:System.Reflection.MemberInfo" /> that describes the member.</span>
          </span>
        </param>
        <param name="dataContractType">
          <span data-ttu-id="b8dcd-114">
            <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-114">A <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-115">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-115">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-116">Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-116">An object that represents the annotation to be inserted into the XML schema definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">
          <span data-ttu-id="b8dcd-117">El tipo de CLR que se va a reemplazar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-117">The CLR type to be replaced.</span>
          </span>
        </param>
        <param name="dataContractType">
          <span data-ttu-id="b8dcd-118">El tipo de contrato de datos que se va a anotar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-118">The data contract type to be annotated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-119">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-119">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-120">Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-120">An object that represents the annotation to be inserted into the XML schema definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b8dcd-121">El tipo de CLR <see cref="T:System.Type" /> que se va a sustituir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-121">The CLR type <see cref="T:System.Type" /> to substitute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-122">Durante la serialización, la deserialización y la importación e importación del esquema, devuelve un tipo de contrato de datos que sustituye el tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-122">During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-123">
            <see cref="T:System.Type" /> que se va a sustituir por el valor <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-123">The <see cref="T:System.Type" /> to substitute for the <paramref name="type" /> value.</span>
          </span>
          <span data-ttu-id="b8dcd-124">
            <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-124">This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="b8dcd-125">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-125">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8dcd-126">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-126">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="b8dcd-127">El objeto deserializado que se va a sustituir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-127">The deserialized object to be substituted.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="b8dcd-128">
            <see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-128">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-129">Durante la deserialización, devuelve un objeto que es un suplente del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-129">During deserialization, returns an object that is a substitute for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-130">El objeto deserializado sustituido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-130">The substituted deserialized object.</span>
          </span>
          <span data-ttu-id="b8dcd-131">Este objeto debe ser de un tipo que <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> pueda serializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-131">This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="b8dcd-132">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-132">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-133">En una implementación simple, use una estructura de control if...then...else para probar si el valor `obj` es del tipo suplente.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-133">In a simple implementation, use an if…then…else control structure to test whether the `obj` value is of the surrogated type.</span></span> <span data-ttu-id="b8dcd-134">En ese caso, transfórmelo como corresponda y devuelva el objeto sustituido.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-134">If so, transform it as necessary and return the substituted object.</span></span> <span data-ttu-id="b8dcd-135">El objeto sustituido puede ser una nueva instancia o la misma instancia `obj`.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-135">The substituted object can be a new instance or the same `obj` instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dcd-136">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-136">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">
          <span data-ttu-id="b8dcd-137">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> de <see cref="T:System.Type" /> al que se agregarán los tipos conocidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-137">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.Type" /> to add known types to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-138">Establece la colección de tipos conocidos para usar con la serialización y deserialización de objetos de datos personalizados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-138">Sets the collection of known types to use for serialization and deserialization of the custom data objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-139">Este método sólo es necesario durante la exportación o importación del esquema si las anotaciones se insertan en el esquema con el método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-139">This method is required during schema export or schema import only if annotations are inserted into the schema using the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="b8dcd-140">El objeto que se va a sustituir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-140">The object to substitute.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="b8dcd-141">
            <see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-141">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-142">Durante la serialización, devuelve un objeto que sustituye el objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-142">During serialization, returns an object that substitutes the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-143">El objeto sustituido que se serializará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-143">The substituted object that will be serialized.</span>
          </span>
          <span data-ttu-id="b8dcd-144">
            <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-144">The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="b8dcd-145">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-145">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-146">Este método no debe devolver `null` porque durante la deserialización, los datos se convertirán al tipo <xref:System.Object> y <xref:System.InvalidCastException> se produce.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-146">This method must not return `null` because on deserialization the data will be cast to type <xref:System.Object> and an <xref:System.InvalidCastException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dcd-147">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-147">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="b8dcd-148">El nombre del tipo en esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-148">The name of the type in schema.</span>
          </span>
        </param>
        <param name="typeNamespace">
          <span data-ttu-id="b8dcd-149">El espacio de nombres del tipo en esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-149">The namespace of the type in schema.</span>
          </span>
        </param>
        <param name="customData">
          <span data-ttu-id="b8dcd-150">El objeto que representa la anotación insertada en la definición del esquema XML, que son datos que se pueden usar para buscar el tipo al que se hace referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-150">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-151">Durante la importación del esquema, devuelve el tipo al que hace referencia el esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-151">During schema import, returns the type referenced by the schema.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-152">
            <see cref="T:System.Type" /> que se va a usar para el tipo al que se hace referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-152">The <see cref="T:System.Type" /> to use for the referenced type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-153">Se deberá devolver `Null` si no existe un tipo de CLR para representar el tipo de esquema.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-153">`Null` should be returned if a CLR type does not exist for representing the schema type.</span></span> <span data-ttu-id="b8dcd-154">Esto producirá un nuevo tipo que se generará durante la importación del esquema.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-154">This will cause a new type to be generated during schema import.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dcd-155">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-155">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">
          <span data-ttu-id="b8dcd-156">
            <see cref="T:System.CodeDom.CodeTypeDeclaration" /> para procesar que representa la declaración de tipos generada durante la importación del esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to process that represents the type declaration generated during schema import.</span>
          </span>
        </param>
        <param name="compileUnit">
          <span data-ttu-id="b8dcd-157">
            <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene el otro código generado durante la importación del esquema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-157">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains the other code generated during schema import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8dcd-158">Procesa el tipo generado a partir del esquema importado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-158">Processes the type that has been generated from the imported schema.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8dcd-159">
            <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contiene el tipo procesado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8dcd-159">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that contains the processed type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dcd-160">En este método, el usuario puede modificar la entrada <xref:System.CodeDom.CodeTypeDeclaration> u otra información en <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-160">The input <xref:System.CodeDom.CodeTypeDeclaration> or other information in the <xref:System.CodeDom.CodeCompileUnit> can be modified by the user in this method.</span></span> <span data-ttu-id="b8dcd-161">Si se devuelve `null`, no se generará el tipo.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-161">If `null` is returned, it will cause the type to not be generated.</span></span> <span data-ttu-id="b8dcd-162">Si se devuelve un nuevo <xref:System.CodeDom.CodeTypeDeclaration>, éste sustituirá el tipo original generado.</span><span class="sxs-lookup"><span data-stu-id="b8dcd-162">If a new <xref:System.CodeDom.CodeTypeDeclaration> is returned, it will replace the original type generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>