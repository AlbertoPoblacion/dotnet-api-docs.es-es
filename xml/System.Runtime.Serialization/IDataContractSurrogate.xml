<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd226841e0946e18a51ec7bb1841277049a80e8c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37626680" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona los métodos necesarios para sustituir un tipo por otro mediante <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> durante la serialización, la deserialización y la exportación e importación de documentos de esquema XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Runtime.Serialization.IDataContractSurrogate> al usar <xref:System.Runtime.Serialization.DataContractSerializer> si necesita realizar una de las siguientes acciones: sustituir un tipo u objeto por otro o generar dinámicamente variaciones de esquema. Para una aplicación de ejemplo, vea [suplente de DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md). Para obtener más información acerca de los contratos de datos, vea [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 En tiempo de ejecución, puede buscar el <xref:System.Runtime.Serialization.DataContractSerializer> específico para cualquier operación en un servicio con <xref:System.ServiceModel.Description.OperationDescription> para buscar la instancia <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>. Para obtener más información acerca de cómo implementar la interfaz para crear un suplente, consulte [suplentes de contratos de datos](~/docs/framework/wcf/extending/data-contract-surrogates.md).  
  
 También puede usar <xref:System.Runtime.Serialization.IDataContractSurrogate> para afectar a la importación y exportación de esquemas XML al usar las clases <xref:System.Runtime.Serialization.XsdDataContractExporter> y <xref:System.Runtime.Serialization.XsdDataContractImporter>. Para ello, asigne <xref:System.Runtime.Serialization.IDataContractSurrogate> a la propiedad <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ExportOptions> o a la propiedad <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ImportOptions>.  Para obtener más información, consulte [esquema de importación y exportación](~/docs/framework/wcf/feature-details/schema-import-and-export.md).  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación de la interfaz <xref:System.Runtime.Serialization.IDataContractSurrogate>. El código sustituye la serialización del tipo `Person` para una clase `PersonSurrogated`.  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">
          <see cref="T:System.Reflection.MemberInfo" /> que describe el miembro.</param>
        <param name="dataContractType">Objeto <see cref="T:System.Type" />.</param>
        <summary>Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</summary>
        <returns>Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">El tipo de CLR que se va a reemplazar.</param>
        <param name="dataContractType">El tipo de contrato de datos que se va a anotar.</param>
        <summary>Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</summary>
        <returns>Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">El tipo de CLR <see cref="T:System.Type" /> que se va a sustituir.</param>
        <summary>Durante la serialización, la deserialización y la importación e importación del esquema, devuelve un tipo de contrato de datos que sustituye el tipo especificado.</summary>
        <returns>
          <see cref="T:System.Type" /> que se va a sustituir por el valor <paramref name="type" />. <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este tipo. Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">El objeto deserializado que se va a sustituir.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</param>
        <summary>Durante la deserialización, devuelve un objeto que es un suplente del objeto especificado.</summary>
        <returns>El objeto deserializado sustituido. Este objeto debe ser de un tipo que <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> pueda serializar. Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una implementación simple, use una estructura de control if...then...else para probar si el valor `obj` es del tipo suplente. En ese caso, transfórmelo como corresponda y devuelva el objeto sustituido. El objeto sustituido puede ser una nueva instancia o la misma instancia `obj`.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">
          <see cref="T:System.Collections.ObjectModel.Collection`1" /> de <see cref="T:System.Type" /> al que se agregarán los tipos conocidos.</param>
        <summary>Establece la colección de tipos conocidos para usar con la serialización y deserialización de objetos de datos personalizados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método sólo es necesario durante la exportación o importación del esquema si las anotaciones se insertan en el esquema con el método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">El objeto que se va a sustituir.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</param>
        <summary>Durante la serialización, devuelve un objeto que sustituye el objeto especificado.</summary>
        <returns>El objeto sustituido que se serializará. <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este objeto. Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no debe devolver `null` porque durante la deserialización, los datos se convertirá al tipo <xref:System.Object> y un <xref:System.InvalidCastException> se produce.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">El nombre del tipo en esquema.</param>
        <param name="typeNamespace">El espacio de nombres del tipo en esquema.</param>
        <param name="customData">El objeto que representa la anotación insertada en la definición del esquema XML, que son datos que se pueden usar para buscar el tipo al que se hace referencia.</param>
        <summary>Durante la importación del esquema, devuelve el tipo al que hace referencia el esquema.</summary>
        <returns>
          <see cref="T:System.Type" /> que se va a usar para el tipo al que se hace referencia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se deberá devolver `Null` si no existe un tipo de CLR para representar el tipo de esquema. Esto producirá un nuevo tipo que se generará durante la importación del esquema.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">
          <see cref="T:System.CodeDom.CodeTypeDeclaration" /> para procesar que representa la declaración de tipos generada durante la importación del esquema.</param>
        <param name="compileUnit">
          <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene el otro código generado durante la importación del esquema.</param>
        <summary>Procesa el tipo generado a partir del esquema importado.</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contiene el tipo procesado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este método, el usuario puede modificar la entrada <xref:System.CodeDom.CodeTypeDeclaration> u otra información en <xref:System.CodeDom.CodeCompileUnit>. Si se devuelve `null`, no se generará el tipo. Si se devuelve un nuevo <xref:System.CodeDom.CodeTypeDeclaration>, éste sustituirá el tipo original generado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>