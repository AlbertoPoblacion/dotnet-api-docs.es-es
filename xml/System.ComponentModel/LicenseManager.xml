<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LicenseManager.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f92de3b7d3a6a10e1979afcb6d369ee649f422ae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f92de3b7d3a6a10e1979afcb6d369ee649f422ae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseManager">
          <source>Provides properties and methods to add a license to a component and to manage a <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>.</source>
          <target state="translated">Proporciona propiedades y métodos para agregar una licencia a un componente y administrar un <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseManager">
          <source>This class cannot be inherited.</source>
          <target state="translated">Esta clase no puede heredarse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager&gt;</ph> class provides the following <ph id="ph2">`static`</ph> properties: <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.UsageMode%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager&gt;</ph> clase ofrece lo siguiente <ph id="ph2">`static`</ph> propiedades: <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.UsageMode%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>The class also provides the following <ph id="ph1">`static`</ph> methods: <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph>.</source>
          <target state="translated">La clase también proporciona las siguientes <ph id="ph1">`static`</ph> métodos: <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>When you create a component that you want to license, you must do the following:</source>
          <target state="translated">Cuando se crea un componente que desea de licencia, debe hacer lo siguiente:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>Specify the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> by marking the component with a <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProviderAttribute&gt;</ph>.</source>
          <target state="translated">Especifique el <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> marcando el componente con un <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProviderAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>Call <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> in the constructor of the component.</source>
          <target state="translated">Llame a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> en el constructor del componente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> throws a <ph id="ph2">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it tries to create an instance without a valid license.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> produce una <ph id="ph2">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> cuando intenta crear una instancia sin una licencia válida.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> does not throw an exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> no se inicia una excepción.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>Call <ph id="ph1">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> on any license that is granted when the component is disposed or finalized.</source>
          <target state="translated">Llamar a <ph id="ph1">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> en todas las licencias concedidas cuando se elimine o finalice el componente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>For more information on licensing, see <bpt id="p1">[</bpt>How to: License Components and Controls<ept id="p1">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.</source>
          <target state="translated">Para obtener más información acerca de las licencias, consulte <bpt id="p1">[</bpt>Cómo: licencia de componentes y controles<ept id="p1">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>The following code example creates a licensed control using the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un control con licencia mediante el <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseManager">
          <source>It uses a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> that is implemented by the <ph id="ph2">&lt;xref:System.ComponentModel.LicFileLicenseProvider&gt;</ph> class.</source>
          <target state="translated">Usa un <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> que implementa el <ph id="ph2">&lt;xref:System.ComponentModel.LicFileLicenseProvider&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseManager">
          <source>Creates an instance of an object type with a license context.</source>
          <target state="translated">Crea una instancia de un tipo de objeto con contexto de licencia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type to create.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo que se va a crear.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> that specifies when you can use the licensed instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> que especifica cuándo se puede utilizar la instancia con licencia.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>Creates an instance of the specified type, given a context in which you can use the licensed instance.</source>
          <target state="translated">Crea una instancia del tipo especificado, dado un contexto en el que se puede usar la instancia con licencia.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>An instance of the specified type.</source>
          <target state="translated">Instancia del tipo especificado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id="ph2">`creationContext`</ph> parameter is used as the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> especificar como el <ph id="ph2">`creationContext`</ph> parámetro se utiliza como el <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> durante la vida de este <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> method blocks all other threads in the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> método bloquea todos los demás subprocesos la <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> modifiquen el <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, lo cual permite <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> se comporte como una operación atómica.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>for access to private class members and metadata.</source>
          <target state="translated">Para obtener acceso a los miembros de clase privada y metadatos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type to create.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo que se va a crear.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> that specifies when you can use the licensed instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> que especifica cuándo se puede utilizar la instancia con licencia.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments for the type.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa los argumentos correspondientes al tipo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</source>
          <target state="translated">Crea una instancia del tipo especificado con los argumentos especificados, dado un contexto en el que se puede usar la instancia con licencia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>An instance of the specified type with the given array of arguments.</source>
          <target state="translated">Instancia del tipo especificado con la matriz de argumentos especificada.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id="ph2">`creationContext`</ph> parameter is used as the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> especificar como el <ph id="ph2">`creationContext`</ph> parámetro se utiliza como el <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> durante la vida de este <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
          <source>This method blocks all other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.</source>
          <target state="translated">Este método bloquea todos los demás subprocesos la <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> modifiquen el <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, lo cual permite <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> se comporte como una operación atómica.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.LicenseManager.CurrentContext">
          <source>Gets or sets the current <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph>, which specifies when you can use the licensed object.</source>
          <target state="translated">Obtiene o establece el actual <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph>, que especifica cuándo puede utilizarse el objeto con licencia.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.LicenseManager.CurrentContext">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> that specifies when you can use the licensed object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> que especifica cuándo se puede utilizar el objeto con licencia.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.LicenseManager.CurrentContext">
          <source>When the user requests a valid <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph>, the user must give the context in which the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> is valid to the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Cuando el usuario solicita válido <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph>, el usuario debe dar el contexto en el que el <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> es válida para el <ph id="ph3">&lt;xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.LicenseManager.CurrentContext">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> returned by this property should be passed to all <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> classes.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> devuelto por esta propiedad se debe pasar a todos los <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> clases.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.LicenseManager.CurrentContext">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph> property is currently locked and cannot be changed.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph> está bloqueada actualmente y no se puede modificar.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to find a valid license for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> para el que se va a buscar una licencia válida.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
          <source>Returns whether the given type has a valid license.</source>
          <target state="translated">Devuelve si el tipo especificado tiene una licencia válida.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the given type is licensed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tipo especificado tiene licencia; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseManager">
          <source>Determines whether a valid license can be granted.</source>
          <target state="translated">Determina si se puede conceder una licencia válida.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type of object that requests the <ph id="ph2">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de objeto que solicita <ph id="ph2">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source>Determines whether a valid license can be granted for the specified type.</source>
          <target state="translated">Determina si se puede conceder una licencia válida para el tipo especificado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a valid license can be granted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede conceder una licencia válida; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when the type is either not licensed, or is licensed and the license is valid.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> método <ph id="ph2">`true`</ph> cuando el tipo no tiene licencia o tiene licencia y la licencia no es válida.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source>This method does not throw a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
          <target state="translated">Este método no produce una <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> cuando no se puede conceder válido <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> método genera una excepción.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type of object that requests the license.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de objeto que solicita la licencia.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>An object of the specified type or a type derived from the specified type.</source>
          <target state="translated">Objeto del tipo especificado o un tipo derivado del tipo especificado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> that is a valid license, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a valid license cannot be granted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> que es una licencia válida, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si no se puede conceder una licencia válida.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>Determines whether a valid license can be granted for the specified instance of the type.</source>
          <target state="translated">Determina si se puede conceder una licencia válida para la instancia especificada del tipo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>This method creates a valid <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</source>
          <target state="translated">Este método crea un <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a valid <ph id="ph2">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> can be granted; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede conceder un <ph id="ph2">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> válido; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when the <ph id="ph3">`type`</ph> parameter is not licensed, or when it is licensed and the <ph id="ph4">`license`</ph> parameter is valid.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> método <ph id="ph2">`true`</ph> cuando el <ph id="ph3">`type`</ph> parámetro no tiene licencia o cuando se tiene licencia y <ph id="ph4">`license`</ph> parámetro es válido.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>This method does not throw a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
          <target state="translated">Este método no produce una <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> cuando no se puede conceder válido <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> método genera una excepción.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
          <source>If the <ph id="ph1">`license`</ph> parameter is not <ph id="ph2">`null`</ph> after this call, the object asking for a <ph id="ph3">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id="ph4">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.</source>
          <target state="translated">Si el <ph id="ph1">`license`</ph> parámetro no es <ph id="ph2">`null`</ph> después de esta llamada, el objeto que pide un <ph id="ph3">&lt;xref:System.ComponentModel.License&gt;</ph> debe deshacerse de la licencia mediante una llamada a la <ph id="ph4">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> método cuando el objeto queda eliminado o finaliza.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
          <source>The object whose current context you want to lock.</source>
          <target state="translated">Objeto cuyo contexto actual se desea bloquear.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
          <source>Prevents changes being made to the current <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> of the given object.</source>
          <target state="translated">Impide que se realicen cambios en el <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> actual del objeto especificado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> para obtener el <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> de un objeto.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
          <source>This method locks the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, preventing the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> from being retrieved.</source>
          <target state="translated">Este método bloquea el <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, lo que impide que la <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> desde que se va a recuperar.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
          <source>The context is already locked.</source>
          <target state="translated">El contexto ya está bloqueado.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
          <source>The object whose current context you want to unlock.</source>
          <target state="translated">Objeto cuyo contexto actual se desea desbloquear.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
          <source>Allows changes to be made to the current <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> of the given object.</source>
          <target state="translated">Permite que se realicen cambios en el <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> actual del objeto especificado.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> para obtener el <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> de un objeto.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
          <source>This method unlocks the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, allowing the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> to be retrieved.</source>
          <target state="translated">Este método desbloquea el <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, lo cual permite la <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> va a recuperar.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
          <source><ph id="ph1">&lt;paramref name="contextUser" /&gt;</ph> represents a different user than the one specified in a previous call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contextUser" /&gt;</ph> representa un usuario diferente del especificado en una llamada anterior al método <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.LicenseManager.UsageMode">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseUsageMode" /&gt;</ph> which specifies when you can use the licensed object for the <ph id="ph2">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph>.</source>
          <target state="translated">Obtiene <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseUsageMode" /&gt;</ph> que especifica cuándo se puede utilizar el objeto con licencia para <ph id="ph2">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.LicenseManager.UsageMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseUsageMode" /&gt;</ph> values, as specified in the <ph id="ph2">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph> property.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseUsageMode" /&gt;</ph>, tal como se especifica en la propiedad <ph id="ph2">&lt;see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.LicenseManager.UsageMode">
          <source>If this property cannot find a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> value, it returns <ph id="ph2">&lt;xref:System.ComponentModel.LicenseUsageMode.Runtime&gt;</ph>.</source>
          <target state="translated">Si esta propiedad no se puede encontrar un <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> value, devuelve <ph id="ph2">&lt;xref:System.ComponentModel.LicenseUsageMode.Runtime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseManager">
          <source>Determines whether a license can be granted.</source>
          <target state="translated">Determina si se puede conceder una licencia.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type of object that requests the license.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de objeto que solicita la licencia.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
          <source>Determines whether a license can be granted for the specified type.</source>
          <target state="translated">Determina si se puede conceder una licencia para el tipo especificado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
          <source>This method throws a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.</source>
          <target state="translated">Este método produce una <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> cuando válido <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> no se puede conceder.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> método no produce una excepción.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> cannot be granted.</source>
          <target state="translated">No se puede conceder un <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type of object that requests the license.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de objeto que solicita la licencia.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> of the specified type or a type derived from the specified type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> del tipo especificado o un tipo derivado del tipo especificado.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>Determines whether a license can be granted for the instance of the specified type.</source>
          <target state="translated">Determina si se puede conceder una licencia para la instancia del tipo especificado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>A valid <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>This method throws a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.</source>
          <target state="translated">Este método produce una <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> cuando válido <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> no se puede conceder.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> método no produce una excepción.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>All objects asking for a <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id="ph2">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.</source>
          <target state="translated">Todos los objetos que piden un <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph> debe deshacerse de la licencia mediante una llamada a la <ph id="ph2">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> método cuando el objeto queda eliminado o finaliza.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
          <source>The type is licensed, but a <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> cannot be granted.</source>
          <target state="translated">El tipo tiene licencia pero no se puede conceder una <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>