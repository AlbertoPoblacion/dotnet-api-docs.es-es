<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BackgroundWorker.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e3100d5df8f298b733355b4ac8b472c23b7f225f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3100d5df8f298b733355b4ac8b472c23b7f225f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Executes an operation on a separate thread.</source>
          <target state="translated">Ejecuta una operación en un subproceso distinto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase le permite ejecutar una operación en un subproceso dedicado independiente.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</source>
          <target state="translated">Operaciones que consumen muchos recursos como las descargas y las transacciones de base de datos pueden hacer que la interfaz de usuario (UI) para parece como si ha dejado de responder mientras se están ejecutando.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.</source>
          <target state="translated">Si desea una interfaz de usuario con capacidad de respuesta y está sufriendo grandes retrasos asociados con estas operaciones, la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase ofrece una solución apropiada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To execute a time-consuming operation in the background, create a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.</source>
          <target state="translated">Para ejecutar una operación consume mucho tiempo en segundo plano, se crea un <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> y realizar escuchas de eventos que notifican el progreso de la operación y la señal cuando finaliza la operación.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>.</source>
          <target state="translated">Puede crear el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> mediante programación o puede arrastrarlo al formulario desde el <bpt id="p1">**</bpt>componentes<ept id="p1">**</ept> pestaña de la <bpt id="p2">**</bpt>cuadro de herramientas<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If you create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</source>
          <target state="translated">Si crea el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> en el Diseñador de Windows Forms, se mostrará en la Bandeja de componentes y sus propiedades se mostrará en la ventana Propiedades.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To set up for a background operation, add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
          <target state="translated">Para configurar una operación en segundo plano, agregue un controlador de eventos para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Call your time-consuming operation in this event handler.</source>
          <target state="translated">Llame a la operación consume mucho tiempo en este controlador de eventos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To start the operation, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">Para iniciar la operación, llame a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive notifications of progress updates, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Para recibir notificaciones de las actualizaciones de progreso, controle el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive a notification when the operation is completed, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
          <target state="translated">Para recibir una notificación cuando se complete la operación, controle el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">Debe tener cuidado de no manipular los objetos de interfaz de usuario en su <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.</source>
          <target state="translated">En su lugar, se comunican con la interfaz de usuario a través de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> y <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> no se serializan eventos a través de <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> los límites.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Do not use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">No use un <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> componente para realizar operaciones multiproceso en más de una <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If your background operation requires a parameter, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.</source>
          <target state="translated">Si la operación en segundo plano requiere un parámetro, llame a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> con el parámetro.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Inside the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Dentro de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos, puede extraer el parámetro de la <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
          <target state="translated">Para más información sobre <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, vea <bpt id="p1">[</bpt>Cómo: Ejecutar una operación en segundo plano<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the basics of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra los conceptos básicos de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase para ejecutar de forma asincrónica una operación que consume mucho tiempo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">En la siguiente ilustración muestra un ejemplo de la salida.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker simple example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker simple example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Ejemplo sencillo de BackgroundWorker<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>ejemplo sencillo de BackgroundWorker<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To try this code, create a Windows Forms application.</source>
          <target state="translated">Para probar este código, cree una aplicación de formularios Windows Forms.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id="ph2">`resultLabel`</ph> and add two <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls named <ph id="ph4">`startAsyncButton`</ph> and <ph id="ph5">`cancelAsyncButton`</ph>.</source>
          <target state="translated">Agregar un <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control denominado <ph id="ph2">`resultLabel`</ph> y agregar dos <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> controles denominados <ph id="ph4">`startAsyncButton`</ph> y <ph id="ph5">`cancelAsyncButton`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handlers for both buttons.</source>
          <target state="translated">Crear <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> controladores de eventos de ambos botones.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the Toolbox, add a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component named <ph id="ph2">`backgroundWorker1`</ph>.</source>
          <target state="translated">Desde el <bpt id="p1">**</bpt>componentes<ept id="p1">**</ept> ficha del cuadro de herramientas, agregue un <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> componente denominado <ph id="ph2">`backgroundWorker1`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, and <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers for the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Crear <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, y <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controladores de eventos para el <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>In the code for the form, replace the existing code with the following code.</source>
          <target state="translated">En el código para el formulario, reemplace el código existente por el código siguiente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase para ejecutar de forma asincrónica una operación que consume mucho tiempo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">En la siguiente ilustración muestra un ejemplo de la salida.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker Fibonacci example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker Fibonacci example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Ejemplo de BackgroundWorker Fibonacci<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>ejemplo BackgroundWorker Fibonacci<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</source>
          <target state="translated">La operación calcula el número de Fibonacci seleccionado, informa de las actualizaciones de progreso que realiza el cálculo y permite un cálculo pendiente cancelarse.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Este constructor inicializa un <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Requests cancellation of a pending background operation.</source>
          <target state="translated">Solicita la cancelación de una operación en segundo plano pendiente.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> envía una solicitud para finalizar la operación en segundo plano pendiente y establece la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> propiedad <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>When you call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.</source>
          <target state="translated">Cuando se llama a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, su método de trabajo tiene una oportunidad para detener su ejecución y salir.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The worker code should periodically check the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">El código de trabajo debe comprobar periódicamente la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> propiedad para ver si se ha establecido en <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Tenga en cuenta que el código en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos puede finalizar su trabajo mientras se efectúa una solicitud de cancelación y el bucle de sondeo puede perder <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> se establece en <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">En este caso, el <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> marca de <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> en su <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos no se establecerá en <ph id="ph4">`true`</ph>, incluso si se realizó una solicitud de cancelación.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Esta situación se denomina un <bpt id="p1">*</bpt>condición de anticipación<ept id="p1">*</ept> y es un problema habitual en la programación multiproceso.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca del diseño multithreading problemas, vea <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to cancel an asynchronous ("background") operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> método para cancelar una operación asincrónica ("en segundo plano").</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>Gets a value indicating whether the application has requested cancellation of a background operation.</source>
          <target state="translated">Obtiene un valor que indica si la aplicación ha solicitado la cancelación de una operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the application has requested cancellation of a background operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la aplicación ha solicitado la cancelación de una operación en segundo plano; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> es <ph id="ph2">`true`</ph>, la <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> método se ha llamado en el <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This property is meant for use by the worker thread, which should periodically check <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Esta propiedad está pensada para su uso por el subproceso de trabajo, debe comprobar periódicamente <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> y anular la operación en segundo plano cuando se establece en <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to query a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> about its cancellation state.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> propiedad para consultar un <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> sobre su estado de cancelación.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> is called.</source>
          <target state="translated">Se produce cuando se llama a <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
          <target state="translated">Este evento se desencadena cuando se llama a la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This is where you start the operation that performs the potentially time-consuming work.</source>
          <target state="translated">Esto es donde se inicia la operación que realiza el trabajo puede requerir mucho tiempo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">El código en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos debe comprobar periódicamente la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> valor de propiedad y anular la operación si es <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>When this occurs, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">Cuando esto ocurre, puede establecer la <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> marca de <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> a <ph id="ph3">`true`</ph>y el <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> marca de <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> en su <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos se establecerá en <ph id="ph7">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Tenga en cuenta que el código en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos puede finalizar su trabajo mientras se efectúa una solicitud de cancelación y el bucle de sondeo puede perder <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> se establece en <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">En este caso, el <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> marca de <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> en su <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos no se establecerá en <ph id="ph4">`true`</ph>, incluso si se realizó una solicitud de cancelación.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Esta situación se denomina un <bpt id="p1">*</bpt>condición de anticipación<ept id="p1">*</ept> y es un problema habitual en la programación multiproceso.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca del diseño multithreading problemas, vea <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If your operation produces a result, you can assign the result to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Si la operación genera un resultado, puede asignar el resultado a la <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Esta opción estará disponible para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos en el <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If the operation raises an exception that your code does not handle, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si la operación provoca una excepción que no controla el código, el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> detecta la excepción y la pasa a la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos, donde se expone como la <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> propiedad de <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.</source>
          <target state="translated">Si está ejecutando en el depurador de Visual Studio, el depurador se interrumpirá en el punto en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos que se generó la excepción no controlada.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you have more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Si tiene más de una <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, no debe hacer referencia cualquiera de ellos directamente, como este modo se uniría su <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos a una instancia específica de <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, you should access your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id="ph2">`sender`</ph> parameter in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">En su lugar, debe tener acceso a su <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> convirtiendo el <ph id="ph2">`sender`</ph> parámetro en su <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">Debe tener cuidado de no manipular los objetos de interfaz de usuario en su <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
          <target state="translated">En su lugar, se comunican con la interfaz de usuario a través de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">Para obtener más información sobre el control de eventos, vea <bpt id="p1">[</bpt>NIB: consumir eventos<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event to start an asynchronous operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> evento para iniciar una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation.</source>
          <target state="translated">Obtiene un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> está ejecutando una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> está ejecutando una operación asincrónica; de lo contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> inicia una operación asincrónica cuando se llama a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> property to wait for completion of a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> propiedad que se va a esperar la finalización de un <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operación.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>This code example is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo más extenso que se describe en <bpt id="p1">[</bpt>Cómo: descargar un archivo en segundo plano<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>controlar y provocar eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">Ésta es la técnica preferida para controlar el evento en una clase derivada.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method to report the progress of an asynchronous operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> método para informar del progreso de una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">Al reemplazar <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> en una clase derivada, asegúrese de llamar al método <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> de la clase base para que los delegados registrados reciban el evento.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>controlar y provocar eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">Ésta es la técnica preferida para controlar el evento en una clase derivada.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">Al reemplazar <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> en una clase derivada, asegúrese de llamar al método <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> de la clase base para que los delegados registrados reciban el evento.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> is called.</source>
          <target state="translated">Se produce cuando se llama a <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.</source>
          <target state="translated">Este evento se desencadena cuando se llama a la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">Para obtener más información sobre el control de eventos, vea <bpt id="p1">[</bpt>NIB: consumir eventos<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> evento para notificar el progreso de una operación asincrónica al usuario.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">Porcentaje, de 0 a 100, de la operación en segundo plano que se ha completado.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Si necesita la operación en segundo plano para informar sobre su progreso, puede llamar a la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método para generar el <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> debe ser el valor de la propiedad <ph id="ph2">`true`</ph>, o <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> producirá un <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">Depende de usted para implementar de forma significativa de medir el progreso de la operación en segundo plano como un porcentaje de la tarea total completado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.</source>
          <target state="translated">La llamada a la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método es asincrónico y devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> controlador de eventos que se ejecuta en el subproceso que creó el <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método para informar del progreso de una operación asincrónica al usuario.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> se establece en <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">Porcentaje, de 0 a 100, de la operación en segundo plano que se ha completado.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The state object passed to <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</source>
          <target state="translated">Objeto de estado que se ha pasado a <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Genera el evento <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Si necesita la operación en segundo plano para informar sobre su progreso, puede llamar a la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método para generar el <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> el valor de propiedad debe estar <ph id="ph2">`true`</ph>, o <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> producirá un <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">Depende de usted para implementar de forma significativa de medir el progreso de la operación en segundo plano como un porcentaje de la tarea total completado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método para informar del progreso de una operación asincrónica al usuario.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> se establece en <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Inicia la ejecución de una operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Inicia la ejecución de una operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> método envía una solicitud para iniciar la operación que se ejecuta de forma asincrónica.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">Cuando se atiende la solicitud, el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> se genera el evento, que a su vez inicia la ejecución de la operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si ya se está ejecutando la operación en segundo plano, la llamada a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> nuevo, se producirá un <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> método para iniciar una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>It is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">Forma parte de un ejemplo más extenso que se describe en <bpt id="p1">[</bpt>Cómo: descargar un archivo en segundo plano<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>A parameter for use by the background operation to be executed in the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event handler.</source>
          <target state="translated">Parámetro que utiliza la operación en segundo plano que se va a ejecutar en el controlador de eventos <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Inicia la ejecución de una operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> método envía una solicitud para iniciar la operación que se ejecuta de forma asincrónica.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">Cuando se atiende la solicitud, el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> se genera el evento, que a su vez inicia la ejecución de la operación en segundo plano.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If your operation requires a parameter, you can provide it as the <ph id="ph1">`argument`</ph> parameter to <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">Si la operación requiere un parámetro, puede proporcionarlo como el <ph id="ph1">`argument`</ph> parámetro <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si ya se está ejecutando la operación en segundo plano, la llamada a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> nuevo, se producirá un <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> método para iniciar una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Occurs when the background operation has completed, has been canceled, or has raised an exception.</source>
          <target state="translated">Se produce cuando la operación en segundo plano se ha completado, se ha cancelado o ha producido una excepción.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This event is raised when the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.</source>
          <target state="translated">Este evento se desencadena cuando el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> devuelve el controlador de eventos.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If the operation completes successfully and its result is assigned in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Si la operación se completa correctamente y su resultado se asigna en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos, puede obtener acceso al resultado a través de la <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates that an exception was thrown by the operation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> propiedad de <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indica que se inició una excepción por la operación.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates whether a cancellation request was processed by the background operation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> propiedad de <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indica si la operación en segundo plano ha procesado una solicitud de cancelación.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>, the <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> also will be set to <ph id="ph8">`true`</ph>.</source>
          <target state="translated">Si el código en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos detecta una solicitud de cancelación mediante la comprobación de la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> marca y estableciendo el <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> marca de <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> a <ph id="ph5">`true`</ph>, el <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> marca de <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> también se establecerá en <ph id="ph8">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Tenga en cuenta que el código en el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> controlador de eventos puede finalizar su trabajo mientras se efectúa una solicitud de cancelación y el bucle de sondeo puede perder <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> se establece en <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">En este caso, el <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> marca de <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> en su <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> controlador de eventos no se establecerá en <ph id="ph4">`true`</ph>, incluso si se realizó una solicitud de cancelación.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Esta situación se denomina un <bpt id="p1">*</bpt>condición de anticipación<ept id="p1">*</ept> y es un problema habitual en la programación multiproceso.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca del diseño multithreading problemas, vea <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> properties before accessing the <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> siempre debería comprobar el controlador de eventos el <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> y <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> propiedades antes de acceder a la <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If an exception was raised or if the operation was canceled, accessing the <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property raises an exception.</source>
          <target state="translated">Si se produce una excepción o si se canceló la operación, obtener acceso a la <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> propiedad provoca una excepción.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event to handle the result of an asynchronous operation.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> eventos para controlar el resultado de una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> can report progress updates.</source>
          <target state="translated">Obtiene o establece un valor que indica si <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> puede crear informes sobre las actualizaciones de progreso.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports progress updates; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> admite las actualizaciones de progreso; de lo contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> propiedad <ph id="ph2">`true`</ph> si desea que el <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> para admitir las actualizaciones de progreso.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>When this property is <ph id="ph1">`true`</ph>, user code can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Cuando esta propiedad es <ph id="ph1">`true`</ph>, código de usuario puede llamar a la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> método para generar el <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports asynchronous cancellation.</source>
          <target state="translated">Obtiene o establece un valor que indica si <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> admite la cancelación asincrónica.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports cancellation; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> admite la cancelación; de lo contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> propiedad <ph id="ph2">`true`</ph> si desea que el <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> para admitir la cancelación.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>When this property is <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.</source>
          <target state="translated">Cuando esta propiedad es <ph id="ph1">`true`</ph>, puede llamar a la <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> método interrumpir una operación en segundo plano.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>