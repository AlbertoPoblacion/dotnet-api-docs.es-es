<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="606bfa8ffd9f758de42817a0e4e7eaf9e11c8260" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368679" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la administración de simultaneidad para las clases que admiten llamadas de método asincrónico. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una clase necesita proporcionar un comportamiento asincrónico conforme a la [introducción de patrón asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), encontrará una serie de problemas de administración de simultaneidad. Entre ellos es el requisito para asegurarse de que se denominan controladores de eventos en un subproceso o contexto que sea adecuado para el modelo de aplicación (por ejemplo, las aplicaciones de Windows Forms, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] aplicaciones, aplicaciones de consola y así sucesivamente). El <xref:System.ComponentModel.AsyncOperationManager> proporciona una manera cómoda de crear una clase que se ejecute correctamente en todos los modelos de aplicación compatibles con el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 El <xref:System.ComponentModel.AsyncOperationManager> clase tiene un método, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, que devuelve un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> que se puede utilizar para realizar el seguimiento de la duración de una tarea asincrónica determinada. El <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> para una tarea se puede usar para los clientes de alerta cuando se complete una tarea. También puede utilizarse para exponer las actualizaciones de progreso y resultados incrementales sin finalizar la operación.  
  
 Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.ComponentModel.AsyncOperationManager> clase para crear una clase que admita operaciones asincrónicas para cualquier modelo de aplicación. Muestra cómo implementar una clase que prueba un número para determinar si es primo. Este cálculo puede llevar mucho tiempo, por lo que se realiza en un subproceso independiente. Informes de progreso, resultados incrementales y las notificaciones de finalización se controlan mediante el <xref:System.ComponentModel.AsyncOperation> (clase), lo que garantiza que se llama a los controladores de eventos del cliente en el subproceso o contexto apropiado.  
  
 Para obtener una lista de código completo, vea [Cómo: implementar un componente que admita el modelo asincrónico basado en eventos](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Para obtener una lista de código completa de un formulario de cliente, consulte [Cómo: implementar un cliente del modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Objeto que se utiliza para asociar un fragmento de estado del cliente, como un id. de tarea, a una operación asincrónica determinada.</param>
        <summary>Devuelve un objeto <see cref="T:System.ComponentModel.AsyncOperation" /> para realizar un seguimiento de la duración de una operación asincrónica determinada.</summary>
        <returns>Objeto <see cref="T:System.ComponentModel.AsyncOperation" /> que se puede utilizar para realizar un seguimiento de la duración de una invocación a un método asincrónico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> método devuelve un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> que puede usar para realizar el seguimiento de la duración de una operación asincrónica determinada y para avisar al modelo de aplicación cuando se complete la operación. También puede usar para enviar las actualizaciones de progreso y resultados incrementales sin finalizar la operación. El <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> serializará correctamente estas llamadas en el subproceso o contexto adecuado para el modelo de aplicación.  
  
 Si implementa una clase que admita el modelo asincrónico basado en eventos, debe llamar la clase <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> cada vez que la *MethodName* `Async` se llama al método. Puede usar la aplicación cliente que realiza llamadas al método el `userSuppliedState` parámetro para identificar de forma única cada invocación, con el fin de distinguir los eventos generados durante la ejecución de la operación asincrónica.  
  
> [!CAUTION]
>  Código de cliente debe proporcionar un valor único para el `userSuppliedState` parámetro. Id. de tarea no único puede provocar la implementación notificar el progreso y otros eventos incorrectamente. El código debe comprobar si un identificador de tarea no es único y producir un <xref:System.ArgumentException?displayProperty=nameWithType> si se detecta una.  
  
 El código debe realizar un seguimiento cada <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> devuelto por <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> y utilizar el objeto en la operación asincrónica subyacente correspondiente para exponer las actualizaciones y finalizar la operación. Este seguimiento puede ser tan simple como pasar el <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> como un parámetro a los distintos delegados. En diseños más sofisticados, la clase puede mantener una colección de <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objetos, adición de objetos cuando se inician las tareas y quitarlos cuando las tareas se completan o se canceló. Este enfoque permite buscar único `userSuppliedState` parámetro valores y es el método que debe usar al trabajar con clases que admiten varias invocaciones simultáneas.  
  
 Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> método para crear un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> para el seguimiento de la duración de las operaciones asincrónicas. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.AsyncOperationManager> clase.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el contexto de sincronización de la operación asincrónica.</summary>
        <value>Contexto de sincronización de la operación asincrónica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada es la implementación de subprocesamiento libre.  
  
 Un subproceso deberá establecer la <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> propiedad `null` para liberar el generador de subprocesamiento libre cuando termine, o bien nunca se eliminará su servicio de generación.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">Para establecer el contexto de sincronización. Valor de la petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Estado asociado:</permission>
      </Docs>
    </Member>
  </Members>
</Type>