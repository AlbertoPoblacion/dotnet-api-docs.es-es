<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3d9353df08936074d8502e7b3eb158fc1c8184df" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37692249" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona un medio para ejecutar de forma sincrónica o asincrónica un delegado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.ISynchronizeInvoke> interfaz proporciona comunicación sincrónica y asincrónica entre objetos sobre la aparición de un evento. Los objetos que implementan esta interfaz pueden recibir una notificación que se ha producido un evento y pueden responder a las consultas sobre el evento. De este modo, los clientes pueden asegurarse de que una solicitud se procesó antes de enviar una solicitud posterior que depende de finalización de la primera.  
  
 La <xref:System.ComponentModel.ISynchronizeInvoke> clase proporciona dos maneras de invocar un proceso:  
  
1.  De forma asincrónica, utilizando el <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> método. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> inicia un proceso y, a continuación, se devuelve inmediatamente. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> que esperar hasta que el proceso iniciado por <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> se complete.  
  
2.  De forma sincrónica, mediante el uso de la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> inicia un proceso, espera hasta que se complete y, a continuación, devuelve. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> cuando el control del principal subproceso es diferente del subproceso que realiza la llamada para calcular las referencias de la llamada al subproceso adecuado.  
  
> [!NOTE]
>  El <xref:System.Security.Permissions.HostProtectionAttribute> atributo aplicado a esta clase tiene las siguientes <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valor de propiedad: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. El atributo <xref:System.Security.Permissions.HostProtectionAttribute> no afecta a las aplicaciones de escritorio (que normalmente se inician haciendo doble clic en un icono, escribiendo un comando o introduciendo una dirección URL en el explorador). Para obtener más información, consulte el <xref:System.Security.Permissions.HostProtectionAttribute> clase o [programación de SQL Server y atributos de protección de Host](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Delegate" /> de un método que toma los parámetros del mismo número y tipo que los incluidos en <c>args</c>.</param>
        <param name="args">Matriz de tipo <see cref="T:System.Object" /> cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" /> si no se necesita ningún argumento.</param>
        <summary>De forma asincrónica ejecuta el delegado en el subproceso que creó este objeto.</summary>
        <returns>Interfaz <see cref="T:System.IAsyncResult" /> que representa la operación asincrónica iniciada por la llamada a este método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `method` delegado se ejecuta en el subproceso que creó el objeto, en lugar del subproceso en el que <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> llamó.  
  
 Se llama al delegado de forma asincrónica, y este método vuelve inmediatamente. Puede llamar a este método desde cualquier subproceso. Si tiene el valor devuelto de un proceso iniciado con este método, llame a <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> para obtener el valor.  
  
 Si necesita llamar al delegado de forma sincrónica, use el <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método en su lugar.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Interfaz <see cref="T:System.IAsyncResult" /> que representa la operación asincrónica iniciada por la llamada a <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</param>
        <summary>Espera a que finalice el proceso iniciado mediante la llamada a <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> y, a continuación, devuelve el valor generado por el proceso.</summary>
        <returns>
          <see cref="T:System.Object" /> que representa el valor devuelto generado por la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método obtiene el valor devuelto de la operación asincrónica representada por el <xref:System.IAsyncResult> pasado por esta interfaz. Si no se ha completado la operación asincrónica, este método esperará hasta que el resultado está disponible.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Delegate" /> que contiene una llamada a un método, en el contexto del subproceso del control.</param>
        <param name="args">Matriz de tipo <see cref="T:System.Object" /> que representa los argumentos que se pasan al método especificado. Puede ser <see langword="null" /> si no se necesita ningún argumento.</param>
        <summary>De forma sincrónica ejecuta el delegado en el subproceso que creó este objeto y calcula las referencias de la llamada en el subproceso de creación.</summary>
        <returns>
          <see cref="T:System.Object" /> que representa el valor devuelto por el delegado al que se ha invocado, o <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, este método funciona de forma sincrónica, es decir, espera a que finalice el proceso antes de devolver. Las excepciones producidas durante la llamada se propagan de vuelta al llamador.  
  
 Utilice este método cuando se llama a un método desde un subproceso diferente para calcular las referencias de la llamada al subproceso adecuado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el elemento que realiza la llamada debe llamar a <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> cuando se llame a un objeto que implemente esta interfaz.</summary>
        <value>
          <see langword="true" /> si el elemento que realiza la llamada llama a <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad determina si el llamador debe llamar a <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> al realizar llamadas de método a un objeto que implementa esta interfaz. Estos objetos están enlazados a un subproceso específico y no son seguros para subprocesos. Si se llama a un método desde un subproceso diferente, debe usar el <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método para calcular las referencias de la llamada al subproceso adecuado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>