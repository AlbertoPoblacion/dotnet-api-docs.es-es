<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISynchronizeInvoke.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac5648d586e03aebeb7db72bd148861e02bc6f37.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac5648d586e03aebeb7db72bd148861e02bc6f37</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Provides a way to synchronously or asynchronously execute a delegate.</source>
          <target state="translated">Proporciona un medio para ejecutar de forma sincrónica o asincrónica un delegado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interfaz proporciona comunicación sincrónica y asincrónica entre objetos sobre la aparición de un evento.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</source>
          <target state="translated">Objetos que implementan esta interfaz pueden recibir la notificación que se ha producido un evento y pueden responder a las consultas sobre el evento.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</source>
          <target state="translated">De esta manera, los clientes pueden asegurarse de que una solicitud se ha procesado antes de enviar una solicitud posterior que depende de la finalización de la primera.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> clase proporciona dos maneras de invocar un proceso:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Asynchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">De forma asincrónica, mediante el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> inicia un proceso y, a continuación, se devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> que espere hasta que el proceso iniciado por <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completa.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Synchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">De forma sincrónica, mediante el uso de la <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> inicia un proceso, espera hasta que se complete y, a continuación, devuelve.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</source>
          <target state="translated">Utilice <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> cuando el control del principal subproceso es diferente del subproceso que realiza la llamada para calcular las referencias de la llamada al subproceso adecuado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> atributo aplicado a esta clase tiene las siguientes <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> valor de propiedad: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</source>
          <target state="translated">El atributo <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> no afecta a las aplicaciones de escritorio (que normalmente se inician haciendo doble clic en un icono, escribiendo un comando o introduciendo una dirección URL en el explorador).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id="p1">[</bpt>SQL Server Programming and Host Protection Attributes<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte el <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> clase o <bpt id="p1">[</bpt>programación de SQL Server y atributos de protección de Host<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> de un método que toma los parámetros del mismo número y tipo que los incluidos en <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to pass as arguments to the given method.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> cuyos valores se pasan como argumentos al método especificado.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> si no se necesita ningún argumento.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>Asynchronously executes the delegate on the thread that created this object.</source>
          <target state="translated">De forma asincrónica ejecuta el delegado en el subproceso que creó este objeto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling this method.</source>
          <target state="translated">Interfaz <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la operación asincrónica iniciada por la llamada a este método.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The <ph id="ph1">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.</source>
          <target state="translated">El <ph id="ph1">`method`</ph> delegado se ejecuta en el subproceso que creó el objeto, en lugar del subproceso en el que <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> se llamó.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">Se llama al delegado de forma asincrónica y este método vuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread.</source>
          <target state="translated">Puede llamar a este método desde cualquier subproceso.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need the return value from a process started with this method, call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.</source>
          <target state="translated">Si necesita el valor devuelto de un proceso iniciado con este método, llame a <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> para obtener el valor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need to call the delegate synchronously, use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.</source>
          <target state="translated">Si necesita llamar al delegado de forma sincrónica, use la <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">Interfaz <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la operación asincrónica iniciada por la llamada a <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>Waits until the process started by calling <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> completes, and then returns the value generated by the process.</source>
          <target state="translated">Espera a que finalice el proceso iniciado mediante la llamada a <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> y, a continuación, devuelve el valor generado por el proceso.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value generated by the asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa el valor devuelto generado por la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>This method gets the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.</source>
          <target state="translated">Este método obtiene el valor devuelto de la operación asincrónica representada por el <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pasado por esta interfaz.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not completed, this method will wait until the result is available.</source>
          <target state="translated">Si no ha completado la operación asincrónica, este método esperará hasta que el resultado esté disponible.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains a method to call, in the context of the thread for the control.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> que contiene una llamada a un método, en el contexto del subproceso del control.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments to pass to the given method.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa los argumentos que se pasan al método especificado.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> si no se necesita ningún argumento.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</source>
          <target state="translated">De forma sincrónica ejecuta el delegado en el subproceso que creó este objeto y calcula las referencias de la llamada en el subproceso de creación.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa el valor devuelto por el delegado al que se ha invocado, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el delegado no devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Unlike <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.</source>
          <target state="translated">A diferencia de <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, este método funciona de forma sincrónica, es decir, espera a que finalice el proceso antes de devolver.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions raised during the call are propagated back to the caller.</source>
          <target state="translated">Las excepciones generadas durante la llamada se propagan de vuelta al llamador.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Use this method when calling a method from a different thread to marshal the call to the proper thread.</source>
          <target state="translated">Utilice este método cuando se llama a un método desde un subproceso diferente para calcular las referencias de la llamada al subproceso adecuado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Gets a value indicating whether the caller must call <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> when calling an object that implements this interface.</source>
          <target state="translated">Obtiene un valor que indica si el elemento que realiza la llamada debe llamar a <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> cuando se llame a un objeto que implemente esta interfaz.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the caller must call <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el elemento que realiza la llamada llama a <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>This property determines whether the caller must call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.</source>
          <target state="translated">Esta propiedad determina si el llamador debe llamar a <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> cuando realiza llamadas de métodos en el objeto que implementa esta interfaz.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Such objects are bound to a specific thread and are not thread-safe.</source>
          <target state="translated">Estos objetos están enlazados a un subproceso concreto y no son seguros para subprocesos.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>If you are calling a method from a different thread, you must use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.</source>
          <target state="translated">Si se llama a un método desde un subproceso diferente, debe utilizar el <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> método para calcular las referencias de la llamada al subproceso adecuado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>