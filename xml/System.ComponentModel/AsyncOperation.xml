<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369569" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Realiza un seguimiento de la duración de una operación asincrónica.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se implementa una clase conforme a la [introducción de patrón asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), puede que necesite realizar un seguimiento de la duración de cada operación asincrónica invocada en una instancia de la clase. La <xref:System.ComponentModel.AsyncOperation> clase proporciona métodos para realizar un seguimiento y notificar el progreso de una tarea asincrónica.  
  
 En la lista siguiente identifica las maneras de utilizar un <xref:System.ComponentModel.AsyncOperation> objeto:  
  
-   Para informar del progreso y los resultados provisionales al cliente, llame a <xref:System.ComponentModel.AsyncOperation.Post%2A> desde el código de trabajo asincrónico.  
  
-   Para indicar que se ha completado una tarea asincrónica, o para cancelar una tarea asincrónica pendiente, llame a <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 La clase debe obtener un <xref:System.ComponentModel.AsyncOperation> objeto para cada tarea asincrónica mediante una llamada a <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> cuando se inicia cada tarea. Para permitir que el cliente pueda distinguir las distintas tareas asincrónicas, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> toma un parámetro para un token único proporcionado por el cliente, que se convierte en el <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad. A continuación, se puede utilizar un código de cliente para identificar la tarea asincrónica determinada que está generando eventos de progreso o finalización.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar un <xref:System.ComponentModel.AsyncOperation> objeto que se va a realizar un seguimiento de la duración de las operaciones asincrónicas. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.  
  
 Para obtener una lista de código completo, vea [Cómo: implementar un componente que admita el modelo asincrónico basado en eventos](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Para obtener una lista de código completa de un formulario de cliente, consulte [Cómo: implementar un cliente del modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Los implementadores deben garantizar la <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> y <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> llamadas son asincrónicas, por lo que no es necesario preocuparse con proveedores de bibliotecas de clase pila posible desborda si adoptan el comportamiento asincrónico en una aplicación concreta modelo que resulta ser sincrónico.  
  
 Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza la operación asincrónica.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pone fin a la duración de una operación asincrónica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a la <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> método para finalizar la duración de una operación asincrónica. Después de llama a este método para una tarea determinada, se llama a sus correspondientes <xref:System.ComponentModel.AsyncOperation> , se producirá una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
        <param name="arg">Argumento del delegado incluido en el parámetro <c>d</c>.</param>
        <summary>Invoca un delegado en el subproceso o contexto adecuado para el modelo de aplicaciones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.AsyncOperation.Post%2A> método invoca al delegado especificado por la `arg` parámetro sin tener que terminar la duración de la operación asincrónica.  
  
 Puede llamar a la <xref:System.ComponentModel.AsyncOperation.Post%2A> con tanta frecuencia como sea necesario mientras dure la operación asincrónica no ha terminado mediante una llamada al método <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Puede utilizar el método para informar de progreso o los resultados provisionales para los clientes.  
  
 El `d` parámetro contiene el delegado al que desea llamar cuando desea enviar una actualización sobre el estado de la tarea asincrónica. La <xref:System.ComponentModel.AsyncOperation> objeto se asegurará de que el delegado se invoca en el subproceso o contexto adecuado para el modelo de aplicación. El método, opcionalmente, puede generar un evento que notifica a los clientes de un cambio de estado, actualización de progreso o los resultados incrementales disponibles.  
  
 El `arg` parámetro debe utilizarse para pasar información de estado al delegado incluido en el `d` parámetro. Puede que sea una referencia a un <xref:System.ComponentModel.AsyncOperation>, o podría ser un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> objeto. Puede ser conveniente derivar su propia clase de <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> para proporcionar almacenamiento de información de estado adicional.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.ComponentModel.AsyncOperation.Post%2A> método para informar del progreso y resultados incrementales de una operación asincrónica. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha llamado anteriormente al método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> para esta tarea.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Deben realizar los herederos el <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocación asincrónica, por lo que no es necesario preocuparse de pila posible proveedores de bibliotecas de clase produce un desbordamiento si asumen un comportamiento asincrónico pero un modelo de aplicación determinado resulta ser sincrónico.  
  
 <block subset="none" type="note"><para>  
 Las aplicaciones de consola no sincronizan la ejecución de llamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. Esto puede provocar que se generen eventos <see langword="ProgressChanged" /> fuera de lugar. Si desea serializar la ejecución de llamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, implemente e instale una clase <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
        <param name="arg">Argumento del delegado incluido en el parámetro <c>d</c>.</param>
        <summary>Pone fin a la duración de una operación asincrónica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a la <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para finalizar la duración de una operación asincrónica. Después de llama a este método para una tarea determinada, se llama a sus correspondientes <xref:System.ComponentModel.AsyncOperation> objeto, producirá una excepción.  
  
 El `d` parámetro contiene el delegado al que desea la clase que se llamará cuando la duración de la tarea finaliza debido a error de la tarea, cancelación o finalización. La <xref:System.ComponentModel.AsyncOperation> objeto se asegurará de que el delegado se invoca en el subproceso o contexto adecuado para el modelo de aplicación. El delegado, opcionalmente, puede generar un evento que notifica a los clientes que ha finalizado la duración de la tarea asincrónica.  
  
 El `arg` parámetro se utiliza para pasar información de estado al delegado de finalización `d`. Puede usar un <xref:System.ComponentModel.AsyncOperation> objeto, o un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> los objetos según el valor del parámetro. O bien, si desea proporcionar almacenamiento de información de estado adicional, puede utilizar una instancia de una clase se deriva de la <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para finalizar la duración de una operación asincrónica. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Deben realizar los herederos el <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocación asincrónica, por lo que no es necesario preocuparse de pila posible proveedores de bibliotecas de clase produce un desbordamiento si asumen un comportamiento asincrónico pero un modelo de aplicación determinado resulta ser sincrónico. El método se debe interpretar como una llamada de "finalización de la duración", lo que significa que la implementación debe hacer lo que sea adecuado para el modelo de aplicación. Por ejemplo, ASP.NET disminuye su recuento de operaciones asincrónicas pendientes. Esto también sería conveniente colocar la operación en un estado de modo que se producirá un error las subsiguientes llamadas en él, ya que se ha completado.  
  
 Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Threading.SynchronizationContext" /> que se pasó al constructor.</summary>
        <value>Objeto <see cref="T:System.Threading.SynchronizationContext" /> que se pasó al constructor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto que se usa para identificar de forma única una operación asincrónica.</summary>
        <value>Objeto de estado que se pasó a la invocación al método asincrónico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si su clase admite varios métodos asincrónicos o varias invocaciones de un único método asincrónico, los clientes necesitará una manera de determinar qué tarea asincrónica está generando eventos. Su `MethodNameAsync` método debe tomar un parámetro de tipo <xref:System.Object> que actuará como un identificador de tarea. Utilizará este Id. de tarea cuando se llama a la <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, método y, por lo que asocian Id. de tarea del cliente con una invocación particular de la operación asincrónica. Esta tarea estará disponible para su implementación a través de Id. de la <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad.  
  
> [!CAUTION]
>  Código de cliente debe tener cuidado para proporcionar un valor único para el <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad. Id. de tarea no único puede provocar la implementación notificar el progreso y otros eventos incorrectamente. El código debe comprobar si un identificador de tarea no es único y generar un <xref:System.ArgumentException> si se detecta una.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> para realizar el seguimiento de la duración de las operaciones asincrónicas. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>