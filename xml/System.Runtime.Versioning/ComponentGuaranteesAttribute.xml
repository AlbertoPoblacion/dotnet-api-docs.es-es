<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c9cc63738e7d595aac3ed161af7c1252c0bb6baf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628726" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define la garantía de la compatibilidad de un componente, tipo o miembro de tipo que puede abarcar varias versiones.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> lo utilizan los desarrolladores de componentes y bibliotecas de clases para indicar el nivel de compatibilidad que los consumidores de sus bibliotecas pueden esperar en varias versiones. Indica el nivel de garantía de que una versión futura de la biblioteca o el componente no interrumpirá a un cliente existente. Los clientes, a continuación, pueden usar el <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> como ayuda para diseñar sus propias interfaces para garantizar la estabilidad entre versiones.  
  
> [!NOTE]
>  Common language runtime (CLR) no utiliza este atributo en modo alguno. Su valor se encuentra en la documentación formal de la intención del autor del componente. Herramientas de tiempo de compilación también pueden usar estas declaraciones para detectar errores en tiempo de compilación que de lo contrario, se interrumpirían la garantía declarada.  
  
## <a name="levels-of-compatibility"></a>Niveles de compatibilidad  
 El <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> admite los siguientes niveles de compatibilidad, que están representados por los miembros de la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeración:  
  
-   No hay compatibilidad de versión a otra (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). El cliente puede esperar que las futuras versiones interrumpirán al cliente existente. Para obtener más información, consulte el [sin compatibilidad](#None) sección más adelante en este tema.  
  
-   Compatibilidad de versión a versión en paralelo (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). El componente se ha probado para funcionar cuando se carga más de una versión del ensamblado en el mismo dominio de aplicación. En general, las versiones futuras pueden interrumpir la compatibilidad. Sin embargo, cuando se realizan cambios importantes, la versión anterior no se modifica pero coexista con la nueva versión. Ejecución en paralelo es la manera esperada para que los clientes existentes funcionen cuando se realizan cambios importantes. Para obtener más información, consulte el [compatibilidad Side-by-Side](#SideBySide) sección más adelante en este tema.  
  
-   Estables compatibilidad de versión a otra (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Las versiones futuras no deberían interrumpir al cliente y no debería ser necesario ejecución en paralelo. Sin embargo, si el cliente se interrumpe accidentalmente, es posible usar la ejecución en paralelo para solucionar el problema. Para obtener más información, consulte el [compatibilidad estable](#Standard) sección.  
  
-   Compatibilidad de versión a versión de Exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). Extraordinarios cuidado para asegurarse de que las versiones futuras no interrumpan al cliente. El cliente debería utilizar solo estos tipos en la firma de interfaces que se usan para la comunicación con otros ensamblados que se implementan independientemente unas de otras. Solo una versión de estos tipos se debe estar en un dominio de aplicación determinado, lo que significa que si se interrumpe la ejecución de un cliente, la ejecución en paralelo no puede corregir el problema de compatibilidad. Para obtener más información, consulte el [compatibilidad de tipo de intercambio](#Exchange) sección.  
  
 Las secciones siguientes tratan cada nivel de garantía con mayor detalle.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>No hay compatibilidad  
 Marcar un componente como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> indica que el proveedor no ofrece ninguna garantía sobre la compatibilidad. Los clientes se deben realizar todas las dependencias en las interfaces expuestas. Este nivel de compatibilidad es útil para los tipos que son experimentales o que se exponen públicamente, pero están diseñados únicamente para los componentes que se actualizan siempre al mismo tiempo. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> indica explícitamente que este componente no debe usarse por componentes externos.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Compatibilidad en paralelo  
 Marcar un componente como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> indica que el componente se ha probado para funcionar cuando se carga más de una versión del ensamblado en el mismo dominio de aplicación. Cambios de última hora se permiten siempre que se realizan en el ensamblado que tiene el mayor número de versión. Se esperan que los componentes que están enlazados a una versión anterior del ensamblado continúen enlazados a la versión anterior y otros componentes pueden enlazarse a la nueva versión. También es posible actualizar un componente que se declara como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> modificando la versión anterior de forma destructiva.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Compatibilidad estable  
 Marcar un tipo como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> indica que el tipo debe permanecer estable entre versiones. Sin embargo, es posible también para las versiones en paralelo de un tipo estable existan en el mismo dominio de aplicación.  
  
 Los tipos estables mantienen una barra de alta compatibilidad binaria. Por este motivo, los proveedores deberían evitar realizar cambios importantes en tipos estables. Los siguientes tipos de cambios son aceptables:  
  
-   Agregar campos de instancia privados a o quitar campos de un tipo, siempre y cuando no se interrumpe el formato de serialización.  
  
-   Cambiar un tipo no serializable a un tipo serializable. (Sin embargo, un tipo serializable no se puede cambiar a un tipo no serializable.)  
  
-   Generar nuevas, más las excepciones derivadas de un método.  
  
-   Mejorar el rendimiento de un método.  
  
-   Cambiar el intervalo de valores devueltos, siempre que el cambio no afecta negativamente a la mayoría de los clientes.  
  
-   Corrige los errores graves, si la justificación de negocio es alta y el número de clientes adversamente afectado es bajo.  
  
 Dado que no se esperan que las nuevas versiones de componentes estables interrumpirán a los clientes existentes, generalmente solo una versión de un componente estable se necesita en un dominio de aplicación. Sin embargo, esto no es un requisito, porque los tipos estables no se usan como tipos de intercambio conocidos que todos los componentes están de acuerdo. Por lo tanto, si una nueva versión de un componente estable interrumpir accidentalmente algún componente, y si otros componentes necesitan la nueva versión, es posible corregir el problema cargando tanto el componente antiguo y nuevo.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> Proporciona una garantía de compatibilidad de versión más fuerte que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>. Es un valor predeterminado común para los componentes de varias versiones.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> se pueden combinar con <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, que indica que el componente no interrumpirá la compatibilidad pero se prueba para poder usarse cuando se carga más de una versión en un dominio de aplicación determinado.  
  
 Después de un tipo o método está marcado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, pueden actualizarse a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>. Sin embargo, no se puede degradar a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Compatibilidad de tipo de Exchange  
 Marcar un tipo como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> proporciona una garantía de compatibilidad de versión más fuerte que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>y se debe aplicar a la más estable de todos los tipos. Estos tipos están diseñados para usarse en el intercambio entre los componentes compilados de forma independiente a través de todos los límites de componente en tanto en tiempo (cualquier versión de CLR) o cualquier versión de una aplicación o componente y el espacio (entre procesos, entre CLR en un proceso, entre dominios de aplicación en un CLR). Si se realiza un cambio importante para un tipo de intercambio, es imposible corregir el problema mediante la carga de varias versiones del tipo.  
  
 Los tipos de intercambio deben cambiarse sólo cuando un problema es muy grave (por ejemplo, un problema de seguridad grave) o la probabilidad de ruptura es muy baja (es decir, si el comportamiento ya se divide de forma aleatoria que código podría no es posible que tengan una dependencia en). Puede realizar los siguientes tipos de cambios en un tipo de exchange:  
  
-   Agregar herencia de nuevas definiciones de interfaz.  
  
-   Agregar nuevos métodos privados que implementan los métodos de definiciones de interfaz recientemente heredadas.  
  
-   Agregar nuevos campos estáticos.  
  
-   Agregar nuevos métodos estáticos.  
  
-   Agregar nuevos métodos de instancia no virtuales.  
  
 A continuación se considera cambios importantes y no se permite para los tipos primitivos:  
  
-   Cambiar los formatos de serialización. Se requiere la serialización tolerante a versiones.  
  
-   Agregar o quitar campos de instancia privados. Esto corre el riesgo de cambiar el formato de serialización del tipo e interrumpir el código de cliente que usa la reflexión.  
  
-   Cambiar la seriabilidad de un tipo. Un tipo no serializable no se hizo serializable y viceversa.  
  
-   Generar excepciones diferentes de un método.  
  
-   Cambiar el intervalo de valores de valor devuelto del método, a menos que la definición de miembro provoque esta posibilidad y claramente indica cómo los clientes deben controlar valores desconocidos.  
  
-   Corregir la mayoría de los errores. Los consumidores del tipo se basarán en el comportamiento existente.  
  
 Después de un componente, tipo o miembro se marca con la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> garantiza que no se puede cambiar a cualquiera <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 Normalmente, los tipos de intercambio son los tipos básicos (como <xref:System.Int32> y <xref:System.String> en .NET Framework) e interfaces (como <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, y <xref:System.IComparable%601>) que se usan habitualmente en las interfaces públicas.  
  
 Los tipos de intercambio pueden exponer públicamente sólo otros tipos que también están marcados con <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> compatibilidad. Además, los tipos de intercambio no pueden depender el comportamiento de las API de Windows que son susceptibles de cambio.  
  
## <a name="component-guarantees-a-summary"></a>Garantías de componente: Un resumen  
 En la tabla siguiente se indica cómo afectan las características y el uso de un componente a su garantía de compatibilidad.  
  
|Características de componentes|Exchange|Stable|En paralelo|None|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Puede ser usado en las interfaces entre los componentes de esa versión de forma independiente.|Y|N|N|N|  
|Puede ser utilizada (privada) por un ensamblado que las versiones independientemente.|Y|Y|Y|N|  
|Puede tener varias versiones en un único dominio de aplicación.|N|Y|Y|Y|  
|Puede hacer cambios importantes|N|N|Y|Y|  
|Prueba para asegurarse de que se pueden cargar varias versiones del ensamblado juntos.|N|N|Y|N|  
|Puede hacer cambios importantes en su lugar.|N|N|N|Y|  
|Puede hacer muy seguro no importantes cambios en lugar de servicio.|Y|Y|Y|Y|  
  
## <a name="applying-the-attribute"></a>Aplicar el atributo  
 Puede aplicar el <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> a un ensamblado, un tipo o un miembro de tipo. Su aplicación es jerárquica. Es decir, de forma predeterminada, la garantía definido por el <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propiedad del atributo en el nivel de ensamblado define la garantía de todos los tipos en el ensamblado y todos los miembros de esos tipos. De forma similar, si la garantía se aplica al tipo, de forma predeterminada también se aplica a cada miembro del tipo.  
  
 Se puede invalidar esta garantía heredada aplicando el <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> para los tipos individuales y miembros de tipo. Sin embargo, garantiza que invalidar el valor predeterminado solo podrá debilitar la garantía; no pueden reforzarlo. Por ejemplo, si un ensamblado está marcado con el <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> garantizar, sus tipos y miembros no tengan ninguna garantía de compatibilidad y se omite cualquier otra garantía que se aplica a tipos o miembros en el ensamblado.  
  
## <a name="testing-the-guarantee"></a>Probar la garantía  
 El <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propiedad devuelve un miembro de la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeración, que se marca con el <xref:System.FlagsAttribute> atributo. Esto significa que debe comprobar el indicador que están interesados en enmascarando marcas potencialmente desconocidas. Por ejemplo, en el ejemplo siguiente se comprueba si un tipo se marca como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 En el ejemplo siguiente se comprueba si un tipo se marca como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 El siguiente ejemplo se prueba si un tipo se marca como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (es decir, ninguna de ellas <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ni <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Uno de los valores de enumeración que especifica el nivel de compatibilidad garantizado entre varias versiones.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> con un valor que indica el nivel garantizado de compatibilidad entre varias versiones de una biblioteca, un tipo o un miembro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> se crea una instancia de clase, el valor de la `guarantees` parámetro se asigna a la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica el nivel de compatibilidad garantizado de una biblioteca, tipo o miembro de tipo que abarca varias versiones.</summary>
        <value>Uno de los valores de enumeración que especifica el nivel de compatibilidad garantizado entre varias versiones.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propiedad se corresponde con el `guarantees` parámetro de la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> constructor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>