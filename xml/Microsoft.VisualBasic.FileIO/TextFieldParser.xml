<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2175fc3570c05fa7b7f62e8313cecc14cd0d2672" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48773173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="17365-101">Proporciona los métodos y propiedades para analizar archivos de texto estructurados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="17365-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-102">La `TextFieldParser` objeto proporciona métodos y propiedades para analizar archivos de texto estructurados.</span><span class="sxs-lookup"><span data-stu-id="17365-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="17365-103">Analizar un archivo de texto con el `TextFieldParser` es similar a recorrer en iteración un archivo de texto, mientras que el `ReadFields` método para extraer campos de texto es similar a dividir las cadenas.</span><span class="sxs-lookup"><span data-stu-id="17365-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="17365-104">El `TextFieldParser` puede analizar dos tipos de archivos: delimitado o de ancho fijo.</span><span class="sxs-lookup"><span data-stu-id="17365-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="17365-105">Algunas propiedades, como `Delimiters` y `HasFieldsEnclosedInQuotes` solo son significativos cuando se trabaja con archivos delimitados, mientras el `FieldWidths` propiedad es significativa solo cuando se trabaja con archivos de ancho fijo.</span><span class="sxs-lookup"><span data-stu-id="17365-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="17365-106">En la tabla siguiente se muestra ejemplos de tareas que implican la `Microsoft.VisualBasic.FileIO.TextFieldParser` objeto.</span><span class="sxs-lookup"><span data-stu-id="17365-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="17365-107">En</span><span class="sxs-lookup"><span data-stu-id="17365-107">To</span></span>|<span data-ttu-id="17365-108">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-109">Leer de un archivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-109">Read from a delimited text file</span></span>|[<span data-ttu-id="17365-110">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-111">Leer de un archivo de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="17365-112">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="17365-113">Leer de un archivo de texto con varios formatos</span><span class="sxs-lookup"><span data-stu-id="17365-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="17365-114">Leer archivos de texto con varios formatos</span><span class="sxs-lookup"><span data-stu-id="17365-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-115">En este ejemplo se analiza a través de un archivo de texto delimitado por tabuladores, `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="17365-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
      <span data-ttu-id="17365-116">Objetos (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="17365-116">Objects (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
      <span data-ttu-id="17365-117">Analizar archivos de texto con el objeto TextFieldParser</span>
      <span class="sxs-lookup">
        <span data-stu-id="17365-117">Parsing Text Files with the TextFieldParser Object</span>
      </span>
    </related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)">
      <span data-ttu-id="17365-118">Solución de problemas de excepciones: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
      <span class="sxs-lookup">
        <span data-stu-id="17365-118">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17365-119">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-120">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-120">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="17365-121">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-121">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="17365-122">Secuencia que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-122">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-123">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-123">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-124">Crea un nuevo `TextFieldParser` objeto para analizar el archivo o la secuencia que se representa mediante el `stream` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-124">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-125">
            <paramref name="stream" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-125">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-126">No se pueden leer desde <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-126">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-127">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-127">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-128">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-128">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-129">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-129">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-130">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-130">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="17365-131">
            <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-131">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="17365-132">Secuencia de <see cref="T:System.IO.TextReader" /> que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-132">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-133">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-133">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-134">Crea un nuevo `TextFieldParser` objeto para analizar el archivo o la secuencia que se representa mediante el `reader` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-134">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-135">
            <paramref name="reader" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-135">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-136">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-136">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-137">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-137">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-138">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-138">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-139">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-139">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="17365-140">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-140">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="17365-141">Ruta de acceso completa al archivo que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-141">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-142">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-142">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-143">Crea un nuevo `TextFieldParser` objeto que se va a analizar el archivo especificado por el `path` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-143">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-144">
            <paramref name="path" /> es una cadena vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-144">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-145">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-145">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-146">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-146">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-147">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-147">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-148">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-148">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="17365-149">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-149">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="17365-150">Secuencia que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-150">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="17365-151">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-151">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="17365-152">Codificación de caracteres que se va a utilizar si no se determina la codificación del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-152">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="17365-153">El valor predeterminado es <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-153">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-154">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-154">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-155">Crea un nuevo `TextFieldParser` objeto para analizar el archivo o la secuencia que se representa mediante el `stream` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-155">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17365-156">Cuando se compila un juego de caracteres con una configuración de referencia cultural concreta y recuperan los mismos caracteres con una configuración cultural diferente, los caracteres no pueden interpretarse y podrían provocar que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-156">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-157">El valor de <paramref name="stream" /> o <paramref name="defaultEncoding" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-157">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-158">No se pueden leer desde <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-158">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-159">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-159">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-160">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-160">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-161">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-161">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-162">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-162">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="17365-163">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-163">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="17365-164">Ruta de acceso completa al archivo que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-164">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="17365-165">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-165">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="17365-166">Codificación de caracteres que se va a utilizar si no se determina la codificación del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-166">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="17365-167">El valor predeterminado es <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-167">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-168">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-168">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-169">Crea un nuevo `TextFieldParser` objeto que se va a analizar el archivo especificado por el `path` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-169">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17365-170">Cuando se compila un juego de caracteres con una configuración de referencia cultural concreta y recuperan los mismos caracteres con una configuración cultural diferente, los caracteres no pueden interpretarse y podrían provocar que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-170">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-171">
            <paramref name="path" /> es una cadena vacía o <paramref name="defaultEncoding" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-171">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-172">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-172">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-173">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-173">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-174">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-174">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-175">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-175">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="17365-176">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-176">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="17365-177">Secuencia que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-177">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="17365-178">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-178">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="17365-179">Codificación de caracteres que se va a utilizar si no se determina la codificación del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-179">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="17365-180">El valor predeterminado es <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-180">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="17365-181">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-181">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="17365-182">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-182">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="17365-183">El valor predeterminado es <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-183">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-184">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-184">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-185">Crea un nuevo `TextFieldParser` objeto para analizar el archivo o la secuencia que se representa mediante el `stream` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-185">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="17365-186">Si el `detectEncoding` parámetro es `True`, este constructor intenta detectar la codificación examinando los tres primeros bytes de la secuencia o archivo.</span><span class="sxs-lookup"><span data-stu-id="17365-186">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="17365-187">Lo reconoce automáticamente Unicode UTF-8, little-endian y big-endian Unicode texto si el archivo comienza con las marcas de orden de bytes adecuado.</span><span class="sxs-lookup"><span data-stu-id="17365-187">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="17365-188">En caso contrario, la codificación especificada por `defaultEncoding` se utiliza.</span><span class="sxs-lookup"><span data-stu-id="17365-188">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17365-189">Cuando se compila un juego de caracteres con una configuración de referencia cultural concreta y recuperan los mismos caracteres con una configuración cultural diferente, los caracteres no pueden interpretarse y podrían provocar que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-189">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-190">El valor de <paramref name="stream" /> o <paramref name="defaultEncoding" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-190">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-191">No se pueden leer desde <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-191">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-192">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-192">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-193">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-193">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-194">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-194">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-195">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-195">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="17365-196">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-196">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="17365-197">Ruta de acceso completa al archivo que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-197">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="17365-198">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-198">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="17365-199">Codificación de caracteres que se va a utilizar si no se determina la codificación del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-199">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="17365-200">El valor predeterminado es <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-200">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="17365-201">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-201">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="17365-202">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-202">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="17365-203">El valor predeterminado es <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-203">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-204">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-204">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-205">Crea un nuevo `TextFieldParser` objeto que se va a analizar el archivo especificado por el `path` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-205">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="17365-206">Si el `detectEncoding` parámetro es `True`, este constructor intenta detectar la codificación examinando los tres primeros bytes de la secuencia o archivo.</span><span class="sxs-lookup"><span data-stu-id="17365-206">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="17365-207">Lo reconoce automáticamente Unicode UTF-8, little-endian y big-endian Unicode texto si el archivo comienza con las marcas de orden de bytes adecuado.</span><span class="sxs-lookup"><span data-stu-id="17365-207">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="17365-208">En caso contrario, la codificación especificada por `defaultEncoding` se utiliza.</span><span class="sxs-lookup"><span data-stu-id="17365-208">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17365-209">Cuando se compila un juego de caracteres con una configuración de referencia cultural concreta y recuperan los mismos caracteres con una configuración cultural diferente, los caracteres no pueden interpretarse y podrían provocar que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-209">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-210">
            <paramref name="path" /> es una cadena vacía o <paramref name="defaultEncoding" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-210">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-211">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-211">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-212">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-212">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-213">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-213">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-214">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-214">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="17365-215">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-215">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="17365-216">Secuencia que se va a analizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-216">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="17365-217">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-217">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="17365-218">Codificación de caracteres que se va a utilizar si no se determina la codificación del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-218">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="17365-219">El valor predeterminado es <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-219">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="17365-220">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-220">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="17365-221">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-221">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="17365-222">El valor predeterminado es <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-222">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="17365-223">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-223">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="17365-224">Indica si debe mantenerse abierto el objeto <c>stream</c> cuando el objeto <see langword="TextFieldParser" /> está cerrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-224">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="17365-225">El valor predeterminado es <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-225">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-226">Inicializa una nueva instancia de la clase <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-226">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-227">Crea un nuevo `TextFieldParser` objeto para analizar el archivo o la secuencia que se representa mediante el `stream` parámetro.</span><span class="sxs-lookup"><span data-stu-id="17365-227">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="17365-228">Si el `detectEncoding` parámetro es `True`, este constructor intenta detectar la codificación examinando los tres primeros bytes de la secuencia o archivo.</span><span class="sxs-lookup"><span data-stu-id="17365-228">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="17365-229">Lo reconoce automáticamente Unicode UTF-8, little-endian y big-endian Unicode texto si el archivo comienza con las marcas de orden de bytes adecuado.</span><span class="sxs-lookup"><span data-stu-id="17365-229">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="17365-230">En caso contrario, la codificación especificada por `defaultEncoding` se utiliza.</span><span class="sxs-lookup"><span data-stu-id="17365-230">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17365-231">Cuando se compila un juego de caracteres con una configuración de referencia cultural concreta y recuperan los mismos caracteres con una configuración cultural diferente, los caracteres no pueden interpretarse y podrían provocar que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-231">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17365-232">El valor de <paramref name="stream" /> o <paramref name="defaultEncoding" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-232">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-233">No se pueden leer desde <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-233">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-234">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-234">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-235">Cómo: Leer archivos de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-235">How to: Read From Comma-Delimited Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-236">Cómo: Leer archivos de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-236">How to: Read From Fixed-width Text Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-237">Cómo: Leer archivos de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-237">How to: Read From Text Files with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-238">Cierra el actual objeto <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-238">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="17365-239">En este ejemplo se cierra el `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="17365-239">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-240">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-240">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-241">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-241">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-242">Define los símbolos (token) de comentarios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-242">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="17365-243">Un símbolo (token) de comentario es una cadena que, cuando se encuentra al principio de una línea, indica que dicha línea es un comentario y que el analizador debe omitirla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-243">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-244">Matriz de cadenas que contiene todos los tokens de comentario del objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-244">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-245">Se trata de un miembro avanzado; no se muestra en IntelliSense a menos que haga clic en el **todas** ficha.</span><span class="sxs-lookup"><span data-stu-id="17365-245">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="17365-246">Se omiten los tokens de comentarios de longitud cero.</span><span class="sxs-lookup"><span data-stu-id="17365-246">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-247">Este ejemplo especifica que para la `TextFieldParser`, `FileReader` líneas que comienzan con una comilla simple (') deben omitirse.</span><span class="sxs-lookup"><span data-stu-id="17365-247">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-248">Un token de comentario incluye un espacio en blanco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-248">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-249">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-249">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-250">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-250">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-251">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-251">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-252">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-252">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-253">Define los delimitadores de un archivo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-253">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-254">Matriz de cadenas que contiene todos los delimitadores de campo del objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-254">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-255">Esta propiedad es significativa solo si el <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> propiedad está establecida en `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="17365-255">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="17365-256">Definir los delimitadores para un archivo de texto también puede realizarse con la <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="17365-256">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="17365-257">La tabla siguiente muestra un ejemplo de una tarea que implica la `Delimiters` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-257">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="17365-258">En</span><span class="sxs-lookup"><span data-stu-id="17365-258">To</span></span>|<span data-ttu-id="17365-259">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-259">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-260">Leer de un archivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-260">Read from a delimited text file</span></span>|[<span data-ttu-id="17365-261">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-261">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-262">Este ejemplo especifica que el delimitador para la `TextFieldParser` objeto, `FileReader`, es una coma (,).</span><span class="sxs-lookup"><span data-stu-id="17365-262">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-263">Un valor delimitador se establece en un carácter de nueva línea, una cadena vacía o <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-263">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-264">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-264">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-265">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-265">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17365-266">Libera los recursos que usa el objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-266">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-267">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-267">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-268">Libera los recursos que usa el objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-268">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-269">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-269">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="17365-270">booleano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-270">Boolean.</span>
          </span>
          <span data-ttu-id="17365-271">
            <see langword="True" /> libera los recursos administrados y no administrados; <see langword="False" /> libera sólo los recursos no administrados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-271">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-272">Libera los recursos que usa el objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-272">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-273">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-273">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-274">Devuelve <see langword="True" /> si entre la actual posición del cursor y el final del archivo no hay líneas que no estén en blanco ni líneas que no sean comentarios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-274">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-275">Es <see langword="True" /> si no quedan más datos para leer; de lo contrario, es <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-275">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-276">Esta propiedad puede usarse al leer de archivos para determinar el final de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="17365-276">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="17365-277">En la tabla siguiente se muestra ejemplos de tareas que implican la `EndOfData` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-277">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="17365-278">En</span><span class="sxs-lookup"><span data-stu-id="17365-278">To</span></span>|<span data-ttu-id="17365-279">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-279">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-280">Leer de un archivo delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-280">Read from a delimited file</span></span>|[<span data-ttu-id="17365-281">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-281">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-282">Leer de un archivo de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-282">Read from a fixed-width file</span></span>|[<span data-ttu-id="17365-283">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-283">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-284">Este ejemplo se usa el `EndofData` propiedad para recorrer en iteración todos los campos en el archivo con el `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="17365-284">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-285">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-285">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-286">Devuelve la línea que ha causado la excepción <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-286">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-287">Línea que ha causado la excepción <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-287">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-288">Si no hay ningún <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> se han producido excepciones, se devuelve una cadena vacía.</span><span class="sxs-lookup"><span data-stu-id="17365-288">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="17365-289">El <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> propiedad puede usarse para mostrar el número de la línea que produjo la excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-289">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="17365-290">En la tabla siguiente se muestra ejemplos de tareas que implican la `ErrorLine` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-290">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="17365-291">En</span><span class="sxs-lookup"><span data-stu-id="17365-291">To</span></span>|<span data-ttu-id="17365-292">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-292">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-293">Leer de un archivo delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-293">Read from a delimited file</span></span>|[<span data-ttu-id="17365-294">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-294">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-295">Leer de un archivo de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-295">Read from a fixed-width file</span></span>|[<span data-ttu-id="17365-296">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-296">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-297">Este ejemplo se usa el `ErrorLine` propiedad para mostrar la línea que produce actual <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-297">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-298">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-298">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-299">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-299">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-300">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-300">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-301">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-301">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-302">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-302">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">
          <span data-ttu-id="17365-303">Instrucción Try...Catch...Finally (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-303">Try...Catch...Finally Statement (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-304">Devuelve el número de la línea que ha causado la excepción <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-304">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-305">Número de la línea que ha causado la excepción <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-305">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-306">Si no hay ningún <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> se han producido excepciones, se devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="17365-306">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="17365-307">El <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> propiedad puede usarse para mostrar el número de la línea que produjo la excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-307">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="17365-308">Comentarios y las líneas en blanco no se omiten al determinar el número de línea.</span><span class="sxs-lookup"><span data-stu-id="17365-308">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="17365-309">En la tabla siguiente se muestra ejemplos de tareas que implican la `ErrorLineNumber` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-309">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="17365-310">En</span><span class="sxs-lookup"><span data-stu-id="17365-310">To</span></span>|<span data-ttu-id="17365-311">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-311">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-312">Leer de un archivo delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-312">Read from a delimited file</span></span>|[<span data-ttu-id="17365-313">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-313">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-314">Leer de un archivo de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-314">Read from a fixed-width file</span></span>|[<span data-ttu-id="17365-315">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-315">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-316">Este ejemplo se usa el `ErrorLineNumber` propiedad para mostrar la ubicación de la línea que produce actual <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-316">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-317">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-317">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-318">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-318">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-319">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-319">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-320">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-320">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-321">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-321">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">
          <span data-ttu-id="17365-322">Instrucción Try...Catch...Finally (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-322">Try...Catch...Finally Statement (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-323">Denota el ancho de cada columna del archivo de texto que se está analizando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-323">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-324">Matriz de enteros que contiene el ancho de cada columna del archivo de texto que se está analizando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-324">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-325">Esta propiedad es significativa solo si el <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> propiedad está establecida en `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="17365-325">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="17365-326">Si la última entrada de la matriz es menor o igual que cero, se supone que el campo de ancho variable.</span><span class="sxs-lookup"><span data-stu-id="17365-326">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="17365-327">El <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> método también se puede utilizar para establecer los anchos de campo.</span><span class="sxs-lookup"><span data-stu-id="17365-327">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="17365-328">En la tabla siguiente se muestra ejemplos de tareas que implican la `FieldWidths` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-328">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="17365-329">En</span><span class="sxs-lookup"><span data-stu-id="17365-329">To</span></span>|<span data-ttu-id="17365-330">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-330">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-331">Leer de un archivo de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-331">Read from a fixed-width text file</span></span>|[<span data-ttu-id="17365-332">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-332">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-333">Este ejemplo lee el archivo `ParserText.txt`, especificando los anchos; la primera columna es de 5 caracteres de ancho, el segundo es 10, la tercera es 11 y la cuarta es de ancho variable</span><span class="sxs-lookup"><span data-stu-id="17365-333">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-334">Un valor de ancho en cualquier ubicación distinta de la última entrada de la matriz es menor o igual que cero ().</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-334">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-335">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-335">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-336">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-336">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-337">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-337">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-338">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-338">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-339">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-339">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)">
          <span data-ttu-id="17365-340">Solución de problemas de excepciones: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-340">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-341">Permite que el objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> intente liberar recursos y realizar otras operaciones de limpieza antes de que sea reclamado por la recolección de elementos no utilizados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-341">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-342">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-342">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-343">Denota si los campos están entre comillas al analizarse un archivo delimitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-343">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-344">Es <see langword="True" /> si los campos están entre comillas; de lo contrario, es <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-344">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-345">Se trata de un miembro avanzado; no se muestra en IntelliSense a menos que haga clic en el **todas** ficha.</span><span class="sxs-lookup"><span data-stu-id="17365-345">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="17365-346">Si la propiedad es `True`, el analizador asume que los campos están entre comillas ("") y pueden contener finales de línea.</span><span class="sxs-lookup"><span data-stu-id="17365-346">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="17365-347">Si un campo está entre comillas, por ejemplo, `abc, "field2a,field2b", field3` y esta propiedad es `True`, a continuación, se devolverá todo el texto entrecomillado comillas tal cual; en este ejemplo devolvería `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="17365-347">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="17365-348">Establecer esta propiedad en `False` haría que este ejemplo devuelto `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="17365-348">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-349">Este ejemplo se establece la `HasFieldsEnclosedInQuotes` propiedad `True` para `myReader`.</span><span class="sxs-lookup"><span data-stu-id="17365-349">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-350">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-350">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-351">Devuelve el actual número de línea o devuelve -1 si no hay más caracteres disponibles en la secuencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-351">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-352">Número de línea actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-352">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-353">Se trata de un miembro avanzado; no se muestra en IntelliSense a menos que haga clic en el **todas** ficha.</span><span class="sxs-lookup"><span data-stu-id="17365-353">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="17365-354">Comentarios y las líneas en blanco no se omiten al determinar el número de línea.</span><span class="sxs-lookup"><span data-stu-id="17365-354">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-355">Este ejemplo se busca el nombre "Jones" en el archivo de texto e indica en qué líneas se produce en.</span><span class="sxs-lookup"><span data-stu-id="17365-355">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-356">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-356">Objects (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="17365-357">
            <see langword="Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-357">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="17365-358">Número de caracteres que se van a leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-358">Number of characters to read.</span>
          </span>
          <span data-ttu-id="17365-359">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-359">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-360">Lee el número especificado de caracteres sin avanzar el cursor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-360">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17365-361">Cadena que contiene el número especificado de caracteres que se van a leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-361">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-362">El `numberOfChars` valor debe ser menor que el número total de caracteres de la línea.</span><span class="sxs-lookup"><span data-stu-id="17365-362">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="17365-363">Si no lo es, la cadena devuelta por `PeekChars` se truncará a la longitud de la línea.</span><span class="sxs-lookup"><span data-stu-id="17365-363">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="17365-364">Las líneas en blanco se omiten.</span><span class="sxs-lookup"><span data-stu-id="17365-364">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="17365-365">No se devuelven los caracteres de fin de línea.</span><span class="sxs-lookup"><span data-stu-id="17365-365">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="17365-366">El `PeekChars` método no realiza ningún análisis; un carácter de final de línea en un campo delimitado se interpreta como el final de la línea real.</span><span class="sxs-lookup"><span data-stu-id="17365-366">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="17365-367">En la tabla siguiente se muestra ejemplos de tareas que implican la `PeekChars` método.</span><span class="sxs-lookup"><span data-stu-id="17365-367">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="17365-368">En</span><span class="sxs-lookup"><span data-stu-id="17365-368">To</span></span>|<span data-ttu-id="17365-369">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-370">Determinar el formato de un campo antes de su análisis</span><span class="sxs-lookup"><span data-stu-id="17365-370">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="17365-371">Leer archivos de texto con varios formatos</span><span class="sxs-lookup"><span data-stu-id="17365-371">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-372">Este ejemplo se utiliza `PeekChars` para buscar el final de los datos y detener el análisis del archivo en ese momento.</span><span class="sxs-lookup"><span data-stu-id="17365-372">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-373">
            <paramref name="numberOfChars" /> es menor que 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-373">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-374">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-374">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-375">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-375">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="17365-376">Leer archivos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-376">Reading from Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-377">Lee todos los campos en la línea actual, los devuelve como una matriz de cadenas y avanza el cursor a la siguiente línea que contiene datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-377">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17365-378">Matriz de cadenas que contiene los valores de campo de la línea actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-378">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-379">Con el fin de permitir a los usuarios analizar archivos de texto en varios formatos, el `ReadFields` método examina los valores de `TextFieldType`, `Delimiters`, y `FieldWidths`, si se especifican, cada vez que se llama.</span><span class="sxs-lookup"><span data-stu-id="17365-379">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="17365-380">Los usuarios deben configurar correctamente la `TextFieldType` y `FieldWidths` o `Delimiters` propiedades, según corresponda.</span><span class="sxs-lookup"><span data-stu-id="17365-380">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="17365-381">Si `TextFieldType` está establecido en `Delimited`, y `Delimiters` no se establece, o si `TextFieldType` está establecido en `FixedWidth` y `FieldWidths`, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="17365-381">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="17365-382">Si `ReadFields` encuentra líneas en blanco, se omiten y se devuelve la siguiente línea en blanco.</span><span class="sxs-lookup"><span data-stu-id="17365-382">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="17365-383">Si el `ReadFields` método no puede analizar la línea actual, produce una excepción y no se mueve a la línea siguiente.</span><span class="sxs-lookup"><span data-stu-id="17365-383">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="17365-384">Esto permite que la aplicación al intentar analizar la línea de nuevo.</span><span class="sxs-lookup"><span data-stu-id="17365-384">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="17365-385">En la tabla siguiente se muestra ejemplos de tareas que implican la `ReadFields` método.</span><span class="sxs-lookup"><span data-stu-id="17365-385">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="17365-386">En</span><span class="sxs-lookup"><span data-stu-id="17365-386">To</span></span>|<span data-ttu-id="17365-387">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-387">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-388">Leer de un archivo delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-388">Read from a delimited file</span></span>|[<span data-ttu-id="17365-389">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-389">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-390">Leer de un archivo de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-390">Read from a fixed-width file</span></span>|[<span data-ttu-id="17365-391">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-391">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-392">Este ejemplo se usa el `ReadFields` método para leer desde el archivo delimitado por comas `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="17365-392">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="17365-393">El ejemplo escribe los campos que `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="17365-393">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="17365-394">No se puede analizar un campo utilizando el formato especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-394">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="17365-395">Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-395">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="17365-396">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-396">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-397">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-397">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-398">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-398">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-399">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-399">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-400">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-400">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-401">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-401">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-402">Devuelve la línea actual como una cadena y avanza el cursor a la siguiente línea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-402">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17365-403">Línea actual del archivo o de la secuencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-403">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-404">El `ReadLine` método no realiza ningún análisis; un carácter de final de línea en un campo delimitado se interpreta como el final de la línea real.</span><span class="sxs-lookup"><span data-stu-id="17365-404">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="17365-405">`Nothing` se devuelve si se alcanza el final del archivo.</span><span class="sxs-lookup"><span data-stu-id="17365-405">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-406">En este ejemplo lee el archivo `ParserText.txt` y lo escribe en `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="17365-406">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="17365-407">Si `Testfile.txt` no existe, se crea mediante el `WriteAllText` método.</span><span class="sxs-lookup"><span data-stu-id="17365-407">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="17365-408">En este ejemplo escribe los campos como una sola cadena; para que cada línea se muestre en su propia línea en el archivo de destino, un `VbCrLf` carácter se debe anexar al final de cada línea.</span><span class="sxs-lookup"><span data-stu-id="17365-408">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-409">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-409">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-410">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-410">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17365-411">Lee el resto del archivo de texto y lo devuelve como una cadena.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-411">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17365-412">Texto restante del archivo o de la secuencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-412">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-413">Se trata de un miembro avanzado; no se muestra en IntelliSense a menos que haga clic en el **todas** ficha.</span><span class="sxs-lookup"><span data-stu-id="17365-413">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="17365-414">Si no hay nada más que puede leer porque se alcanzó el final del archivo, `Nothing` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="17365-414">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="17365-415">El `ReadToEnd` método no omite las líneas en blanco y comentarios.</span><span class="sxs-lookup"><span data-stu-id="17365-415">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-416">Este ejemplo se usa el `ReadToEnd` método para leer todo el archivo `ParserText.txt` y escribirla en el archivo `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="17365-416">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="17365-417">Si `Testfile.txt` no existe, se crea mediante el `WriteAllText` método.</span><span class="sxs-lookup"><span data-stu-id="17365-417">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-418">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-418">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-419">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-419">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="17365-420">Matriz de tipo <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-420">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-421">Establece los delimitadores del lector en los valores especificados y establece el tipo de campo en <see langword="Delimited" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-421">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-422">El contenido existente de la `Delimiters` propiedad se borran cuando se establece este método.</span><span class="sxs-lookup"><span data-stu-id="17365-422">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="17365-423">Este método proporciona una manera de establecer los delimitadores sin crear una matriz.</span><span class="sxs-lookup"><span data-stu-id="17365-423">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="17365-424">La tabla siguiente muestra un ejemplo de una tarea que implica la `SetDelimiters` método.</span><span class="sxs-lookup"><span data-stu-id="17365-424">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="17365-425">En</span><span class="sxs-lookup"><span data-stu-id="17365-425">To</span></span>|<span data-ttu-id="17365-426">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-426">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-427">Analizar un archivo de texto</span><span class="sxs-lookup"><span data-stu-id="17365-427">Parse a text file</span></span>|[<span data-ttu-id="17365-428">Análisis de archivos de texto con el objeto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="17365-428">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-429">Este ejemplo abre un analizador de campos de texto y define el delimitador como `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="17365-429">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="17365-430">Reemplace la ruta de acceso `C:\logs\test.log` con la ruta de acceso y el nombre del archivo que desea analizar.</span><span class="sxs-lookup"><span data-stu-id="17365-430">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17365-431">Un delimitador es de longitud cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-431">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-432">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-432">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-433">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-433">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-434">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-434">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="17365-435">Matriz de <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-435">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17365-436">Establece los delimitadores para el lector en los valores especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-436">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-437">El contenido existente de la `Delimiters` propiedad se borran cuando se establece.</span><span class="sxs-lookup"><span data-stu-id="17365-437">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="17365-438">Este método proporciona una manera de establecer los delimitadores sin crear una matriz.</span><span class="sxs-lookup"><span data-stu-id="17365-438">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="17365-439">La tabla siguiente muestra el ejemplo de tareas que implican la `SetFieldWidths` método.</span><span class="sxs-lookup"><span data-stu-id="17365-439">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="17365-440">En</span><span class="sxs-lookup"><span data-stu-id="17365-440">To</span></span>|<span data-ttu-id="17365-441">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-441">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-442">Analizar un archivo de texto.</span><span class="sxs-lookup"><span data-stu-id="17365-442">Parse a text file.</span></span>|[<span data-ttu-id="17365-443">Análisis de archivos de texto con el objeto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="17365-443">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-444">Este ejemplo abre un analizador de campos de texto y define el ancho de campo como `5`.</span><span class="sxs-lookup"><span data-stu-id="17365-444">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="17365-445">Reemplace la ruta de acceso `C:\logs\test.log` con la ruta de acceso y el nombre del archivo que desea analizar.</span><span class="sxs-lookup"><span data-stu-id="17365-445">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="17365-446">El siguiente ejemplo abre un analizador de campos de texto y define los anchos de campo como `5`, `10`y la variable.</span><span class="sxs-lookup"><span data-stu-id="17365-446">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="17365-447">Reemplace la ruta de acceso `C:\logs\test.log` con la ruta de acceso y el nombre del archivo que desea analizar.</span><span class="sxs-lookup"><span data-stu-id="17365-447">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-448">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-448">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-449">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-449">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-450">Indica si el archivo que se va a analizar es un archivo delimitado o de ancho fijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-450">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-451">Valor de <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> que indica si el archivo que se va a analizar es un archivo delimitado o de ancho fijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-451">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-452">El valor predeterminado de esta propiedad está delimitado.</span><span class="sxs-lookup"><span data-stu-id="17365-452">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="17365-453">En la tabla siguiente se muestra ejemplos de tareas que implican la `TextFieldType` propiedad.</span><span class="sxs-lookup"><span data-stu-id="17365-453">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="17365-454">En</span><span class="sxs-lookup"><span data-stu-id="17365-454">To</span></span>|<span data-ttu-id="17365-455">Vea</span><span class="sxs-lookup"><span data-stu-id="17365-455">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="17365-456">Leer de un archivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="17365-456">Read from a delimited text file</span></span>|[<span data-ttu-id="17365-457">Leer archivos de texto delimitado por comas</span><span class="sxs-lookup"><span data-stu-id="17365-457">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="17365-458">Leer de un archivo de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-458">Read from a fixed-width text file</span></span>|[<span data-ttu-id="17365-459">Leer archivos de texto de ancho fijo</span><span class="sxs-lookup"><span data-stu-id="17365-459">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="17365-460">Leer de un archivo de texto con varios formatos</span><span class="sxs-lookup"><span data-stu-id="17365-460">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="17365-461">Leer archivos de texto con varios formatos</span><span class="sxs-lookup"><span data-stu-id="17365-461">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="17365-462">Este ejemplo se crea un `TextFieldParser`, `FileReader`y especifica que está delimitado.</span><span class="sxs-lookup"><span data-stu-id="17365-462">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="17365-463">Este ejemplo se crea un `TextFieldParser`, `FileReader`y especifica que se trata de ancho fijo.</span><span class="sxs-lookup"><span data-stu-id="17365-463">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-464">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-464">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-465">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-465">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-466">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-466">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-467">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-467">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-468">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-468">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)">
          <span data-ttu-id="17365-469">Solución de problemas de excepciones: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-469">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17365-470">Indica si los espacios en blanco iniciales y finales deben quitarse de los valores de campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-470">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17365-471">Es <see langword="True" /> si los espacios en blanco iniciales y finales deben quitarse de los valores de campo; de lo contrario, es <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-471">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17365-472">El valor predeterminado de esta propiedad es `True`.</span><span class="sxs-lookup"><span data-stu-id="17365-472">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17365-473">Este ejemplo se crea un `TextFieldParser`, `FileReader`y establece el `TrimWhiteSpace` propiedad `True`.</span><span class="sxs-lookup"><span data-stu-id="17365-473">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">
          <span data-ttu-id="17365-474">Objetos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-474">Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">
          <span data-ttu-id="17365-475">Analizar archivos de texto con el objeto TextFieldParser</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-475">Parsing Text Files with the TextFieldParser Object</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">
          <span data-ttu-id="17365-476">Cómo: leer de un archivo de texto delimitado por comas en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-476">How to: Read From a Comma-Delimited Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md">
          <span data-ttu-id="17365-477">Cómo: leer de un archivo de texto de ancho fijo en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-477">How to: Read From a Fixed-width Text File in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">
          <span data-ttu-id="17365-478">Cómo: leer de un archivo de texto con varios formatos en Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="17365-478">How to: Read From a Text File with Multiple Formats in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>