<Type Name="LambdaReference&lt;T&gt;" FullName="System.Activities.Expressions.LambdaReference&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bff138d083a72cbb05cfe909833c14e35284fece" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LambdaReference&lt;T&gt; : System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;, System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LambdaReference`1&lt;T&gt; extends System.Activities.CodeActivity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; implements class System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.LambdaReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LambdaReference(Of T)&#xA;Inherits CodeActivity(Of Location(Of T))&#xA;Implements IValueSerializableExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class LambdaReference sealed : System::Activities::CodeActivity&lt;System::Activities::Location&lt;T&gt; ^&gt;, System::Activities::XamlIntegration::IValueSerializableExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">System.Activities.Location&lt;T&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.XamlIntegration.IValueSerializableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="24a1a-101">Tipo del valor de resultado devuelto por la expresión.</span>
      <span class="sxs-lookup">
        <span data-stu-id="24a1a-101">The type of value returned by the expression.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="24a1a-102">Representa una expresión lambda utilizada como un valor de l, que permite enlazar argumentos <see cref="F:System.Activities.ArgumentDirection.Out" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="24a1a-102">Represents a lambda expression used as an l-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24a1a-103"><xref:System.Activities.Expressions.LambdaReference%601> se utiliza para las expresiones lambda especificadas en el código y no se puede serializar a XAML.</span><span class="sxs-lookup"><span data-stu-id="24a1a-103"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="24a1a-104">Si se realiza un intento de serializar un flujo de trabajo que contiene una referencia <xref:System.Activities.Expressions.LambdaReference%601>, se produce una excepción <xref:System.Activities.Expressions.LambdaSerializationException>.</span><span class="sxs-lookup"><span data-stu-id="24a1a-104">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="24a1a-105">Si el flujo de trabajo que lo contiene requiere serialización XAML, utilice <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> o <xref:System.Activities.Expressions.ExpressionServices> para convertir la referencia <xref:System.Activities.Expressions.LambdaReference%601> a un formato que se puede serializar.</span><span class="sxs-lookup"><span data-stu-id="24a1a-105">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 <span data-ttu-id="24a1a-106">Esta actividad utiliza el proveedor LINQ to entidades para evaluar expresiones de LINQ.</span><span class="sxs-lookup"><span data-stu-id="24a1a-106">This activity uses the LINQ to Entity provider to evaluate LINQ expressions.</span></span> <span data-ttu-id="24a1a-107">Las expresiones de LINQ que usa con esta actividad deben ser evaluable ADO.Net Entity Data Model.</span><span class="sxs-lookup"><span data-stu-id="24a1a-107">Any LINQ expressions used with this activity must be evaluatable by the ADO.Net Entity Data Model.</span></span> <span data-ttu-id="24a1a-108">Por ejemplo, expresiones de LINQ no puede utilizarse para hacer referencia a actividades, variables o argumentos del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="24a1a-108">For example, LINQ expressions cannot be used to reference activities, variables, or arguments of the workflow itself.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LambdaReference (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,T&gt;&gt; locationExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !T&gt;&gt; locationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (locationExpression As Expression(Of Func(Of ActivityContext, T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LambdaReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, T&gt; ^&gt; ^ locationExpression);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="locationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="locationExpression">
          <span data-ttu-id="24a1a-109">Valor de la expresión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-109">The value of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24a1a-110">Inicializa una nueva instancia de la clase <see cref="T:System.Activities.Expressions.LambdaReference`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-110">Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaReference`1" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public bool CanConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanConvertToString (context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="24a1a-111">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-111">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24a1a-112">Este método siempre devuelve <see langword="true" /> y se usa junto con el método <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> para proporcionar mensajes de error descriptivos cuando se realiza un intento de serializar esta actividad a XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-112">This method always returns <see langword="true" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="24a1a-113">Este método devuelve siempre <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-113">This method always returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24a1a-114"><xref:System.Activities.Expressions.LambdaReference%601> se utiliza para las expresiones lambda especificadas en el código y no se puede serializar a XAML.</span><span class="sxs-lookup"><span data-stu-id="24a1a-114"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="24a1a-115">Si se realiza un intento de serializar un flujo de trabajo que contiene una referencia <xref:System.Activities.Expressions.LambdaReference%601>, se produce una excepción <xref:System.Activities.Expressions.LambdaSerializationException>.</span><span class="sxs-lookup"><span data-stu-id="24a1a-115">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="24a1a-116">Si el flujo de trabajo que lo contiene requiere serialización XAML, utilice <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> o <xref:System.Activities.Expressions.ExpressionServices> para convertir la referencia <xref:System.Activities.Expressions.LambdaReference%601> a un formato que se puede serializar.</span><span class="sxs-lookup"><span data-stu-id="24a1a-116">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public string ConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToString (context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="24a1a-117">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-117">The context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24a1a-118">Produce una excepción <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> y se utiliza junto con el método <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> para proporcionar mensajes de error descriptivos cuando se realiza un intento de serializar esta actividad a XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-118">Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="24a1a-119">Cuando se llama a él, este método produce una excepción <see cref="T:System.Activities.Expressions.LambdaSerializationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24a1a-119">This method throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24a1a-120"><xref:System.Activities.Expressions.LambdaReference%601> se utiliza para las expresiones lambda especificadas en el código y no se puede serializar a XAML.</span><span class="sxs-lookup"><span data-stu-id="24a1a-120"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="24a1a-121">Si se realiza un intento de serializar un flujo de trabajo que contiene una referencia <xref:System.Activities.Expressions.LambdaReference%601>, se produce una excepción <xref:System.Activities.Expressions.LambdaSerializationException>.</span><span class="sxs-lookup"><span data-stu-id="24a1a-121">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="24a1a-122">Si el flujo de trabajo que lo contiene requiere serialización XAML, utilice <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> o <xref:System.Activities.Expressions.ExpressionServices> para convertir la referencia <xref:System.Activities.Expressions.LambdaReference%601> a un formato que se puede serializar.</span><span class="sxs-lookup"><span data-stu-id="24a1a-122">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Activities.Location&lt;T&gt; Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Activities.Location`1&lt;!T&gt; Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As Location(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Activities::Location&lt;T&gt; ^ Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>