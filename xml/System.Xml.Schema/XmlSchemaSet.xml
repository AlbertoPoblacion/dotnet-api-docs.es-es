<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1a45077dfb90b7e4827cf8ae93bea7ce6947bc87" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67570924" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene una caché de esquemas del lenguaje de definición de esquemas XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   No utilizar esquemas desde orígenes desconocidos o que no se confía o ubicaciones. Si lo hace, compromete la seguridad del código.  
> -   Esquemas XML (incluidos los esquemas en línea) son intrínsecamente vulnerables a la denegación de servicio; no los acepta en escenarios de confianza.  
> -   Excepciones y mensajes de error de validación de esquema pueden exponer información confidencial sobre el modelo de contenido o las rutas de acceso URI para el archivo de esquema. Tenga cuidado de no exponer esta información a los llamadores de confianza.  
> -   Consideraciones de seguridad adicionales se tratan en la sección "Consideraciones de seguridad".  
  
 <xref:System.Xml.Schema.XmlSchemaSet> es una caché o biblioteca donde puede almacenar esquemas (XSD). <xref:System.Xml.Schema.XmlSchemaSet> mejora el rendimiento al almacenar en memoria caché los esquemas, en lugar obtener acceso a ellos desde un archivo o dirección URL. Cada esquema se identifica mediante el URI de espacio de nombres y ubicación que se ha especificado cuando el esquema se agregó al conjunto. Usa el <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> propiedad para asignar el <xref:System.Xml.Schema.XmlSchemaSet> debe usar un lector de XML para la validación de datos de objeto.  
  
## <a name="security-considerations"></a>Consideraciones de seguridad  
  
-   No utilizar esquemas de orígenes desconocidos o que no se confía. Si lo hace, compromete la seguridad del código. Espacios de nombres externos o las ubicaciones que se hace referenciadas en incluyen, importación y elementos de redefinición de un esquema se resuelven con respecto a la URI base del esquema que incluye o importa. Por ejemplo, si el URI base de inclusión o importación de esquema está vacío o `null`, las ubicaciones externas se resuelven con respecto al directorio actual. La <xref:System.Xml.XmlUrlResolver> clase se utiliza para resolver los esquemas externos de forma predeterminada. Para deshabilitar la resolución de inclusión, importación y volver a definir los elementos de un esquema, establezca el <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> propiedad `null`.  
  
-   El <xref:System.Xml.Schema.XmlSchemaSet> clase utiliza la <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> clase para analizar y buscar coincidencias de expresiones regulares en un esquema XML. Validación de facetas de patrón con expresiones regulares en un esquema XML puede implicar un mayor uso de CPU y debe evitarse en escenarios de alta disponibilidad.  
  
-   Las excepciones generadas como resultado de utilizar el <xref:System.Xml.Schema.XmlSchemaSet> clase, como el <xref:System.Xml.Schema.XmlSchemaException> clase puede contener información confidencial que no debe exponerse en escenarios de confianza. Por ejemplo, el <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propiedad de un <xref:System.Xml.Schema.XmlSchemaException> devuelve la ruta de acceso URI para el archivo de esquema que produjo la excepción. El <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propiedad no debe exponerse en escenarios de confianza. Las excepciones se deben administrar correctamente para que esta información confidencial no se expone en escenarios de confianza.  
  
   
  
## Examples  
 El siguiente ejemplo valida un archivo XML utilizando los esquemas almacenados en el <xref:System.Xml.Schema.XmlSchemaSet>. El espacio de nombres del archivo XML, `urn:bookstore-schema`, identifica qué esquema del <xref:System.Xml.Schema.XmlSchemaSet> se va a utilizar para la validación. Resultado del ejemplo muestra que el archivo XML tiene dos infracciones de esquema:

 - La primera \<book > elemento contiene un \<Autor > elemento pero no \<title > o \<precio > elemento.

 - El \<Autor > elemento en el último \<book > Falta el elemento un \<first-name > y \<last-name > elemento y tiene en su lugar, no es válido \<nombre > elemento.   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Entrada  
 En el ejemplo se utilizan los dos archivos de entrada siguientes.  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Objeto <see cref="T:System.Xml.XmlNameTable" /> que se va a utilizar.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" /> con el objeto <see cref="T:System.Xml.XmlNameTable" /> especificado.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.XmlNameTable" /> que se pasa como parámetro es <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega el esquema del lenguaje de definición de esquemas XML (XSD) especificado a la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se va a agregar a la colección <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Agrega el <see cref="T:System.Xml.Schema.XmlSchema" /> predeterminado a <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> si el esquema es válido. Si el esquema no es válido y se especifica <see cref="T:System.Xml.Schema.ValidationEventHandler" />, se devolverá el valor <see langword="null" /> y se iniciará el evento de validación adecuado. De lo contrario, se produce una excepción <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Xml.Schema.XmlSchema> objeto ya existe en el <xref:System.Xml.Schema.XmlSchemaSet>, el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método no hace nada.  
  
 La funcionalidad de este método es idéntica de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El esquema no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Objeto <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Agrega todos los esquemas del lenguaje de definición de esquemas XML (XSD) de la clase <see cref="T:System.Xml.Schema.XmlSchemaSet" /> especificada a <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de poder agregar un esquema a un <xref:System.Xml.Schema.XmlSchemaSet>, tiene que ser preprocesarse correctamente. Preprocesamiento realiza las siguientes tareas básicas.  
  
1.  El esquema se comprueba la validez estructural según las reglas de esquema XML de W3C, pero no se valida totalmente el esquema.  
  
2.  Se resuelven las referencias a componentes del esquema interno y externo. Cualquier esquema importado o incluido que se recupera correctamente también se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>. Los esquemas importados se agregan como independiente <xref:System.Xml.Schema.XmlSchema> objetos y los esquemas incluidos pasan a formar parte de la inclusión de <xref:System.Xml.Schema.XmlSchema>.  
  
 Si el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad de la <xref:System.Xml.Schema.XmlSchemaSet> agregar es `true`, todos los esquemas en el <xref:System.Xml.Schema.XmlSchemaSet> para agregar se agregan a la <xref:System.Xml.Schema.XmlSchemaSet>. Si el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad de la <xref:System.Xml.Schema.XmlSchemaSet> agregar es `false`, todos los esquemas se preprocesan antes de agregarse. Si ninguno de los esquemas en la recién agregada <xref:System.Xml.Schema.XmlSchemaSet> no se preprocesa, se agregará ningún esquema; en su lugar, un <xref:System.Xml.Schema.XmlSchemaException> se produce. Como resultado, el siguiente ejemplo de código de dos no son equivalentes.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Los ejemplos de código de dos anteriores no son equivalentes. En el primer ejemplo, si existe un esquema no válido en `schemaSet1` y su <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad está establecida en `false`, no hay esquemas se agregarán al `schemaSet`. En el segundo ejemplo, se pueden agregar varios esquemas a `schemaSet` antes de que se encuentra un esquema no válido y se produce una excepción.  
  
   
  
## Examples  
 El siguiente ejemplo de código ilustra agregar esquemas a un <xref:System.Xml.Schema.XmlSchemaSet>, entonces la adición de la <xref:System.Xml.Schema.XmlSchemaSet> a un nuevo <xref:System.Xml.Schema.XmlSchemaSet> utilizando el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Un esquema de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propiedad de esquema <paramref name="targetNamespace" /> o valor <see langword="null" /> para utilizar el <paramref name="targetNamespace" /> especificado en el esquema.</param>
        <param name="schemaUri">Dirección URL que especifica el esquema que se va a cargar.</param>
        <summary>Agrega el esquema del lenguaje de definición de esquemas XML (XSD) de la dirección URL especificada a <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> si el esquema es válido. Si el esquema no es válido y se especifica <see cref="T:System.Xml.Schema.ValidationEventHandler" />, se devolverá el valor <see langword="null" /> y se iniciará el evento de validación adecuado. De lo contrario, se produce una excepción <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de poder agregar un esquema a un <xref:System.Xml.Schema.XmlSchemaSet>, tiene que ser preprocesarse correctamente. Preprocesamiento realiza las siguientes tareas básicas.  
  
1.  El esquema se comprueba la validez estructural según las reglas de esquema XML de W3C, pero no se valida totalmente el esquema.  
  
2.  Se resuelven las referencias a componentes del esquema interno y externo. Cualquier esquema importado o incluido que se recupera correctamente también se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>. Los esquemas importados se agregan como independiente <xref:System.Xml.Schema.XmlSchema> objetos y los esquemas incluidos pasan a formar parte de la inclusión de <xref:System.Xml.Schema.XmlSchema>.  
  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
-   Adición de un esquema para el <xref:System.Xml.Schema.XmlSchemaSet> con el mismo espacio de nombres y el esquema de dirección URL de ubicación de destino como un esquema ya incluido dentro de la <xref:System.Xml.Schema.XmlSchemaSet> devolverá el objeto de esquema original.  
  
-   Cuando se agrega correctamente un nuevo esquema a un <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad de la <xref:System.Xml.Schema.XmlSchemaSet> está establecido en `false`.  
  
-   Los elementos de inclusión o importación encontrados en un esquema XML se resuelven cuando la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> se llama al método. No se puede resolver de inclusión e importación de resultados de los elementos en una advertencia de validación de esquema y si no hay ningún <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> se ha especificado para el <xref:System.Xml.Schema.XmlSchemaSet> objeto, esta advertencia no se notificarán.  
  
-   Si un esquema con el mismo espacio de nombres de destino como un esquema que ya existe en el <xref:System.Xml.Schema.XmlSchemaSet> se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>, se agregan dos esquemas.  
  
    > [!NOTE]
    >  Este comportamiento difiere de la obsoleta <xref:System.Xml.Schema.XmlSchemaCollection> objeto.  
  
-   El <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método de la <xref:System.Xml.Schema.XmlSchemaSet> tiene la capacidad para usar el espacio de nombres de destino definido en un esquema, en lugar de requerir el espacio de nombres de destino se especifica como un parámetro cuando el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> se llama al método. Especificar `null` en el `targetNamespace` parámetro de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método indica a la <xref:System.Xml.Schema.XmlSchemaSet> para usar el espacio de nombres de destino definido en el esquema, como se muestra en el ejemplo de código siguiente.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 En el ejemplo de código anterior, `null` se especifica como el `targetNamespace` parámetro para el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método. Como resultado, el `targetNamespace` definido en el archivo books.xml se utiliza el archivo. En este caso, el resultado de llamar a la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método sería idéntico si `http://www.contoso.com/books` se hubiera especificado como el `targetNamespace` parámetro.  
  
-   Esquema XML de W3C permite esquemas sin un espacio de nombres de destino que se incluirán en los esquemas con un espacio de nombres de destino definido. En este caso, se convierte en el esquema sin un espacio de nombres de destino definido en el espacio de nombres de destino del esquema incluido. El esquema incluido se trata como si tuviera definido ese espacio de nombres de destino. De forma similar, los esquemas sin un espacio de nombres de destino se pueden agregar a la <xref:System.Xml.Schema.XmlSchemaSet> y convertido en el espacio de nombres de destino especificada por el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método, como se muestra en el ejemplo siguiente.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Si se agrega el esquema anterior a la <xref:System.Xml.Schema.XmlSchemaSet> con el espacio de nombres de destino `http://www.contoso.com/new/targetnamespace` (como se muestra en el código siguiente), se trata como si fuera el espacio de nombres declarado en el esquema `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se agrega el `http://www.contoso.com/books.xsd` esquema con un espacio de nombres de destino de `http://www.contoso.com/books` a la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 En el ejemplo se utiliza como entrada el archivo `books.xsd`.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El esquema no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">La dirección URL que se pasa como parámetro es <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propiedad de esquema <paramref name="targetNamespace" /> o valor <see langword="null" /> para utilizar el <paramref name="targetNamespace" /> especificado en el esquema.</param>
        <param name="schemaDocument">Objeto <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Agrega el esquema del lenguaje de definición de esquemas XML (XSD) incluido en <see cref="T:System.Xml.XmlReader" /> a <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> si el esquema es válido. Si el esquema no es válido y se especifica <see cref="T:System.Xml.Schema.ValidationEventHandler" />, se devolverá el valor <see langword="null" /> y se iniciará el evento de validación adecuado. De lo contrario, se produce una excepción <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de poder agregar un esquema a un <xref:System.Xml.Schema.XmlSchemaSet>, tiene que ser preprocesarse correctamente. Preprocesamiento realiza las siguientes tareas básicas.  
  
1.  El esquema se comprueba la validez estructural según las reglas de esquema XML de W3C, pero no se valida totalmente el esquema.  
  
2.  Se resuelven las referencias a componentes del esquema interno y externo. Cualquier esquema importado o incluido que se recupera correctamente también se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>. Los esquemas importados se agregan como independiente <xref:System.Xml.Schema.XmlSchema> objetos y los esquemas incluidos pasan a formar parte de la inclusión de <xref:System.Xml.Schema.XmlSchema>.  
  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
-   Esquemas importada o incluida en los esquemas ha recuperado correctamente la <xref:System.Xml.XmlReader> también se agregan a la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Si el <xref:System.Xml.XmlReader> no está situado en el elemento raíz, un <xref:System.Xml.Schema.XmlSchemaException> se inicia a menos que el elemento actual es un elemento. Si el elemento actual es un `xs:schema` elemento, se lee el documento de esquema en el <xref:System.Xml.Schema.XmlSchemaSet>; en caso contrario, un <xref:System.Xml.Schema.XmlSchemaException> se produce porque el esquema no es válido.  
  
-   Si el <xref:System.Xml.XmlReader> se coloca en una secuencia de nodos XML, se agrega solo el primer nodo de la secuencia.  
  
-   Si el esquema se creó desde un <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> llamada al método, el valor de la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> propiedad se omite porque no se aplica un procesamiento de esquema en línea para los documentos de esquema XML de W3C.  
  
-   El <xref:System.Xml.XmlResolver> propiedad de la <xref:System.Xml.XmlReader> no se utiliza para resolver las referencias a ubicaciones de los espacios de nombres o el esquema de inclusión e importación de elementos. En su lugar, el <xref:System.Xml.XmlResolver> propiedad de la <xref:System.Xml.Schema.XmlSchemaSet> se utiliza.  
  
-   El <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método de la <xref:System.Xml.Schema.XmlSchemaSet> tiene la capacidad para usar el espacio de nombres de destino definido en un esquema, en lugar de requerir el espacio de nombres de destino se especifica como un parámetro cuando el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> se llama al método. Especificar `null` o <xref:System.String.Empty?displayProperty=nameWithType> a la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método indica a la <xref:System.Xml.Schema.XmlSchemaSet> para usar el espacio de nombres de destino definido en el esquema. Para obtener un ejemplo de este comportamiento, consulte el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
 La funcionalidad restante de este método es idéntica de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método.  
  
   
  
## Examples  
 El ejemplo de código siguiente agrega el esquema books.xsd incluido en el <xref:System.Xml.XmlTextReader> con un espacio de nombres de destino de `http://www.contoso.com/books` a la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El esquema no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.XmlReader" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> para <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> para <see cref="T:System.Xml.Schema.XmlSchemaSet" />. El valor predeterminado es una instancia de <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> con la propiedad <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> establecida en <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaCompilationSettings> clase especifica las opciones de validación de atribución de partícula única (UPA) para el <xref:System.Xml.Schema.XmlSchemaSet>. Para obtener más información acerca de cómo habilitar comprobaciones de validación de UPA, vea el <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compila los esquemas del lenguaje de definición de esquemas XML (XSD) agregados a <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en un esquema lógico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama automáticamente cuando es necesaria la validación y el <xref:System.Xml.Schema.XmlSchemaSet> no previamente compilada - por ejemplo, cuando un <xref:System.Xml.Schema.XmlSchemaSet> se utiliza como entrada para crear un <xref:System.Xml.XmlReader> objeto en el <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> propiedad de un <xref:System.Xml.XmlReaderSettings> objeto. Si el <xref:System.Xml.Schema.XmlSchemaSet> está ya en el estado compilado, este método no volverá a compilar los esquemas. Si este método se ejecuta correctamente, el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad está establecida en `true`.  
  
 Los esquemas que se han compilado previamente por un <xref:System.Xml.Schema.XmlSchemaSet> no se vuelven a compilar. Sin embargo, los esquemas que se compilaron mediante el <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> método de la <xref:System.Xml.Schema.XmlSchema> se volverá a compilar.  
  
> [!NOTE]
>  Se debe llamar a la <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método si ha cambiado un esquema (o uno de sus importaciones/incluye) después de agregarlo a la <xref:System.Xml.Schema.XmlSchemaSet>. El <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método comprobará el esquema de la validez de la estructura según las reglas de esquema XML de W3C. Sin embargo, no realizará una comprobación de validación completa. También resolverá las referencias a componentes del esquema interno y externo. Cualquier esquema importado o incluido que se recupera correctamente también se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>. Los esquemas importados se agregan como independiente <xref:System.Xml.Schema.XmlSchema> objetos mientras se incluyen los esquemas se convierten en parte de la inclusión de <xref:System.Xml.Schema.XmlSchema>. Si es correcta, la llamada a volver a procesar el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad está establecida en false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Se ha producido un error al validar y compilar los esquemas de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica si un esquema del lenguaje de definición de esquemas XML (XSD) está en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propiedad de esquema <paramref name="targetNamespace" />.</param>
        <summary>Indica si un esquema del lenguaje de definición de esquemas XML (XSD) con el URI del espacio de nombres de destino especificado está en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" /> si hay un esquema con el URI de espacio de nombres de destino especificado en <see cref="T:System.Xml.Schema.XmlSchemaSet" />; en el caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los esquemas que se agregan indirectamente a la <xref:System.Xml.Schema.XmlSchemaSet> se detectan mediante el <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> método; por ejemplo, los esquemas importados. Como resultado, si un esquema para el `http://www.contoso.com/retail` espacio de nombres que importa un esquema para el `http://www.contoso.com/books` espacio de nombres se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>, al llamar a <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> con `http://www.contoso.com/books` como un parámetro, devuelve `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objeto <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Indica si el objeto <see cref="T:System.Xml.Schema.XmlSchema" /> especificado del lenguaje de definición de esquemas XML (XSD) está en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Xml.Schema.XmlSchema" /> está en el <see cref="T:System.Xml.Schema.XmlSchemaSet" />; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Matriz en la que se van a copiar los objetos.</param>
        <param name="index">Índice de la matriz en la que se iniciará la copia.</param>
        <summary>Copia todos los objetos <see cref="T:System.Xml.Schema.XmlSchema" /> de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en la matriz especificada a partir del índice indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente, se copian todos los <xref:System.Xml.Schema.XmlSchema> objetos en el <xref:System.Xml.Schema.XmlSchemaSet> a una matriz de <xref:System.Xml.Schema.XmlSchema> objetos.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de esquemas lógicos del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Número de esquemas lógicos que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si hay dos esquemas para el espacio de nombres `http://www.contoso.com` en el <xref:System.Xml.Schema.XmlSchemaSet>, el <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> propiedad devolverá 1, ya que los esquemas se tratan como un esquema único lógico para la validación. Sin embargo, si un esquema para el espacio de nombres `http://www.contoso.com/retail` importa un esquema para el `http://www.contoso.com/books` espacio de nombres, el valor de la <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> propiedad sería 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los atributos globales de todos los esquemas del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Colección de atributos globales.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los elementos globales de todos los esquemas del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Colección de elementos globales.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene todos los tipos simples y complejos de los esquemas del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>La colección de todos los tipos simples y complejos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> propiedad siempre devuelve un tipo que representa el `xs:anyType` tipo complejo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si los esquemas del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" /> han sido compilados.</summary>
        <value><see langword="true" /> si los esquemas de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> se han compilado desde la última vez que se agregó o quitó un esquema de <see cref="T:System.Xml.Schema.XmlSchemaSet" />; de lo contrario, devolverá <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> no resulta afectada si se editan los esquemas mientras está en <xref:System.Xml.Schema.XmlSchemaSet>. No se realiza un seguimiento de las actualizaciones de los esquemas individuales en <xref:System.Xml.Schema.XmlSchemaSet>. Como resultado, la propiedad <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> puede ser `true` aunque se haya modificado uno de los esquemas contenidos en <xref:System.Xml.Schema.XmlSchemaSet>, siempre y cuando no se hayan agregado ni quitado esquemas de <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Para obtener un ejemplo de la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad, vea el <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Xml.XmlNameTable" /> predeterminado que utiliza <see cref="T:System.Xml.Schema.XmlSchemaSet" /> al cargar los nuevos esquemas del lenguaje de definición de esquemas XML (XSD).</summary>
        <value>Tabla de objetos en forma de cadena subdividida.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se va a quitar de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Quita el esquema del lenguaje de definición de esquemas XML (XSD) especificado de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se ha eliminado de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> o el valor <see langword="null" /> si no se ha encontrado el esquema en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quitar un esquema desde el <xref:System.Xml.Schema.XmlSchemaSet> establece la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se ilustra cómo agregar varios esquemas a un <xref:System.Xml.Schema.XmlSchemaSet>, a continuación, quitar uno de los esquemas mediante la <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> método.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El esquema no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se va a quitar de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Quita el esquema del lenguaje de definición de esquemas XML (XSD) especificado y todos los esquemas que importa de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" /> si el objeto <see cref="T:System.Xml.Schema.XmlSchema" /> y todas sus importaciones se han eliminado correctamente; de lo contrario, devuelve <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> método quita el esquema especificado y todos los esquemas que importa desde el <xref:System.Xml.Schema.XmlSchemaSet>, siempre y cuando no hay ninguna dependencia en el esquema o sus esquemas importados. Si existen dependencias en el esquema o sus esquemas importados en el <xref:System.Xml.Schema.XmlSchemaSet>, nada se quita y <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> devuelve `false`. Si `false` se devuelve y una <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> está definido, se envía una advertencia al controlador de eventos que describen las dependencias.  
  
 Si el esquema especificado importa otros esquemas y el esquema especificado se quitó anteriormente con el <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> método, el <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> método no quitará los esquemas importados y devolverá `false`. Por ejemplo, si `parentSchema` importa `childSchema1` y `childSchema2` solo quitará el código siguiente `parentSchema`, pero no importados `childSchema1` y `childSchema2` esquemas:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 El código siguiente se quitará el `parentSchema` y los esquemas importados:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 El <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> método no tiene ningún efecto sobre el estado de la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ilustra cómo agregar varios esquemas a un <xref:System.Xml.Schema.XmlSchemaSet>, a continuación, quitar uno de los esquemas y todos los esquemas importa mediante el <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> método.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se pasa como parámetro es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Esquema que se va a volver a procesar.</param>
        <summary>Vuelve a procesar un esquema del lenguaje de definición de esquemas XML (XSD) que ya existe en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> si el esquema es válido. Si el esquema no es válido y se especifica un <see cref="T:System.Xml.Schema.ValidationEventHandler" />, se devolverá el valor <see langword="null" /> y se iniciará el evento de validación adecuado. De lo contrario, se produce una excepción <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reprocesamiento de un esquema realiza todos los pasos de preprocesamiento realizados en un esquema cuando la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> se llama al método. Si la llamada a <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> es correcta, el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad está establecida en `false`.  
  
 Se debe utilizar el método de volver a procesar después un esquema en el <xref:System.Xml.Schema.XmlSchemaSet> se ha modificado después el <xref:System.Xml.Schema.XmlSchemaSet> haya realizado la compilación.  
  
> [!NOTE]
>  Se debe llamar a la <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método si ha cambiado un esquema (o uno de sus importaciones/incluye) después de agregarlo a la <xref:System.Xml.Schema.XmlSchemaSet>. El <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método comprobará el esquema de la validez de la estructura según las reglas de esquema XML de W3C. Sin embargo, no realizará una comprobación de validación completa. También resolverá las referencias a componentes del esquema interno y externo. Cualquier esquema importado o incluido que se recupera correctamente también se agrega a la <xref:System.Xml.Schema.XmlSchemaSet>. Los esquemas importados se agregan como independiente <xref:System.Xml.Schema.XmlSchema> objetos mientras se incluyen los esquemas se convierten en parte de la inclusión de <xref:System.Xml.Schema.XmlSchema>. Si es correcta, la llamada a volver a procesar el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad está establecida en false.  
  
   
  
## Examples  
 El ejemplo siguiente ilustra el reprocesamiento de un esquema agregado a la <xref:System.Xml.Schema.XmlSchemaSet>. Después de la <xref:System.Xml.Schema.XmlSchemaSet> se compila utilizando el <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> método y el esquema agregado a la <xref:System.Xml.Schema.XmlSchemaSet> se modifica, el <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad se establecerá en `true`, incluso aunque un esquema en el <xref:System.Xml.Schema.XmlSchemaSet> se ha modificado. Una llamada a la <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> método realiza todo el procesamiento previo mediante el <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> método y los conjuntos de la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propiedad `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El esquema no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se pasa como parámetro es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se pasa como parámetro no se encuentra todavía en <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una colección de esquemas del lenguaje de definición de esquemas XML (XSD) de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una colección de todos los esquemas del lenguaje de definición de esquemas XML (XSD) de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objeto <see cref="T:System.Collections.ICollection" /> que contiene todos los esquemas que se han agregado a <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Si no se ha agregado ningún esquema a <see cref="T:System.Xml.Schema.XmlSchemaSet" />, se devuelve un objeto <see cref="T:System.Collections.ICollection" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve esquemas que se han agregado indirectamente a la <xref:System.Xml.Schema.XmlSchemaSet> porque han sido importados.  
  
> [!NOTE]
>  El <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> método es el equivalente de la <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> método para el atributo obsolete <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo recorrer en iteración todos los esquemas en el <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propiedad de esquema <paramref name="targetNamespace" />.</param>
        <summary>Devuelve una colección de todos los esquemas del lenguaje de definición de esquemas XML (XSD) que hay en <see cref="T:System.Xml.Schema.XmlSchemaSet" /> y que pertenecen al espacio de nombres especificado.</summary>
        <returns>Objeto <see cref="T:System.Collections.ICollection" /> que contiene todos los esquemas agregados a la clase<see cref="T:System.Xml.Schema.XmlSchemaSet" /> que pertenece al espacio de nombres especificado. Si no se ha agregado ningún esquema a <see cref="T:System.Xml.Schema.XmlSchemaSet" />, se devuelve un objeto <see cref="T:System.Collections.ICollection" /> vacío.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `targetNamespace` parámetro es `null` o <xref:System.String.Empty>, a continuación, se devuelven todos los esquemas sin un espacio de nombres.  
  
 Este método devuelve esquemas que se han agregado indirectamente a la <xref:System.Xml.Schema.XmlSchemaSet> porque han sido importados.  
  
> [!NOTE]
>  El <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> método es el equivalente de la <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> método para el atributo obsolete <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo recorrer en iteración todos los esquemas en el `http://www.contoso.com/books` espacio de nombres en el <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica un controlador de eventos para recibir información sobre los errores de validación de esquemas del lenguaje de definición de esquemas XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establece un controlador de eventos para recibir información sobre los errores de validación de esquema cuando la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> o <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> métodos de la <xref:System.Xml.Schema.XmlSchemaSet> se denominan.  
  
 Si no se define un controlador de eventos, un <xref:System.Xml.Schema.XmlSchemaException> se produce en los errores de validación donde el <xref:System.Xml.Schema.XmlSeverityType> es <xref:System.Xml.Schema.XmlSeverityType.Error>. No se inician excepciones para errores de validación con un <xref:System.Xml.Schema.XmlSeverityType> de <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la adición de un <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> para capturar los errores y advertencias al validar un documento XML con un esquema.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 En el ejemplo se utiliza el archivo books.xml como entrada.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 El ejemplo utiliza el archivo books.xsd como entrada.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece el objeto <see cref="T:System.Xml.XmlResolver" /> utilizado para resolver espacios de nombres o ubicaciones a las que se hace referencia en los elementos de inclusión e importación de un esquema.</summary>
        <value>Establece el objeto <see cref="T:System.Xml.XmlResolver" /> utilizado para resolver los espacios de nombres y ubicaciones a las que se hace referencia en los elementos de inclusión e importación de un esquema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.XmlResolver> de un <xref:System.Xml.Schema.XmlSchemaSet> se utiliza para resolver espacios de nombres o ubicaciones que se hace referenciadas en incluyen e importación elementos de un esquema, siempre que se agrega un esquema utilizando la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> o <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> métodos.  
  
> [!IMPORTANT]
>  Espacios de nombres externos o las ubicaciones que se hace referenciadas en incluyen, importación y elementos de redefinición de un esquema se resuelven con respecto a la URI base del esquema que incluye o importa. Por ejemplo, si el URI base de inclusión o importación de esquema está vacío o `null`, las ubicaciones externas se resuelven con respecto al directorio actual. La <xref:System.Xml.XmlUrlResolver> clase se utiliza para resolver los esquemas externos de forma predeterminada. Para deshabilitar la resolución de inclusión, importación y volver a definir los elementos de un esquema, establezca el <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> propiedad `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>