<Type Name="XmlSchemaValidator" FullName="System.Xml.Schema.XmlSchemaValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e42b644b6a18b8b183950b5f469bb9479c97b88f" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46598349" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlSchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaValidator sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un motor de validación de esquema del lenguaje de definición de esquemas XML (XSD). La clase <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> no se puede heredar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   No utilizar esquemas desde orígenes desconocidos o que no se confía o ubicaciones. Si lo hace, compromete la seguridad del código.  
> -   Esquemas XML (incluidos los esquemas en línea) son intrínsecamente vulnerables a la denegación de servicio; no los acepta en escenarios de confianza.  
> -   Excepciones y mensajes de error de validación de esquema pueden exponer información confidencial sobre el modelo de contenido o las rutas de acceso URI para el archivo de esquema. Tenga cuidado de no exponer esta información a los llamadores de confianza.  
  
 La clase <xref:System.Xml.Schema.XmlSchemaValidator> incluye un mecanismo eficiente y de alto rendimiento para validar datos XML con esquemas XML mediante inserción. Por ejemplo, la clase <xref:System.Xml.Schema.XmlSchemaValidator> le permite validar un conjunto de información XML en el lugar sin tener que serializarla como un documento XML y, a continuación, volver a analizar el documento utilizando un sistema de lectura XML de validación. La <xref:System.Xml.Schema.XmlSchemaValidator> clase puede usarse para compilar motores de validación a través de orígenes de datos XML o como una forma de crear un escritor XML de validación.  
  
 Para obtener más información sobre la <xref:System.Xml.Schema.XmlSchemaValidator> de clases, vea el [validación basada en inserción de XmlSchemaValidator](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md) tema.  
  
> [!IMPORTANT]
>  El <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> y <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> marcas de validación de un <xref:System.Xml.Schema.XmlSchemaValidator> no son el objeto de conjunto sea predeterminado. Además, el <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> propiedad de un <xref:System.Xml.Schema.XmlSchemaValidator> objeto es `null` de forma predeterminada. Como resultado, los esquemas externos que se hace referenciados en incluyen, importaciones o redefine elementos no se resuelven de forma predeterminada.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="http://msdn.microsoft.com/library/911d4460-dd91-4958-85b2-2ca3299f9ec6">Validación basada en inserción de XmlSchemaValidator</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.IXmlNamespaceResolver namespaceResolver, valuetype System.Xml.Schema.XmlSchemaValidationFlags validationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable, schemas As XmlSchemaSet, namespaceResolver As IXmlNamespaceResolver, validationFlags As XmlSchemaValidationFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaValidator(System::Xml::XmlNameTable ^ nameTable, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::Xml::Schema::XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaValidator : System.Xml.XmlNameTable * System.Xml.Schema.XmlSchemaSet * System.Xml.IXmlNamespaceResolver * System.Xml.Schema.XmlSchemaValidationFlags -&gt; System.Xml.Schema.XmlSchemaValidator" Usage="new System.Xml.Schema.XmlSchemaValidator (nameTable, schemas, namespaceResolver, validationFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="validationFlags" Type="System.Xml.Schema.XmlSchemaValidationFlags" />
      </Parameters>
      <Docs>
        <param name="nameTable">Los objetos <see cref="T:System.Xml.XmlNameTable" /> contienen nombres de atributos y elementos en forma de cadenas subdivididas.</param>
        <param name="schemas">Objeto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contiene los esquemas del lenguaje de definición de esquemas XML (XSD) utilizado para la validación.</param>
        <param name="namespaceResolver">Objeto <see cref="T:System.Xml.IXmlNamespaceResolver" /> utilizado para resolver los espacios de nombres que se encuentran durante la validación.</param>
        <param name="validationFlags">Valor <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> que especifica las opciones de validación de esquemas.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Schema.XmlSchemaValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> constructor.  
  
-   El contenido de la <xref:System.Xml.Schema.XmlSchemaSet> parámetro se copian en una instancia interna <xref:System.Xml.Schema.XmlSchemaSet> objeto cuando la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> se establecen las opciones de validación. Como resultado, los cambios en la entrada <xref:System.Xml.Schema.XmlSchemaSet> objeto durante la validación no afectan al resultado de validación.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaSet> los parámetros especificados no se compilan, su <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> se llama al método.  
  
-   El <xref:System.Xml.IXmlNamespaceResolver> parámetro es especialmente importante para validar `xs:QName` tipos. El <xref:System.Xml.Schema.XmlSchemaValidator> clase no copia los espacios de nombres en el ámbito de la <xref:System.Xml.IXmlNamespaceResolver> objeto, sino que contiene una referencia a él. Esto permite nuevos espacios de nombres que se agregarán a la <xref:System.Xml.IXmlNamespaceResolver> objeto durante el proceso de validación.  
  
> [!IMPORTANT]
>  El <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> y <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> marcas de validación de un <xref:System.Xml.Schema.XmlSchemaValidator> no son el objeto de conjunto sea predeterminado. Además, el <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> propiedad de un <xref:System.Xml.Schema.XmlSchemaValidator> objeto es `null` de forma predeterminada. Como resultado, los esquemas externos que se hace referenciados en incluyen, importaciones o redefine elementos no se resuelven de forma predeterminada.  
  
   
  
## Examples  
 Para obtener un ejemplo de la <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> constructor, vea el <xref:System.Xml.Schema.XmlSchemaValidator> tema de referencia de clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o varios parámetros especificados son <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Se ha producido un error durante la compilación de los esquemas en el parámetro <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaSet" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="AddSchema">
      <MemberSignature Language="C#" Value="public void AddSchema (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSchema(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSchema (schema As XmlSchema)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSchema(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.AddSchema : System.Xml.Schema.XmlSchema -&gt; unit" Usage="xmlSchemaValidator.AddSchema schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objeto <see cref="T:System.Xml.Schema.XmlSchema" /> que se va a agregar al conjunto de esquemas utilizado para la validación.</param>
        <summary>Agrega un esquema del lenguaje de definición de esquemas XML (XSD) al conjunto de esquemas usado para la validación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> método.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> método puede utilizarse para simular el efecto de encontrarse un esquema XML en línea en el documento XML que se está validando.  
  
-   El espacio de nombres de destino del parámetro <xref:System.Xml.Schema.XmlSchema> no puede coincidir con el de ningún elemento o atributo que ya haya encontrado el objeto <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> no se establece la opción de validación, el <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> método no hace nada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <see cref="T:System.Xml.Schema.XmlSchema" /> especificado es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El espacio de nombres de destino del parámetro <see cref="T:System.Xml.Schema.XmlSchema" /> coincide con el de cualquier elemento o atributo que haya encontrado el objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">El parámetro <see cref="T:System.Xml.Schema.XmlSchema" /> no es válido.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchema" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="EndValidation">
      <MemberSignature Language="C#" Value="public void EndValidation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndValidation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndValidation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndValidation();" />
      <MemberSignature Language="F#" Value="member this.EndValidation : unit -&gt; unit" Usage="xmlSchemaValidator.EndValidation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza la validación y comprueba las restricciones de identidad de todo el documento XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A> método finaliza la validación y comprueba las restricciones de identidad de todo el documento XML si la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> se establece la opción de validación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Se ha encontrado un error de restricción de identidad en el documento XML.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedAttributes () As XmlSchemaAttribute()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaAttribute ^&gt; ^ GetExpectedAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedAttributes : unit -&gt; System.Xml.Schema.XmlSchemaAttribute[]" Usage="xmlSchemaValidator.GetExpectedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve los atributos esperados para el contexto del elemento actual.</summary>
        <returns>Matriz de los objetos <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> o matriz vacía si no hay ningún atributo esperado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> método.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> se llama al método inmediatamente después de la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> método, se devuelven todos los atributos que podrían aparecer en el documento XML.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> se llama al método después de una o varias llamadas a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método, se devuelven los atributos que aún no se han validado para el elemento actual.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedParticles">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedParticles () As XmlSchemaParticle()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaParticle ^&gt; ^ GetExpectedParticles();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedParticles : unit -&gt; System.Xml.Schema.XmlSchemaParticle[]" Usage="xmlSchemaValidator.GetExpectedParticles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaParticle[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve las partículas esperadas en el contexto del elemento actual.</summary>
        <returns>Matriz de objetos <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> o matriz vacía si no hay ninguna partícula esperada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las partículas válidas que puede devolver el método <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> son instancias de las clases <xref:System.Xml.Schema.XmlSchemaElement> y <xref:System.Xml.Schema.XmlSchemaAny>.  
  
 Cuando el compositor del modelo de contenido es `xs:sequence`, solo se devuelve la siguiente partícula de la secuencia. Si el compositor del modelo de contenido es `xs:all` o `xs:choice`, se devuelven todas las partículas válidas que pueden ir a continuación en el contexto del elemento actual.  
  
 Por ejemplo, en el esquema del lenguaje de definición de esquemas XML (XSD) y en el documento XML que sigue, después de validar el elemento `book`, el elemento `book` es el contexto del elemento actual. El método <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> devuelve una matriz que contiene un solo objeto <xref:System.Xml.Schema.XmlSchemaElement> que representa el elemento `title`. Cuando el contexto de validación es el elemento `title`, el método <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> devuelve una matriz vacía. Si se llama al método <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> después de que se haya validado el elemento `title`, pero antes de validar el elemento `description`, devuelve una matriz que contiene un solo objeto <xref:System.Xml.Schema.XmlSchemaElement> que representa el elemento `description`. Si se llama al método <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> después de que se haya validado el elemento `description`, devuelve una matriz que contiene un solo objeto <xref:System.Xml.Schema.XmlSchemaAny> que representa el comodín.  
  
```vb  
Dim reader As XmlReader =  XmlReader.Create("input.xml")   
  
Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()   
schemaSet.Add(Nothing, "schema.xsd")  
Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)   
  
Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)  
validator.Initialize()  
  
validator.ValidateElement("book", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("title", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
validator.ValidateEndElement(Nothing)  
  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("description", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()  
    Console.WriteLine(particle.GetType())  
Next  
  
validator.ValidateElement("namespace", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlReader reader = XmlReader.Create("input.xml");  
  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize();  
  
validator.ValidateElement("book", "", null);  
  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("title", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("description", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())  
{  
    Console.WriteLine(particle.GetType());  
}  
  
validator.ValidateElement("namespace", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
validator.ValidateEndElement(null);  
```  
  
 En el ejemplo se toma como entrada el siguiente XML.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="book">`  
  
 `<xs:complexType>`  
  
 `<xs:sequence>`  
  
 `<xs:element name="title" type="xs:string" />`  
  
 `<xs:element name="description" type="xs:string" />`  
  
 `<xs:any processContents ="lax"/>`  
  
 `</xs:sequence>`  
  
 `</xs:complexType>`  
  
 `</xs:element>`  
  
 `</xs:schema>`  
  
 En el ejemplo se toma como entrada el siguiente esquema XSD.  
  
 `<book>`  
  
 `<title>My Book</title>`  
  
 `<description>My Book's Description</description>`  
  
 `<namespace>System.Xml.Schema</namespace>`  
  
 `</book>`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaParticle" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAny" />
      </Docs>
    </Member>
    <Member MemberName="GetUnspecifiedDefaultAttributes">
      <MemberSignature Language="C#" Value="public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetUnspecifiedDefaultAttributes(class System.Collections.ArrayList defaultAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetUnspecifiedDefaultAttributes (defaultAttributes As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetUnspecifiedDefaultAttributes(System::Collections::ArrayList ^ defaultAttributes);" />
      <MemberSignature Language="F#" Value="member this.GetUnspecifiedDefaultAttributes : System.Collections.ArrayList -&gt; unit" Usage="xmlSchemaValidator.GetUnspecifiedDefaultAttributes defaultAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultAttributes" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="defaultAttributes">
          <see cref="T:System.Collections.ArrayList" /> que se va a rellenar con los objetos <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> de los atributos que no se hayan encontrado durante la validación en el contexto del elemento.</param>
        <summary>Valida restricciones de identidad en los atributos predeterminados y rellena la lista <see cref="T:System.Collections.ArrayList" /> especificada con objetos <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> de todos los atributos con valores predeterminados que no se hayan validado previamente usando el método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> en el contexto del elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> debe llamar al método después de validar todos los atributos para el elemento actual con el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método. El método <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> se debería utilizar para determinar qué atributos predeterminados se van a insertar en el documento XML que se está validando.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa el estado del objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberSignature Language="F#" Value="member this.Initialize : unit -&gt; unit" Usage="xmlSchemaValidator.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa el estado del objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> método sólo es válido si se llama inmediatamente después de la construcción de un <xref:System.Xml.Schema.XmlSchemaValidator> objeto o después de llamar a <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La llamada al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> es válida si se realiza inmediatamente después de la creación de un objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> o después de llamar sólo a <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(class System.Xml.Schema.XmlSchemaObject partialValidationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (partialValidationType As XmlSchemaObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Xml::Schema::XmlSchemaObject ^ partialValidationType);" />
      <MemberSignature Language="F#" Value="member this.Initialize : System.Xml.Schema.XmlSchemaObject -&gt; unit" Usage="xmlSchemaValidator.Initialize partialValidationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
      </Parameters>
      <Docs>
        <param name="partialValidationType">Objeto <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> o <see cref="T:System.Xml.Schema.XmlSchemaType" /> utilizado para inicializar el contexto de validación del objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> para realizar una validación parcial.</param>
        <summary>Inicializa el estado del objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> utilizando el objeto <see cref="T:System.Xml.Schema.XmlSchemaObject" /> especificado para la validación parcial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> que toma un objeto <xref:System.Xml.Schema.XmlSchemaObject> como parámetro inicializa un objeto <xref:System.Xml.Schema.XmlSchemaValidator> en su estado inicial para realizar una validación parcial.  
  
   
  
## Examples  
 En el siguiente ejemplo, se inicializa un <xref:System.Xml.Schema.XmlSchemaObject> para realizar una validación parcial utilizando el método <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>. Para pasar el elemento de esquema `orderNumber`, se selecciona por <xref:System.Xml.XmlQualifiedName> en la colección <xref:System.Xml.Schema.XmlSchemaObjectTable> que devuelve la propiedad <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A> del objeto <xref:System.Xml.Schema.XmlSchemaSet>. A continuación, el objeto <xref:System.Xml.Schema.XmlSchemaValidator> valida este elemento específico.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "schema.xsd")  
schemaSet.Compile()  
Dim nameTable As NameTable = New NameTable()  
Dim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  
  
Dim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  
validator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName("orderNumber")))  
  
validator.ValidateElement("orderNumber", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateText("123")  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
schemaSet.Compile();  
NameTable nameTable = new NameTable();  
XmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName("orderNumber")]);  
  
validator.ValidateElement("orderNumber", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateText("123");  
validator.ValidateEndElement(null);  
```  
  
 En el ejemplo, se toma como entrada el siguiente esquema XML.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="orderNumber" type="xs:int" />`  
  
 `</xs:schema>`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La llamada al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> es válida si se realiza inmediatamente después de la creación de un objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> o después de llamar sólo a <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <see cref="T:System.Xml.Schema.XmlSchemaObject" /> no es un objeto <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> ni <see cref="T:System.Xml.Schema.XmlSchemaType" />.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <see cref="T:System.Xml.Schema.XmlSchemaObject" /> no puede ser <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaObject" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaType" />
      </Docs>
    </Member>
    <Member MemberName="LineInfoProvider">
      <MemberSignature Language="C#" Value="public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.IXmlLineInfo LineInfoProvider" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property LineInfoProvider As IXmlLineInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::IXmlLineInfo ^ LineInfoProvider { System::Xml::IXmlLineInfo ^ get(); void set(System::Xml::IXmlLineInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LineInfoProvider : System.Xml.IXmlLineInfo with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.IXmlLineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la información del número de línea del nodo XML que se está validando.</summary>
        <value>Un objeto <see cref="T:System.Xml.IXmlLineInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Se notifica la información de línea por cualquier <xref:System.Xml.Schema.XmlSchemaValidationException> produce durante el proceso de validación.  
  
-   El valor predeterminado <xref:System.Xml.IXmlLineInfo> objeto devuelto por la <xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A> propiedad devuelve 0 para el <xref:System.Xml.IXmlLineInfo.LineNumber%2A> y <xref:System.Xml.IXmlLineInfo.LinePosition%2A> propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="SkipToEndElement">
      <MemberSignature Language="C#" Value="public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToEndElement (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.SkipToEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.SkipToEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen si el contenido del elemento actual se omite correctamente. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Omite la validación del contenido del elemento actual y prepara el objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> para validar contenido en el contexto del elemento primario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> método.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> método omite la validación del contenido del elemento actual y prepara el <xref:System.Xml.Schema.XmlSchemaValidator> de objeto para validar el contenido en el contexto del elemento primario; es equivalente a omitir la validación para todos los elementos secundarios del elemento actual y, a continuación, una llamada a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método.  
  
-   Si el contenido del elemento actual se omite correctamente, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
> [!NOTE]
>  Se notifica ningún error de validación en el contenido se omitió.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> en la secuencia correcta. Por ejemplo, al llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public Uri SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceUri : Uri with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el URI de origen del nodo XML que se está validando.</summary>
        <value>Objeto <see cref="T:System.Uri" /> que representa el URI de origen del nodo XML que se está validando; el valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   El origen de URI se notifica por cualquier <xref:System.Xml.Schema.XmlSchemaValidationException> produce durante el proceso de validación.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A> no está establecida la propiedad, el nombre de archivo para el documento XML es <xref:System.String.Empty> en mensajes de error de validación.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Valida el atributo en el contexto del elemento actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, string attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As String, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::String ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * string * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Nombre local del atributo que se va a validar.</param>
        <param name="namespaceUri">URI del espacio de nombres del atributo que se va a validar.</param>
        <param name="attributeValue">Valor del atributo que se va a validar.</param>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen si la validación del atributo se realiza correctamente. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Valida el nombre del atributo, el URI del espacio de nombres y el valor en el contexto del elemento actual.</summary>
        <returns>Valor del atributo validado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> debe llamar al método después de validar todos los atributos para el elemento actual con el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método.  
  
-   Si un <xref:System.Xml.Schema.XmlSchemaAttribute> objeto se pasó a la <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> método, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método valida el atributo contra el <xref:System.Xml.Schema.XmlSchemaAttribute> objeto.  
  
-   Si el atributo se valida correctamente en el contexto del elemento actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El atributo no es válido en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> en la secuencia correcta. Por ejemplo, al llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Uno o varios parámetros especificados son <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, class System.Xml.Schema.XmlValueGetter attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As XmlValueGetter, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlValueGetter ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * System.Xml.Schema.XmlValueGetter * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.Xml.Schema.XmlValueGetter" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Nombre local del atributo que se va a validar.</param>
        <param name="namespaceUri">URI del espacio de nombres del atributo que se va a validar.</param>
        <param name="attributeValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> que se usa para pasar el valor del atributo como tipo de Common Language Runtime (CLR) compatible con el tipo del lenguaje de definición de esquemas XML (XSD) del atributo.</param>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen si la validación del atributo se realiza correctamente. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Valida el nombre del atributo, el URI del espacio de nombres y el valor en el contexto del elemento actual.</summary>
        <returns>Valor del atributo validado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> debe llamar al método después de validar todos los atributos para el elemento actual con el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método.  
  
-   Si un <xref:System.Xml.Schema.XmlSchemaAttribute> objeto se pasó a la <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> método, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> método valida el atributo contra el <xref:System.Xml.Schema.XmlSchemaAttribute> objeto.  
  
-   Si el atributo se valida correctamente en el contexto del elemento actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El atributo no es válido en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> en la secuencia correcta. Por ejemplo, al llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Uno o varios parámetros especificados son <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Valida el elemento en el contexto actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Nombre local del elemento que se va a validar.</param>
        <param name="namespaceUri">URI del espacio de nombres del elemento que se va a validar.</param>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen al realizar correctamente la validación del nombre del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Valida el elemento en el contexto actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> método.  
  
-   Si el nombre del elemento se valida correctamente en el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
-   Si el nombre del elemento o cualquiera de sus atributos no son válido el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>; de lo contrario el <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El nombre del elemento no es válido en el contexto actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> en la secuencia correcta. Por ejemplo, se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo, xsiType As String, xsiNil As String, xsiSchemaLocation As String, xsiNoNamespaceSchemaLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::String ^ xsiType, System::String ^ xsiNil, System::String ^ xsiSchemaLocation, System::String ^ xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo * string * string * string * string -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo, xsiType, xsiNil, xsiSchemaLocation, xsiNoNamespaceSchemaLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="xsiType" Type="System.String" />
        <Parameter Name="xsiNil" Type="System.String" />
        <Parameter Name="xsiSchemaLocation" Type="System.String" />
        <Parameter Name="xsiNoNamespaceSchemaLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nombre local del elemento que se va a validar.</param>
        <param name="namespaceUri">URI del espacio de nombres del elemento que se va a validar.</param>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen al realizar correctamente la validación del nombre del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <param name="xsiType">Valor del atributo <c>xsi:Type</c> del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <param name="xsiNil">Valor del atributo <c>xsi:Nil</c> del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <param name="xsiSchemaLocation">Valor del atributo <c>xsi:SchemaLocation</c> del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <param name="xsiNoNamespaceSchemaLocation">Valor del atributo <c>xsi:NoNamespaceSchemaLocation</c> del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Valida el elemento en el contexto actual con los valores de atributo <c>xsi:Type</c>, <c>xsi:Nil</c>, <c>xsi:SchemaLocation</c> y <c>xsi:NoNamespaceSchemaLocation</c> especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> método.  
  
-   Si el nombre del elemento se valida correctamente en el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
-   Si el nombre del elemento o cualquiera de sus atributos no son válido en el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>; de lo contrario el <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> valor no se pasó como un parámetro a la <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> constructor, `xsi:SchemaLocation` y `xsi:NoNamespaceSchemaLocation` se omiten los valores de atributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El nombre del elemento no es válido en el contexto actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> en la secuencia correcta. Por ejemplo, se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEndElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Comprueba si el contenido de texto del elemento es válido según su tipo de datos para los elementos con contenido simple y si el contenido del elemento actual está completo para los elementos con contenido complejo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen si la validación del elemento se realiza correctamente. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Comprueba si el contenido de texto del elemento es válido según su tipo de datos para los elementos con contenido simple y si el contenido del elemento actual está completo para los elementos con contenido complejo.</summary>
        <returns>Valor de texto con tipo analizado del elemento si el contenido de éste es simple.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método.  
  
-   Para los elementos con contenido simple, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método comprueba que el contenido de texto del elemento es válido según su tipo de datos y devuelve el valor con tipo analizado. El contenido de texto del elemento se obtiene de los resultados de las llamadas anteriores a <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>.  
  
-   Para los elementos con contenido complejo, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método comprueba si el contenido del elemento actual está completo.  
  
-   Si el elemento tiene un valor predeterminado, el valor devuelto desde el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método es el valor predeterminado para el elemento.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidator> objeto se construyó con el <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> valor como un parámetro, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método comprueba las reglas de la restricción de identidad (si existe) que se aplican al elemento.  
  
-   Si el elemento se valida correctamente en el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El contenido del elemento no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> en la secuencia correcta. Por ejemplo, si se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo, typedValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::Object ^ typedValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo * obj -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement (schemaInfo, typedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen al realizar correctamente la validación del contenido del texto del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <param name="typedValue">Contenido del texto con tipo del elemento.</param>
        <summary>Comprueba si el contenido del texto del elemento especificado es válido según su tipo de datos.</summary>
        <returns>Contenido del texto con tipo analizado del elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Si va a validar contra la `xs:key`, `xs:keyref`, o `xs:unique` restricciones de identidad, no use el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> sobrecarga del método. En su lugar, llame a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método y pásele el valor del elemento. A continuación, llame a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> sobrecarga del método que toma <xref:System.Xml.Schema.XmlSchemaInfo> como argumento, para comprobar que el contenido de texto del elemento es válido según su tipo de datos.  
  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método.  
  
-   Para los elementos con contenido simple, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType> método comprueba que el contenido de texto del elemento es válido según su tipo de datos y devuelve el valor con tipo analizado. Se obtiene el contenido de texto del elemento de contenido con tipo pasado como parámetro.  
  
-   Si las llamadas a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método se realizaron anteriormente, un <xref:System.InvalidOperationException> se produce.  
  
-   Si el elemento tiene contenido complejo un <xref:System.InvalidOperationException> se produce.  
  
-   Si el <xref:System.Xml.Schema.XmlSchemaValidator> objeto se construyó con el <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> valor como un parámetro, el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> método comprueba las reglas de la restricción de identidad (si existe) que se aplican al elemento.  
  
-   Si el elemento se valida correctamente en el contexto actual, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, y <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedades se establecen con los resultados de la validación.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">El contenido del texto del elemento no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">No se ha llamado al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> utilizando la secuencia correcta (por ejemplo, si se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />), se han realizado llamadas al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> anteriormente o el contenido del elemento es complejo.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro del contenido del texto con tipo no puede ser <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndOfAttributes">
      <MemberSignature Language="C#" Value="public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEndOfAttributes(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEndOfAttributes (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEndOfAttributes(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndOfAttributes : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateEndOfAttributes schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Objeto <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> cuyas propiedades se establecen al comprobar satisfactoriamente que están presentes todos los atributos necesarios en el contexto del elemento. Este parámetro puede ser <see langword="null" />.</param>
        <summary>Comprueba si todos los atributos requeridos del contexto del elemento están presentes y prepara el objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> para validar el contenido secundario del elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> método.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> siempre se debe llamar al método antes de <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>.  
  
-   El <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> método debe llamarse antes de continuar con la validación de contenido de un elemento.  
  
-   Si todos los atributos necesarios en el contexto del elemento están presentes, el <xref:System.Xml.Schema.XmlSchemaInfo> del objeto (si se especifica) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> propiedad está establecida en <xref:System.Xml.Schema.XmlSchemaValidity.Valid>.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">No se han encontrado uno o varios los atributos necesarios en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> en la secuencia correcta. Por ejemplo, al llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> después de llamar a <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Uno o varios parámetros especificados son <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateText">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Valida si se permite texto en el contexto del elemento actual y acumula el texto para validar si el elemento actual tiene contenido simple.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : string -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see langword="string" /> de texto que se va a validar en el contexto del elemento actual.</param>
        <summary>Valida si la cadena <see langword="string" /> de texto especificada se permite en el contexto del elemento actual y acumula el texto para la validación si el contenido del elemento actual es simple.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método.  
  
-   Si el elemento tiene contenido simple, el texto `string` especificado se concatena en cada llamada a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método hasta la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> se llama al método. Cuando el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> se llama al método, se valida todo el texto.  
  
-   Si el elemento tiene contenido complejo, se produce ninguna concatenación de texto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">La cadena <see langword="string" /> de texto especificada no se permite en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> en la secuencia correcta. Por ejemplo, se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro de la cadena <see langword="string" /> de texto no puede ser <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> que se usa para pasar el valor de texto como tipo de Common Language Runtime (CLR) compatible con el tipo del lenguaje de definición de esquemas XML (XSD) del atributo.</param>
        <summary>Valida si el texto que devuelve el objeto <see cref="T:System.Xml.Schema.XmlValueGetter" /> especificado se permite en el contexto del elemento actual y acumula el texto para la validación si el contenido del elemento actual es simple.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes son notas importantes a tener en cuenta cuando se usa el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método.  
  
-   Si el elemento tiene contenido simple, el texto `string` especificado se concatena en cada llamada a la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> método hasta la <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> se llama al método. Cuando el <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> se llama al método, se valida todo el texto.  
  
-   Si el elemento tiene contenido complejo, se produce ninguna concatenación de texto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">La cadena <see langword="string" /> de texto especificada no se permite en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> en la secuencia correcta. Por ejemplo, se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro de la cadena <see langword="string" /> de texto no puede ser <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateWhitespace">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Valida si se permite el espacio en blanco en el contexto del elemento actual y acumula el espacio en blanco para la validación si el contenido del elemento actual es simple.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : string -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see langword="string" /> de espacio en blanco que se va a validar en el contexto del elemento actual.</param>
        <summary>Valida si se permite el espacio en blanco de la cadena <see langword="string" /> especificada en el contexto del elemento actual y acumula el espacio en blanco para la validación si el contenido del elemento actual es simple.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">No se permite el espacio en blanco en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> en la secuencia correcta. Por ejemplo, si se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> que se usa para pasar el valor de espacio en blanco como tipo de Common Language Runtime (CLR) compatible con el tipo del lenguaje de definición de esquemas XML (XSD) del atributo.</param>
        <summary>Valida si se permite el espacio en blanco que devuelve el objeto <see cref="T:System.Xml.Schema.XmlValueGetter" /> especificado en el contexto del elemento actual y acumula el espacio en blanco para la validación si el contenido del elemento actual es simple.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">No se permite el espacio en blanco en el contexto del elemento actual.</exception>
        <exception cref="T:System.InvalidOperationException">No se llamó al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> en la secuencia correcta. Por ejemplo, si se llama al método <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> después de llamar a <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.ValidationEventHandler" /> que recibe advertencias y errores detectados durante la validación del esquema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay ningún <xref:System.Xml.Schema.ValidationEventHandler> se especifica, una <xref:System.Xml.Schema.XmlSchemaValidationException> se produce para todos los errores de validación de esquemas con un <xref:System.Xml.Schema.XmlSeverityType> valor <xref:System.Xml.Schema.XmlSeverityType.Error>. Un <xref:System.Xml.Schema.XmlSchemaValidationException> no se produce para las advertencias de validación con un <xref:System.Xml.Schema.XmlSeverityType> valor <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 El siguiente ejemplo valida el `contosoBooks.xml` archivo contra el `contosoBooks.xsd` esquema. El ejemplo utiliza la clase <xref:System.Xml.Serialization.XmlSerializer> para deserializar el archivo `contosoBooks.xml` y pasar el valor de los nodos a los métodos de la clase <xref:System.Xml.Schema.XmlSchemaValidator>.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 En el ejemplo se toma como entrada el archivo `contosoBooks.xml`.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 En el ejemplo también se toma como entrada el archivo `contosoBooks.xsd`.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventSender">
      <MemberSignature Language="C#" Value="public object ValidationEventSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ValidationEventSender" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationEventSender As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ValidationEventSender { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationEventSender : obj with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto enviado como objeto de remitente de un evento de validación.</summary>
        <value>
          <see cref="T:System.Object" />; el valor predeterminado es el objeto <see cref="T:System.Xml.Schema.XmlSchemaValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Para obtener un ejemplo de un evento de validación, vea el <xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler> eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece el objeto <see cref="T:System.Xml.XmlResolver" /> usado para resolver los elementos <c>xs:import</c> y <c>xs:include</c>, así como los atributos <c>xsi:schemaLocation</c> y <c>xsi:noNamespaceSchemaLocation</c>.</summary>
        <value>Objeto <see cref="T:System.Xml.XmlResolver" />; el valor predeterminado es un objeto <see cref="T:System.Xml.XmlUrlResolver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  El <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> y <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> marcas de validación de un <xref:System.Xml.Schema.XmlSchemaValidator> no son el objeto de conjunto sea predeterminado. Además, el <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> propiedad de un <xref:System.Xml.Schema.XmlSchemaValidator> objeto es `null` de forma predeterminada. Como resultado, los esquemas externos que se hace referenciados en incluyen, importaciones o redefine elementos no se resuelven de forma predeterminada.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>