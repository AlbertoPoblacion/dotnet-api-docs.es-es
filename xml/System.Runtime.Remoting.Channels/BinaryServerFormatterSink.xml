<Type Name="BinaryServerFormatterSink" FullName="System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3a6ca3d0edfeb864f51041f2c2b21f73be1057b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489479" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryServerFormatterSink : System.Runtime.Remoting.Channels.IChannelSinkBase, System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryServerFormatterSink extends System.Object implements class System.Runtime.Remoting.Channels.IChannelSinkBase, class System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryServerFormatterSink&#xA;Implements IChannelSinkBase, IServerChannelSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryServerFormatterSink : System::Runtime::Remoting::Channels::IChannelSinkBase, System::Runtime::Remoting::Channels::IServerChannelSink" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelSinkBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IServerChannelSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona la implementación de un receptor de formateador del servidor que utiliza <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La secuencia de solicitud se propaga desde el receptor de transporte del servidor a través de los receptores de canal del servidor hasta que llega al receptor de formateador apropiado. El receptor de formateador deserializa el mensaje y lo envía a través de la canalización. Se inserta un receptor de envío especial al final de la cadena de receptores de canal por el <xref:System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain%2A?displayProperty=nameWithType> método, que es llamado por canales del servidor para crear el servidor de cadenas de receptores de canal. Cuando el mensaje llega al receptor de envío, el receptor de envío pasa el mensaje a la infraestructura de comunicación remota.  
  
 En la tabla siguiente se muestra el receptor de propiedades de configuración que se pueden especificar para el proveedor de receptores actual.  
  
|Propiedad.|Descripción|  
|--------------|-----------------|  
|`includeVersions`|Especifica si el formateador va a incluir información de versiones. Valores `true` o `false`.|  
|`strictBinding`|Indica que un formateador de recepción intentará primero identificar el tipo mediante la información de versión completa si existe antes de usar solo el nombre de tipo y de ensamblado sin la información de versión. Valores `true` o `false`. El valor predeterminado de los dos formateadores proporcionados por el sistema es `false`.|  
|`typeFilterLevel`|Un valor de cadena que especifica el nivel de deserialización automática que intenta un canal de servidor. Los valores admitidos son `Low` (valor predeterminado) y `Full`. Para obtener más información acerca de los niveles de deserialización, vea [ &#91; \<topic://cpconAutomaticDeserializationInNETRemoting >&#93;](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).<br /><br /> Esta propiedad solo es compatible con .NET Framework versión 1.1 en las siguientes plataformas: Windows 98, Windows NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional y Windows Server 2003 familia.|  
  
> [!IMPORTANT]
>  El uso de una instancia de este objeto con datos no es de confianza o a través de un canal seguro es un riesgo de seguridad. Use este objeto solo con datos de confianza y a través de un canal seguro. Para obtener más información, consulte [validación de datos](https://www.owasp.org/index.php/Data_Validation).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryServerFormatterSink (System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol protocol, System.Runtime.Remoting.Channels.IServerChannelSink nextSink, System.Runtime.Remoting.Channels.IChannelReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol protocol, class System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class System.Runtime.Remoting.Channels.IChannelReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryServerFormatterSink(System::Runtime::Remoting::Channels::BinaryServerFormatterSink::Protocol protocol, System::Runtime::Remoting::Channels::IServerChannelSink ^ nextSink, System::Runtime::Remoting::Channels::IChannelReceiver ^ receiver);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="protocol" Type="System.Runtime.Remoting.Channels.BinaryServerFormatterSink+Protocol" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <Parameter Name="receiver" Type="System.Runtime.Remoting.Channels.IChannelReceiver" />
      </Parameters>
      <Docs>
        <param name="protocol">Objeto <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> que se utilizará con la instancia actual de <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <param name="nextSink">Siguiente receptor de la cadena de receptores de canal.</param>
        <param name="receiver">Indica el canal que recibirá los mensajes serializados mediante la nueva instancia de <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessResponse">
      <MemberSignature Language="C#" Value="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AsyncProcessResponse(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers, System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Pila de receptores que se dirige de vuelta al receptor de transporte de servidor.</param>
        <param name="state">Información asociada al receptor actual, generada en la solicitud y necesaria en la respuesta.</param>
        <param name="msg">Mensaje de respuesta.</param>
        <param name="headers">Encabezados que se van a agregar al mensaje devuelto que se dirige al cliente.</param>
        <param name="stream">Secuencia que se devuelve al receptor de transporte.</param>
        <summary>Solicita el procesamiento de la respuesta desde una llamada de método enviada de forma asincrónica.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Runtime.Remoting.Channels.ServerChannelSinkStack" />
        <altmember cref="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetResponseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetResponseStream(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResponseStream (sinkStack As IServerResponseChannelSinkStack, state As Object, msg As IMessage, headers As ITransportHeaders) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetResponseStream(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Pila de receptores que se dirige de vuelta al receptor de transporte de servidor.</param>
        <param name="state">Información asociada al receptor actual, generada en la solicitud y necesaria en la respuesta.</param>
        <param name="msg">Mensaje de respuesta que se va a serializar.</param>
        <param name="headers">Encabezados que se van a poner en la secuencia de respuesta al cliente.</param>
        <summary>Devuelve <see cref="T:System.IO.Stream" /> donde se va a serializar el mensaje de respuesta proporcionado.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> donde se va a serializar el mensaje de respuesta proporcionado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama cuando se debe crear una secuencia de respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextChannelSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextChannelSink As IServerChannelSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Channels::IServerChannelSink ^ NextChannelSink { System::Runtime::Remoting::Channels::IServerChannelSink ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IServerChannelSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el siguiente objeto <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> en la cadena de receptores.</summary>
        <value>Siguiente objeto <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> en la cadena de receptores.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage requestMsg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class System.IO.Stream requestStream, [out] class System.Runtime.Remoting.Messaging.IMessage&amp; responseMsg, [out] class System.Runtime.Remoting.Channels.ITransportHeaders&amp; responseHeaders, [out] class System.IO.Stream&amp; responseStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessMessage (sinkStack As IServerChannelSinkStack, requestMsg As IMessage, requestHeaders As ITransportHeaders, requestStream As Stream, ByRef responseMsg As IMessage, ByRef responseHeaders As ITransportHeaders, ByRef responseStream As Stream) As ServerProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Channels::ServerProcessing ProcessMessage(System::Runtime::Remoting::Channels::IServerChannelSinkStack ^ sinkStack, System::Runtime::Remoting::Messaging::IMessage ^ requestMsg, System::Runtime::Remoting::Channels::ITransportHeaders ^ requestHeaders, System::IO::Stream ^ requestStream, [Runtime::InteropServices::Out] System::Runtime::Remoting::Messaging::IMessage ^ % responseMsg, [Runtime::InteropServices::Out] System::Runtime::Remoting::Channels::ITransportHeaders ^ % responseHeaders, [Runtime::InteropServices::Out] System::IO::Stream ^ % responseStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.ServerProcessing</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerChannelSinkStack" />
        <Parameter Name="requestMsg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="requestHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="requestStream" Type="System.IO.Stream" />
        <Parameter Name="responseMsg" Type="System.Runtime.Remoting.Messaging.IMessage&amp;" RefType="out" />
        <Parameter Name="responseHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders&amp;" RefType="out" />
        <Parameter Name="responseStream" Type="System.IO.Stream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Pila de receptores de canal que llama al receptor actual.</param>
        <param name="requestMsg">Mensaje que contiene la solicitud.</param>
        <param name="requestHeaders">Encabezados que se recuperan del mensaje entrante del cliente.</param>
        <param name="requestStream">Secuencia que necesita procesarse y pasarse al receptor de deserialización.</param>
        <param name="responseMsg">El resultado que devuelve este método contiene un <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> con el mensaje de respuesta. Este parámetro se pasa sin inicializar.</param>
        <param name="responseHeaders">Cuando este método devuelve, contiene <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> con los encabezados que se van a agregar al mensaje devuelto que se dirige al cliente. Este parámetro se pasa sin inicializar.</param>
        <param name="responseStream">Cuando este método finaliza, contiene un <see cref="T:System.IO.Stream" /> dirigido al receptor de transporte. Este parámetro se pasa sin inicializar.</param>
        <summary>Solicita el procesamiento de mensajes del receptor actual.</summary>
        <returns>Valor de estado de <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> que proporciona información sobre cómo se procesa el mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La función del proxy consiste en convertir una llamada de método que se invoca en él en un mensaje. El mensaje, que implementa el <xref:System.Runtime.Remoting.Messaging.IMessage> de la interfaz, se pasa desde el final de cliente para el extremo de servidor mediante la invocación de <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> en los objetos de receptor de mensajes. Los receptores de mensajes están encadenados entre sí, lo que significa que cada receptor de mensajes es responsable de llamar a <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> en el siguiente receptor de mensajes después de que el receptor de mensajes actual ha finalizado su trabajo. Por ejemplo, un receptor de mensajes relacionados con la sincronización puede provocar un bloqueo adquirido o liberado e delega al receptor de mensajes descendentes.  
  
 Cuando el receptor de canal de formateador llegue un mensaje que necesita para ser enviados a través del canal, llama a <xref:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage%2A>, pasando el mensaje como un parámetro. El receptor de formateador, a continuación, crea la matriz del encabezado de transporte y llama <xref:System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream%2A> en el receptor de formateador. Esta llamada se envía por la cadena de receptores y cualquier receptor puede crear una secuencia de solicitud que se pasará de vuelta al receptor de formateador. Después de esta llamada, se serializa el mensaje, <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> se llama en la primera cadena en la cadena de receptores y se pasa el mensaje a los receptores de canal.  
  
 Después de que los receptores de canal reciben el mensaje, puede escribir datos en la secuencia, agregar encabezados a la matriz de encabezado y que se agreguen automáticamente a la pila de receptores antes de reenviar la llamada al siguiente receptor. Cuando la llamada llega al receptor de transporte al final de la cadena, el receptor de transporte envía los encabezados y mensaje serializado a través del canal al servidor, donde se invierte el proceso.  
  
 Cuando el mensaje llega a del servidor, el receptor de transporte recupera los encabezados y serializa el mensaje de la secuencia y reenvía a través de la cadena de receptores hasta que se alcanza el receptor de formateador. A continuación, el receptor de formateador deserializa el mensaje y lo reenvía a la infraestructura de comunicación remota. A continuación, la infraestructura de comunicación remota convierte el mensaje en una llamada al método y llama al objeto de servidor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Properties" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Properties { System::Collections::IDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una interfaz <see cref="T:System.Collections.IDictionary" /> de propiedades del receptor de canal actual.</summary>
        <value>Objeto <see cref="T:System.Collections.IDictionary" /> de propiedades del receptor de canales actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información, consulte [ &#91; \<topic://cpconchannelformatterconfigurationproperties >&#93;](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeFilterLevel">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeFilterLevel As TypeFilterLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::Formatters::TypeFilterLevel TypeFilterLevel { System::Runtime::Serialization::Formatters::TypeFilterLevel get(); void set(System::Runtime::Serialization::Formatters::TypeFilterLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de <see langword="TypeFilterLevel" /> de la deserialización automática que realiza <see langword="BinaryServerFormatterSink" />.</summary>
        <value>El objeto <see langword="TypeFilterLevel" /> que representa el nivel actual de deserialización automática.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores admitidos son `Low` (valor predeterminado) y `Full`. Para obtener más información acerca de los niveles de deserialización, vea [la deserialización automática en .NET Remoting](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>