<Type Name="SayAs" FullName="System.Speech.Synthesis.TtsEngine.SayAs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e4a42e4105c7182a6a8bee7f31dbc651bf24c007" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SayAs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit SayAs extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.SayAs" />
  <TypeSignature Language="VB.NET" Value="Public Class SayAs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SayAs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene información sobre el tipo de contenido (como divisa, fecha o dirección) o la construcción de lenguaje que determina cómo se debe hablar el texto.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SayAs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SayAs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SayAs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una instancia de la clase <c>SayAs</c>.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades de la <xref:System.Speech.Synthesis.TtsEngine.SayAs> clase se utiliza para obtener o establecer los valores de los atributos de la `say-as` elemento en el marcado SSML. El <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A> propiedad usa un <xref:System.Speech.Synthesis.TtsEngine.SayAs> instancia para informar a la <xref:System.Speech.Synthesis.SpeechSynthesizer> cómo hablar el texto contenido en el <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> propiedad de un <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Detail">
      <MemberSignature Language="C#" Value="public string Detail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Detail" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.Detail" />
      <MemberSignature Language="VB.NET" Value="Public Property Detail As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Detail { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor del atributo <c>detail</c> de un elemento <c>say-as</c> en el lenguaje de marcado SSML de un mensaje.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType> propiedad obtiene o establece el valor de la <xref:System.Speech.Synthesis.TtsEngine.SayAs.Detail%2A> propiedad en un <xref:System.Speech.Synthesis.TtsEngine.SayAs> instancia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Format" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Format { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor del atributo <c>format</c> de un elemento <c>say-as</c> en el lenguaje de marcado SSML de un mensaje.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType> propiedad obtiene o establece el valor de la <xref:System.Speech.Synthesis.TtsEngine.SayAs.Format%2A> propiedad en un <xref:System.Speech.Synthesis.TtsEngine.SayAs> instancia.  
  
 Por ejemplo, un símbolo del sistema puede contener la frase "el tiempo es `<say-as interpret-as="time"> 05:00 </say-as>`".  En este ejemplo, `05:00` puede pronunciarse como "cinco o ' Clock" o "cinco AM" o "AH quinientos". El <xref:System.Speech.Synthesis.TtsEngine.SayAs.Format%2A> propiedad permite que el valor de la `interpret-as` atributo extenderse para especificar el formato de hora que hablan. Si el valor de la `interpret-as` atributo es "tiempo: 24 horas", la <xref:System.Speech.Synthesis.SpeechSynthesizer> habla "¡oh quinientos". Si el valor de la `interpret-as` atributo es "hora de tiempo: 12", la <xref:System.Speech.Synthesis.SpeechSynthesizer> habla "cinco A M".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpretAs">
      <MemberSignature Language="C#" Value="public string InterpretAs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InterpretAs" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpretAs As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InterpretAs { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor del atributo <c>interpret-as</c> de un elemento <c>say-as</c> en el lenguaje de marcado SSML de un mensaje.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType> propiedad obtiene o establece el valor de la <xref:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs%2A> propiedad en un <xref:System.Speech.Synthesis.TtsEngine.SayAs> instancia.  
  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> utiliza el tipo de contenido indicado por la <xref:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs%2A> propiedad para determinar cómo representar el texto especificado.  
  
 Por ejemplo, el nombre Edgar puede pronunciarse como un nombre: "Mi nombre es Edgar". O podría escribirse con letras, tal como se especifica con el `interpret-as` atributo en esta frase: "Mi nombre es `<say-as interpret-as="spell-out"> Edgar </say-as>`." En este caso, el <xref:System.Speech.Synthesis.SpeechSynthesizer> habla Edgar como "E D G A R".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>