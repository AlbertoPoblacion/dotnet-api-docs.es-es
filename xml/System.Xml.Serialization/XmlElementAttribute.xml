<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43848081dc33d6961ce9a4aca16c8940293a9226" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720899" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indica que un campo público o una propiedad pública representa un elemento XML, cuando <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializa o deserializa el objeto que lo contiene.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Serialization.XmlElementAttribute> pertenece a una familia de atributos que controla cómo el <xref:System.Xml.Serialization.XmlSerializer> serializa o deserializa un objeto. Para obtener una lista completa de atributos similares, vea [atributos que controlan la serialización XML](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 Normalmente, un documento XML contiene elementos XML, cada uno de los cuales consta de tres partes: una etiqueta de apertura con los atributos posibles, una etiqueta de cierre y los datos entre las etiquetas. Etiquetas XML se pueden anidar, que es, los datos entre etiquetas también pueden ser elementos XML. Esta capacidad de un elemento que se encierra otra permite que el documento contenga varias jerarquías de datos. Un elemento XML también puede incluir atributos.  
  
 Aplicar el <xref:System.Xml.Serialization.XmlElementAttribute> a campos públicos o propiedades públicas de lectura/escritura para controlar las características de los elementos XML como el nombre de elemento y espacio de nombres.  
  
 La <xref:System.Xml.Serialization.XmlElementAttribute> puede aplicarse varias veces a un campo que devuelve una matriz de objetos. La finalidad de esto consiste en especificar (a través de la <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad) tipos diferentes que se pueden insertar en la matriz. Por ejemplo, la matriz en el siguiente código de C# acepta cadenas y números enteros.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 Esto da lugar a XML que puede ser similar a lo siguiente.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Tenga en cuenta que, al aplicar el <xref:System.Xml.Serialization.XmlElementAttribute> varias veces sin especificar un <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> valor de propiedad, los elementos se denominan con el tipo de los objetos aceptables.  
  
 Si aplica el <xref:System.Xml.Serialization.XmlElementAttribute> a un campo o propiedad que devuelve una matriz, los elementos de la matriz se codifican como una secuencia de elementos XML.  
  
 En cambio si un <xref:System.Xml.Serialization.XmlElementAttribute> no se aplica a este campo o propiedad, los elementos de la matriz se codifican como una secuencia de elementos, anidados bajo un elemento con el nombre del campo o propiedad. (Use el <xref:System.Xml.Serialization.XmlArrayAttribute> y <xref:System.Xml.Serialization.XmlArrayItemAttribute> atributos para controlar cómo se serializa una matriz.)  
  
 Puede establecer la <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad para especificar un tipo que se deriva el tipo de campo o propiedad--original es decir, campo o propiedad a la que se haya aplicado el <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
 Si un campo o una propiedad devuelve un <xref:System.Collections.ArrayList>, puede aplicar varias instancias de la <xref:System.Xml.Serialization.XmlElementAttribute> al miembro. Para cada instancia, establezca el <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad a un tipo de objeto que se pueden insertar en la matriz.  
  
 Para obtener más información sobre el uso de atributos, vea [atributos](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Puede usar la palabra `XmlElement` en el código en lugar de la forma más larga <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
   
  
## Examples  
 En el ejemplo siguiente se serializa una clase denominada `Group` y se aplica el <xref:System.Xml.Serialization.XmlElementAttribute> a varios de sus miembros. El campo denominado `Employees` devuelve una matriz de `Employee` objetos. En este caso, el <xref:System.Xml.Serialization.XmlElementAttribute> especifica que el XML resultante no se anidarán (que es el comportamiento predeterminado de los elementos de una matriz).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente aplica el <xref:System.Xml.Serialization.XmlElementAttribute> a una clase.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Nombre de elemento XML del miembro serializado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> y especifica el nombre del elemento XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, la <xref:System.Xml.Serialization.XmlSerializer> utiliza el nombre de miembro como el nombre del elemento XML al serializar una instancia de clase. Por ejemplo, un campo denominado `Vehicle` genera un elemento XML denominado `Vehicle`. Sin embargo si necesita un elemento diferente, como `Cars`, páselo en la `elementName` parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una clase simple que contiene un solo campo denominado `Vehicles`. El ejemplo se aplica el <xref:System.Xml.Serialization.XmlElementAttribute> al campo e incluye el `elementName` parámetro, con lo que se indica a la <xref:System.Xml.Serialization.XmlSerializer> para generar los elementos XML denominados "Cars" en lugar de "Vehículos".  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> de un objeto derivado del tipo de miembro.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> y especifica un tipo de miembro al que <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> es aplicado. Este tipo es utilizado por <see cref="T:System.Xml.Serialization.XmlSerializer" /> al serializar o deserializar el objeto que lo contiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la `type` parámetro para especificar un tipo que se deriva de una clase base. Por ejemplo, suponga que una propiedad denominada `MyAnimal` devuelve un `Animal` objeto. Desea mejorar el objeto, es necesario crear una nueva clase denominada `Mammal` que herede de la `Animal` clase. Para indicar a la <xref:System.Xml.Serialization.XmlSerializer> para aceptar el `Mammal` clase cuando serializa el `MyAnimal` propiedad, pase el <xref:System.Type> de la `Mammal` clase al constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se serializa una clase denominada `Orchestra` que contiene un solo campo denominado `Instruments`, que devuelve una matriz de `Instrument` objetos. Una segunda clase denominada `Brass` hereda de la `Instrument` clase. El ejemplo se aplica el <xref:System.Xml.Serialization.XmlElementAttribute> a la `Instruments` campo y especifica la `Brass` escribe, lo que permite el `Instruments` campo para aceptar `Brass` objetos. El ejemplo también especifica el nombre del elemento XML estableciendo la <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propiedad.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Nombre de elemento XML del miembro serializado.</param>
        <param name="type">
          <see cref="T:System.Type" /> de un objeto derivado del tipo de miembro.</param>
        <summary>Inicializa una nueva instancia de <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> y especifica el nombre del elemento XML así como un tipo derivado del miembro al que se ha aplicado <see cref="T:System.Xml.Serialization.XmlElementAttribute" />. Este tipo de miembro se utiliza cuando <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializa el objeto que lo contiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, la <xref:System.Xml.Serialization.XmlSerializer> utiliza el nombre de miembro como el nombre del elemento XML al serializar una instancia de clase. Por ejemplo, un campo denominado `Vehicle` genera un elemento XML denominado `Vehicle`. Sin embargo, si tiene un elemento diferente, como `Cars`, páselo en la `elementName` parámetro.  
  
 Use la `type` parámetro para especificar un tipo que se deriva de una clase base. Por ejemplo, suponga que una propiedad denominada `MyAnimal` devuelve un `Animal` objeto. Desea mejorar el objeto, es necesario crear una nueva clase denominada `Mammal` que herede de la `Animal` clase. Para indicar a la <xref:System.Xml.Serialization.XmlSerializer> para aceptar el `Mammal` clase cuando serializa el `MyAnimal` propiedad, pase el <xref:System.Type> de la `Mammal` clase al constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se serializa una clase denominada `Orchestra` que contiene un solo campo denominado `Instruments`, que devuelve una matriz de `Instrument` objetos. Una segunda clase denominada `Brass` hereda de la `Instrument` clase. El ejemplo se aplica el <xref:System.Xml.Serialization.XmlElementAttribute> a la `Instruments` campo y especifica la `Brass` escribe, lo que permite el `Instruments` campo para aceptar `Brass` objetos. El ejemplo también especifica el nombre del elemento XML estableciendo la <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propiedad.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de datos de la definición de esquemas XML (XSD) del elemento XM1 generado por <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
        <value>Tipo de datos de esquemas XML, tal como se define en el documento del Consorcio WWC (www.w3.org) titulado "XML Schema Part 2: Datatypes".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se enumera los tipos de datos simple de esquema XML con y equivalentes.  
  
 Para el esquema XML `base64Binary` y `hexBinary` tipos de datos, use una matriz de <xref:System.Byte> estructuras y aplicar un <xref:System.Xml.Serialization.XmlElementAttribute> con el <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> establecida en "base64Binary" o "hexBinary", según corresponda. Para el esquema XML `time` y `date` tipos de datos, use la <xref:System.DateTime> tipo y aplique el <xref:System.Xml.Serialization.XmlElementAttribute> con el <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> establecida en "date" o "time".  
  
 Para cada tipo de esquema XML que se asigna a una cadena, aplique la <xref:System.Xml.Serialization.XmlElementAttribute> con su <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> propiedad establecida en el tipo de esquema XML. Es posible que esto puede cambiar el formato de serialización, no solo el esquema correspondiente al miembro.  
  
> [!NOTE]
>  La propiedad distingue mayúsculas de minúsculas, por lo que debe establecer exactamente a uno de los tipos de datos de esquema XML.  
  
> [!NOTE]
>  Pasar los datos binarios como un documento XML del elemento es más eficaz que pasarlo como un atributo de esquema XML.  
  
 Para obtener más información sobre los tipos de datos XML, vea el documento del Consorcio WWC (www.w3.org) denominado "XML Schema Part 2: Datatypes".  
  
|Tipo de datos XSD|Tipo de datos de .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Matriz de <xref:System.Byte> objetos|  
|booleano|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|ENTIDADES|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Matriz de <xref:System.Byte> objetos|  
|Id.|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|enteros|<xref:System.String>|  
|lenguaje|<xref:System.String>|  
|long|<xref:System.Int64>|  
|nombre|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|cadena|<xref:System.String>|  
|short|<xref:System.Int16>|  
|hora|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 En el ejemplo siguiente se serializa una clase denominada `Group` que contiene un campo denominado `ExtraInfo`, que devuelve un <xref:System.Collections.ArrayList>. En el ejemplo se aplica dos instancias de la <xref:System.Xml.Serialization.XmlElementAttribute> al campo y especifica diferentes <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> valores para cada instancia. Cada instancia permite el <xref:System.Xml.Serialization.XmlSerializer> para serializar los tipos especificados insertados en la matriz.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">El tipo de datos de esquemas XML especificado no se puede asignar al tipo de datos .NET.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del elemento XML generado.</summary>
        <value>Nombre del elemento XML generado. El valor predeterminado es el identificador de miembros.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Especifique un <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> si desea que el nombre del elemento XML generado sea diferente del identificador del miembro.  
  
 Puede establecer las mismas <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> valor a más de un miembro de clase si el documento XML generado utiliza espacios de nombres XML para distinguir entre los miembros con el mismo nombre. Para obtener más información sobre cómo usar los espacios de nombres y nombres con prefijo en el documento XML, vea la <xref:System.Xml.Serialization.XmlSerializerNamespaces> clase.  
  
   
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propiedad de un <xref:System.Xml.Serialization.XmlElementAttribute> a un nuevo valor.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento está calificado.</summary>
        <value>Uno de los valores de <see cref="T:System.Xml.Schema.XmlSchemaForm" />. El valor predeterminado es <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> propiedad determina si un elemento XML está o no calificado. El <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> propiedad se ajusta a la especificación de 1999 del Consorcio WWC (www.w3.org), "Espacios de nombres en XML".  
  
 Si el <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> propiedad se establece en cualquier valor, al intentar establecer el <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> propiedad `XmlSchemaForm.Unqualified` produce una excepción. El valor predeterminado, `XmlSchemaForm.None`, indica el <xref:System.Xml.Serialization.XmlSerializer> para comprobar el esquema del documento XML determinar si el espacio de nombres se han calificado. Si el esquema no especifica un valor para un elemento o atributo individual, el <xref:System.Xml.Serialization.XmlSerializer> utiliza la `elementFormDefault` y `attributeFormDefault` valores para determinar si un elemento o atributo se han calificado. El siguiente código XML muestra un esquema:  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 Cuando el <xref:System.Xml.Serialization.XmlSerializer> lee el esquema, el <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> valor tanto para la `Name` y `Number` es `XmlSchemaForm.None`, pero la `Name` elemento se califica, mientras el `Number` elemento es unqualified.  
  
   
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> propiedad `XmlSchemaForm.Unqualified`.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si <see cref="T:System.Xml.Serialization.XmlSerializer" /> debe serializar un miembro establecido en <see langword="null" /> como una etiqueta vacía con el atributo <see langword="xsi:nil" /> establecido en <see langword="true" />.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Xml.Serialization.XmlSerializer" /> genera el atributo <see langword="xsi:nil" />; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La especificación del esquema XML para estructuras permite a un documento XML indicar explícitamente que el contenido de un elemento no está presente. Este tipo de elementos contiene el atributo `xsi:nil` establecido en `true`. Para obtener más información, vea la especificación del Consorcio WWC (www.w3.org), "XML Schema Part 1: Structures".  
  
 Si el <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propiedad está establecida en `true`, `xsi:nil` se genera el atributo para los miembros de clase que se han establecido en `null`. Por ejemplo, si se establece un campo denominado `MyStringArray` a `null`, el <xref:System.Xml.Serialization.XmlSerializer> genera el siguiente código XML.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Si el <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propiedad es `false`, se generará ningún elemento XML para los miembros de clase que se han establecido en `null`.  
  
> [!NOTE]
>  No se puede aplicar el <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propiedad a un miembro de un tipo como un tipo de valor que no puede contener un tipo de valor `null`. Además, no se puede establecer esta propiedad `false` para tipos de valor que aceptan valores NULL. Cuando esos tipos son `null`, se serializarán estableciendo `xsi:nil` a `true`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un campo con el <xref:System.Xml.Serialization.XmlElementAttribute> aplicado y la <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propiedad establecida en `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio de nombres asignado al elemento XML como resultado de la serialización de la clase.</summary>
        <value>Espacio de nombres del elemento XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> propiedad se ajusta a la especificación del Consorcio WWC (www.w3.org), "Espacios de nombres en XML".  
  
 Para crear espacios de nombres que están asociados con un prefijo, primero debe crear un <xref:System.Xml.Serialization.XmlSerializerNamespaces> que contiene los espacios de nombres y prefijos utilizados en el documento XML. Como establezca el espacio de nombres para cada uno de ellos <xref:System.Xml.Serialization.XmlArrayAttribute>, debe coincidir con uno de los espacios de nombres en el <xref:System.Xml.Serialization.XmlSerializerNamespaces>. Cuando se genera el código XML, se asignará correctamente a cada matriz con el prefijo asociado con el espacio de nombres especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el orden explícito en el que los elementos son serializados o deserializados.</summary>
        <value>Orden de la generación de código.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> enumeración para indicar a la <xref:System.Web.Services.Description.ServiceDescriptionImporter> para generar el código que establece la <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> propiedad.  
  
> [!IMPORTANT]
>  Una vez el <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> propiedad se ha utilizado en una propiedad pública o campo en un tipo, se debe aplicar a todas las propiedades públicas y campos para ese tipo y todos los tipos heredados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de objeto utilizado para representar el elemento XML.</summary>
        <value>
          <see cref="T:System.Type" /> del miembro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad para especificar un tipo derivado de un campo o propiedad.  
  
 Si un campo o una propiedad devuelve un <xref:System.Collections.ArrayList>, puede aplicar varias instancias de la <xref:System.Xml.Serialization.XmlElementAttribute> al miembro. Para cada instancia, establezca el <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad a un tipo de objeto que se pueden insertar en la matriz.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propiedad para especificar un objeto derivado de un <xref:System.Xml.Serialization.XmlElementAttribute>. El ejemplo también aplica a tres instancias de la <xref:System.Xml.Serialization.XmlElementAttribute> a un campo que devuelve un <xref:System.Collections.ArrayList>. Cada instancia especifica un tipo permitido en el campo.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>