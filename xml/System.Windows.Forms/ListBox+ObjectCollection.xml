<Type Name="ListBox+ObjectCollection" FullName="System.Windows.Forms.ListBox+ObjectCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="791b2b5b1a9933c86c384b8f13ffcf32f7609e05" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52905649" /></Metadata><TypeSignature Language="C#" Value="public class ListBox.ObjectCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ListBox/ObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox.ObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox.ObjectCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ListBox::ObjectCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type ListBox.ObjectCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa la colección de elementos de un <see cref="T:System.Windows.Forms.ListBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListBox.ObjectCollection> clase almacena los elementos mostrados en la <xref:System.Windows.Forms.ListBox>. Hay otras dos colecciones definidas dentro de la <xref:System.Windows.Forms.ListBox> clases que permiten determinar qué elementos están seleccionados en la colección. El <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> clase proporciona propiedades y métodos para determinar qué elementos están seleccionados dentro de la <xref:System.Windows.Forms.ListBox.ObjectCollection>, mientras el <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> clase le permite determinar los índices dentro de la <xref:System.Windows.Forms.ListBox.ObjectCollection> están seleccionadas.  
  
 Hay varias maneras de agregar elementos a la colección. El <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> método ofrece la posibilidad de agregar un solo objeto a la colección. Para agregar un número de objetos a la colección, se crea una matriz de elementos y asígnelo a la <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método. Si desea insertar un objeto en una ubicación específica dentro de la colección, puede usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> método. Para quitar elementos, puede usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> método o la <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> método si sabe dónde se encuentra dentro de la colección el elemento. El <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> método le permite quitar todos los elementos de la colección en lugar de usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> método para quitar un solo elemento a la vez.  
  
 También puede manipular los elementos de un <xref:System.Windows.Forms.ListBox> utilizando el <xref:System.Windows.Forms.ListControl.DataSource%2A> propiedad. Si usas el <xref:System.Windows.Forms.ListControl.DataSource%2A> propiedad para agregar elementos a un <xref:System.Windows.Forms.ListBox>, puede ver los elementos de la <xref:System.Windows.Forms.ListBox> utilizando el <xref:System.Windows.Forms.ListBox.Items%2A> propiedad pero no se puede agregar ni quitar elementos de la lista mediante los métodos de la <xref:System.Windows.Forms.ListBox.ObjectCollection>.  
  
 Además de métodos y propiedades para agregar y quitar elementos, la <xref:System.Windows.Forms.ListBox.ObjectCollection> también proporciona métodos para buscar elementos en la colección. El <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> método le permite determinar si un objeto es un miembro de la colección. Una vez que sepa que el elemento se encuentra dentro de la colección, puede usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> método para determinar dónde se encuentra dentro de la colección el elemento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo dibujar un <xref:System.Windows.Forms.ListBox> estableciendo el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad a la `OwnerDrawVariable` valor y el control de la <xref:System.Windows.Forms.ListBox.DrawItem> y <xref:System.Windows.Forms.ListBox.MeasureItem> eventos. También se muestra cómo establecer el <xref:System.Windows.Forms.ListBox.BorderStyle%2A> y <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> propiedades y el uso de la <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método.  
  
 Para ejecutar este ejemplo, péguelo en un formulario vacío que importa el <xref:System.Drawing> espacio de nombres y el <xref:System.Windows.Forms> espacio de nombres. Llame a `InitializeOwnerDrawnListBox` desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
      </Parameters>
      <Docs>
        <param name="owner">El <see cref="T:System.Windows.Forms.ListBox" /> que posee la colección.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede crear una instancia de esta clase sin asociarla a un <xref:System.Windows.Forms.ListBox> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox * obj[] -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection (owner, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="owner">El <see cref="T:System.Windows.Forms.ListBox" /> que posee la colección.</param>
        <param name="value">Una matriz de objetos que se va a agregar a la colección.</param>
        <summary>Inicializa una nueva instancia de <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> que contiene una matriz de objetos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede crear una instancia de esta clase sin asociarla a un <xref:System.Windows.Forms.ListBox> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox * System.Windows.Forms.ListBox.ObjectCollection -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection (owner, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="owner">El <see cref="T:System.Windows.Forms.ListBox" /> que posee la colección.</param>
        <param name="value">Un <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> desde que el contenido se copia a esta colección.</param>
        <summary>Inicializa una nueva instancia de <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> basada en otra <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede crear una instancia de esta clase sin asociarla a un <xref:System.Windows.Forms.ListBox> control. Esta versión del constructor le permite usar los elementos especificados en una instancia existente de la <xref:System.Windows.Forms.ListBox.ObjectCollection> clase para agregar elementos a la colección cuando se crea. Puede utilizar este constructor para usar los elementos especificados en otro <xref:System.Windows.Forms.ListBox> control con esta colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="member this.Add : obj -&gt; int" Usage="objectCollection.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Un objeto que representa el elemento que se va a agregar a la colección.</param>
        <summary>Agrega un elemento a la lista de elementos de un <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <returns>Índice de base cero del elemento de la colección o -1 si <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> se ha llamado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListBox.Sorted%2A> propiedad de la <xref:System.Windows.Forms.ListBox> está establecido en `true`, el elemento se inserta en la lista alfabéticamente. En caso contrario, el elemento se inserta al final de la lista. Para insertar un elemento en el cuadro de lista en una posición específica, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> método. Para agregar un conjunto de elementos al cuadro de lista en una sola operación, use el <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método. Si desea usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> método para agregar un gran número de elementos a la lista, use el <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> y <xref:System.Windows.Forms.ListBox.EndUpdate%2A> métodos para evitar la <xref:System.Windows.Forms.ListBox> de dibujar cada vez que se agrega un elemento a la lista hasta que todos los elementos se agregan a la lista. Al agregar elementos a un <xref:System.Windows.Forms.ListBox>, resulta más eficaz ordenar primero los elementos y, a continuación, agregar nuevos elementos.  
  
 Cuando se agrega un objeto a la colección, el <xref:System.Windows.Forms.ListBox> comprueba primero si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad de la <xref:System.Windows.Forms.ListControl> clase tiene el nombre de un miembro desde el objeto especificado a la referencia al obtener el texto del elemento. Si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad no tiene un miembro especificado, el <xref:System.Windows.Forms.ListBox> , a continuación, llama a la <xref:System.Object.ToString%2A> método del objeto para obtener el texto para mostrar en la lista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Windows.Forms.ListBox> control que muestra varios elementos en las columnas y puede tener más de un elemento seleccionado en la lista del control. El código del ejemplo agrega 50 elementos a la <xref:System.Windows.Forms.ListBox> utilizando el <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> método de la <xref:System.Windows.Forms.ListBox.ObjectCollection> clase y, a continuación, selecciona tres elementos de la lista mediante el <xref:System.Windows.Forms.ListBox.SetSelected%2A> método. El código, a continuación, muestra los valores de la <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> colección (a través de la <xref:System.Windows.Forms.ListBox.SelectedItems%2A> propiedad) y el <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (a través de la <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> propiedad). Este ejemplo requiere que el código está ubicado y se llama desde un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">No hay suficiente espacio disponible para agregar el nuevo elemento a la lista.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="item" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega un grupo de elementos a la lista de elementos de un <see cref="T:System.Windows.Forms.ListBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Object ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : obj[] -&gt; unit" Usage="objectCollection.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="items">Una matriz de objetos que se va a agregar a la lista.</param>
        <summary>Agrega una matriz de elementos a la lista de elementos de un <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListBox.Sorted%2A> propiedad de la <xref:System.Windows.Forms.ListBox> está establecido en `true`, los elementos se insertan en la lista alfabéticamente. En caso contrario, los elementos se insertan en el orden en que se producen dentro de la matriz. Este método normalmente se pasa una matriz de <xref:System.String> objetos, pero una matriz de cualquier tipo de objeto se puede pasar a este método. Cuando se agrega un objeto a la colección, el <xref:System.Windows.Forms.ListBox> comprueba primero si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad de la <xref:System.Windows.Forms.ListControl> clase tiene el nombre de un miembro desde el objeto especificado a la referencia al obtener el texto del elemento. Si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad no tiene un miembro especificado, el <xref:System.Windows.Forms.ListBox> , a continuación, llama a la <xref:System.Object.ToString%2A> método del objeto para obtener el texto para mostrar en la lista. Al usar este método para agregar elementos a la <xref:System.Windows.Forms.ListBox>, no es necesario llamar a la <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> y <xref:System.Windows.Forms.ListBox.EndUpdate%2A> métodos para optimizar el rendimiento. Al agregar elementos a un <xref:System.Windows.Forms.ListBox>, resulta más eficaz ordenar primero los elementos y, a continuación, agregar nuevos elementos. Puede usar este método para agregar un grupo de elementos a la lista o reutilizar los elementos almacenados en otro <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo dibujar un <xref:System.Windows.Forms.ListBox> estableciendo el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad a la `OwnerDrawVariable` valor y el control de la <xref:System.Windows.Forms.ListBox.DrawItem> y <xref:System.Windows.Forms.ListBox.MeasureItem> eventos. También se muestra cómo establecer el <xref:System.Windows.Forms.ListBox.BorderStyle%2A> y <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> propiedades y el uso de la <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método.  
  
 Para ejecutar este ejemplo, péguelo en un formulario vacío que importa el <xref:System.Drawing> espacio de nombres y el <xref:System.Windows.Forms> espacio de nombres. Llame a `InitializeOwnerDrawnListBox` desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Windows.Forms.ListBox.ObjectCollection -&gt; unit" Usage="objectCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="value">Un <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> para cargar en esta colección.</param>
        <summary>Agrega los elementos de un miembro de <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> a la lista de elementos de un <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListBox.Sorted%2A> propiedad de la <xref:System.Windows.Forms.ListBox> está establecido en `true`, los elementos se insertan en la lista alfabéticamente. En caso contrario, los elementos se insertan en el orden en que se producen dentro de la matriz. Este método normalmente se pasa una matriz de <xref:System.String> objetos, pero una matriz de cualquier tipo de objeto se puede pasar a este método. Cuando se agrega un objeto a la colección, el <xref:System.Windows.Forms.ListBox> comprueba primero si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad de la <xref:System.Windows.Forms.ListControl> clase tiene el nombre de un miembro desde el objeto especificado a la referencia al obtener el texto del elemento. Si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad no tiene un miembro especificado, el <xref:System.Windows.Forms.ListBox> , a continuación, llama a la <xref:System.Object.ToString%2A> método del objeto para obtener el texto para mostrar en la lista.  
  
 Al usar este método para agregar elementos a la <xref:System.Windows.Forms.ListBox>, no es necesario llamar a la <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> y <xref:System.Windows.Forms.ListBox.EndUpdate%2A> métodos para optimizar el rendimiento. Al agregar elementos a un <xref:System.Windows.Forms.ListBox>, resulta más eficaz ordenar primero los elementos y, a continuación, agregar nuevos elementos. Puede usar este método para reutilizar los elementos almacenados en otro <xref:System.Windows.Forms.ListBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="objectCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los elementos de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al quitar elementos de la lista, se pierde toda la información sobre los elementos eliminados. Para quitar un único elemento de la <xref:System.Windows.Forms.ListBox>, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> o <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="objectCollection.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Un objeto que representa el elemento que se va a buscar en la colección.</param>
        <summary>Determina si el elemento especificado está ubicado en la colección.</summary>
        <returns><see langword="true" /> Si el elemento se encuentra en la colección; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> método le permite determinar si un objeto es un miembro de la colección. Una vez que sepa que el elemento se encuentra dentro de la colección, puede usar el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> método para determinar dónde se encuentra dentro de la colección el elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (object[] dest, int arrayIndex);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] dest, int32 arrayIndex) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.CopyTo(System.Object[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Object(), arrayIndex As Integer)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ dest, int arrayIndex);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.CopyTo : obj[] * int -&gt; unit" Usage="objectCollection.CopyTo (dest, arrayIndex)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void CopyTo (object[] destination, int arrayIndex);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] destination, int32 arrayIndex) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Object(), arrayIndex As Integer)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ destination, int arrayIndex);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.CopyTo : obj[] * int -&gt; unit" Usage="objectCollection.CopyTo (destination, arrayIndex)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="destination" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" />
      </Parameters>
      <Docs>
        <param name="destination">La matriz de objetos en el que se copian los elementos de la colección en.</param>
        <param name="dest">To be added.</param>
        <param name="arrayIndex">La ubicación dentro de la matriz de destino para copiar los elementos de la colección.</param>
        <summary>Copia toda la colección en una matriz de objetos en una ubicación especificada dentro de la matriz existente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método para combinar los elementos de varias colecciones en una sola matriz. A continuación, puede utilizar esta matriz para rellenar el contenido de otro <xref:System.Windows.Forms.ListBox> controlar mediante la <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método de la <xref:System.Windows.Forms.ListBox.ObjectCollection> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.ListBox.ObjectCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos de la colección.</summary>
        <value>Número de elementos en la colección</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite determinar el número de elementos en el <xref:System.Windows.Forms.ListBox>. A continuación, puede usar este valor cuando se recorre los valores de la colección y debe proporcionar un número de iteraciones para realizar el bucle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="objectCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que se utilizará para recorrer en iteración la colección de elementos.</summary>
        <returns>Un <see cref="T:System.Collections.IEnumerator" /> que representa la colección de elementos.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : obj -&gt; int&#xA;override this.IndexOf : obj -&gt; int" Usage="objectCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Un objeto que representa el elemento que se va a buscar en la colección.</param>
        <summary>Devuelve el índice del elemento especificado en la colección.</summary>
        <returns>Índice de base cero donde se encuentra dentro de la colección; el elemento en caso contrario, un uno negativo (-1).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> método le permite determinar dónde se encuentra dentro de la colección un elemento. Para determinar si un elemento se encuentra dentro de la colección antes de llamar a este método, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El <paramref name="value" /> parámetro es null.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * obj -&gt; unit&#xA;override this.Insert : int * obj -&gt; unit" Usage="objectCollection.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación del índice de base cero donde se inserta el elemento.</param>
        <param name="item">Objeto que representa el elemento que se va a insertar.</param>
        <summary>Inserta un elemento en el cuadro de lista en el índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite insertar un elemento en una posición específica dentro de la <xref:System.Windows.Forms.ListBox>. Si el <xref:System.Windows.Forms.ListBox.Sorted%2A> propiedad de la <xref:System.Windows.Forms.ListBox> está establecido en true, se agrega el elemento en la posición correcta en la lista ordenada, independientemente de los valores especificados en el `index` parámetro. Cuando se agrega un objeto a la colección, el <xref:System.Windows.Forms.ListBox> comprueba primero si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad de la <xref:System.Windows.Forms.ListControl> clase tiene el nombre de un miembro desde el objeto especificado a la referencia al obtener el texto del elemento. Si el <xref:System.Windows.Forms.ListControl.DisplayMember%2A> propiedad no tiene un miembro especificado, el <xref:System.Windows.Forms.ListBox> , a continuación, llama a la <xref:System.Object.ToString%2A> método del objeto para obtener el texto para mostrar en la lista.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor que el valor de la propiedad <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> de la clase <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="item" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.ListBox.ObjectCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
        <value><see langword="true" /> Si esta colección es de solo lectura. en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es siempre `false` para esta colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="System.Windows.Forms.ListBox.ObjectCollection.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">El índice del elemento en la colección para obtener o establecer.</param>
        <summary>Obtiene o establece el elemento en el índice especificado dentro de la colección.</summary>
        <value>Un objeto que representa el elemento situado en el índice especificado dentro de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para obtener el <xref:System.Windows.Forms.ListBox> elemento almacenado en una ubicación específica dentro de la colección. Para determinar el índice de un elemento específico dentro de la colección, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <paramref name="index" /> parámetro es menor que cero o mayor o igual que el valor de la <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> propiedad de la <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> clase.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="objectCollection.Remove value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Un objeto que representa el elemento para quitar de la colección.</param>
        <summary>Quita el objeto especificado de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se quita un elemento de la lista, cambian los índices de los elementos siguientes en la lista. Se elimina toda la información sobre el elemento quitado. Puede usar este método para quitar un elemento específico de la lista especificando el elemento real que se quitará de la lista. Para especificar el índice del elemento que se va a quitar en lugar del propio elemento, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> método. Para quitar todos los elementos de la lista, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="objectCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del elemento que se va a quitar.</param>
        <summary>Quita el elemento en el índice especificado dentro de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se quita un elemento de la lista, cambian los índices de los elementos siguientes en la lista. Se elimina toda la información sobre el elemento quitado. Puede usar este método para quitar un elemento específico de la lista especificando el índice del elemento que se va a quitar de la lista. Para especificar el elemento que quitar en lugar del índice del elemento, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> método. Para quitar todos los elementos de la lista, utilice el <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> propiedad con el <xref:System.Windows.Forms.ListBox.TopIndex%2A> propiedad que se va a mover el elemento actualmente seleccionado en la parte superior de la lista de elementos en el área de presentación de la <xref:System.Windows.Forms.ListBox>. En el ejemplo se muestra cómo quitar los elementos mediante el <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> método de la <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> clase y cómo borrar todos los elemento selección mediante el <xref:System.Windows.Forms.ListBox.ClearSelected%2A> método. En primer lugar, el código mueve el elemento seleccionado actualmente el <xref:System.Windows.Forms.ListBox> a la parte superior de la lista. El código, a continuación, quita todos los elementos antes del elemento actualmente seleccionado y borra todas las selecciones en la <xref:System.Windows.Forms.ListBox>. Este ejemplo requiere que un <xref:System.Windows.Forms.ListBox> que contiene los elementos se agrega a un formulario y que un elemento está seleccionado en el <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <paramref name="index" /> parámetro es menor que cero o mayor o igual que el valor de la <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> propiedad de la <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> clase.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (dest As Array, index As Integer) Implements ICollection.CopyTo" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ dest, int index) = System::Collections::ICollection::CopyTo;" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array destination, int index);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array destination, int32 index) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As Array, index As Integer) Implements ICollection.CopyTo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ destination, int index) = System::Collections::ICollection::CopyTo;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="destination" Type="System.Array" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="index" Type="System.Int32" Index="1" />
      </Parameters>
      <Docs>
        <param name="destination">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
        <param name="dest">To be added.</param>
        <param name="index">Índice de base cero de la matriz donde comienza la copia.</param>
        <summary>Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.ListBox.ObjectCollection> se convierte en una interfaz <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <exception cref="T:System.ArrayTypeMismatchException">El tipo de matriz no es compatible con los elementos de la <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para una descripción de este miembro, vea <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value><see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.ListBox.ObjectCollection> se convierte en una interfaz <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para una descripción de este miembro, vea <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.ListBox.ObjectCollection> se convierte en una interfaz <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Objeto que se va a agregar a <see cref="T:System.Windows.Forms.ListBox" />.</param>
        <summary>Agrega un objeto a la <see cref="T:System.Windows.Forms.ListBox" /> clase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.ListBox.ObjectCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="item" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Actual <see cref="T:System.Windows.Forms.ListBox" /> tiene un origen de datos.</exception>
        <exception cref="T:System.SystemException">No hay suficiente espacio disponible para almacenar el nuevo elemento.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para una descripción de este miembro, vea <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value><see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.ListBox.ObjectCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>