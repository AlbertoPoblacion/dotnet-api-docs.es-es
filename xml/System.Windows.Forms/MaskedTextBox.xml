<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24e38e05d0c7c80d1a179add901f5793853879d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Utiliza una máscara para distinguir si los datos que especifica el usuario son apropiados o inapropiados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox> clase es una mejorada <xref:System.Windows.Forms.TextBox> control que admite una sintaxis declarativa para aceptar o rechazar proporcionados por el usuario. Mediante el <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad, puede especificar la entrada siguiente sin escribir ninguna lógica de validación personalizada en la aplicación:  
  
-   Caracteres de entrada necesarios.  
  
-   Caracteres de entrada opcionales.  
  
-   El tipo de entrada esperada en una posición determinada en la máscara; Por ejemplo, un dígito o un carácter alfabético o alfanumérico.  
  
-   Enmascarar literales o caracteres que deben aparecer directamente en el <xref:System.Windows.Forms.MaskedTextBox>; por ejemplo, los guiones (-) en un número de teléfono o el símbolo de moneda en un precio.  
  
-   Procesamiento especial para los caracteres de entrada; Por ejemplo, para convertir caracteres alfabéticos a mayúsculas.  
  
 Cuando un <xref:System.Windows.Forms.MaskedTextBox> control se muestra en tiempo de ejecución, representa la máscara como una serie de caracteres de petición y caracteres literales opcionales. Cada posición modificable de la máscara, que representa una entrada obligatorio u opcional, se muestra con un único carácter de símbolo del sistema. Por ejemplo, el signo de número (#) a menudo se utiliza como un marcador de posición para los datos proporcionados por un carácter numérico. Puede usar el <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> propiedad para especificar un carácter de entrada personalizado. El <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> propiedad determina si el usuario ve los caracteres de petición cuando el control pierde el foco de entrada.  
  
 Los tipos de usuario de entrada en el cuadro de texto enmascarado, los caracteres de entrada válidos reemplazar sus respectivos caracteres de petición de un modo secuencial. Si el usuario escribe un carácter de entrada no válido, no se realiza ningún reemplazo, pero en su lugar, se emite un bip si la <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propiedad está establecida en `true`y el <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> evento se desencadena. Puede proporcionar su propia lógica de error personalizada controlando este evento.  
  
 Cuando el punto de inserción actual está en un carácter literal, el usuario tiene una serie de opciones:  
  
-   Si se escribe un carácter que no sea el carácter de símbolo del sistema, se omitirá automáticamente el literal y el carácter de entrada se aplicará a la siguiente posición modificable, representada por el siguiente carácter de símbolo del sistema.  
  
-   Si se escribe el carácter de símbolo del sistema y la <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> propiedad es true, la entrada sobrescribirá el carácter de símbolo del sistema y la inserción punto se moverán a la siguiente posición de la máscara.  
  
-   Como siempre, las teclas de dirección pueden utilizarse para navegar a una posición anterior o posterior.  
  
 Puede usar el <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propiedad para comprobar si el usuario ha escrito todos los datos de entrada requeridos. El <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad siempre recuperará la entrada del usuario con un formato según la máscara y <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propiedad.  
  
 El <xref:System.Windows.Forms.MaskedTextBox> control cede realmente todo el procesamiento de máscara para la <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> clase especificada por el <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propiedad. Este proveedor estándar admite todos los caracteres Unicode salvo los suplentes y caracteres combinados verticalmente; Sin embargo, la <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propiedad puede utilizarse para restringir la entrada a los caracteres conjuntos a-z, A-z y 0-9.  
  
 Las máscaras no garantizan necesariamente que la entrada de un usuario representará un valor válido para un tipo determinado; Por ejemplo, se podrían especificar -9 para una edad en años. Puede comprobar que entrada del usuario representa un valor válido mediante la asignación de una instancia de ese tipo de valor para el <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propiedad. Puede detectar si el usuario quita el foco de <xref:System.Windows.Forms.MaskedTextBox> cuando contiene un valor no válido mediante la supervisión para el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> eventos. Si se realiza correctamente la validación de tipo, el objeto que representa el valor estará disponible a través de la <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.TypeValidationEventArgs> parámetro.  
  
 Al igual que con la <xref:System.Windows.Forms.TextBox> (control), varios métodos abreviados de teclado comunes no funcionan con <xref:System.Windows.Forms.MaskedTextBox>. En particular, CTRL-R (Justificar derecha el texto), CTRL-L (justificar a la izquierda texto), y CTRL-L (centrar el texto) no tienen ningún efecto.  
  
## <a name="compatibility-with-visual-basic-60"></a>Compatibilidad con Visual Basic 6.0  
 <xref:System.Windows.Forms.MaskedTextBox> se ha diseñado para conservar la mayor parte de la funcionalidad del control Masked Edit en Visual Basic 6.0. En la tabla siguiente se enumeran las propiedades comunes del control Masked Edit y proporcionan sus equivalentes en <xref:System.Windows.Forms.MaskedTextBox>.  
  
|Propiedad del control (Visual Basic 6.0) Masked Edit|MaskedTextBox equivalente ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) propiedad|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|Propiedad `AllowPrompt`|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|Propiedad `AutoTab`|None|  
|Propiedad `ClipMode`|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|Propiedad `ClipText`|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (cuando <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> está establecido en <xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|Propiedad `Format`|None|  
|Propiedad `FormattedText`|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (cuando <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> está establecido en <xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|Propiedad `Mask`|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|Propiedad `PromptChar`|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|Propiedad `PromptInclude`|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|Evento `ValidationError`|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  El <xref:System.Windows.Forms.MaskedTextBox> control no admite la funcionalidad de configuración o deshacer varias líneas. Sin embargo, mientras los miembros asociados con estas características se han conservado por compatibilidad con el <xref:System.Windows.Forms.TextBoxBase> de la clase base sus implementaciones no realizan ninguna acción.  
  
   
  
## Examples  
 El siguiente código de ejemplo inicializa el <xref:System.Windows.Forms.MaskedTextBox> para aceptar una fecha y utiliza tanto la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> y <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> eventos para alertar al usuario a la entrada no válida.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MaskedTextBox" /> utilizando valores predeterminados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor predeterminado <xref:System.Windows.Forms.MaskedTextBox.%23ctor> constructor establece la <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propiedad en una máscara nula, representada por la cadena "<>". Una máscara null aceptará cualquier combinación de caracteres como entrada.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">Un proveedor de lenguaje de máscara personalizado, derivado de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MaskedTextBox" /> utilizando el proveedor de lenguaje de máscara personalizado especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `maskedTextProvider` parámetro define el lenguaje de enmascaramiento utilizado por <xref:System.Windows.Forms.MaskedTextBox>. Es responsable de analizar la máscara y determinar si proporcionados por el usuario se ajustan a la posición actual de la máscara. Puede derivar una nueva clase de <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> para definir su propio lenguaje de enmascaramiento personalizado y utilizar el <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> constructor para reemplazar el estándar <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>.  
  
 Si desea utilizar el lenguaje de enmascaramiento predeterminado y proporcionar su propia máscara de entrada, no es necesario utilizar este constructor. En su lugar, puede utilizar el <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> constructor, o utilice el constructor predeterminado, a continuación, configurar la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="maskedTextProvider" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">
          <see cref="T:System.String" /> que representa la máscara de entrada. Valor inicial de la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MaskedTextBox" /> utilizando la máscara de entrada especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> constructor utiliza el estándar <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> con la entrada `mask` para analizar la entrada del usuario en el <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Si asigna una nueva máscara a la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad, reemplazará el valor establecido por este constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mask" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina cómo se controlan las teclas TAB para las configuraciones de múltiples líneas. Esta propiedad no es compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> propiedad se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, esta propiedad no es compatible.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no provoca este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> eventos se heredaron de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, este evento no se admite.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el usuario puede escribir <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> como datos válidos.</summary>
        <value>
          Es <see langword="true" /> si el usuario puede escribir el carácter de entrada en el control; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Incluso cuando <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> es `true`, el carácter de entrada debe ser válido para la ubicación actual en la máscara para ser aceptados. Por ejemplo, si <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> es "*", y la ubicación actual en la máscara exige al usuario escribir un dígito, escriba un asterisco (\*) se producirá un error y hacer que el <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos que se produzca.  
  
 El <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> propiedad tiene prioridad sobre <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Windows.Forms.MaskedTextBox" /> acepta caracteres no incluidos en el juego de caracteres ASCII.</summary>
        <value>
          Es <see langword="true" /> si sólo se aceptan caracteres ASCII; es <see langword="false" /> si el control <see cref="T:System.Windows.Forms.MaskedTextBox" /> puede aceptar cualquier carácter Unicode arbitrario. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `true`, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> restringe proporcionados por el usuario a los caracteres a-z y A-z. No se permiten caracteres de control ASCII.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control de cuadro de texto enmascarado hace que se emita el bip de aviso del sistema para cada pulsación de tecla por parte del usuario que se rechaza.</summary>
        <value>
          Es <see langword="true" /> si el control <see cref="T:System.Windows.Forms.MaskedTextBox" /> debe emitir una señal sonora cuando una entrada no sea válida; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos se llevarán a cabo si el <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propiedad está establecida en `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el usuario puede deshacer la operación anterior. Esta propiedad no es compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A> propiedad se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que <xref:System.Windows.Forms.MaskedTextBox> no compatibilidad con funcionalidad de deshacer, esta propiedad siempre tiene un valor de `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Borra la información sobre la última operación realizada del búfer Deshacer del cuadro de texto. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, <xref:System.Windows.Forms.MaskedTextBox> no admite la funcionalidad de deshacer.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un identificador para el control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los parámetros de creación necesarios cuando se crea el identificador del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" /> que representa la información necesaria al crear un control.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la información de referencia cultural asociada al cuadro de texto enmascarado.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> que representa la referencia cultural que admite el <see cref="T:System.Windows.Forms.MaskedTextBox" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> se estableció en <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si los literales de cadena y de solicitud de datos se copian al Portapapeles.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.MaskFormat" />. El valor predeterminado es <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> propiedad determina cómo se selecciona texto, dentro el <xref:System.Windows.Forms.MaskedTextBox> de control, se interpreta cuando se copian en el Portapapeles o se recupera a través de la <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> propiedad. En concreto, determina si los caracteres literales, caracteres de petición o ambos se incluyen cuando se accede al texto seleccionado. Cuando se excluyen los caracteres de petición, se transforman en espacios en la cadena copiada.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propiedad sirve para un propósito similar con respecto a cómo el <xref:System.Windows.Forms.MaskedTextBox.Text%2A> se interpreta la propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propiedad se ha establecido con un valor <see cref="T:System.Windows.Forms.MaskFormat" /> que no es válido.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.IFormatProvider" /> que se utilizará al realizar la validación de tipo.</summary>
        <value>Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> Determina qué símbolos se utilizan para la moneda, fecha y otros marcadores de posición de la máscara específicos de la referencia cultural cuando se produce la validación de tipo y el control tiene un valor no nulo <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Lugar desde el que se buscará el carácter más cercano.</param>
        <summary>Recupera el carácter más próximo a la ubicación especificada en el control.</summary>
        <returns>Carácter de la ubicación especificada.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Ubicación donde se va a buscar.</param>
        <summary>Recupera el índice del carácter más cercano a la ubicación especificada.</summary>
        <returns>Índice de carácter de base cero de la ubicación especificada.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Este parámetro no se utiliza.</param>
        <summary>Recupera el índice del primer carácter de una línea determinada. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <returns>Este método siempre devolverá 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, no se admite este método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera el índice del primer carácter de la línea actual. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <returns>Este método siempre devolverá 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, no se admite este método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Este parámetro no se utiliza.</param>
        <summary>Recupera el número de línea desde la posición de carácter especificada dentro del texto del control. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <returns>Este método siempre devolverá 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, no se admite este método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del carácter cuya ubicación se desea recuperar.</param>
        <summary>Recupera la ubicación dentro del control en el índice de caracteres especificado.</summary>
        <returns>La ubicación del carácter especificado dentro del rectángulo de cliente del control.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los caracteres de petición de la máscara de entrada se ocultan cuando el cuadro de texto enmascarado pierde el foco.</summary>
        <value>
          Es <see langword="true" /> si <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> está oculto cuando <see cref="T:System.Windows.Forms.MaskedTextBox" /> no tiene el foco; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modo de inserción de texto del control de cuadro de texto enmascarado.</summary>
        <value>Un valor <see cref="T:System.Windows.Forms.InsertKeyMode" /> que indica el modo de inserción actual. El valor predeterminado es <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propiedad controla el comportamiento de inserción de caracteres de la <xref:System.Windows.Forms.MaskedTextBox> control. El estado de esta propiedad se define mediante el <xref:System.Windows.Forms.InsertKeyMode> enumeración, que puede estar siempre activado, siempre es off o establecer para respetar la configuración del teclado del usuario. Esta propiedad reemplaza el modo de inserción del teclado. Por ejemplo, si el teclado se establece para sobrescribir, pero <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> está establecido en `Insert`, el <xref:System.Windows.Forms.MaskedTextBox> funcionará en modo de inserción. El <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propiedad tendrá acceso el modo de inserción true de la <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Si cambiar <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> cambia el valor de <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>, <xref:System.Windows.Forms.MaskedTextBox> , se producirá la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> eventos.  
  
 Esta propiedad no tiene ningún efecto si no se ha establecido ninguna máscara.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Se proporcionó un valor <see cref="T:System.Windows.Forms.InsertKeyMode" /> no válido al establecer esta propiedad.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" />.</param>
        <summary>Determina si la tecla especificada es una tecla de entrada o una tecla especial que requiere preprocesamiento.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que especifica si los nuevos datos proporcionados por el usuario sobrescriben los datos existentes.</summary>
        <value>
          Es <see langword="true" /> si <see cref="T:System.Windows.Forms.MaskedTextBox" /> sobrescribirá los caracteres existentes cuando el usuario escriba otros nuevos; es <see langword="false" /> si <see cref="T:System.Windows.Forms.MaskedTextBox" /> desplazará hacia delante los caracteres existentes. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> tiene en cuenta tanto el valor de la <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propiedad y el estado del teclado del usuario. Si <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> está establecido en <xref:System.Windows.Forms.InsertKeyMode.Insert> o <xref:System.Windows.Forms.InsertKeyMode.Overwrite>, <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> devolverá `false` o `true`, respectivamente. Si <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> se establece en <xref:System.Windows.Forms.InsertKeyMode.Default>, devolverá el estado de la tecla Insertar.  
  
 Cuando <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> es `false`, <xref:System.Windows.Forms.MaskedTextBox> rechazará como no válida cualquier entrada de caracteres que se produciría una infracción en cualquier parte de la máscara. Es decir, si insertar un carácter provocaría que el carácter que se va a desplazar en una posición de la máscara donde no sería válido, se rechazará la inserción de caracteres.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que el modo de inserción ha cambiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> evento se desencadena después del valor de la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> se cambia la propiedad.  
  
 Este evento es necesario para enlazar correctamente los datos a un <xref:System.Windows.Forms.MaskedTextBox> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MaskedTextBox> denominado `MaskedTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las líneas de texto en las configuraciones de múltiples líneas. Esta propiedad no es compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Una matriz de tipo <see cref="T:System.String" /> que contiene una única línea.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.Lines%2A> propiedad se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, esta propiedad no es compatible.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la máscara de entrada que se utilizará en tiempo de ejecución.</summary>
        <value>
          <see cref="T:System.String" /> que representa la máscara actual. El valor predeterminado es la cadena vacía que permite cualquier entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> es la propiedad predeterminada para el <xref:System.Windows.Forms.MaskedTextBox> clase.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> debe ser una cadena formada por uno o varios de los elementos de enmascaramiento, tal como se muestra en la tabla siguiente. El lenguaje de enmascaramiento utilizado por <xref:System.Windows.Forms.MaskedTextBox> se define por su asociado <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>. El proveedor estándar especifica un lenguaje de enmascaramiento basándose en el utilizado por el control Masked Edit en Visual Basic 6.0 y debe ser muy familiar a los usuarios que migren desde esa plataforma.  
  
|Elemento de enmascaramiento|Descripción|  
|---------------------|-----------------|  
|0|Dígito, necesario. Este elemento aceptará cualquier dígito comprendido entre 0 y 9.|  
|9|Dígito o espacio, opcional.|  
|#|Dígito o espacio, opcional. Si esta posición está en blanco en la máscara, se representará como un espacio en el <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad. Signo más (+) y menos (-) se permiten signos.|  
|L|Letra, necesaria. Restringe la entrada a las letras ASCII a-z y A-z. Este elemento de máscara es equivalente a [a-zA-Z] en expresiones regulares.|  
|?|Letra, opcional. Restringe la entrada a las letras ASCII a-z y A-z. ¿Este elemento de máscara es equivalente a [a-zA-Z]? en expresiones regulares.|  
|&|Carácter, necesaria. Si el <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propiedad está establecida en true, este elemento se comporta como el elemento "L".|  
|C|Carácter, opcional. Cualquier carácter que no sea un control. Si el <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propiedad está establecida en `true`, este elemento se comporta como el "?" elemento.|  
|A|Alfanumérico, necesario. Si el <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propiedad está establecida en `true`, los únicos caracteres aceptará son las letras ASCII a-z y A-z. Este elemento de máscara se comporta como el elemento "a".|  
|a|Alfanumérico, opcional. Si el <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propiedad está establecida en `true`, los únicos caracteres aceptará son las letras ASCII a-z y A-z. Este elemento de máscara se comporta como el elemento "A".|  
|.|Marcador de posición decimal. El carácter de presentación real utilizado será el símbolo decimal apropiado para el proveedor de formato, según lo determinado por el control <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.|  
|,|Miles marcador de posición. El carácter de presentación real utilizado será el miles marcador de posición apropiado para el proveedor de formato, según lo determinado por el control <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.|  
|:|Separador de hora. El carácter de presentación real utilizado será el símbolo de hora apropiado para el proveedor de formato, según lo determinado por el control <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.|  
|/|Separador de fecha. El carácter de presentación real utilizado será el símbolo de fecha apropiado para el proveedor de formato, según lo determinado por el control <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.|  
|$|Símbolo de divisa. El carácter real mostrado será el símbolo de moneda apropiado para el proveedor de formato, según lo determinado por el control <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.|  
|\<|Desplazar hacia abajo. Convierte todos los caracteres que siguen a minúsculas.|  
|>|Desplazar hacia arriba. Convierte todos los caracteres que siguen a mayúsculas.|  
|&#124;|Deshabilitar un cambio anterior una o desplazar hacia abajo.|  
|\|Escape. Convierte un carácter de máscara, convirtiéndolo en un literal. "\\\\" es la secuencia de escape para una barra diagonal inversa.|  
|Todos los demás caracteres|Literales. Todos los elementos de la máscara no aparecerán como ellos mismos en <xref:System.Windows.Forms.MaskedTextBox>. Literales siempre ocupan una posición estática en la máscara en tiempo de ejecución y no se pueden mover ni eliminar el usuario.|  
  
 Si cambia una máscara cuando <xref:System.Windows.Forms.MaskedTextBox> ya contiene proporcionados por el usuario filtrados por una máscara anterior, <xref:System.Windows.Forms.MaskedTextBox> intentará migrar esa entrada en la nueva definición de máscara. Si se produce un error, borrará la entrada existente. Asigne una cadena de longitud cero como la máscara, conservará los datos existentes en el control. Cuando se utiliza con una máscara de longitud cero, <xref:System.Windows.Forms.MaskedTextBox> se comporta como una sola línea <xref:System.Windows.Forms.TextBox> control.  
  
 El separador decimal (.), miles (,), hora (:), fecha (/) y predeterminada de símbolos de moneda ($) para mostrar esos símbolos tal como se define en la referencia cultural de la aplicación. Puede forzar que se muestren símbolos para otra referencia cultural utilizando el <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propiedad.  
  
 Inserción de caracteres en la máscara en tiempo de ejecución se controla mediante el <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propiedad. Los usuarios pueden navegar por la máscara utilizando la teclas izquierda y flecha derecha o el cursor del mouse y pueden omitir posiciones opcionales de la máscara escribiendo un espacio en blanco.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> admite todos los caracteres Unicode salvo los suplentes y caracteres combinados verticalmente.  
  
 En la tabla siguiente muestra algunas máscaras de ejemplo.  
  
|Máscara|Comportamiento|  
|----------|--------------|  
|`00/00/0000`|Una fecha (día, mes numérico, año) en formato de fecha internacional. El carácter "/" es un separador de fecha lógica y se mostrará al usuario como el separador de fecha adecuado para la referencia cultural actual de la aplicación.|  
|`00->L<LL-0000`|Una fecha (día, abreviatura del mes y año) en formato de Estados Unidos en el que se muestra la abreviatura del mes de tres letras con una letra mayúscula inicial seguida de dos letras en minúsculas.|  
|`(999)-000-0000`|Número de teléfono de Estados Unidos, código de área opcional. Si no desea que los usuarios a escribir los caracteres opcionales, pueden escribir espacios o colocar el puntero del mouse directamente en la posición de la máscara representada por el primer 0.|  
|`$999,999.00`|Un valor de moneda en el intervalo de 0 a 999999. La moneda, milésima de segundo y caracteres decimales se sustituirán en tiempo de ejecución con sus equivalentes específicos de la referencia cultural.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La cadena suministrada a la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> no es una máscara válida. Entre las máscaras no válidas se incluyen las máscaras que contienen caracteres no imprimibles.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que cambie la máscara de entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> evento se desencadena después del valor de la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> se cambia la propiedad. Este evento también se produce si el <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> indirectamente se modifica un miembro como <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, y <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MaskedTextBox> denominado `MaskedTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se han escrito en la máscara de entrada todos los caracteres necesarios.</summary>
        <value>
          Es <see langword="true" /> si se han especificado todas las entradas obligatorias en la máscara; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> comprueba únicamente de los elementos de entrada necesarios. Para determinar si se han rellenado todos los elementos de entrada obligatorios y opcionales de, use la <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propiedad en su lugar.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un clon del proveedor de máscara asociado a esta instancia del control de cuadro de texto enmascarado.</summary>
        <value>Un proveedor de lenguaje de enmascaramiento de tipo <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propiedad define el motor de análisis de máscara y el lenguaje de enmascaramiento utilizado por el <xref:System.Windows.Forms.MaskedTextBox> control. El proveedor predeterminado es el <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> clase; sin embargo, se puede especificar un proveedor personalizado mediante la <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> constructor.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> no se puede establecer directamente. Sin embargo, establecer algunas de las propiedades de <xref:System.Windows.Forms.MaskedTextBox>: como <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, y <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>: internamente puede provocar la creación de un nuevo <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se han escrito en la máscara de entrada todos los datos necesarios y opcionales.</summary>
        <value>
          Es <see langword="true" /> si se han especificado todas las entradas obligatorias y opcionales; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propiedad dentro de la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> controlador de eventos para determinar si la entrada del usuario se rechazó porque no hay ninguna entrada restante en la máscara. Para determinar si se han escrito solo elementos de entrada necesarios, use la <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> propiedad.  
  
   
  
## Examples  
 El siguiente código de ejemplo se administra la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos y se utiliza un <xref:System.Windows.Forms.ToolTip> para avisar al usuario si se realiza un intento de escribir después de que todos los datos se han usado las posiciones de la máscara.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la entrada del usuario o el carácter asignado no coincide con el elemento de formato correspondiente de la máscara de entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> es el evento predeterminado para el <xref:System.Windows.Forms.MaskedTextBox> clase.  
  
 El <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> evento tiene lugar cuando se rechaza un carácter por la máscara de entrada. La máscara de entrada, representada por la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad, se interpreta el proveedor de texto enmascarado asociado al control a través de la <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propiedad. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> se produce en las situaciones siguientes:  
  
-   Un carácter de entrada no coincide con el elemento de formato correspondiente. Por ejemplo, el usuario escribe un carácter alfabético cuando se requiere un dígito. Esto es probablemente la razón más común por qué se produce este evento.  
  
-   El usuario está intentando escribir caracteres extraños más allá del final de la máscara porque ya se ha rellenado la máscara o se ha movido la posición del símbolo de intercalación actual hasta el final de la cadena de máscara de entrada mostrada.  
  
-   Una operación de pegado inserta un carácter que no coincide con su elemento de formato asociado, o si la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propiedad es `false`, desplaza los caracteres existentes a nuevas posiciones donde no coinciden con sus elementos de formato.  
  
-   Una operación de corte desplaza los caracteres existentes a la izquierda y uno o varios caracteres no coinciden con sus elementos de formato recién asociados.  
  
-   Se realizó una asignación a la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad y la cadena asignada produjo una o más infracciones de máscara.  
  
 Si se asigna una cadena al control que hace que <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> para que se produzca, ninguna parte de la cadena aparecerá en <xref:System.Windows.Forms.MaskedTextBox>.  
  
 El control predeterminado para <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> se reproducirá un if sonido del Bip del <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propiedad está establecida en `true`. Este evento se utiliza normalmente para implementar el control de errores personalizado, por ejemplo, para mover al siguiente control de entrada de usuario si la máscara es completa o para mostrar un cuadro de diálogo de error personalizado o información sobre herramientas si el carácter de entrada no es válido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MaskedTextBox> denominado `MaskedTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número máximo de caracteres que el usuario puede escribir o pegar en el control de cuadro de texto. Esta propiedad no es compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Esta propiedad devuelve siempre 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consulte la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad y el <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A> propiedad en el <xref:System.Windows.Forms.MaskInputRejectedEventArgs> clase para obtener información sobre cómo determinar la longitud máxima de una cadena en un <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si es un control de cuadro de texto multilínea. Esta propiedad no es totalmente compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Esta propiedad devuelve siempre <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> propiedad se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que la <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, esta propiedad no es totalmente compatible; no se puede establecer y siempre se resuelve como `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Normalmente se produce cuando el valor de la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> ha cambiado; sin embargo, <see cref="T:System.Windows.Forms.MaskedTextBox" /> no provoca este evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> eventos se heredaron de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que la <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, este evento no se implementa en <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.Control.BackColor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> que contiene datos de eventos.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.KeyDown" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.KeyEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> que contiene datos de eventos.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> que contiene datos de eventos.</param>
        <summary>Normalmente provoca el evento <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />, pero está deshabilitado para <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, este método se invalida para llevar a cabo ninguna acción.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> que contiene datos de eventos.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> que contiene datos de eventos.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.TextChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.ComponentModel.CancelEventArgs" /> que contiene datos de eventos.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.Validating" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> método hace que la cadena de entrada debe validarse con el <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propiedad, si un <xref:System.Type> se ha especificado para esta propiedad. A continuación, también generará el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> eventos.  
  
> [!NOTE]
>  Para garantizar la coherencia con los controles basados en texto, la validación se produce incluso si la <xref:System.Windows.Forms.MaskedTextBox> es de sólo lectura (su <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A> propiedad está establecida en `true`).  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Se produjo una excepción crítica durante el análisis de la cadena de entrada.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter que se mostrará en sustitución de los datos proporcionados por el usuario.</summary>
        <value>Valor <see cref="T:System.Char" /> que se utiliza como carácter de contraseña.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para la entrada de información confidencial del usuario, es una práctica común para ocultar la información real escrita por el usuario. Si el <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propiedad se establece en un carácter distinto de null, <xref:System.Windows.Forms.MaskedTextBox> mostrará este carácter para todas las entradas en el control. Si se establece esta propiedad en `null` se deshabilitará esta funcionalidad.  
  
 Si desea utilizar el carácter de contraseña de sistema operativo proporcionado, que se define en COMCTL32.dll, utilice la <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propiedad en su lugar. Si tanto la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> y <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propiedades están activadas, el último tiene prioridad.  
  
> [!IMPORTANT]
>  Una consideración de seguridad, el <xref:System.Windows.Forms.MaskedTextBox> control deshabilita las operaciones de cortar y copiar en las cadenas de protección por contraseña.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El carácter especificado al establecer esta propiedad no es un carácter de contraseña válido, según determina el método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" />.</exception>
        <exception cref="T:System.InvalidOperationException">El carácter de contraseña especificado es igual que el carácter de entrada actual, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Es necesario que los dos caracteres sean distintos.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <see cref="T:System.Windows.Forms.Message" /> que se pasa por referencia y que representa el mensaje de ventana que se va a procesar.</param>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" /> que representa la tecla de método abreviado que se va a procesar.</param>
        <summary>Procesa una tecla de comando.</summary>
        <returns>
          Es <see langword="true" /> si el control procesó la tecla de comando; de lo contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> que se pasa por referencia y que representa el mensaje de ventana que se va a procesar.</param>
        <summary>Reemplaza la implementación base de este método para controlar los cambios del idioma de entrada.</summary>
        <returns>
          <see langword="true" /> si el control procesó el mensaje; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> invalida la implementación de su control base de <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> administre correctamente los eventos de caracteres cuando el usuario escribe caracteres utilizando un Editor de métodos de entrada (IME), como se usa para escribir en japonés, chino y otros alfabetos no latinos complejos. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> detecta cualquier mensaje WM_CHAR que se produce después de que recibe un mensaje WM_IME_CHAR y los suprime para evitar que estos caracteres se muestra en el control. Si se deriva este control y reemplaza este mensaje, debe duplicar este comportamiento si desea que el nuevo control para que funcione con el IME.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter utilizado para representar la ausencia de datos proporcionados por el usuario en <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Carácter que se utiliza para pedir al usuario que introduzca datos. El valor predeterminado es el carácter de subrayado (_).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> se mostrará en <xref:System.Windows.Forms.MaskedTextBox> para cualquier posición de la máscara que el usuario no haya rellenado todavía en.  
  
 Use la <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> propiedad para especificar si se muestra el símbolo del sistema cuando <xref:System.Windows.Forms.MaskedTextBox> no tiene el foco.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El carácter especificado al establecer esta propiedad no es un carácter de entrada válido, según determina el método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" />.</exception>
        <exception cref="T:System.InvalidOperationException">El carácter de entrada especificado es igual que el carácter de contraseña actual, <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />. Es necesario que los dos caracteres sean distintos.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el texto del cuadro de texto es de sólo lectura.</summary>
        <value>
          <see langword="true" /> para indicar que el texto es de solo lectura; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el análisis de los datos proporcionados por el usuario debe detenerse al llegar al primer carácter no válido.</summary>
        <value>
          Es <see langword="true" /> si el procesamiento de la cadena de entrada debe finalizar en el primer error de análisis; de lo contrario, es <see langword="false" /> si al procesar, se deberían omitir todos los errores. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En ocasiones, el usuario escribirá varios caracteres en un <xref:System.Windows.Forms.MaskedTextBox> en una sola operación de entrada, normalmente bien copiando y pegando una cadena. Si la cadena completa sólo contiene caracteres válidos, según su posición de pegado en la máscara de entrada, toda la operación se realizará correctamente. Sin embargo, cuando un análisis se produce error, el comportamiento de <xref:System.Windows.Forms.MaskedTextBox> depende del valor de <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>, como se indica a continuación:  
  
-   Si esta propiedad es `true`, procesamiento de la cadena de entrada se detiene en el carácter no válido. Se omiten todos los caracteres subsiguientes. Una sola <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> evento se desencadena.  
  
-   Si esta propiedad es `false`, a continuación, se rechaza el carácter no válido, pero continúa el análisis con el carácter siguiente de la cadena de entrada. Un <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> evento se desencadena para cada carácter no válido en la cadena de entrada.  
  
 El <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> y <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> propiedades también pueden influir en la interpretación de la entrada del usuario.  
  
 Si el <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propiedad es `false`, a continuación, los caracteres ya se encuentran en la máscara de entrada a la derecha del punto de inserción se desplazarán en el número de caracteres aceptado. Este desplazamiento puede producir errores de análisis adicionales.  
  
 Una operación de pegado puede se puede simular mediante programación estableciendo la <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina la forma en que debe controlarse un carácter de entrada que coincida con el de petición de datos.</summary>
        <value>
          Es <see langword="true" /> si el carácter de petición de datos especificado como entrada hace que se restablezca la posición modificable actual de la máscara; de lo contrario, sería <see langword="false" /> para indicar que el carácter de petición de datos debe procesarse como un carácter de entrada normal. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Forms.MaskedTextBox> puede tratar dos categorías de caracteres, espacios y caracteres de símbolo del sistema, especialmente. Normalmente, se someterán a cada carácter de entrada con la máscara y aceptado o rechazado. Suponiendo que la <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> propiedad está establecida en no -`null`, a continuación, establecer el <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> propiedad `true` dará como resultado un procesamiento especial para el carácter de símbolo del sistema. Cuando el usuario escribe el carácter de símbolo del sistema en la máscara, hace que la posición de carácter de máscara actual se va a borrar y la posición actual avanza hasta el siguiente carácter modificable.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> tiene prioridad sobre la <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> propiedad, como se muestra en la tabla siguiente.  
  
|Valor ResetOnPrompt|Valor AllowPromptAsInput|Comportamiento resultante|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|Puede escribir el carácter de símbolo del sistema y hace que la posición actual de la máscara van a restablecer. Este es el valor predeterminado.|  
|`true`|`false`|Puede escribir el carácter de símbolo del sistema y hace que la posición actual de la máscara van a restablecer.|  
|`false`|`true`|El carácter de símbolo del sistema se procesa como un carácter de entrada estándar.|  
|`false`|`false`|El carácter de entrada no es válido y provoca una <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina la forma en que debe controlarse un carácter de entrada de espacio.</summary>
        <value>
          Es <see langword="true" /> si el carácter de entrada de espacio hace que se restablezca la posición modificable actual de la máscara; de lo contrario, es <see langword="false" /> para indicar que se debe procesar como un carácter de entrada normal. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Forms.MaskedTextBox> puede tratar dos categorías de caracteres, espacios y caracteres de símbolo del sistema, especialmente. Normalmente, se someterán a cada carácter de entrada con la máscara y aceptado o rechazado. Establecer el <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> propiedad `true` dará como resultado la posición de carácter de máscara actual se va a borrar y la posición actual avanza hasta el siguiente carácter modificable.  
  
 El tipo de carácter de entrada determinará si el motor de enmascaramiento avanza hasta el siguiente carácter de la máscara, o permanece en la posición actual y espera un carácter coincidente. Si el carácter de entrada es un espacio y no coincide con el carácter no modificable actual de la máscara, el motor de enmascaramiento lo omitirá hacia delante hasta el siguiente carácter de la máscara. Si el carácter de entrada no es un espacio y no coincide con el carácter no modificable actual de la máscara, el motor de enmascaramiento permanecen en la posición actual de la máscara y trate de hacer coincidir el siguiente carácter de entrada en el mismo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desplaza el contenido del control a la posición del símbolo de intercalación actual. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, dado que el <xref:System.Windows.Forms.MaskedTextBox> control no admite la configuración de varias líneas, este método se invalida para llevar a cabo ninguna acción.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la selección actual del control <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>El texto seleccionado actualmente como <see cref="T:System.String" />. Si no hay ningún texto seleccionado actualmente, esta propiedad se resuelve como una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las selecciones recuperadas mediante esta propiedad están formateadas según las propiedades de formato del control, como <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>, <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> y <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>. Las selecciones establecidas mediante esta propiedad se comportan como una operación de pegar: cada carácter se compara con la máscara y el <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> evento se desencadena para los caracteres no válidos. Si <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> es `true`, se permiten literales y caracteres de petición al establecer <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>y se quitará silenciosamente a menos que infrinjan la máscara.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el usuario puede volver a especificar valores literales.</summary>
        <value>
          Es <see langword="true" /> para permitir que se vuelvan a especificar literales; de lo contrario, es <see langword="false" /> para impedir que el usuario sobrescriba literales de cadena. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Máscaras de entrada suelen contengan literales. Cuando el usuario escribe caracteres en el <xref:System.Windows.Forms.MaskedTextBox> en tiempo de ejecución, la posición del carácter actual a veces entrarán en un literal. El <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> propiedad describe cómo se controla, como se indica a continuación proporcionados por el usuario para el carácter siguiente:  
  
-   Si esta propiedad es `true`, el usuario puede introducir repetidamente el mismo carácter que el literal en la posición actual, o puede escribir el siguiente carácter modificable, con lo que se produce el salto la posición actual a esa posición.  
  
-   Si esta propiedad es `false`, el usuario sólo puede escribir el siguiente carácter modificable. Si la posición siguiente de la máscara no acepta el literal de cadena (por ejemplo, el usuario escribe "/" y la siguiente posición sólo acepta dígitos), el control, se producirá la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> eventos.  
  
 Por ejemplo, en la máscara de entrada de fecha de "90/90/0000", los caracteres de barra diagonal son literales. Suponga que el usuario ha escrito dos dígitos iniciales, "11", por lo que la posición actual de la máscara es en el primer literal de barra diagonal (/). Si <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> es `true`, a continuación, el usuario tiene las siguientes opciones válidas:  
  
-   El usuario puede escribir un carácter "/". Esto da como resultado la posición se desplace hasta el siguiente carácter, que en este ejemplo es la cuarta posición, un elemento de enmascaramiento 9.  
  
-   El usuario puede escribir el siguiente carácter modificable, que en este ejemplo es un dígito. Se validaría el dígito y la posición actual se mueve automáticamente a la quinta posición, que es un elemento de enmascaramiento 0.  
  
 Si <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> es `false`, a continuación, se permite sólo una entrada de datos válidos, que en este ejemplo sería un dígito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto tal y como se muestra actualmente al usuario.</summary>
        <value>
          <see cref="T:System.String" /> que contiene el texto mostrado actualmente por el control. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> es la propiedad de enlace predeterminada para el <xref:System.Windows.Forms.MaskedTextBox> clase.  
  
 Recuperados mediante esta propiedad se da formato a cadenas según las propiedades de formato del control, como <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> y <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>.  
  
 Puede asignar una cadena con o sin caracteres literales a <xref:System.Windows.Forms.MaskedTextBox.Text%2A> según los valores de <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>, y <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> es la propiedad de enlace predeterminada para <xref:System.Windows.Forms.MaskedTextBox>.  
  
 <xref:System.Windows.Forms.MaskedTextBox> se producirá la <xref:System.Windows.Forms.Control.TextChanged> evento cada vez que cambia el valor de texto con formato. Propiedades diferentes que pueden o no pueden hacer que este valor cambiar. Por ejemplo, cambiar el <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propiedad no generará el <xref:System.Windows.Forms.Control.TextChanged> eventos, pero cambiar la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece cómo se alinea el texto alinea en un control de cuadro de texto enmascarado.</summary>
        <value>Uno de los valores de la enumeración <see cref="T:System.Windows.Forms.HorizontalAlignment" /> que especifica cómo se alinea el texto con respecto al control. El valor predeterminado es <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> propiedad para alinear el texto mostrado en un <xref:System.Windows.Forms.MaskedTextBox> para que coincida con el diseño de los elementos visuales en el formulario. Por ejemplo, si los controles se encuentran en el lado derecho del formulario, puede establecer la <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> propiedad <xref:System.Windows.Forms.HorizontalAlignment.Right>, y el texto se alineará con el lado derecho del control en lugar de la alineación izquierda predeterminada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor asignado a esta propiedad no es de tipo <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la alineación del texto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> evento se genera tras la <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> se cambia la propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MaskedTextBox> denominado `MaskedTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la longitud del texto mostrado.</summary>
        <value>Un valor Int32 que representa el número de caracteres en la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.Text" />. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> respeta propiedades como <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />, lo que significa que los resultados devueltos pueden ser diferentes dependiendo de si el control tiene el foco o no.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si los literales de cadena y de solicitud de datos se incluyen en la cadena con formato.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.MaskFormat" />. El valor predeterminado es <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propiedad determina cómo se procesan los caracteres literales y símbolo del sistema en la máscara al generar la cadena con formato. Más específicamente, determina si los caracteres literales, caracteres de petición o ambos se incluyen en el <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad. Cuando se excluyen los caracteres de petición, se transforman en espacios en la cadena con formato.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> propiedad sirve para un propósito similar con respecto a cómo el <xref:System.Windows.Forms.MaskedTextBox.Text%2A> se interpreta la propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propiedad se ha establecido con un valor <see cref="T:System.Windows.Forms.MaskFormat" /> que no es válido.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el cuadro de texto enmascarado actual. Este método invalida <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />.</summary>
        <returns>
          <see cref="T:System.String" /> que contiene información acerca del <see cref="T:System.Windows.Forms.MaskedTextBox" /> actual. La cadena incluye el tipo, una vista simplificada de la cadena de entrada y la cadena de entrada con formato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> método llama a la implementación de la clase base de este método, <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>, a continuación, se anexa la cadena de entrada después del procesamiento de la máscara. Este método respeta propiedades que modifican la apariencia de la cadena con formato, con las siguientes excepciones:  
  
-   La cadena devuelta siempre incluye caracteres de símbolo del sistema y literales, independientemente de los valores de la <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propiedad.  
  
-   Se omiten los caracteres de la contraseña, por lo que se devuelven los caracteres reales escrito por el usuario. En otras palabras, los valores de la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> y <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> se omiten las propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando <see cref="T:System.Windows.Forms.MaskedTextBox" /> ha terminado de analizar el valor actual utilizando la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox> control validará opcionalmente proporcionados por el usuario con el tipo definido por su <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> propiedad. Cuando esta propiedad no es `null`, se produce la siguiente serie de eventos:  
  
1.  La secuencia de validación comienza cuando se produce una de las siguientes acciones:  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> control pierde foco.  
  
    -   El <xref:System.Windows.Forms.MaskedTextBox.Text%2A> se recupera la propiedad.  
  
    -   Se llama al método <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A>.  
  
2.  Cualquiera de estos eventos produce una llamada a la `Parse` método del tipo especificado con el <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> propiedad. `Parse` es responsable de la conversión de la cadena de entrada con formato al tipo de destino. Una conversión correcta equivale a una validación correcta.  
  
3.  Después de `Parse` devuelve, la <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> evento se desencadena. El controlador de eventos para este evento normalmente se implementa para realizar el procesamiento de validación de tipo o máscara. Recibe una <xref:System.Windows.Forms.TypeValidationEventArgs> parámetro que contiene información sobre la conversión; por ejemplo, el <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> miembro indica si la conversión se realizó correctamente.  
  
4.  Después del controlador de eventos para el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> devuelve de evento, el evento de validación estándar, <xref:System.Windows.Forms.Control.Validating>, se genera. Un controlador se puede implementar para realizar una validación estándar, quizá para incluir al cancelar el evento.  
  
5.  Si no se cancela el evento en el paso 3, el estándar de controlar el evento de validación <xref:System.Windows.Forms.Control.Validated> se genera.  
  
 Si el <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> propiedad está establecida en `true` en el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> controlador de eventos, se cancelará el evento y el <xref:System.Windows.Forms.MaskedTextBox> control conserva el foco, a menos que la subsiguiente <xref:System.Windows.Forms.Control.Validating> evento establece la versión de la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> propiedad volver a `false`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se intenta analizar la entrada del usuario como válido <xref:System.DateTime> objeto. Si se produce un error, el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> controlador de eventos muestra un mensaje de error al usuario. Si el valor es válido <xref:System.DateTime>, el código comprueba que la fecha proporcionada no es antes de la fecha de hoy. Este ejemplo de código requiere que el proyecto de formularios Windows Forms contiene un <xref:System.Windows.Forms.MaskedTextBox> control denominado `MaskedTextBox1` y un <xref:System.Windows.Forms.ToolTip> control denominado `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deshace la última operación de edición del cuadro de texto. <see cref="T:System.Windows.Forms.MaskedTextBox" /> no admite este método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.Undo%2A> método se hereda de la base de <xref:System.Windows.Forms.TextBoxBase> clase. Sin embargo, <xref:System.Windows.Forms.MaskedTextBox> no admite la funcionalidad de deshacer.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se debe utilizar el carácter de contraseña proporcionado por el sistema operativo.</summary>
        <value>
          Es <see langword="true" /> si la contraseña del sistema debe utilizarse como carácter de solicitud de datos; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propiedad determina si la entrada proporcionada por el usuario debe mostrarse en el <xref:System.Windows.Forms.MaskedTextBox> como varias apariciones de un carácter de contraseña definido por el sistema operativo. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> ofrece funciones similares a la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propiedad, pero en lugar de utilizar un carácter proporcionado por el programador para el símbolo del sistema, <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> utiliza un indicador definido por el sistema operativo. Esta propiedad tiene prioridad sobre <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>.  
  
> [!IMPORTANT]
>  Una consideración de seguridad, el <xref:System.Windows.Forms.MaskedTextBox> control deshabilita las operaciones de cortar y copiar en las cadenas de protección por contraseña.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El carácter de contraseña especificado es igual que el carácter de entrada actual, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Es necesario que los dos caracteres sean distintos.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte la cadena de entrada del usuario en una instancia del tipo de validación.</summary>
        <returns>Si es correcto, un <see cref="T:System.Object" /> del tipo especificó por la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />; de lo contrario, es <see langword="null" /> para indicar el error de conversión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> método intenta convertir la cadena con formato contenida en el <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propiedad a una instancia del tipo especificado por el <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propiedad. Se omiten los caracteres de símbolo del sistema en la cadena con formato, pero los literales se administran según el valor actual de la <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propiedad.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> genera el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> evento una vez que se intenta realizar la conversión, independientemente de su éxito.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Se produjo una excepción crítica durante el análisis de la cadena de entrada.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de datos utilizado para comprobar la entrada de datos por parte del usuario.</summary>
        <value>
          <see cref="T:System.Type" /> que representa el tipo de datos utilizado en la validación. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Máscaras no garantizan por sí mismas que la entrada de un usuario representará un valor válido para un tipo determinado. El código de C# siguiente muestra una máscara:  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 El siguiente código de Visual Basic muestra una máscara:  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 Esta máscara puede exigir que el usuario escriba ocho dígitos, pero no se puede comprobar que el usuario escribe valores de año, mes y fecha en el intervalo correcto; "12/20/2003" y "70/90/0000" son igualmente válidos en lo que se refiere la máscara.  
  
 Puede usar <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> para comprobar si los datos introducidos por el usuario están dentro del intervalo correcto, en el caso mencionado anteriormente, mediante la asignación de una instancia de la <xref:System.DateTime> tipo. El texto actual en el control será validará cuando el usuario deja el control. Puede determinar si los datos no supera la validación mediante la supervisión para el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> eventos. <xref:System.Windows.Forms.MaskedTextBox> solo realizará la comprobación en <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> si <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> es `true`.  
  
 Si desea usar sus propios tipos de datos personalizados con <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>, debe implementar una variable static `Parse` método que toma una cadena como parámetro. Este método debe implementarse con una o ambas de las firmas siguientes:  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 En el ejemplo de código siguiente se intenta analizar la entrada del usuario como válido <xref:System.DateTime>. Si se produce un error, el <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> controlador de eventos muestra un mensaje de error al usuario. Si el valor es válido <xref:System.DateTime>, el código realiza una comprobación adicional para asegurarse de que la fecha proporcionada no es antes de la fecha de hoy. Este ejemplo de código requiere que el proyecto de formularios Windows Forms contiene un <xref:System.Windows.Forms.MaskedTextBox> control denominado `MaskedTextBox1` y un <xref:System.Windows.Forms.ToolTip> control denominado `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> de Windows que se va a procesar.</param>
        <summary>Procesa los mensajes de Windows.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si un control de cuadro de texto multilínea ajusta las palabras de forma automática al principio de la línea siguiente cuando es necesario. Esta propiedad no es compatible con <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>La propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /> siempre devuelve <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que <xref:System.Windows.Forms.MaskedTextBox> no es compatible con varias líneas de entrada, el <xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A> propiedad se omite.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>