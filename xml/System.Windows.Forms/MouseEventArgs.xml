<Type Name="MouseEventArgs" FullName="System.Windows.Forms.MouseEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dce787c4341ce067e3b182892960d14699e6d954" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648599" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MouseEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MouseEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona datos para los eventos <see cref="E:System.Windows.Forms.Control.MouseUp" />, <see cref="E:System.Windows.Forms.Control.MouseDown" /> y <see cref="E:System.Windows.Forms.Control.MouseMove" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Control.MouseDown> evento tiene lugar cuando el usuario presiona el botón del mouse mientras el puntero está sobre un control. El <xref:System.Windows.Forms.Control.MouseUp> evento tiene lugar cuando el usuario suelta el botón del mouse mientras el puntero está sobre el control. El <xref:System.Windows.Forms.Control.MouseMove> evento tiene lugar cuando el usuario mueve el puntero del mouse sobre un control. A <xref:System.Windows.Forms.MouseEventArgs> especifica qué botón del mouse se presionó, cuántas veces el botón del mouse se presionó y se soltó, las coordenadas de mouse y la cantidad que se mueve la rueda del mouse.  
  
 Es posible recibir un <xref:System.Windows.Forms.Control.MouseDown> eventos sin su correspondiente <xref:System.Windows.Forms.Control.MouseUp>, si el usuario cambia el foco a otra aplicación antes de soltar el botón del mouse.  
  
 Estos tres eventos existen para la <xref:System.Windows.Forms.Control>, <xref:System.Windows.Forms.AxHost>, y <xref:System.Windows.Forms.NotifyIcon> clases.  
  
 Para obtener información sobre el modelo de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Los siguientes identificadores de ejemplos de código la <xref:System.Windows.Forms.Control.MouseDown> eventos en un <xref:System.Windows.Forms.TextBox> controlar de manera que al hacer clic en el botón secundario del mouse, se selecciona todo el texto en el control. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.TextBox> control que se denomina `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 El siguiente ejemplo de código utiliza el `Location` propiedad para realizar un seguimiento hace clic del botón primario del mouse y para dibujar una serie de segmentos de línea recta en respuesta a la entrada del usuario. El ejemplo no volver a dibujar las líneas si oculta el formulario y, a continuación, volver a mostrar Este código se ha omitido para simplificar el trabajo.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MouseEventArgs.X%2A> y <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propiedades para mostrar la posición actual del puntero del mouse (ratón) en un <xref:System.Windows.Forms.ToolTip> ventana.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseDown" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseUp" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseMove" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseEventArgs (System.Windows.Forms.MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MouseButtons button, int32 clicks, int32 x, int32 y, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (button As MouseButtons, clicks As Integer, x As Integer, y As Integer, delta As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseEventArgs(System::Windows::Forms::MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="clicks" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="button">Uno de los valores de <see cref="T:System.Windows.Forms.MouseButtons" /> que indica el botón del mouse que se ha presionado.</param>
        <param name="clicks">Número de veces que se presionó un botón del mouse.</param>
        <param name="x">Coordenada x de un clic del mouse, en píxeles.</param>
        <param name="y">Coordenada y de un clic del mouse, en píxeles.</param>
        <param name="delta">Recuento con signo del número de pasos de trinquete que ha girado la rueda del mouse.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MouseEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Button">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MouseButtons Button { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MouseButtons Button" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Button" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Button As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MouseButtons Button { System::Windows::Forms::MouseButtons get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene qué botón del mouse se presionó.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.MouseButtons" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente código de ejemplo se administra la <xref:System.Windows.Forms.Control.MouseDown> eventos en un <xref:System.Windows.Forms.TextBox> controlar de manera que al hacer clic en el botón secundario del mouse, se selecciona todo el texto en el control. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.TextBox> control denominado `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Clicks">
      <MemberSignature Language="C#" Value="public int Clicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Clicks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clicks As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Clicks { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de veces que el botón del mouse se presionó y se soltó.</summary>
        <value>
          <see cref="T:System.Int32" /> que contiene el número de veces que el botón del mouse se presionó y se soltó.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque define la interfaz de Windows estándar de eventos del mouse como clics sencillos o hace doble clic en, las aplicaciones individuales pueden interpretar un mayor número de clics como un único evento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> eventos. Este informe le ayuda a obtener cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia de un tipo que hereda de <xref:System.Windows.Forms.Control>, como un <xref:System.Windows.Forms.Button> o <xref:System.Windows.Forms.ComboBox>. A continuación, asigne a la instancia `Control1` y asegurarse de que el controlador de eventos está asociado con el <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public int Delta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delta" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Delta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Delta As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delta { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un recuento con signo del número de pasos que ha girado la rueda del mouse, multiplicado por la constante WHEEL_DELTA. Un paso es una muesca de la rueda del mouse.</summary>
        <value>Recuento con signo del número de pasos que ha girado la rueda del mouse, multiplicado por la constante WHEEL_DELTA.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rueda del mouse combina las características de una rueda y un botón del mouse. La rueda tiene puntos equidistantes, discretas. Al girar la rueda, se envía un mensaje de rueda tal y como se encuentra cada cambio de posición. Una muesca de rueda, un paso, se define por la constante de windows WHEEL_DELTA, que es 120. Un valor positivo indica que se gira la rueda hacia delante (lejos del usuario); un valor negativo indica que se gira la rueda hacia atrás (hacia el usuario).  
  
 Actualmente, un valor de 120 es el estándar para un paso. Si se introducen mouse de mayor resolución, la definición de WHEEL_DELTA puede volverse más pequeña. Mayoría de las aplicaciones debe comprobar si un valor positivo o negativo en lugar de un agregado total.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> eventos. Este informe le ayuda a obtener cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia de un tipo que hereda de <xref:System.Windows.Forms.Control>, como un <xref:System.Windows.Forms.Button> o <xref:System.Windows.Forms.ComboBox>. A continuación, asigne a la instancia `Control1` y asegurarse de que el controlador de eventos está asociado con el <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Location" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ubicación del mouse durante el evento de mouse que se genera.</summary>
        <value>
          <see cref="T:System.Drawing.Point" /> que contiene las coordenadas x e y del mouse, en píxeles, con respecto a la esquina superior izquierda del formulario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MouseEventArgs.Location%2A> propiedad seguimiento de los clics primario del mouse y dibujar una serie de segmentos de línea recta en respuesta a la entrada del usuario. El ejemplo no conserva dibujar las líneas si oculta el formulario y, a continuación, volver a mostrar Este código se ha omitido para simplificar el trabajo.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la coordenada X del mouse durante el evento de mouse que se genera.</summary>
        <value>Coordenada X del mouse en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las coordenadas del mouse varían según el evento que se está generando. Por ejemplo, cuando el <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> evento está controlado, son los valores de coordenadas de mouse (ratón) en relación con las coordenadas del control que provocó el evento. Algunos eventos relacionados con operaciones de arrastrar y colocar tienen asociados valores de coordenadas del mouse con respecto al origen de formulario u origen de pantalla.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MouseEventArgs.X%2A> y <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propiedades para mostrar la posición actual del puntero del mouse (ratón) en un <xref:System.Windows.Forms.ToolTip> ventana.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la coordenada Y del mouse durante el evento de mouse que se genera.</summary>
        <value>Coordenada Y del mouse en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las coordenadas del mouse varían según el evento que se está generando. Por ejemplo, cuando el <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> evento está controlado, son los valores de coordenadas de mouse (ratón) en relación con las coordenadas del control que provocó el evento. Algunos eventos relacionados con operaciones de arrastrar y colocar tienen asociados valores de coordenadas de mouse (ratón) que están relacionadas con el origen de formulario u origen de pantalla.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MouseEventArgs.X%2A> y <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propiedades para mostrar la posición actual del puntero del mouse (ratón) en un <xref:System.Windows.Forms.ToolTip> ventana. Para utilizar este código, llame a `TrackCoordinates` desde el constructor del formulario.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
  </Members>
</Type>