<Type Name="CheckedListBox" FullName="System.Windows.Forms.CheckedListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb60813122b168ee870935f2713b1981c994a7a0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36348007" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CheckedListBox : System.Windows.Forms.ListBox" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CheckedListBox extends System.Windows.Forms.ListBox" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CheckedListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class CheckedListBox&#xA;Inherits ListBox" />
  <TypeSignature Language="C++ CLI" Value="public ref class CheckedListBox : System::Windows::Forms::ListBox" />
  <TypeSignature Language="F#" Value="type CheckedListBox = class&#xA;    inherit ListBox" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListBox</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.LookupBindingProperties</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays a <see cref="T:System.Windows.Forms.ListBox" /> in which a check box is displayed to the left of each item.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este control presenta una lista de elementos que el usuario puede navegar mediante el teclado o la barra de desplazamiento en el lado derecho del control. El usuario puede colocar una marca de verificación en uno o más elementos y los elementos activados navegar con el <xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection> y <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>.  
  
 Para agregar objetos a la lista en tiempo de ejecución, asigne una matriz de referencias de objeto con el <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> método. La lista, a continuación, muestra el valor de cadena predeterminado para cada objeto. Puede agregar elementos individuales a la lista con el <xref:System.Windows.Forms.CheckedListBox.ObjectCollection.Add%2A> método.  
  
 El <xref:System.Windows.Forms.CheckedListBox> objeto admite tres Estados a través de la <xref:System.Windows.Forms.CheckState> enumeración: <xref:System.Windows.Forms.CheckState.Checked>, <xref:System.Windows.Forms.CheckState.Indeterminate>, y <xref:System.Windows.Forms.CheckState.Unchecked>. Debe establecer el estado de <xref:System.Windows.Forms.CheckState.Indeterminate> en el código porque la interfaz de usuario para un <xref:System.Windows.Forms.CheckedListBox> no proporciona un mecanismo para realizar esta acción.  
  
 Si <xref:System.Windows.Forms.ListBox.UseTabStops%2A> es `true`, el <xref:System.Windows.Forms.CheckedListBox> se reconozca y expanda los caracteres de tabulación en texto de un elemento, la creación de columnas. Estas posiciones de tabulación están preestablecidas y no se puede cambiar. Para usar tabulaciones personalizadas, establezca <xref:System.Windows.Forms.ListBox.UseTabStops%2A> a `false`, establezca <xref:System.Windows.Forms.ListBox.UseCustomTabOffsets%2A> a `true`y agregue los valores personalizados para el <xref:System.Windows.Forms.ListBox.CustomTabOffsets%2A> colección.  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering%2A> propiedad es `false`, el <xref:System.Windows.Forms.ListBox.CustomTabOffsets%2A> propiedad se omite y se reemplaza con desplazamientos de tabulaciones estándar.  
  
 La <xref:System.Windows.Forms.CheckedListBox> clase admite las siguientes tres colecciones indizadas:  
  
|Colección|Clase encapsuladora|  
|----------------|-------------------------|  
|Todos los elementos incluidos en el <xref:System.Windows.Forms.CheckedListBox> control.|<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>|  
|Elementos activados (incluidos los elementos en un estado indeterminado), que es un subconjunto de los elementos contenido en el <xref:System.Windows.Forms.CheckedListBox> control.|<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>|  
|Comprueba los índices, que es un subconjunto de los índices en la colección de elementos. Estos índices especifican elementos en un estado indeterminado o no comprobado.|<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>|  
  
 Las tres tablas siguientes son ejemplos de las tres colecciones indizadas que el <xref:System.Windows.Forms.CheckedListBox> es compatible con la clase.  
  
 La primera tabla proporciona un ejemplo de la colección indizada de elementos del control (todos los elementos incluidos en el control).  
  
|Índice|Elemento|Comprobación de estado|  
|-----------|----------|-----------------|  
|0|Objeto 1|<xref:System.Windows.Forms.CheckState.Unchecked>|  
|1|Objeto 2|<xref:System.Windows.Forms.CheckState.Checked>|  
|2|Objeto 3|<xref:System.Windows.Forms.CheckState.Unchecked>|  
|3|Objeto 4|<xref:System.Windows.Forms.CheckState.Indeterminate>|  
|4|Objeto 5|<xref:System.Windows.Forms.CheckState.Checked>|  
  
 La segunda tabla proporciona un ejemplo de la colección indizada de los elementos activados.  
  
|Índice|Elemento|  
|-----------|----------|  
|0|Objeto 2|  
|1|Objeto 4|  
|2|Objeto 5|  
  
 La tercera tabla proporciona un ejemplo de la colección indizada de índices de elementos activados.  
  
|Índice|Índice del elemento|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo puede usar los métodos, propiedades y colecciones de una <xref:System.Windows.Forms.CheckedListBox>. Se trata de un ejemplo completo listo para ejecutarse una vez que haya copiado a su proyecto. Puede comprobar y desactive los elementos, utilice el cuadro de texto para agregar elementos y una vez que haya hecho clic el guardar botón, desactive los elementos activados.  
  
 [!code-cpp[Classic CheckedListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckedListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckedListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckedListBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckedListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckedListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckedListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CheckedListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.CheckedListBox" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, <xref:System.Windows.Forms.CheckedListBox> utiliza <xref:System.Windows.Forms.Control.SetStyle%2A> y `ResizeRedraw` valor de <xref:System.Windows.Forms.ControlStyles> para especificar que se vuelve a dibujarse el control cuando cambia de tamaño.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As CheckedListBox.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::CheckedListBox::CheckedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedIndices : System.Windows.Forms.CheckedListBox.CheckedIndexCollection" Usage="System.Windows.Forms.CheckedListBox.CheckedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Collection of checked indexes in this <see cref="T:System.Windows.Forms.CheckedListBox" />.</summary>
        <value>El <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection" /> colección para el <see cref="T:System.Windows.Forms.CheckedListBox" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La colección de índices activados es un subconjunto de los índices en la colección de todos los elementos de la <xref:System.Windows.Forms.CheckedListBox> control. Estos índices especifican elementos en un estado indeterminado o no comprobado.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos activados en el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection> para ver el estado de un elemento de activación. En el ejemplo se muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>y el <xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>.  
  
 El primer bucle utiliza el <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método para obtener el <xref:System.Windows.Forms.CheckState> de cada elemento activado, dado el índice del elemento. El segundo bucle también utiliza <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>, pero usa el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType> método para recuperar el índice del elemento.  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.CheckedItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/CheckedItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As CheckedListBox.CheckedItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::CheckedItemCollection ^ CheckedItems { System::Windows::Forms::CheckedListBox::CheckedItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedItems : System.Windows.Forms.CheckedListBox.CheckedItemCollection" Usage="System.Windows.Forms.CheckedListBox.CheckedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+CheckedItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Collection of checked items in this <see cref="T:System.Windows.Forms.CheckedListBox" />.</summary>
        <value>El <see cref="T:System.Windows.Forms.CheckedListBox.CheckedItemCollection" /> colección para el <see cref="T:System.Windows.Forms.CheckedListBox" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La colección es un subconjunto de los objetos de la <xref:System.Windows.Forms.CheckedListBox.Items%2A> colección, que representa los elementos cuya <xref:System.Windows.Forms.CheckState?displayProperty=nameWithType> es `Checked` o `Indeterminate`. Los índices de esta colección están en orden ascendente.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos activados en el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection> para ver el estado de un elemento de activación. En el ejemplo se muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>y el <xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>.  
  
 El primer bucle utiliza el <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método para obtener el <xref:System.Windows.Forms.CheckState> de cada elemento activado, dado el índice del elemento. El segundo bucle también utiliza <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>, pero usa el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType> método para recuperar el índice del elemento.  
  
 Para ejecutar este ejemplo, realice los pasos siguientes:  
  
1.  Cree una nueva aplicación de Windows Forms.  
  
2.  Agregar un <xref:System.Windows.Forms.CheckedListBox> y un <xref:System.Windows.Forms.Button> al formulario.  
  
3.  Asígnele un nombre `WhatIsChecked`, agregue un controlador para su <xref:System.Windows.Forms.Control.Click> eventos y cópielo en el código desde el cuerpo del controlador siguiente.  
  
4.  Agregue algunos elementos a la <xref:System.Windows.Forms.CheckedListBox>.  
  
5.  Ejecute el ejemplo y compruebe algunas de las casillas de verificación en el cuadro de lista.  
  
6.  Haga clic en el botón.  
  
     Verá una serie de cuadros de mensaje que indican qué elementos se protegieron.  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckedListBox.CheckedItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="CheckOnClick">
      <MemberSignature Language="C#" Value="public bool CheckOnClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckOnClick" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckOnClick" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckOnClick As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckOnClick { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckOnClick : bool with get, set" Usage="System.Windows.Forms.CheckedListBox.CheckOnClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the check box should be toggled when an item is selected.</summary>
        <value>
          <see langword="true" /> Si la marca de verificación se aplica inmediatamente; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A> indica si se debe activar o desactivar la casilla de verificación cuando se selecciona un elemento. El comportamiento predeterminado consiste en cambiar la selección en el primer clic y, a continuación, hacer que el usuario haga clic en nuevo para aplicar la marca de verificación. En algunos casos, sin embargo, puede ser preferible que el elemento se active en cuanto se hace clic en.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.CheckedListBox> control estableciendo la <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>, <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>, y <xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A> propiedades. El ejemplo se llena el <xref:System.Windows.Forms.CheckedListBox> con controles y conjuntos de la <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> a la <xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType> propiedad del control.  
  
 Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1` y llamar a la `InitializeCheckListBox` método desde el constructor del formulario o el método Load.  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks the <see cref="T:System.Windows.Forms.CheckedListBox" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.CheckedListBox.Click> evento pasa un <xref:System.EventArgs> a su controlador de eventos, por lo que sólo indica que se ha producido un clic. Si necesita información del mouse más específica (por ejemplo, el botón, número de clics, rotación de rueda o ubicación), utilice la <xref:System.Windows.Forms.Control.MouseDown> y <xref:System.Windows.Forms.Control.MouseUp> eventos, que pasa un <xref:System.Windows.Forms.MouseEventArgs> al controlador de eventos.  
  
 Un doble clic viene determinado por la configuración del mouse del sistema operativo del usuario. El usuario puede ajustar la cantidad de tiempo que puede transcurrir entre los clics durante un doble clic de un botón del mouse. El <xref:System.Windows.Forms.CheckedListBox.Click> evento se desencadena cada vez que el usuario hace doble clic en un control. Por ejemplo, si dispone de métodos de control de eventos para el <xref:System.Windows.Forms.CheckedListBox.Click> y <xref:System.Windows.Forms.Control.DoubleClick> eventos de un formulario, los eventos se generan cuando se hace doble clic en el formulario y se llaman a ambos métodos de control de eventos. Si el usuario hace doble clic en un control que no es compatible con la <xref:System.Windows.Forms.Control.DoubleClick> eventos, el <xref:System.Windows.Forms.CheckedListBox.Click> puede provocar dos veces el evento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.CheckedListBox.Click> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.CheckedListBox.Click> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#157)]
 [!code-vb[System.Windows.Forms.EventExamples#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="checkedListBox.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.CheckedListBox" /> control.</summary>
        <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se llama de forma explícita al método <xref:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance%2A>, se llamará a este método al hacer referencia a la propiedad <xref:System.Windows.Forms.Control.AccessibilityObject%2A>.  
  
> [!NOTE]
>  Para obtener o establecer el <xref:System.Windows.Forms.Control.AccessibilityObject%2A> propiedad, debe agregar una referencia a la `Accessibility` ensamblado instalado con .NET Framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" /> en una clase derivada, no debe llamar la clase base <see cref="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="checkedListBox.CreateItemCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the item collection.</summary>
        <returns>A <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> that represents the new item collection.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.CheckedListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the required creation parameters when the control handle is created.</summary>
        <value>Un <see cref="T:System.Windows.Forms.CreateParams" /> que contiene los parámetros necesarios.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Control.CreateParams%2A> propiedad no se invalida y utiliza para ajustar las propiedades del control derivado. Propiedades como la <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, y <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> debe establecer las propiedades correspondientes en el control como <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>. El <xref:System.Windows.Forms.CreateParams> sólo debe extenderse cuando se está ajustando una clase de control estándar de Windows o para establecer estilos que no se proporciona el espacio de nombres de Windows Forms. Para obtener más información acerca de cómo crear parámetros de control, vea el `CreateWindow` y `CreateWindowEx` funciones y la `CREATESTRUCT` documentación de la estructura en la referencia de Windows Platform SDK que se encuentra en la biblioteca de MSDN en http://msdn.microsoft.com/library.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se amplía el <xref:System.Windows.Forms.Control.CreateParams%2A> propiedad de un <xref:System.Windows.Forms.Button> clase derivada. El <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> propiedad ha cambiado, lo que hace que el botón para mostrar un <xref:System.Drawing.Icon> en lugar de un <xref:System.Drawing.Image>. Este ejemplo requiere que tenga una clase que hereda de la <xref:System.Windows.Forms.Button> clase.  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Al reemplazar el <see cref="P:System.Windows.Forms.Control.CreateParams" /> propiedad en una clase derivada, utilice la clase base <see cref="P:System.Windows.Forms.Control.CreateParams" /> propiedad para extender la implementación base. En caso contrario, debe proporcionar toda la implementación.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj with get, set" Usage="System.Windows.Forms.CheckedListBox.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data source for the control.</summary>
        <value>Objeto que representa el origen de los datos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceChanged;" />
      <MemberSignature Language="F#" Value="member this.DataSourceChanged : EventHandler " Usage="member this.DataSourceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.CheckedListBox.DataSource" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMember">
      <MemberSignature Language="C#" Value="public string DisplayMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DisplayMember" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayMember As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayMember : string with get, set" Usage="System.Windows.Forms.CheckedListBox.DisplayMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string that specifies a property of the objects contained in the list box whose contents you want to display.</summary>
        <value>Cadena que especifica el nombre de una propiedad de los objetos contenidos en el cuadro de lista. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada el <xref:System.Windows.Forms.CheckedListBox> muestra la cadena predeterminada para los elementos que contiene. Sin embargo, el <xref:System.Windows.Forms.CheckedListBox> puede mostrar diversos tipos de objetos y desea cambiar la cadena mostrada especificando el <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> propiedad. Si la propiedad especificada no existe, o el valor de la <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> propiedad es una cadena vacía (""), los resultados del objeto <xref:System.Windows.Forms.ListBox.ToString%2A> método se muestran en su lugar.  
  
 Si el nuevo valor de la <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> no se puede establecer, se mantiene el valor anterior.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.CheckedListBox> control estableciendo la <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>, <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>, y <xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A> propiedades. El ejemplo se llena el <xref:System.Windows.Forms.CheckedListBox> con controles y conjuntos de la <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> a la <xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType> propiedad del control.  
  
 Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1` y llamar a la `InitializeCheckListBox` método desde el constructor del formulario o el método Load.  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DisplayMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DisplayMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DisplayMemberChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayMemberChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DisplayMemberChanged;" />
      <MemberSignature Language="F#" Value="member this.DisplayMemberChanged : EventHandler " Usage="member this.DisplayMemberChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.CheckedListBox.DisplayMember" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a visual aspect of an owner-drawn <see cref="T:System.Windows.Forms.CheckedListBox" /> changes. This event is not relevant to this class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento es utilizado por un dibujado por el propietario <xref:System.Windows.Forms.CheckedListBox>. El evento se genera solo cuando la <xref:System.Windows.Forms.CheckedListBox.DrawMode%2A> propiedad está establecida en <xref:System.Windows.Forms.DrawMode.OwnerDrawFixed?displayProperty=nameWithType> o <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable?displayProperty=nameWithType>. Puede usar este evento para realizar las tareas necesarias para dibujar elementos el <xref:System.Windows.Forms.CheckedListBox>. Si tiene un elemento de tamaño variable (es decir, <xref:System.Windows.Forms.CheckedListBox.DrawMode%2A> está establecido en <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable?displayProperty=nameWithType>), el <xref:System.Windows.Forms.CheckedListBox.MeasureItem> evento se desencadena antes de que se dibuja el elemento. Puede crear un controlador de eventos para el <xref:System.Windows.Forms.CheckedListBox.MeasureItem> eventos para especificar el tamaño del elemento que se va a dibujar en el controlador de eventos para el <xref:System.Windows.Forms.CheckedListBox.DrawItem> eventos.  
  
 Este evento no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberSignature Language="F#" Value="member this.DrawMode : System.Windows.Forms.DrawMode with get, set" Usage="System.Windows.Forms.CheckedListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating the mode for drawing elements of the <see cref="T:System.Windows.Forms.CheckedListBox" />. This property is not relevant to this class.</summary>
        <value>Siempre un <see cref="T:System.Windows.Forms.DrawMode" /> de <see langword="Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemChecked">
      <MemberSignature Language="C#" Value="public bool GetItemChecked (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetItemChecked(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.GetItemChecked(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemChecked (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetItemChecked(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemChecked : int -&gt; bool" Usage="checkedListBox.GetItemChecked index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the item.</param>
        <summary>Returns a value indicating whether the specified item is checked.</summary>
        <returns>
          <see langword="true" /> if the item is checked; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.GetItemChecked%2A> Devuelve `true` si el valor de <xref:System.Windows.Forms.CheckState> es `Checked` o `Indeterminate` para el elemento. Para determinar el estado específico, el elemento está en, use la <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="index" /> specified is less than zero.  -or-  The <paramref name="index" /> specified is greater than or equal to the count of items in the list.</exception>
        <altmember cref="M:System.Windows.Forms.CheckedListBox.GetItemCheckState(System.Int32)" />
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="GetItemCheckState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckState GetItemCheckState (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.CheckState GetItemCheckState(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.GetItemCheckState(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemCheckState (index As Integer) As CheckState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::CheckState GetItemCheckState(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemCheckState : int -&gt; System.Windows.Forms.CheckState" Usage="checkedListBox.GetItemCheckState index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the item to get the checked value of.</param>
        <summary>Returns a value indicating the check state of the current item.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.CheckState" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método proporciona la capacidad de obtener la <xref:System.Windows.Forms.CheckState> valor de un elemento, según el índice. Si no establecer el estado de activación de un elemento a `Indeterminate`, a continuación, utilice el <xref:System.Windows.Forms.CheckedListBox.GetItemChecked%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos activados en el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection> para ver el estado de un elemento de activación. En el ejemplo se muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método para establecer el estado de activación de un elemento. En el ejemplo también muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A> propiedad para obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection> y <xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>.  
  
 El primer bucle utiliza el <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método para obtener el <xref:System.Windows.Forms.CheckState> de cada elemento activado, dado el índice del elemento. El segundo bucle también utiliza <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>, pero usa el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType> método para recuperar el índice del elemento.  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero.  -or-  The <paramref name="index" /> specified is greater than or equal to the count of items in the list.</exception>
        <altmember cref="M:System.Windows.Forms.CheckedListBox.GetItemChecked(System.Int32)" />
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberSignature Language="F#" Value="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " Usage="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the checked state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El estado de activación no se actualiza hasta después de que el <xref:System.Windows.Forms.CheckedListBox.ItemCheck> se produce el evento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.CheckedListBox.ItemCheck> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.CheckedListBox.ItemCheck> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#156)]
 [!code-vb[System.Windows.Forms.EventExamples#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public override int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ItemHeight : int with get, set" Usage="System.Windows.Forms.CheckedListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the height of the item area.</summary>
        <value>Alto, en píxeles, del área del elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta medida se basa en el alto de la fuente más un pequeño margen para proporcionar el espacio en blanco alrededor del elemento.  
  
 Los extensores de caracteres como "g" e "y" no se muestren correctamente cuando se cambia la fuente Arial de 9,75 puntos. Para corregir este problema, derive una clase de <xref:System.Windows.Forms.CheckedListBox> e invalide <xref:System.Windows.Forms.CheckedListBox.ItemHeight%2A> para devolver `base.ItemHeight+2`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As CheckedListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::ObjectCollection ^ Items { System::Windows::Forms::CheckedListBox::ObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.CheckedListBox.ObjectCollection" Usage="System.Windows.Forms.CheckedListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of items in this <see cref="T:System.Windows.Forms.CheckedListBox" />.</summary>
        <value>El <see cref="T:System.Windows.Forms.CheckedListBox.ObjectCollection" /> colección que representa los elementos de la <see cref="T:System.Windows.Forms.CheckedListBox" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.CheckedListBox.Items%2A> propiedad le permite obtener una referencia a la lista de elementos que están almacenados actualmente en un <xref:System.Windows.Forms.CheckedListBox> control. Con esta referencia, puede agregar elementos, quitar elementos y obtener un recuento de los elementos de la colección. Para obtener más información sobre las tareas que se pueden realizar con la colección de elementos, vea el <xref:System.Windows.Forms.CheckedListBox.ObjectCollection> temas de referencia de la clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos activados en el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection> para ver el estado de un elemento de activación. El ejemplo se utiliza la <xref:System.Windows.Forms.CheckedListBox.Items%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.ObjectCollection> para recuperar el índice de un elemento con la <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType> método. El ejemplo también muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>y el <xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>.  
  
 El primer bucle utiliza el <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A> método para obtener el <xref:System.Windows.Forms.CheckState> de cada elemento activado, dado el índice del elemento. El segundo bucle también utiliza <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>, pero usa el <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType> método para recuperar el índice del elemento.  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckedListBox.CheckedItems" />
        <altmember cref="P:System.Windows.Forms.CheckedListBox.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an owner-drawn <see cref="T:System.Windows.Forms.ListBox" /> is created and the sizes of the list items are determined. This event is not relevant to this class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede crear un controlador de eventos para este evento especificar el tamaño de un elemento antes de que se dibuje la <xref:System.Windows.Forms.CheckedListBox.DrawItem> eventos. El evento se genera solo cuando la <xref:System.Windows.Forms.CheckedListBox.DrawMode%2A> propiedad está establecida en <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>.  
  
 El alto máximo de un <xref:System.Windows.Forms.ListBox> elemento es de 255 píxeles.  
  
 Este evento no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks the <see cref="T:System.Windows.Forms.CheckedListBox" /> control with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.CheckedListBox.MouseClick> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.CheckedListBox.MouseClick> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#158)]
 [!code-vb[System.Windows.Forms.EventExamples#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="checkedListBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnClick : EventArgs -&gt; unit" Usage="checkedListBox.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.CheckedListBox.Click" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.CheckedListBox.OnClick%2A> método activa o desactiva la casilla de verificación del elemento que se ha hecho clic. Si el <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A> propiedad está establecida en `true`, se activa la casilla de verificación del estado activado o desactivado la primera vez que se hace clic en el elemento. En caso contrario, se activa la casilla de verificación sólo si el elemento ya está seleccionado.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnClick%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected override void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="checkedListBox.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> object with the details</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.CheckedListBox.DrawItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnDrawItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="checkedListBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnFontChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="checkedListBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnHandleCreated%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit&#xA;override this.OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit" Usage="checkedListBox.OnItemCheck ice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">An <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnItemCheck%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="checkedListBox.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that was raised.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se presiona la barra espaciadora y <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A> propiedad no está establecida en <xref:System.Windows.Forms.SelectionMode.None?displayProperty=nameWithType>, el <xref:System.Windows.Forms.CheckedListBox.OnKeyPress%2A> conmutadores de método que el estado de activación del elemento actualmente seleccionado.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnKeyPress%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected override void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="checkedListBox.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MeasureItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.CheckedListBox.MeasureItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnMeasureItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="checkedListBox.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListBox.SelectedIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.CheckedListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets padding within the <see cref="T:System.Windows.Forms.CheckedListBox" />. This property is not relevant to this class.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> que representa las características del espaciado interno del control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valores predeterminados para los controles reciben <xref:System.Windows.Forms.Control.Padding%2A> que son bastante cerca de directrices de interfaz de usuario de Windows. Pueden que algunos ajustes que siguen siendo necesarios para determinadas aplicaciones.  
  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberSignature Language="F#" Value="override this.RefreshItems : unit -&gt; unit" Usage="checkedListBox.RefreshItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Parses all <see cref="T:System.Windows.Forms.CheckedListBox" /> items again and gets new text strings for the items.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.SelectionMode with get, set" Usage="System.Windows.Forms.CheckedListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the selection mode.</summary>
        <value>Ya sea la <see langword="One" /> o <see langword="None" /> valo <see cref="T:System.Windows.Forms.SelectionMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A> propiedad determina si se puede seleccionar un elemento en el cuadro de lista o no se puede seleccionar ningún elemento. Para <xref:System.Windows.Forms.CheckedListBox> objetos, no se admite la selección múltiple. Puede establecer el modo en un elemento o ningún elemento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.CheckedListBox> control estableciendo el <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A> para permitir que un elemento de la lista para seleccionarse.  
  
 Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1` y llamar a la `InitializeCheckListBox` método desde el constructor del formulario o el método Load.  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An attempt was made to assign a value that is not a <see cref="T:System.Windows.Forms.SelectionMode" /> value of <see langword="One" /> or <see langword="None" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">An attempt was made to assign the <see langword="MultiExtended" /> value of <see cref="T:System.Windows.Forms.SelectionMode" /> to the control.</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetItemChecked">
      <MemberSignature Language="C#" Value="public void SetItemChecked (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetItemChecked(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.SetItemChecked(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItemChecked (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItemChecked(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetItemChecked : int * bool -&gt; unit" Usage="checkedListBox.SetItemChecked (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The index of the item to set the check state for.</param>
        <param name="value">
          <see langword="true" /> to set the item as checked; otherwise, <see langword="false" />.</param>
        <summary>Sets <see cref="T:System.Windows.Forms.CheckState" /> for the item at the specified index to <see langword="Checked" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un valor de `true` se pasa, este método establece la <xref:System.Windows.Forms.CheckState> valor a `Checked`. Un valor de `false` establece <xref:System.Windows.Forms.CheckState> a `Unchecked`.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos de la <xref:System.Windows.Forms.CheckedListBox> y comprueba todos los elementos en la lista. En el ejemplo se muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> y <xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A> métodos para establecer el estado de activación de un elemento. Para todos los elementos que debe comprobarse, <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> se llama para establecer el <xref:System.Windows.Forms.CheckState> a `Indeterminate`, mientras que <xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A> se llama en el otro elemento para establecer el estado de activación en `Checked`.  
  
 El ejemplo también muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.Items%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.ObjectCollection> para obtener el <xref:System.Windows.Forms.ListBox.ObjectCollection.Count%2A> de elementos.  
  
 [!code-cpp[CheckedListBox#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#3)]
 [!code-csharp[CheckedListBox#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#3)]
 [!code-vb[CheckedListBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The index specified is less than zero.  -or-  The index is greater than the count of items in the list.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetItemCheckState">
      <MemberSignature Language="C#" Value="public void SetItemCheckState (int index, System.Windows.Forms.CheckState value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetItemCheckState(int32 index, valuetype System.Windows.Forms.CheckState value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItemCheckState (index As Integer, value As CheckState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItemCheckState(int index, System::Windows::Forms::CheckState value);" />
      <MemberSignature Language="F#" Value="member this.SetItemCheckState : int * System.Windows.Forms.CheckState -&gt; unit" Usage="checkedListBox.SetItemCheckState (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Windows.Forms.CheckState" />
      </Parameters>
      <Docs>
        <param name="index">The index of the item to set the state for.</param>
        <param name="value">One of the <see cref="T:System.Windows.Forms.CheckState" /> values.</param>
        <summary>Sets the check state of the item at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> genera el evento <xref:System.Windows.Forms.CheckedListBox.ItemCheck>.  
  
 Los elementos cuyo <xref:System.Windows.Forms.CheckState> está establecido en `Indeterminate` aparecen con una marca de verificación en la casilla de verificación, pero la casilla aparece atenuada para indicar el estado indeterminado del elemento activado.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los elementos de la <xref:System.Windows.Forms.CheckedListBox> y comprueba todos los elementos en la lista. En el ejemplo se muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> y <xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A> métodos para establecer el estado de activación de un elemento. Para todos los elementos que debe comprobarse, <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> se llama para establecer el <xref:System.Windows.Forms.CheckState> a `Indeterminate`, mientras que <xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A> se llama en el otro elemento para establecer el estado de activación en `Checked`.  
  
 El ejemplo también muestra cómo utilizar el <xref:System.Windows.Forms.CheckedListBox.Items%2A> propiedad que se va a obtener el <xref:System.Windows.Forms.CheckedListBox.ObjectCollection> para obtener el <xref:System.Windows.Forms.ListBox.ObjectCollection.Count%2A> de elementos.  
  
 [!code-cpp[CheckedListBox#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#3)]
 [!code-csharp[CheckedListBox#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#3)]
 [!code-vb[CheckedListBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero.  -or-  The <paramref name="index" /> is greater than or equal to the count of items in the list.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="value" /> is not one of the <see cref="T:System.Windows.Forms.CheckState" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="ThreeDCheckBoxes">
      <MemberSignature Language="C#" Value="public bool ThreeDCheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ThreeDCheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeDCheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ThreeDCheckBoxes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeDCheckBoxes : bool with get, set" Usage="System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the check boxes have a <see cref="T:System.Windows.Forms.ButtonState" /> of <see langword="Flat" /> or <see langword="Normal" />.</summary>
        <value>
          <see langword="true" /> Si la casilla de verificación es plana; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.CheckedListBox> control estableciendo la <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>, <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>, y <xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A> propiedades. El ejemplo se llena el <xref:System.Windows.Forms.CheckedListBox> con controles y conjuntos de la <xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A> a la <xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType> propiedad del control.  
  
 Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.CheckedListBox> denominado `CheckedListBox1` y llamar a la `InitializeCheckListBox` método desde el constructor del formulario o el método Load.  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ButtonState" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="public bool UseCompatibleTextRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleTextRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool with get, set" Usage="System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether to use the <see cref="T:System.Drawing.Graphics" /> class ([!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]) or the <see cref="T:System.Windows.Forms.TextRenderer" /> class ([!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]) to render text.</summary>
        <value>
          <see langword="true" /> Si el <see cref="T:System.Drawing.Graphics" /> clase debe utilizarse para realizar la representación de texto para la compatibilidad con las versiones 1.0 y 1.1. de .NET Framework; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `UseCompatibleTextRendering` propiedad está diseñada para proporcionar compatibilidad visual entre los controles de formularios Windows Forms esa representación de texto utilizando la <xref:System.Windows.Forms.TextRenderer> clase y [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] y [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] las aplicaciones que realizan la representación de texto personalizado mediante el <xref:System.Drawing.Graphics>clase. En la mayoría de los casos, si la aplicación no se está actualizando desde [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] o [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], se recomienda que deje `UseCompatibleTextRendering` establecida en el valor predeterminado de `false`.  
  
 El [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] según <xref:System.Windows.Forms.TextRenderer> clase se introdujo en la [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] para mejorar el rendimiento, asegúrese de texto tenga una apariencia mejorada y mejorar la compatibilidad con fuentes internacionales. En versiones anteriores de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], el [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] según <xref:System.Drawing.Graphics> clase se utiliza para realizar la representación de texto de todas. [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] calcula el espaciado entre caracteres y el ajuste de línea de forma diferente de [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]. En una aplicación de formularios Windows Forms que utiliza el <xref:System.Drawing.Graphics> de clases para representar texto, esto podría provocar que el texto para los controles que utilizan <xref:System.Windows.Forms.TextRenderer> aparezca diferente de otros textos de la aplicación. Para resolver esta incompatibilidad, puede establecer la `UseCompatibleTextRendering` propiedad `true` para un control específico. Para establecer `UseCompatibleTextRendering` a `true` para todos los controles compatibles en la aplicación, llame a la <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=nameWithType> método con un parámetro de `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      </Docs>
    </Member>
    <Member MemberName="ValueMember">
      <MemberSignature Language="C#" Value="public string ValueMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValueMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ValueMember" />
      <MemberSignature Language="VB.NET" Value="Public Property ValueMember As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValueMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValueMember : string with get, set" Usage="System.Windows.Forms.CheckedListBox.ValueMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string that specifies the property of the data source from which to draw the value.</summary>
        <value>Cadena que especifica la propiedad del origen de datos a partir de la cual se va a dibujar el valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Especificar el contenido de la <xref:System.Windows.Forms.CheckedListBox.ValueMember%2A> propiedad en casos donde se enlazan datos.  
  
 Puede desactivar la <xref:System.Windows.Forms.CheckedListBox.ValueMember%2A> propiedad estableciendo la propiedad en una cadena vacía ("") o `null`.  
  
 Establecer un nuevo <xref:System.Windows.Forms.CheckedListBox.ValueMember%2A> propiedad genera el <xref:System.Windows.Forms.CheckedListBox.ValueMemberChanged> y <xref:System.Windows.Forms.ListControl.SelectedValueChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified property cannot be found on the object specified by the <see cref="P:System.Windows.Forms.CheckedListBox.DataSource" /> property.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ValueMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ValueMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.ValueMemberChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ValueMemberChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ValueMemberChanged;" />
      <MemberSignature Language="F#" Value="member this.ValueMemberChanged : EventHandler " Usage="member this.ValueMemberChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.CheckedListBox.ValueMember" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected override void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WmReflectCommand :  -&gt; unit" Usage="checkedListBox.WmReflectCommand m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The <see cref="T:System.Windows.Forms.Message" /> the top-level window sent to the <see cref="T:System.Windows.Forms.CheckedListBox" /> control.</param>
        <summary>Processes the command message the <see cref="T:System.Windows.Forms.CheckedListBox" /> control receives from the top-level window.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="checkedListBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Processes Windows messages.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo reemplazar el <xref:System.Windows.Forms.Control.WndProc%2A> método para controlar los mensajes del sistema operativo identificados en el <xref:System.Windows.Forms.Message> estructura. El mensaje de sistema operativo WM_ACTIVATEAPP se controla en este ejemplo para saber cuándo otra aplicación se está convirtiendo en activo. Consulte la documentación de referencia de Platform SDK que se encuentra en la biblioteca de MSDN en http://msdn.microsoft.com/library para entender las <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, y <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> valores. Los valores constantes reales se pueden encontrar en el archivo de encabezado de Windows.h incluido en la descarga de Platform SDK (sección Core SDK), que también está disponible en MSDN Library en http://msdn.microsoft.com/library.  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>