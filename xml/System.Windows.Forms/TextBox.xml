<Type Name="TextBox" FullName="System.Windows.Forms.TextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2baef4d787e3cd15a620e5329fa67f1a1023a826" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650569" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class TextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un control de cuadro de texto de Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con el <xref:System.Windows.Forms.TextBox> (control), el usuario puede escribir texto en una aplicación. Este control tiene funcionalidad adicional que no se encuentra en el control de cuadro de texto de Windows estándar, incluida la edición de varias líneas y máscaras de caracteres de la contraseña.  
  
 Normalmente, un <xref:System.Windows.Forms.TextBox> control se utiliza para mostrar, o Aceptar como entrada, una sola línea de texto. Puede usar el <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> y <xref:System.Windows.Forms.TextBox.ScrollBars%2A> propiedades para permitir varias líneas de texto que se muestren o escriban. Establecer el <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A> y <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A> propiedades `true` para habilitar la mayor para manipular texto en un varias líneas <xref:System.Windows.Forms.TextBox> control.  
  
> [!NOTE]
>  Debe establecer el <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> propiedad `true` para ajustar el alto de la <xref:System.Windows.Forms.TextBox> control. Puede ajustar el alto estableciendo la <xref:System.Windows.Forms.Control.Size%2A> propiedad.  
  
 Puede limitar la cantidad de texto escrito en un <xref:System.Windows.Forms.TextBox> control estableciendo el <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad en un número específico de caracteres. <xref:System.Windows.Forms.TextBox> También se pueden utilizar controles para aceptar contraseñas y otra información confidencial. Puede usar el <xref:System.Windows.Forms.TextBox.PasswordChar%2A> propiedad para enmascarar caracteres escritos en una versión de línea del control. Use la <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> propiedad para permitir al usuario escribir sólo mayúsculas, sólo minúsculas o una combinación de caracteres en mayúsculas y minúsculas en el <xref:System.Windows.Forms.TextBox> control.  
  
 Para desplazar el contenido de la <xref:System.Windows.Forms.TextBox> hasta que el cursor (símbolo de intercalación) está dentro del área visible del control, puede usar el <xref:System.Windows.Forms.TextBoxBase.ScrollToCaret%2A> método. Para seleccionar un intervalo de texto en el cuadro de texto, puede usar el <xref:System.Windows.Forms.TextBoxBase.Select%2A> método.  
  
 Para impedir que el texto que se especifican en un <xref:System.Windows.Forms.TextBox> (control), puede crear un controlador de eventos para el <xref:System.Windows.Forms.Control.KeyDown> eventos con el fin de validar cada carácter escrito en el control. También puede restringir toda entrada de datos en un <xref:System.Windows.Forms.TextBox> control estableciendo la <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> propiedad `true`.  
  
> [!NOTE]
>  La mayoría de la funcionalidad de la <xref:System.Windows.Forms.TextBox> control se hereda de la <xref:System.Windows.Forms.TextBoxBase> clase.  
>   
>  Mediante el <xref:System.Windows.Forms.TextBox> control con estilos visuales habilitados provocará la manipulación incorrecta de las fuentes suplentes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un multilínea <xref:System.Windows.Forms.TextBox> control con barras de desplazamiento vertical. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, y <xref:System.Windows.Forms.Control.Dock%2A> propiedades para hacer que el control de cuadro de texto multilínea sea útil para crear documentos de texto.  
  
 [!code-csharp[Classic TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.TextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El control contenedor primario define la configuración de fuente y color para el <xref:System.Windows.Forms.TextBox>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una nueva instancia de la <xref:System.Windows.Forms.TextBox> controlar y asigna una cadena para el control <xref:System.Windows.Forms.TextBoxBase.Text%2A> propiedad.  
  
 [!code-cpp[Classic TextBox.TextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptsReturn">
      <MemberSignature Language="C#" Value="public bool AcceptsReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsReturn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AcceptsReturn" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsReturn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsReturn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si, al presionar ENTRAR en un control <see cref="T:System.Windows.Forms.TextBox" /> multilínea, se crea una nueva línea de texto en el control o se activa el botón predeterminado del formulario.</summary>
        <value>
          <see langword="true" /> si la tecla ENTRAR crea una nueva línea de texto en una versión multilínea del control; <see langword="false" /> si la tecla ENTRAR activa el botón predeterminado del formulario. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de esta propiedad es `false`, el usuario debe presionar CTRL+ENTRAR para crear una nueva línea en un multilínea <xref:System.Windows.Forms.TextBox> control. Si no hay ningún botón predeterminado para el formulario, la tecla ENTRAR siempre creará una nueva línea de texto en el control, independientemente del valor de esta propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un multilínea <xref:System.Windows.Forms.TextBox> control con barras de desplazamiento vertical. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, y <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> propiedades para hacer que el control de cuadro de texto multilínea sea útil para crear documentos de texto.  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteCustomSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteCustomSource As AutoCompleteStringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteStringCollection ^ AutoCompleteCustomSource { System::Windows::Forms::AutoCompleteStringCollection ^ get(); void set(System::Windows::Forms::AutoCompleteStringCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteStringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un elemento <see cref="T:System.Collections.Specialized.StringCollection" /> personalizado que se usará cuando la propiedad <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" /> esté establecida en <see langword="CustomSource" />.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringCollection" /> que se va a usar con <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades para crear un <xref:System.Windows.Forms.TextBox> que completa automáticamente las cadenas de entrada comparando el prefijo que se escribió para los prefijos de todas las cadenas de un origen mantenido. Esto es útil para <xref:System.Windows.Forms.TextBox> controles en el que las direcciones URL, direcciones, nombres de archivo o comandos se escribirán frecuentemente.  
  
 El uso de la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad es opcional, pero debe establecer el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad `CustomSource` para poder usar <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Debe utilizar el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades juntos.  
  
> [!NOTE]
>  El sistema operativo puede limitar el número de cadenas personalizadas que puede mostrar a la vez.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar una colección como el origen personalizado de Autocompletar para un <xref:System.Windows.Forms.TextBox> control. En el ejemplo, se realizan las tareas siguientes:  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad para permitir el <xref:System.Windows.Forms.TextBox> control para aceptar un origen personalizado para su comportamiento de Autocompletar.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad para establecer la lista de valores personalizada.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> propiedad para establecer cómo se muestran los candidatos de Autocompletar.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteMode AutoCompleteMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteMode AutoCompleteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteMode As AutoCompleteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteMode AutoCompleteMode { System::Windows::Forms::AutoCompleteMode get(); void set(System::Windows::Forms::AutoCompleteMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una opción que controla cómo funciona la finalización automática para <see cref="T:System.Windows.Forms.TextBox" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.AutoCompleteMode" />. Los valores son los siguientes.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Append" />  
 Anexa el resto de la cadena del candidato más probable a los caracteres existentes, y resalta los caracteres anexados.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Suggest" />  
 Muestra la lista desplegable auxiliar asociada al control de edición. Esta lista desplegable se rellena con una o más cadenas de finalización sugeridas.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.SuggestAppend" />  
 Anexa tanto la opción <see langword="Suggest" /> como <see langword="Append" />.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.None" />  
 Deshabilita la realización automática. Este es el valor predeterminado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades para crear un <xref:System.Windows.Forms.TextBox> que completa automáticamente las cadenas de entrada comparando el prefijo que se escribió para los prefijos de todas las cadenas de un origen mantenido. Esto es útil para <xref:System.Windows.Forms.TextBox> controles en el que las direcciones URL, direcciones, nombres de archivo o comandos se escribirán frecuentemente.  
  
 El uso de la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad es opcional, pero debe establecer el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad `CustomSource` para poder usar <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Debe utilizar el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades juntos.  
  
> [!NOTE]
>  El sistema operativo puede limitar el número de cadenas personalizadas que puede mostrar a la vez.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar una colección como el origen personalizado de Autocompletar para un <xref:System.Windows.Forms.TextBox> control. En el ejemplo, se realizan las tareas siguientes:  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad para permitir el <xref:System.Windows.Forms.TextBox> control para aceptar un origen personalizado para su comportamiento de Autocompletar.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad para establecer la lista de valores personalizada.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> propiedad para establecer cómo se muestran los candidatos de Autocompletar.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.AutoCompleteMode" />.</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteSource AutoCompleteSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteSource AutoCompleteSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteSource As AutoCompleteSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteSource AutoCompleteSource { System::Windows::Forms::AutoCompleteSource get(); void set(System::Windows::Forms::AutoCompleteSource value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TextBoxAutoCompleteSourceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica el origen de cadenas completas utilizadas para la finalización automática.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.AutoCompleteSource" />. Las opciones son <see langword="AllSystemSources" />, <see langword="AllUrl" />, <see langword="FileSystem" />, <see langword="HistoryList" />, <see langword="RecentlyUsedList" />, <see langword="CustomSource" /> y <see langword="None" />. El valor predeterminado es <see langword="None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades para crear un <xref:System.Windows.Forms.TextBox> que completa automáticamente las cadenas de entrada comparando el prefijo que se escribió para los prefijos de todas las cadenas de un origen mantenido. Esto es útil para <xref:System.Windows.Forms.TextBox> controles en el que las direcciones URL, direcciones, nombres de archivo o comandos se escribirán frecuentemente.  
  
 El uso de la <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad es opcional, pero debe establecer el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad `CustomSource` para poder usar <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Debe utilizar el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> y <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedades juntos.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> no funciona en varias líneas <xref:System.Windows.Forms.TextBox> controles.  
  
> [!NOTE]
>  El sistema operativo puede limitar el número de cadenas personalizadas que se pueden mostrar a la vez.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar una colección como el origen personalizado de Autocompletar para un <xref:System.Windows.Forms.TextBox> control. En el ejemplo, se realizan las tareas siguientes:  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> propiedad para permitir el <xref:System.Windows.Forms.TextBox> control para aceptar un origen personalizado para su comportamiento de Autocompletar.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> propiedad para establecer la lista de valores personalizada.  
  
-   Usa el <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> propiedad para establecer cómo se muestran los candidatos de Autocompletar.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.AutoCompleteSource" />.</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="CharacterCasing">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CharacterCasing CharacterCasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.CharacterCasing CharacterCasing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CharacterCasing" />
      <MemberSignature Language="VB.NET" Value="Public Property CharacterCasing As CharacterCasing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CharacterCasing CharacterCasing { System::Windows::Forms::CharacterCasing get(); void set(System::Windows::Forms::CharacterCasing value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CharacterCasing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si el control <see cref="T:System.Windows.Forms.TextBox" /> modifica la condición de mayúscula o minúscula de los caracteres a medida que se escriben.</summary>
        <value>Uno de los valores de enumeración de <see cref="T:System.Windows.Forms.CharacterCasing" /> que especifica si el control <see cref="T:System.Windows.Forms.TextBox" /> modifica la condición de mayúscula o minúscula de los caracteres. El valor predeterminado es <see langword="CharacterCasing.Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> propiedad para cambiar las mayúsculas o minúsculas según sea necesario por la aplicación. Por ejemplo, puede cambiar el caso de todos los caracteres escritos en un <xref:System.Windows.Forms.TextBox> control que se utiliza como entrada de contraseña a mayúsculas o minúsculas para aplicar una directiva de contraseñas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.TextBox> control que se usa para aceptar una contraseña. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> propiedad para cambiar todos los caracteres escritos en minúsculas y el <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad para restringir la longitud de contraseña a ocho caracteres. Este ejemplo también utiliza el <xref:System.Windows.Forms.TextBox.TextAlign%2A> propiedad para centrar la contraseña en el <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Se asignó a la propiedad un valor no situado dentro del intervalo de valores permitidos para la enumeración.</exception>
        <altmember cref="T:System.Windows.Forms.CharacterCasing" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los parámetros de creación necesarios cuando se crea el identificador del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" /> que contiene los parámetros de creación necesarios cuando se crea el identificador del control.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.TextBox" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a este método público `Dispose` método y <xref:System.Object.Finalize%2A> método. `Dispose` se invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.  
  
 Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.Windows.Forms.TextBox> hace referencia. Este método invoca al método `Dispose` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede recibir varias llamadas de otros objetos. Al reemplazar <see langword="Dispose(Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, consulte [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [reemplazar el método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Uno de los valores de la tecla.</param>
        <summary>Determina si la tecla especificada es una tecla de entrada o una tecla especial que requiere preprocesamiento.</summary>
        <returns>
          Es <see langword="true" /> si la tecla especificada es una tecla de entrada; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TextBox.IsInputKey%2A> método `true` cuando `keyData` incluye la <xref:System.Windows.Forms.Keys.Return> valor y el <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A> propiedad es `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si éste es un control <see cref="T:System.Windows.Forms.TextBox" /> multilínea.</summary>
        <value>
          Es <see langword="true" /> si es un control <see cref="T:System.Windows.Forms.TextBox" /> multilínea; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> no funciona en varias líneas <xref:System.Windows.Forms.TextBox> controles.  
  
 Cuando se cambia la fuente, no aparece ninguna sangría que haya definido. Para obtener la sangría, establezca <xref:System.Windows.Forms.TextBox.Multiline%2A> a `true` y reemplace WM_SETFONT sin llamar a la clase base para que no se llama a SETMARGINS.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un multilínea <xref:System.Windows.Forms.TextBox> control con barras de desplazamiento vertical. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, y <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> propiedades para hacer que el control de cuadro de texto multilínea sea útil para crear documentos de texto.  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.BackColorChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.TextBox.OnBackColorChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.FontChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.TextBox.OnFontChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el usuario selecciona texto en un <xref:System.Windows.Forms.TextBox> (control), el control guarda la selección. Cuando un <xref:System.Windows.Forms.TextBox> control recibe el foco, la selección es el mismo que cuando el <xref:System.Windows.Forms.TextBox> pierde el foco. Cuando el <xref:System.Windows.Forms.TextBox> obtiene centrarse por primera vez, se selecciona todo el texto.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.TextBox.OnGotFocus%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.TextBox.OnHandleDestroyed%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.TextBox.TextAlignChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.TextBox.OnTextAlignChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TextBox.TextAlignChanged" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los caracteres utilizados para enmascarar caracteres de una contraseña en un control <see cref="T:System.Windows.Forms.TextBox" /> de una sola línea.</summary>
        <value>Carácter utilizado para enmascarar caracteres escritos en un control <see cref="T:System.Windows.Forms.TextBox" /> de una sola línea. Establezca el valor de esta propiedad en 0 (valor de carácter) si no desea que el control enmascare caracteres a medida que se escriben. Equivale a 0 (valor de carácter) de forma predeterminada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> propiedad tiene prioridad sobre la <xref:System.Windows.Forms.TextBox.PasswordChar%2A> propiedad. Cada vez que la <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> está establecido en `true`, se usa el carácter de contraseña de sistema de forma predeterminada y establece cualquier carácter <xref:System.Windows.Forms.TextBox.PasswordChar%2A> se omite.  
  
 Cuando el <xref:System.Windows.Forms.TextBox.PasswordChar%2A> propiedad está establecida, no se puede realizar las acciones de cortar y copiar en el control mediante el teclado.  
  
> [!IMPORTANT]
>  Cuando el <xref:System.Windows.Forms.TextBox> está en modo de contraseña porque <xref:System.Windows.Forms.TextBox.PasswordChar%2A>, <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>, o <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> es `true`, el <xref:System.Windows.Forms.TextBox> está en modo restringido. En este modo, el <xref:System.Windows.Forms.ImeMode> está deshabilitado, pero actual <xref:System.Windows.Forms.ImeMode> se almacena en caché para que pueda restaurarse si el <xref:System.Windows.Forms.TextBox> nunca se convierte en sin restricciones. Activa o desactiva el <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> es un escenario común. El <xref:System.Windows.Forms.ImeMode> se sombrea mientras el control está en modo restringido. Desde la perspectiva del diseñador, el <xref:System.Windows.Forms.ImeMode> valor mostrado es el valor real.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.TextBox> control que se usa para aceptar una contraseña. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> tipo de propiedad para cambiar todos los caracteres a minúsculas y <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad para restringir la longitud de contraseña a ocho caracteres. Este ejemplo también utiliza el <xref:System.Windows.Forms.TextBox.TextAlign%2A> propiedad para centrar la contraseña en el <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Paste(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a reemplazar.</param>
        <summary>Establece el texto seleccionado en el especificado sin borrar el búfer de invalidación de un comando.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la configuración de <xref:System.Windows.Forms.TextBoxBase.SelectedText%2A>, <xref:System.Windows.Forms.TextBox.Paste%2A> no afecta al Portapapeles.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> que se pasa por referencia y que representa el mensaje de ventana que se va a procesar.</param>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" /> que representa la tecla de método abreviado que se va a procesar.</param>
        <summary>Procesa una tecla de comando.</summary>
        <returns>
          Es <see langword="true" /> si el control procesó la tecla de comando; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Novedad en la versión 4.6.1. En versiones anteriores, la tecla de método abreviado Ctrl-A en un <xref:System.Windows.Forms.TextBox> no se puede seleccionar todo el texto cuando el <xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A> y <xref:System.Windows.Forms.TextBox.Multiline%2A> propiedades estaban establecidas como `true.`. Este método permite que la tecla de método abreviado de CTRL+a seleccionar todo el texto cuando el <xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A> y <xref:System.Windows.Forms.TextBox.Multiline%2A> propiedades se establecen en `true.`  
  
 Las aplicaciones destinadas a versiones de .NET Framework 4.0 a 4.6 pueden aprovechar las ventajas de este método debe agregar lo siguiente a la `<runtime>` sección del archivo app.config:  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />  
```  
  
 Aplicaciones destinadas a versiones de .NET Framework 4.6.1 o más reciente, pueden opten por este comportamiento mediante la adición de las siguientes acciones para la `<runtime>` sección del archivo app.config:  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=true" />  
```  
  
> [!NOTE]
>  Si el archivo app.config ya contiene un `AppContextSwitchOverrides` clave, combinar el nuevo valor de clave en la clave existente. Por ejemplo: `<AppContextSwitchOverrides value = "oldKey=oldValue;Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As ScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ScrollBars ScrollBars { System::Windows::Forms::ScrollBars get(); void set(System::Windows::Forms::ScrollBars value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece qué barras de desplazamiento tienen que aparecer en un control <see cref="T:System.Windows.Forms.TextBox" /> multilínea.</summary>
        <value>Uno de los valores de enumeración de <see cref="T:System.Windows.Forms.ScrollBars" /> que indica si un control <see cref="T:System.Windows.Forms.TextBox" /> de varias líneas aparece sin barras de desplazamiento, con una barra de desplazamiento horizontal, con una barra de desplazamiento vertical o con las dos. El valor predeterminado es <see langword="ScrollBars.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Barras de desplazamiento horizontal no se mostrará si el <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> propiedad está establecida en `true`, independientemente del valor de la <xref:System.Windows.Forms.TextBox.ScrollBars%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un multilínea <xref:System.Windows.Forms.TextBox> control con barras de desplazamiento vertical. Este ejemplo también utiliza el <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, y <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> propiedades para adaptar la propiedad multilínea <xref:System.Windows.Forms.TextBox> control útil para crear documentos de texto.  
  
 [!code-cpp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.ScrollBars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Se asignó a la propiedad un valor no situado dentro del intervalo de valores permitidos para la enumeración.</exception>
        <altmember cref="T:System.Windows.Forms.ScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto asociado al control.</summary>
        <value>Texto asociado al control.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece cómo se alinea el texto en un control <see cref="T:System.Windows.Forms.TextBox" />.</summary>
        <value>Uno de los valores de enumeración de <see cref="T:System.Windows.Forms.HorizontalAlignment" /> que especifica cómo se alinea el texto en el control. El valor predeterminado es <see langword="HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para alinear el texto dentro de un <xref:System.Windows.Forms.TextBox> para que coincida con el diseño del texto en el formulario. Por ejemplo, si los controles se encuentran en el lado derecho del formulario, puede establecer la <xref:System.Windows.Forms.Label.TextAlign%2A> propiedad `HorizontalAlignment.Right`, y el texto se alineará con el lado derecho del control en lugar de la alineación izquierda predeterminada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.TextBox> control que se usa para aceptar una contraseña. Este ejemplo se utiliza la <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> propiedad para cambiar todos los caracteres escritos en minúsculas y el <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad para restringir la longitud de contraseña a ocho caracteres. Este ejemplo también utiliza el <xref:System.Windows.Forms.TextBox.TextAlign%2A> propiedad para centrar la contraseña en el <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Se asignó a la propiedad un valor no situado dentro del intervalo de valores permitidos para la enumeración.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.TextBox.TextAlign" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.TextBox.TextAlignChanged> eventos. Este informe le ayuda a averiguar cuándo se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.TextBox.TextAlignChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#249](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#249)]
 [!code-vb[System.Windows.Forms.EventExamples#249](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#249)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el texto del control <see cref="T:System.Windows.Forms.TextBox" /> debe aparecer como el carácter de contraseña predeterminado.</summary>
        <value>
          <see langword="true" /> si el texto del control <see cref="T:System.Windows.Forms.TextBox" /> debería aparecer como el carácter de contraseña predeterminado; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> propiedad tiene prioridad sobre la <xref:System.Windows.Forms.TextBox.PasswordChar%2A> propiedad. Cada vez que la <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> está establecido en `true`, se usa el carácter de contraseña de sistema de forma predeterminada y establece cualquier carácter <xref:System.Windows.Forms.TextBox.PasswordChar%2A> se omite.  
  
> [!IMPORTANT]
>  Cuando el <xref:System.Windows.Forms.TextBox> está en modo de contraseña porque <xref:System.Windows.Forms.TextBox.PasswordChar%2A>, <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>, o <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> es `true`, el <xref:System.Windows.Forms.TextBox> está en modo restringido. En este modo, el <xref:System.Windows.Forms.ImeMode> está deshabilitado, pero actual <xref:System.Windows.Forms.ImeMode> se almacena en caché para que pueda restaurarse si el <xref:System.Windows.Forms.TextBox> nunca se convierte en sin restricciones. Activa o desactiva el <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> es un escenario común. El <xref:System.Windows.Forms.ImeMode> se sombrea mientras el control está en modo restringido. Desde la perspectiva del diseñador, el <xref:System.Windows.Forms.ImeMode> valor mostrado es el valor real.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Un objeto de mensaje de Windows.</param>
        <summary>Procesa los mensajes de Windows.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>