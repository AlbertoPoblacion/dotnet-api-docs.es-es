<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="05395-101">Proporciona una encapsulación de bajo nivel de un identificador de ventana y un procedimiento de ventana.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05395-101">Provides a low-level encapsulation of a window handle and a window procedure.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-102">Esta clase administra automáticamente la creación de la clase de ventana y el registro.</span><span class="sxs-lookup"><span data-stu-id="05395-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="05395-103">Una ventana no es apta para la recolección de elementos no utilizados cuando está asociado con un identificador de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="05395-104">Para asegurarse de recolección de elementos adecuada, identificadores deben destruirse manualmente mediante <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> o deben liberarse mediante <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="05395-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-105">El <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> método se llama cuando se procesa el mensaje WM_NCDESTROY.</span><span class="sxs-lookup"><span data-stu-id="05395-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="05395-106">Esto significa que hay casos en que, cuando es necesario llamar manualmente <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, pero es recomendable hacerlo.</span><span class="sxs-lookup"><span data-stu-id="05395-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="05395-107">El <xref:System.Windows.Forms.NativeWindow> clase proporciona las siguientes propiedades y métodos para administrar los identificadores: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="05395-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-108">En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana y la creación de una ventana con un nombre de clase de ventana de sistema operativo específico.</span><span class="sxs-lookup"><span data-stu-id="05395-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="05395-109">En el ejemplo se crea dos clases que heredan de <xref:System.Windows.Forms.NativeWindow> que lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="05395-110">El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar el `WM_ACTIVATEAPP` mensaje de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="05395-111">La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar.</span><span class="sxs-lookup"><span data-stu-id="05395-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="05395-112">El identificador está asignado en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos.</span><span class="sxs-lookup"><span data-stu-id="05395-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="05395-113">Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.</span><span class="sxs-lookup"><span data-stu-id="05395-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="05395-114">El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="05395-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="05395-115">La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalidar el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben.</span><span class="sxs-lookup"><span data-stu-id="05395-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="05395-116">para el llamador inmediato llamar a código no administrado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05395-116">for the immediate caller to call unmanaged code.</span>
      </span>
      <span data-ttu-id="05395-117">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="05395-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="05395-118">Inicializa una instancia de la clase <see cref="T:System.Windows.Forms.NativeWindow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-119">Este es el valor predeterminado <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor proporcionado por el compilador.</span><span class="sxs-lookup"><span data-stu-id="05395-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="05395-120">La <xref:System.Windows.Forms.NativeWindow> clase también tiene un constructor estático que inicializa las tablas hash y los controladores de mensajes de todo el dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="05395-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="05395-121">Identificador que se va a asignar a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-121">The handle to assign to this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-122">Asigna un identificador a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-122">Assigns a handle to this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepta los mensajes de ventana que se envían a la `handle` parámetro.</span><span class="sxs-lookup"><span data-stu-id="05395-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="05395-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> para restablecer el procedimiento de ventana del identificador en el procedimiento de ventana predeterminado.</span><span class="sxs-lookup"><span data-stu-id="05395-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="05395-125">El <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> llamadas al método el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para indicar que el valor de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad ha cambiado.</span><span class="sxs-lookup"><span data-stu-id="05395-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-126">El identificador para asignar no puede estar en un proceso de aplicación diferente.</span><span class="sxs-lookup"><span data-stu-id="05395-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-127">En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="05395-128">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="05395-129">El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta el `WM_ACTIVATEAPP` mensaje de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="05395-130">La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar qué ventana administran el <xref:System.Windows.Forms.NativeWindow> va a usar.</span><span class="sxs-lookup"><span data-stu-id="05395-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="05395-131">El identificador se asigna en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos.</span><span class="sxs-lookup"><span data-stu-id="05395-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="05395-132">Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.</span><span class="sxs-lookup"><span data-stu-id="05395-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="05395-133">Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase.</span><span class="sxs-lookup"><span data-stu-id="05395-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="05395-134">No se muestra algún código con el fin de brevedad.</span><span class="sxs-lookup"><span data-stu-id="05395-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="05395-135">Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.</span><span class="sxs-lookup"><span data-stu-id="05395-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="05395-136">Esta ventana ya tiene un identificador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-136">This window already has a handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="05395-137">No se pudo recuperar el procedimiento de ventanas para la ventana nativa asociada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-137">The windows procedure for the associated native window could not be retrieved.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <span data-ttu-id="05395-138">
            <see cref="T:System.Windows.Forms.CreateParams" /> que especifica los parámetros de creación de esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-139">Crea una ventana y un identificador de dicha ventana con los parámetros de creación especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-139">Creates a window and its handle with the specified creation parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-140">El `cp` parámetro especifica los valores que se pasan a la de Win32 nativo `CreateWindowEx` método para crear una ventana y su identificador.</span><span class="sxs-lookup"><span data-stu-id="05395-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="05395-141">Cuando el <xref:System.Windows.Forms.CreateParams.ClassName%2A> campo no es `null`, el identificador de ventana recién creado hereda de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="05395-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="05395-142">Por ejemplo, si <xref:System.Windows.Forms.CreateParams.ClassName%2A> está establecido en `BUTTON`, la ventana recién creada se basa en la de Win32 `BUTTON` clase de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="05395-143">El <xref:System.Windows.Forms.CreateParams.Param%2A> propiedad de la <xref:System.Windows.Forms.CreateParams.ClassName%2A> objeto debe ser `null` o hacer referencia a una instancia de una clase que se ha declarado como una estructura.</span><span class="sxs-lookup"><span data-stu-id="05395-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="05395-144">Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase.</span><span class="sxs-lookup"><span data-stu-id="05395-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="05395-145">No se muestra algún código con el fin de brevedad.</span><span class="sxs-lookup"><span data-stu-id="05395-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="05395-146">Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.</span><span class="sxs-lookup"><span data-stu-id="05395-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-147">El nombre de clase proporcionado está registrado con el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="05395-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-148">En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico.</span><span class="sxs-lookup"><span data-stu-id="05395-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="05395-149">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="05395-150">El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="05395-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="05395-151">Esto crea una ventana de botón de Win32.</span><span class="sxs-lookup"><span data-stu-id="05395-151">This creates a Win32 button window.</span></span> <span data-ttu-id="05395-152">Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales.</span><span class="sxs-lookup"><span data-stu-id="05395-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="05395-153">La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben.</span><span class="sxs-lookup"><span data-stu-id="05395-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="05395-154">Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste puede sustituirse en un programa real por mensajes de ventana específicos del tipo creado.</span><span class="sxs-lookup"><span data-stu-id="05395-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-155">Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="05395-156">Consulte el SDK de plataforma de Windows para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="05395-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="05395-157">El sistema operativo agotó los recursos al intentar crear la ventana nativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-157">The operating system ran out of resources when trying to create the native window.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="05395-158">La API nativa de Win32 no pudo crear la ventana especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-158">The native Win32 API could not create the specified window.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="05395-159">El indicador de la ventana nativa actual ya está asignado; es decir, el valor de la propiedad <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> no es igual a <see cref="F:System.IntPtr.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="05395-160">Para crear una ventana de nivel superior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-160">to create a top-level window.</span>
          </span>
          <span data-ttu-id="05395-161">Este permiso se solicita únicamente si el estilo de ventana no es un elemento secundario o si la ventana no tiene un elemento primario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span>
          </span>
          <span data-ttu-id="05395-162">Enumeración asociada: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="05395-163">Mensaje que se está procesando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-163">The message that is currently being processed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-164">Invoca el procedimiento de ventana predeterminado que está asociado a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-164">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-165">Normalmente, se llama solo el <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> método cuando se interceptan mensajes de ventana y se desea que el procedimiento de ventana predeterminado para controlar el mensaje.</span><span class="sxs-lookup"><span data-stu-id="05395-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="05395-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> no debe llamarse para enviar un mensaje de ventana a la ventana; llamar a Win32 `SendMessage` funcione en su lugar.</span><span class="sxs-lookup"><span data-stu-id="05395-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="05395-167">Es un error al llamar a <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> cuando el <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad es 0.</span><span class="sxs-lookup"><span data-stu-id="05395-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="05395-168">Invalide este método en una clase derivada para implementar el control para una ventana nativa concreta o .NET Windows Forms de mensajes personalizado generalizado <see cref="T:System.Windows.Forms.Control" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-168">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span>
            </span>
            <span data-ttu-id="05395-169">Puede realizar procesamiento personalizado antes, después o en lugar de una llamada a la implementación de este método, que realiza el procesamiento de mensajes estándar de la clase base.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-169">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span>
            </span>
            <span data-ttu-id="05395-170">En cambio, agregar personalizar mensajes de control para una aplicación puede realizarse a través de la <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> método de la <see cref="T:System.Windows.Forms.Application" /> clase.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-170">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="05395-171">Destruye la ventana y su identificador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-171">Destroys the window and its handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-172">Este método destruye la ventana asociada con el <xref:System.Windows.Forms.NativeWindow.Handle%2A>, Establece la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad en 0 y llama a la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para reflejar el cambio.</span><span class="sxs-lookup"><span data-stu-id="05395-172">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="05395-173">Normalmente, se llama solo <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> cuando haya terminado con la ventana nativa.</span><span class="sxs-lookup"><span data-stu-id="05395-173">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-174">La <xref:System.Windows.Forms.NativeWindow> clase automáticamente se destruya la ventana asociada y liberar sus recursos en respuesta a un mensaje WM_DESTROY.</span><span class="sxs-lookup"><span data-stu-id="05395-174">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="05395-175">Libera los recursos asociados a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-175">Releases the resources associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-176">El <xref:System.Windows.Forms.NativeWindow.Finalize%2A> método quita la clase derivada de Win32 asociada con el actual <xref:System.Windows.Forms.NativeWindow> libera el identificador de instancia y envía un mensaje WM_CLOSE a la ventana asociada.</span><span class="sxs-lookup"><span data-stu-id="05395-176">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="05395-177">Identificador de una ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-177">A handle to a window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-178">Recupera la ventana asociada al identificador especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-178">Retrieves the window associated with the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05395-179">Clase <see cref="T:System.Windows.Forms.NativeWindow" /> asociada al identificador especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-179">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span>
          </span>
          <span data-ttu-id="05395-180">Este método devuelve <see langword="null" /> cuando el identificador no tiene asociada ninguna ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-180">This method returns <see langword="null" /> when the handle does not have an associated window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-181">Si recibe un identificador de otro método, use este método para recuperar la ventana asociada con el identificador.</span><span class="sxs-lookup"><span data-stu-id="05395-181">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="05395-182">El identificador ya debe pertenecer a otra <xref:System.Windows.Forms.NativeWindow> en este proceso; de lo contrario, `null` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="05395-182">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="05395-183">Obtiene el identificador de esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-183">Gets the handle for this window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="05395-184">Si es correcto, obtiene un objeto <see cref="T:System.IntPtr" /> que representa el identificador de la ventana Win32 nativa asociada; en caso contrario, si ningún identificador está asociado con la ventana, devuelve 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-184">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-185">Utilice este método cuando se llama a métodos de la API de Windows que requieren un identificador para una ventana o un control.</span><span class="sxs-lookup"><span data-stu-id="05395-185">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-186">En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico.</span><span class="sxs-lookup"><span data-stu-id="05395-186">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="05395-187">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-187">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="05395-188">El ejemplo también se muestra cómo reemplazar el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método al que se le notifiquen los <xref:System.Windows.Forms.NativeWindow.Handle%2A> cambios.</span><span class="sxs-lookup"><span data-stu-id="05395-188">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="05395-189">El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en el botón.</span><span class="sxs-lookup"><span data-stu-id="05395-189">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="05395-190">Esto crea una ventana de botón de Win32.</span><span class="sxs-lookup"><span data-stu-id="05395-190">This creates a Win32 button window.</span></span> <span data-ttu-id="05395-191">Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales.</span><span class="sxs-lookup"><span data-stu-id="05395-191">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="05395-192">La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben.</span><span class="sxs-lookup"><span data-stu-id="05395-192">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="05395-193">Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste podría sustituirse en un programa real por mensajes de ventana específicos del tipo creado.</span><span class="sxs-lookup"><span data-stu-id="05395-193">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-194">Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-194">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="05395-195">Consulte el SDK de plataforma de Windows para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="05395-195">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="05395-196">Especifica un método de notificación al que se llama cuando se cambia el identificador de una ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-196">Specifies a notification method that is called when the handle for a window is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-197">Este método se invoca cuando el valor de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad ha cambiado.</span><span class="sxs-lookup"><span data-stu-id="05395-197">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-198">En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico.</span><span class="sxs-lookup"><span data-stu-id="05395-198">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="05395-199">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-199">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="05395-200">El ejemplo también se muestra cómo reemplazar el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método al que se le notifiquen los <xref:System.Windows.Forms.NativeWindow.Handle%2A> cambios.</span><span class="sxs-lookup"><span data-stu-id="05395-200">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="05395-201">El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="05395-201">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="05395-202">Esto crea una ventana de botón de Win32.</span><span class="sxs-lookup"><span data-stu-id="05395-202">This creates a Win32 button window.</span></span> <span data-ttu-id="05395-203">Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales.</span><span class="sxs-lookup"><span data-stu-id="05395-203">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="05395-204">La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben.</span><span class="sxs-lookup"><span data-stu-id="05395-204">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="05395-205">Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste puede sustituirse en un programa real por mensajes de ventana específicos del tipo creado.</span><span class="sxs-lookup"><span data-stu-id="05395-205">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="05395-206">Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase.</span><span class="sxs-lookup"><span data-stu-id="05395-206">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="05395-207">No se muestra algún código con el fin de brevedad.</span><span class="sxs-lookup"><span data-stu-id="05395-207">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="05395-208">Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.</span><span class="sxs-lookup"><span data-stu-id="05395-208">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05395-209">Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-209">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="05395-210">Consulte el SDK de plataforma de Windows para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="05395-210">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="05395-211">Invalide este método para realizar el seguimiento de cambios que se realizan en el identificador de ventana.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-211">Override this method to track changes that are made to the window handle.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="05395-212">
            <see cref="T:System.Exception" /> que especifica la excepción de subproceso no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-212">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-213">Cuando se reemplaza en una clase derivada, administra una excepción de subproceso no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-213">When overridden in a derived class, manages an unhandled thread exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-214">Por lo general, <xref:System.Windows.Forms.Application.OnThreadException%2A> controla las excepciones de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="05395-214">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="05395-215">Libera el identificador asociado a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-215">Releases the handle associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-216">Este método destruye el identificador de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-216">This method does not destroy the window handle.</span></span> <span data-ttu-id="05395-217">En su lugar, Establece el procedimiento de ventana del identificador en el procedimiento de ventana predeterminado.</span><span class="sxs-lookup"><span data-stu-id="05395-217">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="05395-218">Establece el <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad en 0 y llama a <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> para reflejar el cambio.</span><span class="sxs-lookup"><span data-stu-id="05395-218">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="05395-219">Una ventana llama automáticamente a este método si recibe un mensaje Win32 WM_NCDESTROY nativo, que indica que Windows ha destruido el identificador.</span><span class="sxs-lookup"><span data-stu-id="05395-219">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-220">En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-220">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="05395-221">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-221">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="05395-222">El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta el `WM_ACTIVATEAPP` mensaje de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-222">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="05395-223">La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar.</span><span class="sxs-lookup"><span data-stu-id="05395-223">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="05395-224">El identificador está asignado en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos.</span><span class="sxs-lookup"><span data-stu-id="05395-224">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="05395-225">Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.</span><span class="sxs-lookup"><span data-stu-id="05395-225">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="05395-226">Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase.</span><span class="sxs-lookup"><span data-stu-id="05395-226">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="05395-227">No se muestra algún código con el fin de brevedad.</span><span class="sxs-lookup"><span data-stu-id="05395-227">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="05395-228">Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.</span><span class="sxs-lookup"><span data-stu-id="05395-228">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="05395-229">
            <see cref="T:System.Windows.Forms.Message" /> que está asociado al actual mensaje de Windows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-229">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05395-230">Invoca el procedimiento de ventana predeterminado que está asociado a esta ventana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05395-230">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05395-231">Este método se llama cuando se envía un mensaje de ventana para el identificador de la ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-231">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05395-232">En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-232">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="05395-233">En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.</span><span class="sxs-lookup"><span data-stu-id="05395-233">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="05395-234">El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar el `WM_ACTIVATEAPP` mensaje de ventana.</span><span class="sxs-lookup"><span data-stu-id="05395-234">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="05395-235">La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar.</span><span class="sxs-lookup"><span data-stu-id="05395-235">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="05395-236">El identificador se asigna en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos.</span><span class="sxs-lookup"><span data-stu-id="05395-236">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="05395-237">Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.</span><span class="sxs-lookup"><span data-stu-id="05395-237">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="05395-238">Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase.</span><span class="sxs-lookup"><span data-stu-id="05395-238">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="05395-239">No se muestra algún código con el fin de brevedad.</span><span class="sxs-lookup"><span data-stu-id="05395-239">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="05395-240">Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.</span><span class="sxs-lookup"><span data-stu-id="05395-240">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="05395-241">Invalide este método para implementar el procesamiento de mensajes específicos.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-241">Override this method to implement specific message processing.</span>
            </span>
            <span data-ttu-id="05395-242">Llame a <c>base. / / WndProc</c> para los mensajes no controlados.</span>
            <span class="sxs-lookup">
              <span data-stu-id="05395-242">Call <c>base.WndProc</c> for unhandled messages.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>