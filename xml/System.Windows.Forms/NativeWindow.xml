<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649779" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona una encapsulación de bajo nivel de un identificador de ventana y un procedimiento de ventana.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase administra automáticamente la creación de la clase de ventana y el registro.  
  
 Una ventana no es apta para la recolección de elementos no utilizados cuando está asociado con un identificador de ventana. Para asegurarse de recolección de elementos adecuada, identificadores deben destruirse manualmente mediante <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> o deben liberarse mediante <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> método se llama cuando se procesa el mensaje WM_NCDESTROY. Esto significa que hay casos en que, cuando es necesario llamar manualmente <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, pero es recomendable hacerlo.  
  
 El <xref:System.Windows.Forms.NativeWindow> clase proporciona las siguientes propiedades y métodos para administrar los identificadores: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana y la creación de una ventana con un nombre de clase de ventana de sistema operativo específico. En el ejemplo se crea dos clases que heredan de <xref:System.Windows.Forms.NativeWindow> que lograr esto.  
  
 El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar el `WM_ACTIVATEAPP` mensaje de ventana. La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar. El identificador está asignado en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.  
  
 El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`. La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalidar el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para el llamador inmediato llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una instancia de la clase <see cref="T:System.Windows.Forms.NativeWindow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este es el valor predeterminado <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor proporcionado por el compilador. La <xref:System.Windows.Forms.NativeWindow> clase también tiene un constructor estático que inicializa las tablas hash y los controladores de mensajes de todo el dominio de aplicación.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Identificador que se va a asignar a esta ventana.</param>
        <summary>Asigna un identificador a esta ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepta los mensajes de ventana que se envían a la `handle` parámetro. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> para restablecer el procedimiento de ventana del identificador en el procedimiento de ventana predeterminado.  
  
 El <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> llamadas al método el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para indicar que el valor de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad ha cambiado.  
  
> [!NOTE]
>  El identificador para asignar no puede estar en un proceso de aplicación diferente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.  
  
 El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta el `WM_ACTIVATEAPP` mensaje de ventana. La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar qué ventana administran el <xref:System.Windows.Forms.NativeWindow> va a usar. El identificador se asigna en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.  
  
 Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase. No se muestra algún código con el fin de brevedad. Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Esta ventana ya tiene un identificador.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">No se pudo recuperar el procedimiento de ventanas para la ventana nativa asociada.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <see cref="T:System.Windows.Forms.CreateParams" /> que especifica los parámetros de creación de esta ventana.</param>
        <summary>Crea una ventana y un identificador de dicha ventana con los parámetros de creación especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `cp` parámetro especifica los valores que se pasan a la de Win32 nativo `CreateWindowEx` método para crear una ventana y su identificador.  
  
 Cuando el <xref:System.Windows.Forms.CreateParams.ClassName%2A> campo no es `null`, el identificador de ventana recién creado hereda de la clase especificada. Por ejemplo, si <xref:System.Windows.Forms.CreateParams.ClassName%2A> está establecido en `BUTTON`, la ventana recién creada se basa en la de Win32 `BUTTON` clase de ventana. El <xref:System.Windows.Forms.CreateParams.Param%2A> propiedad de la <xref:System.Windows.Forms.CreateParams.ClassName%2A> objeto debe ser `null` o hacer referencia a una instancia de una clase que se ha declarado como una estructura.  
  
 Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase. No se muestra algún código con el fin de brevedad. Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.  
  
> [!NOTE]
>  El nombre de clase proporcionado está registrado con el sistema operativo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.  
  
 El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`. Esto crea una ventana de botón de Win32. Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales. La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben. Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste puede sustituirse en un programa real por mensajes de ventana específicos del tipo creado.  
  
> [!NOTE]
>  Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana. Consulte el SDK de plataforma de Windows para obtener más información.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">El sistema operativo agotó los recursos al intentar crear la ventana nativa.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">La API nativa de Win32 no pudo crear la ventana especificada.</exception>
        <exception cref="T:System.InvalidOperationException">El indicador de la ventana nativa actual ya está asignado; es decir, el valor de la propiedad <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> no es igual a <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Para crear una ventana de nivel superior. Este permiso se solicita únicamente si el estilo de ventana no es un elemento secundario o si la ventana no tiene un elemento primario. Enumeración asociada: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Mensaje que se está procesando.</param>
        <summary>Invoca el procedimiento de ventana predeterminado que está asociado a esta ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, se llama solo el <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> método cuando se interceptan mensajes de ventana y se desea que el procedimiento de ventana predeterminado para controlar el mensaje. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> no debe llamarse para enviar un mensaje de ventana a la ventana; llamar a Win32 `SendMessage` funcione en su lugar.  
  
 Es un error al llamar a <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> cuando el <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad es 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Invalide este método en una clase derivada para implementar el control para una ventana nativa concreta o .NET Windows Forms de mensajes personalizado generalizado <see cref="T:System.Windows.Forms.Control" />. Puede realizar procesamiento personalizado antes, después o en lugar de una llamada a la implementación de este método, que realiza el procesamiento de mensajes estándar de la clase base.  
  
 En cambio, agregar personalizar mensajes de control para una aplicación puede realizarse a través de la <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> método de la <see cref="T:System.Windows.Forms.Application" /> clase.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Destruye la ventana y su identificador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método destruye la ventana asociada con el <xref:System.Windows.Forms.NativeWindow.Handle%2A>, Establece la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad en 0 y llama a la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para reflejar el cambio. Normalmente, se llama solo <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> cuando haya terminado con la ventana nativa.  
  
> [!NOTE]
>  La <xref:System.Windows.Forms.NativeWindow> clase automáticamente se destruya la ventana asociada y liberar sus recursos en respuesta a un mensaje WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos asociados a esta ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.NativeWindow.Finalize%2A> método quita la clase derivada de Win32 asociada con el actual <xref:System.Windows.Forms.NativeWindow> libera el identificador de instancia y envía un mensaje WM_CLOSE a la ventana asociada.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Identificador de una ventana.</param>
        <summary>Recupera la ventana asociada al identificador especificado.</summary>
        <returns>Clase <see cref="T:System.Windows.Forms.NativeWindow" /> asociada al identificador especificado. Este método devuelve <see langword="null" /> cuando el identificador no tiene asociada ninguna ventana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si recibe un identificador de otro método, use este método para recuperar la ventana asociada con el identificador. El identificador ya debe pertenecer a otra <xref:System.Windows.Forms.NativeWindow> en este proceso; de lo contrario, `null` se devuelve.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador de esta ventana.</summary>
        <value>Si es correcto, obtiene un objeto <see cref="T:System.IntPtr" /> que representa el identificador de la ventana Win32 nativa asociada; en caso contrario, si ningún identificador está asociado con la ventana, devuelve 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método cuando se llama a métodos de la API de Windows que requieren un identificador para una ventana o un control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto. El ejemplo también se muestra cómo reemplazar el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método al que se le notifiquen los <xref:System.Windows.Forms.NativeWindow.Handle%2A> cambios.  
  
 El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en el botón. Esto crea una ventana de botón de Win32. Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales. La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben. Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste podría sustituirse en un programa real por mensajes de ventana específicos del tipo creado.  
  
> [!NOTE]
>  Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana. Consulte el SDK de plataforma de Windows para obtener más información.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Especifica un método de notificación al que se llama cuando se cambia el identificador de una ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se invoca cuando el valor de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad ha cambiado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una ventana con un nombre de clase de ventana de sistema operativo específico. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto. El ejemplo también se muestra cómo reemplazar el <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método al que se le notifiquen los <xref:System.Windows.Forms.NativeWindow.Handle%2A> cambios.  
  
 El `MyNativeWindow` clase crea una nueva ventana con el <xref:System.Windows.Forms.CreateParams.ClassName%2A> establecido en `BUTTON`. Esto crea una ventana de botón de Win32. Se establece la ubicación y el tamaño del botón, junto con la especificación de estilos de ventana adicionales. La clase muestra cómo utilizar el <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e invalide el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar mensajes de ventana que se reciben. Aunque en el ejemplo se busca el mensaje WM_ACTIVATEAPP, éste puede sustituirse en un programa real por mensajes de ventana específicos del tipo creado.  
  
 Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase. No se muestra algún código con el fin de brevedad. Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.  
  
> [!NOTE]
>  Algunos tipos de control envían sus mensajes de ventana para el elemento primario de ventana en lugar de la ventana. Consulte el SDK de plataforma de Windows para obtener más información.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Invalide este método para realizar el seguimiento de cambios que se realizan en el identificador de ventana.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" /> que especifica la excepción de subproceso no controlada.</param>
        <summary>Cuando se reemplaza en una clase derivada, administra una excepción de subproceso no controlada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por lo general, <xref:System.Windows.Forms.Application.OnThreadException%2A> controla las excepciones de subprocesos.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera el identificador asociado a esta ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método destruye el identificador de ventana. En su lugar, Establece el procedimiento de ventana del identificador en el procedimiento de ventana predeterminado. Establece el <xref:System.Windows.Forms.NativeWindow.Handle%2A> propiedad en 0 y llama a <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> para reflejar el cambio.  
  
 Una ventana llama automáticamente a este método si recibe un mensaje Win32 WM_NCDESTROY nativo, que indica que Windows ha destruido el identificador.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.  
  
 El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta el `WM_ACTIVATEAPP` mensaje de ventana. La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar. El identificador está asignado en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.  
  
 Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase. No se muestra algún código con el fin de brevedad. Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> que está asociado al actual mensaje de Windows.</param>
        <summary>Invoca el procedimiento de ventana predeterminado que está asociado a esta ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama cuando se envía un mensaje de ventana para el identificador de la ventana.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo interceptar mensajes de ventana de sistema operativo en un procedimiento de ventana. En el ejemplo se crea una clase que hereda de <xref:System.Windows.Forms.NativeWindow> para lograr esto.  
  
 El `MyNativeWindowListener` clase al procedimiento de ventana del formulario que se pasó al constructor y reemplaza el <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar el `WM_ACTIVATEAPP` mensaje de ventana. La clase muestra el uso de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> y <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar el identificador de ventana el <xref:System.Windows.Forms.NativeWindow> va a usar. El identificador se asigna en función de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Cuando el `WM_ACTIVATEAPP` se recibe el mensaje de ventana, la clase llama el `form1.ApplicationActivated` método.  
  
 Este código es un extracto del ejemplo se muestra en el <xref:System.Windows.Forms.NativeWindow> general sobre la clase. No se muestra algún código con el fin de brevedad. Consulte <xref:System.Windows.Forms.NativeWindow> para obtener el código completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Invalide este método para implementar el procesamiento de mensajes específicos. Llame a <c>base. / / WndProc</c> para los mensajes no controlados.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>