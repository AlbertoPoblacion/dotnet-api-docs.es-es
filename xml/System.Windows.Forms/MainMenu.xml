<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a7ce9d90044c8ab0320957cce586344b3e19748b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36518031" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa la estructura de menú de un formulario. Aunque el control <see cref="T:System.Windows.Forms.MenuStrip" /> reemplaza y agrega funcionalidad al control <see cref="T:System.Windows.Forms.MainMenu" /> de las versiones anteriores, <see cref="T:System.Windows.Forms.MainMenu" /> se conserva a efectos de compatibilidad con versiones anteriores y uso futuro, si se desea.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MainMenu> control representa el contenedor para la estructura de menú de un formulario. Está formado por un menú <xref:System.Windows.Forms.MenuItem> objetos que representan los comandos de menú individuales de la estructura de menús. Cada <xref:System.Windows.Forms.MenuItem> puede ser un comando de la aplicación o un menú primario para otros elementos de submenú. Para enlazar el <xref:System.Windows.Forms.MainMenu> a la <xref:System.Windows.Forms.Form> que se mostrará, asigne el <xref:System.Windows.Forms.MainMenu> a la <xref:System.Windows.Forms.Form.Menu%2A> propiedad de la <xref:System.Windows.Forms.Form>.  
  
 Para las aplicaciones que tendrán compatibilidad con varios idiomas, puede usar el <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propiedad para mostrar el texto del menú de derecha a izquierda para admitir idiomas como el árabe.  
  
 Puede crear diferentes <xref:System.Windows.Forms.MainMenu> objetos para representar diferentes estructuras de menú para el formulario. Si desea volver a usar la estructura de menú contenida en un determinado <xref:System.Windows.Forms.MainMenu>, puede usar su <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> método para crear una copia. Una vez que tenga una copia de la estructura de menús, puede realizar las modificaciones apropiadas para la nueva estructura de menú.  
  
> [!NOTE]
>  Cortar y pegar elementos de un formulario a otro en el diseñador no funcionen según lo esperado si el formulario que se va a pegar en no tiene definido ningún elemento de menú del menú.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MainMenu>, asigna dos <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.MainMenu> y la enlaza a un formulario. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> creado que se denomina `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MainMenu" /> sin ningún elemento de menú especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión del constructor crea un <xref:System.Windows.Forms.MainMenu> sin ninguna especificado <xref:System.Windows.Forms.MenuItem> objetos. Para agregar elementos de menú para el control usan la otra versión de este constructor que acepta una matriz de <xref:System.Windows.Forms.MenuItem> objetos como su parámetro o utilizar el <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MainMenu>, asigna dos <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.MainMenu> y la enlaza a un formulario. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> creado que se denomina `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">Una interfaz <see cref="T:System.ComponentModel.IContainer" /> que representa el contenedor de <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MainMenu" /> con el contenedor especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Matriz de objetos <see cref="T:System.Windows.Forms.MenuItem" /> que se agregará a <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inicializa una nueva instancia de <see cref="T:System.Windows.Forms.MainMenu" /> con un conjunto especificado de objetos <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este constructor para asignar una matriz de <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.MainMenu> en el momento de su creación. Después de la <xref:System.Windows.Forms.MainMenu> se ha creado puede agregar más <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.MainMenu> mediante la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MainMenu>y se asignan dos <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.MainMenu> con esta versión del constructor. En el ejemplo, a continuación, enlaza la <xref:System.Windows.Forms.MainMenu> a una <xref:System.Windows.Forms.Form>. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> creado que se denomina `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo objeto <see cref="T:System.Windows.Forms.MainMenu" /> que es un duplicado del objeto <see cref="T:System.Windows.Forms.MainMenu" /> actual.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.MainMenu" /> que representa el menú clonado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para crear una copia de la estructura de menú que se almacenan en un <xref:System.Windows.Forms.MainMenu>. Puede utilizar este método para volver a usar la estructura de menú que se almacenan en un <xref:System.Windows.Forms.MainMenu> como base para un nuevo <xref:System.Windows.Forms.MainMenu>. Por ejemplo, si desea crear una estructura de menú que tiene los mismos elementos de menú que existente <xref:System.Windows.Forms.MainMenu> , pero también tendrá adicionales <xref:System.Windows.Forms.MenuItem> objetos que se agregan a él, puede usar el <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> método para crear una copia del original <xref:System.Windows.Forms.MainMenu> y a continuación, agregue el nuevo <xref:System.Windows.Forms.MenuItem> objetos clonado <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MainMenu.GetForm%2A> método para determinar si un <xref:System.Windows.Forms.MainMenu> está actualmente asociado al formulario. Si la llamada en el ejemplo de código para <xref:System.Windows.Forms.MainMenu.GetForm%2A> no devuelve `null`, el código clona la estructura de menús de la <xref:System.Windows.Forms.MainMenu> mediante el <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> método. El código, a continuación, Establece la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propiedad en true en la nueva copia de la <xref:System.Windows.Forms.MainMenu> para crear un <xref:System.Windows.Forms.MainMenu> que puede utilizarse con idiomas que se escriben de derecha a izquierda del texto. Este ejemplo requiere que haya un <xref:System.Windows.Forms.MainMenu> creado que se denomina `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se desencadena cuando el menú principal se contrae.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.MainMenu.Collapse> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MainMenu> denominado `MainMenu1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.MainMenu.Collapse> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo controlador en el menú.</summary>
        <returns>Identificador del menú si el método se lleva a cabo correctamente; de lo contrario, es <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Elimina los recursos, distintos de la memoria, utilizados por <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Windows.Forms.MainMenu.Dispose%2A> cuando haya terminado de usar <xref:System.Windows.Forms.MainMenu>. El método <xref:System.Windows.Forms.MainMenu.Dispose%2A> deja el <xref:System.Windows.Forms.MainMenu> en un estado no utilizable. Después de llamar a <xref:System.Windows.Forms.MainMenu.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Windows.Forms.MainMenu> para que la memoria que se estaba ocupando puede ser reclamada por la recolección.  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Windows.Forms.MainMenu.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Windows.Forms.MainMenu>. En caso contrario, los recursos de la <xref:System.Windows.Forms.MainMenu> está utilizando no se liberarán hasta que las llamadas de recopilación de elementos no utilizados los <xref:System.Windows.Forms.MainMenu> destructor del objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Forms.Form" /> que contiene este nodo.</summary>
        <returns>Objeto <see cref="T:System.Windows.Forms.Form" /> que es el contenedor de este control. Devuelve <see langword="null" /> si el objeto <see cref="T:System.Windows.Forms.MainMenu" /> no está actualmente hospedado en un formulario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad le permite determinar si un determinado <xref:System.Windows.Forms.MainMenu> tiene un elemento primario a un formulario. La propiedad es normalmente utiliza cuando varios <xref:System.Windows.Forms.MainMenu> objetos usados en un formulario y debe determinar cuál está utilizando actualmente un formulario.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MainMenu.GetForm%2A> método para determinar si un <xref:System.Windows.Forms.MainMenu> está actualmente asociado al formulario. Si la llamada en el ejemplo de código para <xref:System.Windows.Forms.MainMenu.GetForm%2A> no devuelve `null`, el código clona la estructura de menús de la <xref:System.Windows.Forms.MainMenu> mediante el <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> método. El código, a continuación, Establece la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propiedad en true en la nueva copia de la <xref:System.Windows.Forms.MainMenu> para crear un <xref:System.Windows.Forms.MainMenu> que puede utilizarse con idiomas que se escriben de derecha a izquierda del texto. Este ejemplo requiere que haya un <xref:System.Windows.Forms.MainMenu> creado que se denomina `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MainMenu.Collapse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si el texto que muestra el control aparece de derecha a izquierda.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite que los menús se admitan idiomas que se escriben de derecha a izquierda. Cuando esta propiedad se establece en `RightToLeft.Yes`, se mostrará el texto del elemento de menú de derecha a izquierda en lugar del predeterminado de izquierda a derecha (método).  
  
> [!NOTE]
>  Para obtener más información acerca de cómo afecta la alineación de derecha a izquierda a los controles de formularios Windows Forms, vea la <xref:System.Windows.Forms.Control.RightToLeft%2A> propiedad.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MainMenu.GetForm%2A> método para determinar si un <xref:System.Windows.Forms.MainMenu> está actualmente asociado al formulario. Si la llamada en el ejemplo de código para <xref:System.Windows.Forms.MainMenu.GetForm%2A> no devuelve `null`, el código clona la estructura de menús de la <xref:System.Windows.Forms.MainMenu> mediante el <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> método. El código de ejemplo, a continuación, Establece la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propiedad `RightToLeft.Yes` en la nueva copia de la <xref:System.Windows.Forms.MainMenu> para crear un <xref:System.Windows.Forms.MainMenu> que puede utilizarse con idiomas que se escriben de derecha a izquierda del texto. Este ejemplo requiere que haya un <xref:System.Windows.Forms.MainMenu> creado que se denomina `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor asignado a la propiedad no es un miembro válido de la enumeración <see cref="T:System.Windows.Forms.RightToLeft" />.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Cadena que representa el objeto <see cref="T:System.Windows.Forms.MainMenu" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena devuelta incluye el tipo y la cadena devuelta por la <xref:System.Windows.Forms.Form.ToString%2A> método si el <xref:System.Windows.Forms.MainMenu> se asigna a un formulario.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>