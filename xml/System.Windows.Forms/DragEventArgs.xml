<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1bd409b05771970d9f3ff1200efd246535ae371" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48652858" /></Metadata><TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona datos para los eventos <see cref="E:System.Windows.Forms.Control.DragDrop" />, <see cref="E:System.Windows.Forms.Control.DragEnter" /> o <see cref="E:System.Windows.Forms.Control.DragOver" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Control.DragDrop> evento se produce cuando el usuario finaliza una operación de arrastrar y colocar arrastrando un objeto sobre el control y, a continuación, colocándolo en el control al soltar el botón del mouse. El <xref:System.Windows.Forms.Control.DragEnter> evento tiene lugar cuando el usuario mueve el puntero del mouse en el control mientras se arrastra un objeto con el mouse. El <xref:System.Windows.Forms.Control.DragOver> evento tiene lugar cuando el usuario mueve el puntero del mouse sobre el control mientras se arrastra un objeto con el mouse.  
  
 Un <xref:System.Windows.Forms.DragEventArgs> objeto especifica cualquier dato asociado con este evento, el estado actual de las teclas MAYÚS, CTRL y ALT; la ubicación del puntero del mouse; y los efectos de arrastrar y colocar permiten por el origen y destino del evento de arrastre.  
  
 Para obtener información sobre el modelo de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 El ejemplo siguiente se muestra cómo <xref:System.Windows.Forms.DragEventArgs> se pasan entre el origen y destino de una operación de arrastrar y colocar. En este ejemplo, un <xref:System.Windows.Forms.ListBox> control es el origen de los datos y el <xref:System.Windows.Forms.RichTextBox> control es el destino. El ejemplo supone que el <xref:System.Windows.Forms.ListBox> control se ha rellenado con una lista de nombres de archivo válidos. Cuando el usuario arrastra uno de los nombres de archivo mostrados desde el <xref:System.Windows.Forms.ListBox> controlar hasta el <xref:System.Windows.Forms.RichTextBox> control, el archivo al que hace referencia en el nombre de archivo se abre.  
  
 La operación se inicia en el <xref:System.Windows.Forms.ListBox> evento MouseDown del control. En el <xref:System.Windows.Forms.RichTextBox.DragEnter> controlador de eventos, el ejemplo utiliza la <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> método para comprobar que los datos están en un formato que el <xref:System.Windows.Forms.RichTextBox> control puede mostrar y, a continuación, Establece el <xref:System.Windows.Forms.DragDropEffects> propiedad para especificar que los datos se debe copiar desde el control de código fuente para el control de destino. Por último, el <xref:System.Windows.Forms.RichTextBox> usa el controlador de eventos del control DragDrop el <xref:System.Windows.Forms.IDataObject.GetData%2A> método para recuperar el nombre de archivo para abrir.  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">Datos asociados a este evento.</param>
        <param name="keyState">Estado actual de las teclas MAYÚS, CTRL y ALT.</param>
        <param name="x">Coordenada x del cursor del mouse en píxeles.</param>
        <param name="y">Coordenada y del cursor del mouse en píxeles.</param>
        <param name="allowedEffect">Uno de los valores de <see cref="T:System.Windows.Forms.DragDropEffects" />.</param>
        <param name="effect">Uno de los valores de <see cref="T:System.Windows.Forms.DragDropEffects" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.DragEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las operaciones de arrastrar y colocar permitidas por el autor (u origen) del evento arrastrar.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.DragDropEffects" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un control inicia una operación de arrastrar y colocar mediante una llamada a la <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> método, especifica los efectos permitidos de la operación. Por ejemplo, al arrastrar un archivo desde un origen, si el archivo es de solo lectura (o desde un medio de almacenamiento de solo lectura, como un CD), el origen indicará que el archivo puede copiarla, pero no transferido al destino.  
  
 Antes de intentar realizar una operación en los datos arrastrados, debe examinar esta propiedad para asegurarse de que se permite la operación.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la interfaz <see cref="T:System.Windows.Forms.IDataObject" /> que contiene los datos asociados a este evento.</summary>
        <value>Datos asociados a este evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el cuerpo del controlador de eventos, puede usar el <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> método para determinar si los datos coinciden con los requisitos de formato del control en el que se está arrastrando los datos. También puede especificar si desea intentar convertir los datos para satisfacer los requisitos de formato. Si los datos arrastrados cumplen los requisitos de formato, utilice el <xref:System.Windows.Forms.IDataObject.GetData%2A> método para recuperar los datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el efecto de colocación en el destino de una operación de arrastrar y colocar.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.DragDropEffects" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el efecto aplicado determina el cursor del mouse para el destino de una operación de arrastrar y colocar. Esto es útil para proporcionar comentarios al usuario sobre la operación que se producirá. Por ejemplo, si presiona la tecla CTRL cuando se arrastra un archivo desde un origen, especifique <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> para indicar el destino intentará realizar una operación de copia.  
  
 Para utilizar cursores personalizados para una operación de arrastre, vea <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el estado actual de las teclas MAYÚS, CTRL y ALT, así como el estado de los botones del mouse.</summary>
        <value>Estado actual de las teclas MAYÚS, CTRL y ALT y de los botones del mouse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede hacer que el efecto de una operación de arrastrar y colocar para dependen del estado de una clave determinada. Por ejemplo, puede decidir copiar o mover los datos en función de si se presionan las teclas CTRL o MAYÚS durante la operación de arrastrar y colocar.  
  
 Los bits que se establecen en el <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> propiedad identificar las claves o los botones del mouse que se presionaron durante la operación. Por ejemplo, si se presiona el botón primario del mouse, el primer bit de la <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> se establece la propiedad. Puede utilizar el operador AND bit a bit para probar un estado de la clave especificado.  
  
 En la tabla siguiente se enumera los valores que se usan para un evento especificado.  
  
|Valor|Key|  
|-----------|---------|  
|1 (bit 0)|Botón primario del mouse.|  
|2 (bit 1)|Botón secundario del mouse.|  
|4 (bit 2)|Tecla MAYÚS.|  
|8 (bit 3)|Tecla CTRL.|  
|16 (bit 4)|Botón central del mouse.|  
|32 (bit 5)|Tecla ALT.|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la coordenada X del puntero del mouse, en coordenadas de pantalla.</summary>
        <value>Coordenada X del puntero del mouse en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la coordenada Y del puntero del mouse, en coordenadas de pantalla.</summary>
        <value>Coordenada Y del puntero del mouse en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>