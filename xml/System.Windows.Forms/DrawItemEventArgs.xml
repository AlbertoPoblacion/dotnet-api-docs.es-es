<Type Name="DrawItemEventArgs" FullName="System.Windows.Forms.DrawItemEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0842f84f8ad4293bd39f02b026ab0a8637e51408" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39933291" /></Metadata><TypeSignature Language="C#" Value="public class DrawItemEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawItemEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DrawItemEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawItemEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawItemEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DrawItemEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona datos para el evento <see langword="DrawItem" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `DrawItem` evento es desencadenado por controles de dibujo del propietario, como el <xref:System.Windows.Forms.ListBox> y <xref:System.Windows.Forms.ComboBox> controles. Contiene toda la información que es necesario para que el usuario pintar el elemento especificado, incluido el índice del elemento, el <xref:System.Drawing.Rectangle>y el <xref:System.Drawing.Graphics> en que debe realizarse el dibujo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> tamaño de propiedad para especificar que los elementos dibujados se corrigen y <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos definido en el código de ejemplo. El ejemplo también se supone que los elementos se han agregado a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum" en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DrawItemEventHandler" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.ListBox" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.TabControl" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.DrawItemEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawItemEventArgs (System.Drawing.Graphics graphics, System.Drawing.Font font, System.Drawing.Rectangle rect, int index, System.Windows.Forms.DrawItemState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Graphics graphics, class System.Drawing.Font font, valuetype System.Drawing.Rectangle rect, int32 index, valuetype System.Windows.Forms.DrawItemState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawItemEventArgs(System::Drawing::Graphics ^ graphics, System::Drawing::Font ^ font, System::Drawing::Rectangle rect, int index, System::Windows::Forms::DrawItemState state);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DrawItemEventArgs : System.Drawing.Graphics * System.Drawing.Font * System.Drawing.Rectangle * int * System.Windows.Forms.DrawItemState -&gt; System.Windows.Forms.DrawItemEventArgs" Usage="new System.Windows.Forms.DrawItemEventArgs (graphics, font, rect, index, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.DrawItemState" />
      </Parameters>
      <Docs>
        <param name="graphics">Superficie <see cref="T:System.Drawing.Graphics" /> en la que se va a dibujar.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> que se va a usar; normalmente, es la propiedad <see cref="T:System.Drawing.Font" /> del control primario.</param>
        <param name="rect">Límites del objeto <see cref="T:System.Drawing.Rectangle" /> donde se puede dibujar.</param>
        <param name="index">Valor de índice de <see cref="T:System.Windows.Forms.Control.ControlCollection" /> del elemento que se va a dibujar.</param>
        <param name="state">Información de <see cref="T:System.Windows.Forms.DrawItemState" /> acerca del control.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> para el control especificado con la fuente, el estado, la superficie en la que dibujar y los límites en los que se puede dibujar especificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawItemEventArgs (System.Drawing.Graphics graphics, System.Drawing.Font font, System.Drawing.Rectangle rect, int index, System.Windows.Forms.DrawItemState state, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Graphics graphics, class System.Drawing.Font font, valuetype System.Drawing.Rectangle rect, int32 index, valuetype System.Windows.Forms.DrawItemState state, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawItemEventArgs(System::Drawing::Graphics ^ graphics, System::Drawing::Font ^ font, System::Drawing::Rectangle rect, int index, System::Windows::Forms::DrawItemState state, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DrawItemEventArgs : System.Drawing.Graphics * System.Drawing.Font * System.Drawing.Rectangle * int * System.Windows.Forms.DrawItemState * System.Drawing.Color * System.Drawing.Color -&gt; System.Windows.Forms.DrawItemEventArgs" Usage="new System.Windows.Forms.DrawItemEventArgs (graphics, font, rect, index, state, foreColor, backColor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.DrawItemState" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">Superficie <see cref="T:System.Drawing.Graphics" /> en la que se va a dibujar.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> que se va a usar; normalmente, es la propiedad <see cref="T:System.Drawing.Font" /> del control primario.</param>
        <param name="rect">Límites del objeto <see cref="T:System.Drawing.Rectangle" /> donde se puede dibujar.</param>
        <param name="index">Valor de índice de <see cref="T:System.Windows.Forms.Control.ControlCollection" /> del elemento que se va a dibujar.</param>
        <param name="state">Información de <see cref="T:System.Windows.Forms.DrawItemState" /> acerca del control.</param>
        <param name="foreColor"><see cref="T:System.Drawing.Color" /> del primer plano con el que se dibuja el control.</param>
        <param name="backColor"><see cref="T:System.Drawing.Color" /> de fondo con el que se dibuja el control.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> para el control especificado con la fuente, el estado, el color de fondo y de primer plano, la superficie en la que dibujar y los límites en los que se puede dibujar especificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color" Usage="System.Windows.Forms.DrawItemEventArgs.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el color de fondo del elemento que se va a dibujar.</summary>
        <value><see cref="T:System.Drawing.Color" /> de fondo del elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el estado del elemento es <xref:System.Windows.Forms.DrawItemState.Selected?displayProperty=nameWithType>, <xref:System.Windows.Forms.DrawItemEventArgs.BackColor%2A> está establecido en <xref:System.Drawing.SystemColors.HighlightText%2A?displayProperty=nameWithType>. Si el estado del elemento no es <xref:System.Windows.Forms.DrawItemState.Selected>, <xref:System.Windows.Forms.DrawItemEventArgs.BackColor%2A> propiedad está establecida en <xref:System.Drawing.SystemColors.Window%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos. Este informe le servirá cuando el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListBox> que se denomina `ListBox1`. Asegúrese de que el controlador de eventos está asociado con el <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#153)]
 [!code-vb[System.Windows.Forms.EventExamples#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#153)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.DrawItemEventArgs.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el rectángulo que representa los límites del elemento que se va a dibujar.</summary>
        <value><see cref="T:System.Drawing.Rectangle" /> que representa los límites del elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> tamaño de propiedad para especificar que los elementos dibujados se corrigen y <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos definido en el código de ejemplo. El ejemplo también se supone que los elementos se han agregado a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum" en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DrawItemEventArgs.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="DrawBackground">
      <MemberSignature Language="C#" Value="public virtual void DrawBackground ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBackground() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DrawItemEventArgs.DrawBackground" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DrawBackground ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DrawBackground();" />
      <MemberSignature Language="F#" Value="abstract member DrawBackground : unit -&gt; unit&#xA;override this.DrawBackground : unit -&gt; unit" Usage="drawItemEventArgs.DrawBackground " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dibuja el fondo dentro de los límites especificados en el constructor <see cref="Overload:System.Windows.Forms.DrawItemEventArgs.#ctor" /> y con el color apropiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el elemento que se va a dibujar es <xref:System.Windows.Forms.DrawItemState.Selected>, el fondo se dibuja con el texto resaltado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad para especificar que los elementos dibujados tengan un tamaño fijo y el <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos que se define en el código de ejemplo. El ejemplo también se supone que los elementos se agregaron a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum", en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Cuando se reemplaza <see cref="M:System.Windows.Forms.DrawItemEventArgs.DrawBackground" /> en una clase derivada, asegúrese de llamar a la <see cref="M:System.Windows.Forms.DrawItemEventArgs.DrawBackground" /> método de la clase base.</para></block>
        <altmember cref="T:System.Windows.Forms.DrawItemState" />
      </Docs>
    </Member>
    <Member MemberName="DrawFocusRectangle">
      <MemberSignature Language="C#" Value="public virtual void DrawFocusRectangle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawFocusRectangle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DrawItemEventArgs.DrawFocusRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DrawFocusRectangle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DrawFocusRectangle();" />
      <MemberSignature Language="F#" Value="abstract member DrawFocusRectangle : unit -&gt; unit&#xA;override this.DrawFocusRectangle : unit -&gt; unit" Usage="drawItemEventArgs.DrawFocusRectangle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dibuja un rectángulo de foco dentro de los límites especificados en el constructor <see cref="Overload:System.Windows.Forms.DrawItemEventArgs.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el elemento que se va a dibujar tiene <xref:System.Windows.Forms.DrawItemState.Focus>, se dibuja el rectángulo de foco.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad para especificar que los elementos dibujados tengan un tamaño fijo y el <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos que se define en el código de ejemplo. El ejemplo también se supone que los elementos se agregaron a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum", en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Cuando se reemplaza <see cref="M:System.Windows.Forms.DrawItemEventArgs.DrawFocusRectangle" /> en una clase derivada, asegúrese de llamar a la <see cref="M:System.Windows.Forms.DrawItemEventArgs.DrawFocusRectangle" /> método de la clase base.</para></block>
        <altmember cref="T:System.Windows.Forms.DrawItemState" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public System.Drawing.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font" Usage="System.Windows.Forms.DrawItemEventArgs.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la fuente asignada al elemento que se va a dibujar.</summary>
        <value><see cref="T:System.Drawing.Font" /> asignada al elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sugerido <xref:System.Drawing.Font>, por lo general el <xref:System.Windows.Forms.Control.Font%2A> propiedad del control primario.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad para especificar que los elementos dibujados tengan un tamaño fijo y el <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos que se define en el código de ejemplo. El ejemplo también se supone que los elementos se agregaron a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum", en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Font" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color" Usage="System.Windows.Forms.DrawItemEventArgs.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el color de primer plano del elemento que se va a dibujar.</summary>
        <value><see cref="T:System.Drawing.Color" /> de primer plano del elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el estado del elemento es <xref:System.Windows.Forms.DrawItemState.Selected?displayProperty=nameWithType>, <xref:System.Windows.Forms.DrawItemEventArgs.ForeColor%2A> está establecido en <xref:System.Drawing.SystemColors.HighlightText%2A?displayProperty=nameWithType>. Si el estado del elemento no es <xref:System.Windows.Forms.DrawItemState.Selected>, <xref:System.Windows.Forms.DrawItemEventArgs.ForeColor%2A> propiedad está establecida en <xref:System.Drawing.SystemColors.WindowText%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos. Este informe le servirá cuando el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListBox> que se denomina `ListBox1`. Asegúrese de que el controlador de eventos está asociado con el <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#153)]
 [!code-vb[System.Windows.Forms.EventExamples#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#153)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Windows.Forms.DrawItemEventArgs.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la superficie gráfica donde se va a dibujar el elemento.</summary>
        <value>Superficie <see cref="T:System.Drawing.Graphics" /> donde se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad para especificar que los elementos dibujados tengan un tamaño fijo y el <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos que se define en el código de ejemplo. El ejemplo también se supone que los elementos se agregaron a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum", en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DrawItemEventArgs.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Windows.Forms.DrawItemEventArgs.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor de índice del elemento que se va a dibujar.</summary>
        <value>Valor numérico que representa el valor de <see cref="P:System.Windows.Forms.Control.ControlCollection.Item(System.Int32)" /> del elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve el <xref:System.Windows.Forms.Control.ControlCollection.Item%2A> valor del elemento que se va a dibujar el <xref:System.Windows.Forms.Control.ControlCollection?displayProperty=nameWithType>. Esta propiedad puede devolver -1 si itemswere se quita de la lista.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear dibujado <xref:System.Windows.Forms.ListBox> elementos. El código usa el <xref:System.Windows.Forms.ListBox.DrawMode%2A> propiedad para especificar que los elementos dibujados tengan un tamaño fijo y el <xref:System.Windows.Forms.ListBox.DrawItem> eventos para realizar el dibujo de cada elemento en el <xref:System.Windows.Forms.ListBox>. El código de ejemplo usa las propiedades y métodos de la <xref:System.Windows.Forms.DrawItemEventArgs> clase se pasa como parámetro al controlador de eventos para dibujar los elementos. En este ejemplo se da por supuesto que un <xref:System.Windows.Forms.ListBox> control denominado `listBox1` se ha agregado a un formulario y que la <xref:System.Windows.Forms.ListBox.DrawItem> evento está controlado por el controlador de eventos que se define en el código de ejemplo. El ejemplo también se supone que los elementos se agregaron a la <xref:System.Windows.Forms.ListBox> con el texto "Apple", "Orange" y "Plum", en ese orden.  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ControlCollection.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DrawItemState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawItemState State" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawItemEventArgs.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As DrawItemState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DrawItemState State { System::Windows::Forms::DrawItemState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Windows.Forms.DrawItemState" Usage="System.Windows.Forms.DrawItemEventArgs.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el estado del elemento que se va a dibujar.</summary>
        <value><see cref="T:System.Windows.Forms.DrawItemState" /> que representa el estado del elemento que se va a dibujar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este valor de propiedad puede ser una combinación de los <xref:System.Windows.Forms.DrawItemState> miembros de la enumeración. Los miembros pueden combinarse con los operadores bit a bit.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos. Este informe le servirá cuando el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListBox> que se denomina `ListBox1`. Asegúrese de que el controlador de eventos está asociado con el <xref:System.Windows.Forms.ListBox.DrawItem?displayProperty=nameWithType> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#153)]
 [!code-vb[System.Windows.Forms.EventExamples#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#153)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DrawItemState" />
      </Docs>
    </Member>
  </Members>
</Type>