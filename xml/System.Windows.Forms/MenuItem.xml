<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="afe244ae78c567f03f80f85d4f1fecb35108497e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37567300" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuItem&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuItem : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MenuItem = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un elemento individual que se muestra dentro de un control <see cref="T:System.Windows.Forms.MainMenu" /> o <see cref="T:System.Windows.Forms.ContextMenu" />. Aunque el control <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> reemplaza y agrega funcionalidad al control <see cref="T:System.Windows.Forms.MenuItem" /> de las versiones anteriores, <see cref="T:System.Windows.Forms.MenuItem" /> se conserva a efectos de compatibilidad con versiones anteriores y uso futuro, si se desea.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En orden para una <xref:System.Windows.Forms.MenuItem> para mostrarse, debe agregarlo a un <xref:System.Windows.Forms.MainMenu> o <xref:System.Windows.Forms.ContextMenu>. Para crear submenús, puede agregar <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad del elemento primario <xref:System.Windows.Forms.MenuItem>.  
  
 La <xref:System.Windows.Forms.MenuItem> clase proporciona propiedades que permiten configurar la apariencia y funcionalidad de un elemento de menú. Para mostrar una marca de verificación junto a un elemento de menú, use el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad. Puede usar esta característica para identificar un elemento de menú seleccionado en una lista de elementos de menú mutuamente excluyentes. Por ejemplo, si tiene un conjunto de elementos de menú para establecer el color del texto en un <xref:System.Windows.Forms.TextBox> control, puede usar el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad para identificar qué color está seleccionado actualmente. El <xref:System.Windows.Forms.MenuItem.Shortcut%2A> propiedad puede usarse para definir una combinación de teclado que se puede presionar para seleccionar el elemento de menú.  
  
 Para <xref:System.Windows.Forms.MenuItem> objetos que se muestran en una aplicación de interfaz de múltiples documentos (MDI), puede usar el <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> método para combinar los menús de los formularios MDI primarios con el de los formularios secundarios para crear una estructura de menús consolidada. Dado que un <xref:System.Windows.Forms.MenuItem> no se puede reutilizar en varias ubicaciones al mismo tiempo, como en un <xref:System.Windows.Forms.MainMenu> y un <xref:System.Windows.Forms.ContextMenu>, puede usar el <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método para crear una copia de un <xref:System.Windows.Forms.MenuItem> para su uso en otra ubicación.  
  
 El <xref:System.Windows.Forms.MenuItem.Popup> evento le permite realizar tareas antes de que se muestra un menú. Por ejemplo, puede crear un controlador de eventos para este evento para mostrar u ocultar los elementos de menú en función del estado del código. El <xref:System.Windows.Forms.MenuItem.Select> eventos le permite realizar tareas como proporcionar ayuda detallada para los elementos de menú de la aplicación cuando el usuario coloca el puntero del mouse sobre un elemento de menú.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una estructura de menú para un formulario. El código de ejemplo agrega un <xref:System.Windows.Forms.MenuItem> para representar el elemento de menú de nivel superior, agrega un elemento de submenú para seleccionar un tamaño de fuente y, a continuación, agrega dos elementos de submenú a ese elemento de menú que representan las opciones de fuente grandes y pequeñas en una aplicación. El ejemplo requiere que exista un <xref:System.Windows.Forms.MainMenu> objeto denominado `mainMenu1` y cuatro <xref:System.Windows.Forms.MenuItem> objetos denominados `menuItem1`, `menuItem2`, `menuItem3`, y `menuItem4`.  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una clase <see cref="T:System.Windows.Forms.MenuItem" /> con un título en blanco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una vez haya creado un espacio en blanco <xref:System.Windows.Forms.MenuItem> utilizando este constructor, puede usar las propiedades y métodos de la <xref:System.Windows.Forms.MenuItem> clase para especificar la apariencia y comportamiento de su <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> con esta versión del constructor.  
  
 [!code-cpp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Título del elemento de menú.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MenuItem" /> con el título especificado para el elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú con el `text` parámetro, también puede especificar una clave de acceso mediante la colocación de un carácter '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús.  
  
 Establecer el `text` parámetro a "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> que especifica el título del elemento de menú en el momento en que se construye.  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, onClick As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">Título del elemento de menú.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> que trata el evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> para este elemento de menú.</param>
        <summary>Inicializa una nueva instancia de la clase con el título especificado y un controlador de eventos para el evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> del elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú con el `text` parámetro, también puede especificar una clave de acceso, colocando '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús.  
  
 Establecer el `text` parámetro a "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
 Además, puede utilizar este constructor para especificar un delegado que va a controlar el <xref:System.Windows.Forms.MenuItem.Click> eventos para el elemento de menú que se está creando. El <xref:System.EventHandler> que pasar a este constructor debe configurarse para llamar a un controlador de eventos que puede controlar la <xref:System.Windows.Forms.MenuItem.Click> eventos. Para obtener más información sobre cómo controlar eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> objeto con el título especificado y un <xref:System.EventHandler> delegado conectado a un controlador de eventos que se va a controlar el <xref:System.Windows.Forms.MenuItem.Click> eventos para el elemento de menú.  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">Título del elemento de menú.</param>
        <param name="items">Matriz de objetos <see cref="T:System.Windows.Forms.MenuItem" /> que contiene los elementos de submenú de este elemento de menú.</param>
        <summary>Inicializa una nueva instancia de la clase con el título especificado y una matriz de elementos de submenú definidos para el elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú con el `text` parámetro, también puede especificar una clave de acceso, colocando '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús.  
  
 Establecer el `text` parámetro a "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
 El `items` parámetro le permite asignar una matriz de elementos de menú para definir un submenú de este elemento de menú. Cada elemento de la matriz puede tener también una matriz de elementos de menú asignado a ella. Esto permite crear estructuras de menú completas y asignarlas al constructor del elemento de menú.  
  
 Para obtener más información sobre cómo controlar eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un objeto con el título especificado, un controlador de eventos conectado a un método que controlará el evento de cada elemento de menú en una matriz de elementos de submenú.  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick, System::Windows::Forms::Shortcut shortcut);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler * System.Windows.Forms.Shortcut -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick, shortcut)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">Título del elemento de menú.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> que trata el evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> para este elemento de menú.</param>
        <param name="shortcut">Uno de los valores de <see cref="T:System.Windows.Forms.Shortcut" />.</param>
        <summary>Inicializa una nueva instancia de la clase con el título, el controlador de eventos y la tecla de método abreviado especificados para el elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú con el `text` parámetro, también puede especificar una clave de acceso, colocando '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús. Este constructor también permite especificar una tecla de método abreviado además de una clave de acceso para proporcionar navegación mediante el teclado. Teclas de método abreviado le permiten especificar una combinación de teclas que puede usarse para activar el elemento de menú.  
  
 Establecer el `text` parámetro a "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
 Además, puede utilizar este constructor para especificar un delegado que va a controlar el <xref:System.Windows.Forms.MenuItem.Click> eventos para el elemento de menú que se está creando. El <xref:System.EventHandler> que pasar a este constructor debe configurarse para llamar a un controlador de eventos que puede controlar la <xref:System.Windows.Forms.MenuItem.Click> eventos. Para obtener más información sobre cómo controlar eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un objeto con un título especificado, tecla de método abreviado y un controlador de eventos conectado a un método que controlará el evento para el elemento de menú.  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::Windows::Forms::MenuMerge mergeType, int mergeOrder, System::Windows::Forms::Shortcut shortcut, System::String ^ text, EventHandler ^ onClick, EventHandler ^ onPopup, EventHandler ^ onSelect, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : System.Windows.Forms.MenuMerge * int * System.Windows.Forms.Shortcut * string * EventHandler * EventHandler * EventHandler * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (mergeType, mergeOrder, shortcut, text, onClick, onPopup, onSelect, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType">Uno de los valores de <see cref="T:System.Windows.Forms.MenuMerge" />.</param>
        <param name="mergeOrder">La posición relativa que este elemento de menú ocupará en un menú combinado.</param>
        <param name="shortcut">Uno de los valores de <see cref="T:System.Windows.Forms.Shortcut" />.</param>
        <param name="text">Título del elemento de menú.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> que trata el evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> para este elemento de menú.</param>
        <param name="onPopup">
          <see cref="T:System.EventHandler" /> que trata el evento <see cref="E:System.Windows.Forms.MenuItem.Popup" /> para este elemento de menú.</param>
        <param name="onSelect">
          <see cref="T:System.EventHandler" /> que trata el evento <see cref="E:System.Windows.Forms.MenuItem.Select" /> para este elemento de menú.</param>
        <param name="items">Matriz de objetos <see cref="T:System.Windows.Forms.MenuItem" /> que contiene los elementos de submenú de este elemento de menú.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.MenuItem" /> con un título especificado, los controladores de los eventos <see cref="E:System.Windows.Forms.MenuItem.Click" />, <see cref="E:System.Windows.Forms.MenuItem.Select" /> y <see cref="E:System.Windows.Forms.MenuItem.Popup" /> definidos, una tecla de método abreviado, un tipo de combinación y un orden especificados para el elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú con el `text` parámetro, también puede especificar una clave de acceso, colocando '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús.  
  
 Establecer el `text` parámetro a "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
 El `items` parámetro le permite asignar una matriz de elementos de menú para definir un submenú de este elemento de menú. Cada elemento de la matriz puede tener también una matriz de elementos de menú asignado a ella. Esto permite crear estructuras de menú completas y asignarlas al constructor del elemento de menú.  
  
 El `mergeType` y `mergeOrder` parámetros le permiten determinar cómo se comportará este elemento de menú cuando el elemento de menú se combine con otro menú. Dependiendo del valor que especifique para el `mergeType` parámetro, se puede agregar, quitar, reemplazar o combinar el elemento de menú y sus elementos de submenú del menú que se está combinando con. El `mergeOrder` parámetro determina dónde se ubicará el elemento de menú que se va a crear cuando se combine el menú.  
  
 Además, puede utilizar este constructor para crear un <xref:System.Windows.Forms.MenuItem> y conectarlo a un controlador de eventos en el código que va a procesar al hacer clic en el elemento de menú. El <xref:System.EventHandler> que se pasa a este constructor debe configurarse para llamar a un controlador de eventos que puede controlar la <xref:System.Windows.Forms.MenuItem.Click> eventos. Mediante el uso de esta versión del constructor, también se puede conectar el <xref:System.Windows.Forms.MenuItem.Popup> y <xref:System.Windows.Forms.MenuItem.Select> eventos para determinar cuando se selecciona este elemento de menú. Puede utilizar estos eventos para tareas como determinar si se va a mostrar una marca de verificación junto a los elementos de submenú o habilitar o deshabilitar elementos de menú en función del estado de la aplicación o no. El <xref:System.Windows.Forms.MenuItem.Select> y <xref:System.Windows.Forms.MenuItem.Click> eventos solo se generan para <xref:System.Windows.Forms.MenuItem> objetos primarios no los elementos de menú. Para obtener más información sobre cómo controlar eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú que tiene una clave de título y el método abreviado. El elemento de menú también tiene controladores de eventos definidos para el <xref:System.Windows.Forms.MenuItem.Popup>, <xref:System.Windows.Forms.MenuItem.Click>, y <xref:System.Windows.Forms.MenuItem.Select> eventos. Si este elemento de menú se combinan, agregará el elemento de menú al menú con el orden de combinación de cero.  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property BarBreak As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BarBreak { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BarBreak : bool with get, set" Usage="System.Windows.Forms.MenuItem.BarBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el objeto <see cref="T:System.Windows.Forms.MenuItem" /> se coloca en una nueva línea (para elementos de menú agregados a un objeto <see cref="T:System.Windows.Forms.MainMenu" />) o en una nueva columna (para elementos de menú o de submenú mostrados en un objeto <see cref="T:System.Windows.Forms.ContextMenu" />).</summary>
        <value>Es <see langword="true" /> si el elemento de menú se coloca en una nueva línea o en una nueva columna y <see langword="false" /> si el elemento de menú se deja en su posición predeterminada. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.MenuItem.BarBreak%2A> propiedad para crear un menú donde cada elemento de menú se coloca junto a la otra horizontalmente en lugar de en una lista vertical. También puede utilizar esta propiedad para crear una barra de menús que contiene varias filas de elementos de menú de nivel superior.  
  
 Esta propiedad es distinta de la <xref:System.Windows.Forms.MenuItem.Break%2A> propiedad en el que se muestra una barra en el borde izquierdo de cada elemento de menú que tiene el <xref:System.Windows.Forms.MenuItem.Break%2A> propiedad establecida en `true`. La barra se muestra solo cuando el elemento de menú no es un elemento de menú de nivel superior.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> con dos elementos de submenú. Los dos elementos de submenú se muestran horizontalmente en lugar de verticalmente mediante la <xref:System.Windows.Forms.MenuItem.BarBreak%2A> propiedad.  
  
 [!code-cpp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberSignature Language="VB.NET" Value="Public Property Break As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Break { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Break : bool with get, set" Usage="System.Windows.Forms.MenuItem.Break" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento se coloca en una nueva línea (para elementos de menú agregados a un objeto <see cref="T:System.Windows.Forms.MainMenu" />) o en un nueva columna (para elementos de menú o de submenú mostrados en un objeto <see cref="T:System.Windows.Forms.ContextMenu" />).</summary>
        <value>Es <see langword="true" /> si el elemento de menú se coloca en una nueva línea o en una nueva columna y <see langword="false" /> si el elemento de menú se deja en su posición predeterminada. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.MenuItem.Break%2A> propiedad para crear un menú donde cada menú se coloca junto a la otra horizontalmente en lugar de en una lista vertical. También puede utilizar esta propiedad para crear una barra de menús que contiene varias filas de elementos de menú de nivel superior.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un menú con dos elementos de menú de nivel superior en la fila superior y un elemento de menú en la fila inferior.  
  
 [!code-cpp[Classic MenuItem.Break Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Checked : bool with get, set" Usage="System.Windows.Forms.MenuItem.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se va a mostrar una marca de verificación junto al texto del elemento de menú.</summary>
        <value>Es <see langword="true" /> si hay una marca de verificación junto al elemento de menú; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad en combinación con otros elementos de menú en un menú para proporcionar el estado de una aplicación. Por ejemplo, puede colocar una marca de verificación en un elemento de menú en un grupo de elementos para identificar el tamaño de la fuente que se mostrará para el texto en una aplicación. También puede usar el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad para identificar el elemento de menú seleccionado en un grupo de elementos de menú mutuamente excluyentes.  
  
> [!NOTE]
>  No se puede establecer esta propiedad `true` para los elementos de menú de nivel superior.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad para proporcionar el estado de una aplicación. En este ejemplo, un grupo de elementos de menú se usan para especificar el color del texto de un <xref:System.Windows.Forms.TextBox> control. Se usa el controlador de eventos proporcionado por el <xref:System.Windows.Forms.MenuItem.Click> eventos de tres elementos de menú. Cada elemento de menú especifica un color de texto, `menuItemRed` (rojo), `menuItemGreen` (verde), o `menuItemBlue` (azul). El controlador de eventos determina qué elemento de menú se hizo clic, coloca una marca de verificación para el elemento de menú seleccionado y cambia el color del texto del formulario <xref:System.Windows.Forms.TextBox> control. El ejemplo requiere que el <xref:System.Drawing> espacio de nombres se ha agregado al formulario que se coloca en el código siguiente. El ejemplo también requiere que un <xref:System.Windows.Forms.TextBox> se ha agregado al formulario que se encuentra este código de ejemplo en que se denomina `textBox1`.  
  
 [!code-cpp[Classic MenuItem.Checked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Forms.MenuItem" /> es un menú de nivel superior o tiene elementos secundarios.</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce al hacer clic en el elemento de menú o seleccionarlo mediante una tecla de método abreviado o una tecla de acceso definida para ese elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MenuItem.Click> evento se produce cuando este <xref:System.Windows.Forms.MenuItem> se hace clic en el usuario. Este evento también se produce si el usuario selecciona el elemento de menú mediante el teclado y presiona la tecla ENTRAR. También puede producirse si se presiona una tecla de acceso o la tecla de método abreviado que está asociado con el <xref:System.Windows.Forms.MenuItem>. Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad para el <xref:System.Windows.Forms.MenuItem> contiene elementos, no se genera este evento. Este evento no se desencadena para elementos de menú primario.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Click> eventos para realizar tareas cuando un <xref:System.Windows.Forms.MenuItem> se hace clic en. El ejemplo se crea un <xref:System.Windows.Forms.MainMenu> llamado `mainMenu1` y agrega dos <xref:System.Windows.Forms.MenuItem> objetos, `topMenuItem` (`File`) y `menuItem1` (`Open`). A continuación, conecta el `Click` eventos para el `menuItem1_Click` controlador de eventos. Cuando el usuario hace clic en el `Open` elemento de menú, un <xref:System.Windows.Forms.OpenFileDialog> se inicializa y se muestra. El ejemplo requiere que se haya creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una copia de un objeto <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia del objeto <see cref="T:System.Windows.Forms.MenuItem" /> actual.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.MenuItem" /> que representa el elemento de menú duplicado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem> los objetos no se puede usar en más de un lugar a menos que obtenga una copia de la <xref:System.Windows.Forms.MenuItem>. Puede llamar a este método para crear una copia de este elemento de menú para su uso en un <xref:System.Windows.Forms.ContextMenu>, <xref:System.Windows.Forms.MainMenu>, u otros <xref:System.Windows.Forms.MenuItem> dentro de la aplicación. Cuando se clona un elemento de menú, los controladores de eventos especificados en el elemento de menú original seguirá funcionando en la versión del elemento de menú clonada. Por ejemplo, si ha creado un <xref:System.Windows.Forms.MenuItem> y está conectado su <xref:System.Windows.Forms.MenuItem.Click> eventos a un controlador de eventos. Cuando se clona el elemento de menú, el elemento de menú clonado llamará el mismo controlador de eventos.  
  
   
  
## Examples  
 El siguiente código de ejemplo clones un <xref:System.Windows.Forms.MenuItem> y lo muestra en un <xref:System.Windows.Forms.ContextMenu>. El ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> existe en un <xref:System.Windows.Forms.MainMenu> en un formulario con el nombre de `menuItem1` y que un <xref:System.Windows.Forms.ContextMenu> objeto denominado `contextMenu1` también existe en el formulario.  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.CloneMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">Objeto <see cref="T:System.Windows.Forms.MenuItem" /> que representa el elemento de menú que se va a copiar.</param>
        <summary>Crea una copia del objeto <see cref="T:System.Windows.Forms.MenuItem" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para crear copias de los elementos de menú que ya ha creado para su uso en un menú contextual o en otra estructura de menú dentro de la aplicación. Esta versión de <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> le permite especificar un determinado <xref:System.Windows.Forms.MenuItem> para copiar en lugar del elemento de menú al que llama el método. Puede usar este método para inicializar un nuevo <xref:System.Windows.Forms.MenuItem> objeto con una copia de otro <xref:System.Windows.Forms.MenuItem>. Cuando se clona un elemento de menú, los controladores de eventos especificados en el elemento de menú original seguirá funcionando en la versión del elemento de menú clonada. Por ejemplo, si ha creado un <xref:System.Windows.Forms.MenuItem> y está conectado su <xref:System.Windows.Forms.MenuItem.Click> eventos a un controlador de eventos. Cuando se clona el elemento de menú, el elemento de menú clonado llamará el mismo controlador de eventos.  
  
   
  
## Examples  
 El ejemplo de código siguiente inicializa una nueva <xref:System.Windows.Forms.MenuItem> con una copia de una existente <xref:System.Windows.Forms.MenuItem> que se usa en un <xref:System.Windows.Forms.MainMenu> en un formulario. El código, a continuación, agrega clonado <xref:System.Windows.Forms.MenuItem> a un <xref:System.Windows.Forms.ContextMenu> en el formulario. Este ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> ya está creado y denominado `menuItem1` y que un <xref:System.Windows.Forms.ContextMenu> control se ha creado y denominado `contextMenu1`.  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DefaultItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultItem : bool with get, set" Usage="System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento de menú es el predeterminado.</summary>
        <value>
          <see langword="true" /> si el elemento de menú es el predeterminado de un menú; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El elemento de menú predeterminado para un menú en negrita. Cuando el usuario hace doble clic en un submenú que contiene un elemento de forma predeterminada, se selecciona el elemento predeterminado y se cierra el submenú. Puede usar el <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> propiedad para indicar la acción predeterminada que se espera en un menú o menú contextual.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú con dos elementos de submenú. El ejemplo establece `menuItem2` como el elemento de menú predeterminado mediante el <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> propiedad.  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="menuItem.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Se deshace de los recursos (distintos de la memoria) que usa <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Windows.Forms.MenuItem.Dispose%2A> cuando haya terminado de usar <xref:System.Windows.Forms.MenuItem>. El método <xref:System.Windows.Forms.MenuItem.Dispose%2A> deja el <xref:System.Windows.Forms.MenuItem> en un estado no utilizable. Después de llamar a <xref:System.Windows.Forms.MenuItem.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Windows.Forms.MenuItem> por lo que la memoria ocupaba puede ser reclamada por la recolección de elementos.  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Windows.Forms.MenuItem.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Windows.Forms.MenuItem>. En caso contrario, los recursos de la <xref:System.Windows.Forms.MenuItem> no es se liberarán hasta que llame al conjunto de elementos no utilizados los <xref:System.Windows.Forms.MenuItem> destructor del objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la propiedad <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> de un elemento del menú se establece en <see langword="true" /> y se realiza una solicitud para dibujar el elemento del menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.DrawItemEventArgs> argumento pasado a un <xref:System.Windows.Forms.MenuItem.DrawItem> controlador de eventos proporciona un <xref:System.Drawing.Graphics> objeto que le permite realizar otras operaciones gráficas en la superficie del elemento de menú y el dibujo. Puede utilizar este controlador de eventos para crear menús personalizados que satisfacen las necesidades de la aplicación. Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo controlar el <xref:System.Windows.Forms.MenuItem.DrawItem> eventos. Este ejemplo dibuja un menú mediante el elemento un <xref:System.Drawing.Brush> y un <xref:System.Drawing.Font>y, a continuación, se dibuja un <xref:System.Drawing.Rectangle> alrededor del elemento de menú. El dibujo se realiza a través de la <xref:System.Drawing.Graphics> objeto, que se pasa al controlador de eventos en el <xref:System.Windows.Forms.DrawItemEventArgs> parámetro. Este ejemplo requiere que se ha inicializado el <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> propiedad del elemento para `true`. Por ejemplo, C#, agregue el código siguiente en el constructor del formulario, después `InitializeComponent`, para enlazar el evento:  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.MenuItem.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento de menú está habilitado.</summary>
        <value>
          <see langword="true" /> si el elemento de menú está habilitado; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> es deshabilitado aparece en color gris para indicar su estado. Cuando un elemento de menú primario está deshabilitado, no se muestran todos los elementos de submenú.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Popup> evento para determinar si <xref:System.Windows.Forms.MenuItem> están habilitados los objetos que proporcionan compatibilidad para cortar, copiar y eliminación operaciones antes de que se muestren en el menú. El ejemplo determina si `textBox1`, un <xref:System.Windows.Forms.TextBox> control en el formulario, está habilitado, tiene foco de entrada y tiene texto seleccionado antes de habilitar la <xref:System.Windows.Forms.MenuItem> objetos. Este ejemplo requiere que tres <xref:System.Windows.Forms.MenuItem> se crean los objetos con nombre `menuCut`, `menuCopy`, y `menuDelete` se han creado.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.MenuItem.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica la posición del elemento en el menú primario.</summary>
        <value>Índice de base cero que representa la posición del elemento en el menú primario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad proporciona la posición indizada de un elemento de menú en la colección de elementos de menú del menú de su elemento primario. Puede utilizar esta propiedad para cambiar la posición de un elemento de menú a una ubicación diferente dentro del menú. También puede utilizar esta propiedad cuando se crea un <xref:System.Windows.Forms.MenuItem> para especificar su posición en una estructura de menú en el momento de creación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se cambia la posición de dos elementos de menú en un menú. El siguiente ejemplo de código requiere que dos <xref:System.Windows.Forms.MenuItem> se crean los objetos con nombre `menuItem1` y `menuItem2`. El `menuItem1` mientras que el elemento de menú se desplaza hacia abajo una posición en el menú, `menuItem2` sube una posición.  
  
 [!code-cpp[Classic MenuItem.Index Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor asignado es menor que cero o mayor que el número de elementos.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.MenuItem.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el elemento de menú contiene elementos de menú secundarios.</summary>
        <value>
          <see langword="true" /> si el elemento de menú contiene elementos de menú secundarios; <see langword="false" /> si el elemento de menú es independiente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad con el <xref:System.Windows.Forms.MenuItem.Parent%2A> propiedad para navegar en el código a través de una estructura de menús completa.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si hay submenús asociados a un <xref:System.Windows.Forms.MenuItem> denominado `menuItem1`. Si existen cualquier submenús, deshabilita estableciendo la <xref:System.Windows.Forms.MenuItem.Enabled%2A> propiedad `false`. El ejemplo requiere que exista un <xref:System.Windows.Forms.MenuItem> creó denominado `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.IsParent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberSignature Language="VB.NET" Value="Public Property MdiList As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MdiList { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MdiList : bool with get, set" Usage="System.Windows.Forms.MenuItem.MdiList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento de menú se llenará con una lista de las ventanas secundarias de Interfaz de múltiples documentos (MDI) que se muestran dentro del formulario asociado.</summary>
        <value>Es <see langword="true" /> si se muestra una lista de las ventanas secundarias de MDI en este elemento de menú; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se selecciona un elemento de menú para mostrar una lista de ventanas MDI secundarias, la lista se muestra como un submenú del elemento de menú. Solo los formularios que se definen como formularios MDI secundarios se muestran en la lista de ventanas. Solo nueve ventanas secundarias se pueden mostrar a la vez. Si hay más de nueve ventanas secundarias que se muestran, se muestra un elemento de menú "Más Windows..." al final de la lista de ventanas. Al hacer clic en este elemento de menú muestra un cuadro de diálogo con una lista completa de las ventanas secundarias que están activas actualmente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> que se utiliza para mostrar la lista de formularios secundarios MDI abiertos actualmente en un formulario MDI.  
  
 [!code-cpp[Classic MenuItem.MdiList Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el menú necesita saber el tamaño de un elemento de menú antes de dibujarlo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para que se genere este evento, debe tener la <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> propiedad del elemento de menú se establece en `true`. Este evento se desencadena antes de que se dibujan los menús dibujado por el propietario para permitir el tamaño del elemento de menú a dibujarse para especificarse. Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Puesto que la  clase hereda de , también puede utilizar esta propiedad si el  está asociado a un formulario. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.MenuItem.MeasureItem> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.MenuItem> denominado `MenuItem1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.MenuItem.MeasureItem> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property MenuID As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int MenuID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuID : int" Usage="System.Windows.Forms.MenuItem.MenuID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica el identificador de Windows correspondiente a este elemento de menú.</summary>
        <value>Identificador de Windows correspondiente a este elemento de menú.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Combina este objeto <see cref="T:System.Windows.Forms.MenuItem" /> con otro <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ MergeMenu();" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.MergeMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Combina este objeto <see cref="T:System.Windows.Forms.MenuItem" /> con otro <see cref="T:System.Windows.Forms.MenuItem" /> y devuelve el objeto <see cref="T:System.Windows.Forms.MenuItem" /> combinado que resulta.</summary>
        <returns>Objeto <see cref="T:System.Windows.Forms.MenuItem" /> que representa el elemento de menú combinado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama a esta versión de <xref:System.Windows.Forms.MenuItem.MergeMenu%2A>, el <xref:System.Windows.Forms.MenuItem> devuelta es una copia del elemento de menú actual que se puede combinar con otro elemento de menú sin que afecte a la funcionalidad del elemento actual. Esta versión de la <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> es similar a llamar al método el <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método que no contiene ningún parámetro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MergeMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MergeMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.MergeMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">Objeto <see cref="T:System.Windows.Forms.MenuItem" /> que especifica el elemento de menú que se va a combinar con éste.</param>
        <summary>Combina otro elemento de menú con éste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los elementos de menú se combinan según el valor del elemento de menú <xref:System.Windows.Forms.MenuItem.MergeType%2A> y <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> propiedades. Esta versión de la <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> método le permite combinar dos <xref:System.Windows.Forms.MenuItem> objetos (y sus submenús) en un único menú. Combinación de menús se realiza automáticamente cuando un formulario de elemento primario de la interfaz de múltiples documentos (MDI) y un elemento secundario tienen menús. Puede usar esta versión del método para combinar dos <xref:System.Windows.Forms.MenuItem> objetos (y sus elementos de submenú) ubicados en un <xref:System.Windows.Forms.MainMenu> control en un único menú dentro de un <xref:System.Windows.Forms.ContextMenu>. Por ejemplo, puede llamar a esta versión de la <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> método para combinar los elementos de menú de un menú archivo y edición en un único <xref:System.Windows.Forms.MenuItem> que, a continuación, se pueden agregar a y muestra un <xref:System.Windows.Forms.ContextMenu>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se usa esta versión de la <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> método para crear una copia de un <xref:System.Windows.Forms.MenuItem> y combinarlo con otro. La información combinada <xref:System.Windows.Forms.MenuItem> , a continuación, se agrega a un <xref:System.Windows.Forms.ContextMenu> control. Este ejemplo requiere que hay dos elementos de menú llamados `menuItem1` y `menuItem2` que contienen elementos de submenú y un <xref:System.Windows.Forms.ContextMenu> denominado `contextMenu1` para mostrar los elementos de menú. `menuItem1` y `menuItem2` tener distintos elementos de menú contenidos en ellos. Después de llamar a <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> se realiza, consolidado menú se crea.  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MergeOrder { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MergeOrder : int with get, set" Usage="System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica la posición relativa del elemento de menú cuando se combina con otro.</summary>
        <value>Índice de base cero que representa el orden de fusión mediante combinación de este elemento de menú. El valor predeterminado es 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El orden de combinación de un elemento de menú especifica la posición relativa que este elemento de menú ocupará si la estructura del menú que el <xref:System.Windows.Forms.MenuItem> se encuentra en el que se combina con otra.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> propiedad para controlar la manera en que se muestra un menú combinado. Se trata de un ejemplo completo, preparado para ejecutar una vez que agregue al proyecto.  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeType As MenuMerge" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuMerge MergeType { System::Windows::Forms::MenuMerge get(); void set(System::Windows::Forms::MenuMerge value); };" />
      <MemberSignature Language="F#" Value="member this.MergeType : System.Windows.Forms.MenuMerge with get, set" Usage="System.Windows.Forms.MenuItem.MergeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica el comportamiento del elemento de menú cuando su menú se combine con otro.</summary>
        <value>Valor de <see cref="T:System.Windows.Forms.MenuMerge" /> que representa el tipo de combinación del elemento de menú.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo de combinación de un elemento de menú indica cómo se comporta el elemento de menú cuando tiene el mismo orden de combinación que otro elemento de menú que se va a combinar. Puede usar los menús combinados para crear un menú consolidado basado en dos o más menús existentes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.MenuItem> con el <xref:System.Windows.Forms.MenuItem.MergeType%2A> y <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> especificada para que el elemento de menú se agrega al menú combinado en primera posición.  
  
 [!code-cpp[Classic MenuItem.MergeType Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor asignado no es uno de los valores de <see cref="T:System.Windows.Forms.MenuMerge" />.</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mnemonic As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Mnemonic { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Mnemonic : char" Usage="System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica el carácter de la tecla de acceso asociada a este elemento de menú.</summary>
        <value>Carácter que representa el carácter de la tecla de acceso asociada a este elemento de menú. Devuelve el carácter NUL (valor ASCII 0) si no se ha especificado ningún carácter de tecla de acceso en el texto del objeto <see cref="T:System.Windows.Forms.MenuItem" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El carácter de tecla de acceso es el primer carácter después de un carácter de y comercial (&) en el texto de la <xref:System.Windows.Forms.MenuItem>. Esta propiedad no devolverá una tecla de acceso si dos caracteres de "y" comercial se colocan juntos, ya que éstos se utilizan para mostrar una y comercial en el texto de la <xref:System.Windows.Forms.MenuItem> en lugar de definir un carácter de tecla de acceso.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="menuItem.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.Click" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Click> eventos para realizar tareas cuando un <xref:System.Windows.Forms.MenuItem> se hace clic en. El ejemplo se crea un <xref:System.Windows.Forms.MainMenu> llamado `mainMenu1` y agrega dos <xref:System.Windows.Forms.MenuItem> objetos, `topMenuItem` (`File`) y `menuItem1` (`Open`). A continuación, conecta el `Click` eventos para el `menuItem1_Click` controlador de eventos. Cuando el usuario hace clic en el `Open` elemento de menú, un <xref:System.Windows.Forms.OpenFileDialog> se inicializa y se muestra. El ejemplo requiere que se haya creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="menuItem.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.DrawItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> método.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitMenuPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitMenuPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitMenuPopup : EventArgs -&gt; unit&#xA;override this.OnInitMenuPopup : EventArgs -&gt; unit" Usage="menuItem.OnInitMenuPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.Popup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="menuItem.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.MeasureItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.MeasureItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> método.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="menuItem.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.Popup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Popup> evento para determinar si <xref:System.Windows.Forms.MenuItem> están habilitados los objetos que proporcionan compatibilidad para cortar, copiar y eliminación operaciones antes de que se muestren en el menú. El ejemplo determina si `textBox1`, un <xref:System.Windows.Forms.TextBox> control en el formulario, está habilitado, tiene foco de entrada y tiene texto seleccionado antes de habilitar la <xref:System.Windows.Forms.MenuItem> objetos. Este ejemplo requiere que tres <xref:System.Windows.Forms.MenuItem> se crean los objetos con nombre `menuCut`, `menuCopy`, y `menuDelete` se han creado.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelect (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelect(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelect : EventArgs -&gt; unit&#xA;override this.OnSelect : EventArgs -&gt; unit" Usage="menuItem.OnSelect e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.MenuItem.Select" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Select> eventos de la <xref:System.Windows.Forms.MenuItem> clase para asignar el texto de ayuda para un <xref:System.Windows.Forms.StatusBarPanel> de un <xref:System.Windows.Forms.StatusBar> control. Este ejemplo requiere que <xref:System.Windows.Forms.MenuItem> objetos denominados `menuOpen`, `menuSave`, y `menuExit` se agregan a un <xref:System.Windows.Forms.MainMenu> control en un formulario. El ejemplo también requiere que un <xref:System.Windows.Forms.StatusBar> control denominado `statusBar1` se ha agregado al formulario. El <xref:System.Windows.Forms.StatusBar> control debe contener un <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si es el código proporcionado o Windows quien dibuja el elemento de menú.</summary>
        <value>
          <see langword="true" /> si el código dibuja el elemento de menú; <see langword="false" /> si Windows dibuja el elemento de menú. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> propiedad está establecida en `true`, deberá controlar todo el dibujo del elemento de menú. Puede usar esta capacidad para crear sus propias pantallas de menú especial.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un menú con un elemento de menú dibujado por el propietario. Conjunto de este ejemplo el <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> propiedad y se usa el `AddHandler` instrucción y el `AddressOf` operador para designar un delegado para controlar el <xref:System.Windows.Forms.MenuItem.DrawItem> eventos. Para ejecutar el ejemplo, péguelo en un formulario que importa el <xref:System>, <xref:System.Windows.Forms>, y <xref:System.Drawing> espacios de nombres. Llame a `InitializeMenu` desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ Parent { System::Windows::Forms::Menu ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Menu" Usage="System.Windows.Forms.MenuItem.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica el menú que contiene este elemento de menú.</summary>
        <value>Objeto <see cref="T:System.Windows.Forms.Menu" /> que representa al menú que contiene este elemento de menú.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para obtener el <xref:System.Windows.Forms.Menu> objeto para un submenú. Puede convertir el <xref:System.Windows.Forms.Menu> objeto devuelto por esta propiedad en un <xref:System.Windows.Forms.MenuItem> objeto manipularla.  
  
   
  
## Examples  
 En este ejemplo, crea un menú principal y un elemento de menú de nivel superior, `menuItem1` (`File`). También crea dos elementos de menú, `menuItem2` (`New`) y `menuItem3` (`Open`) y agregarlos a la lista de elementos de menú de `menuItem1`. A continuación, comprobar si `menuItem3` tiene un elemento primario menú, que es true y mostrar la información de este menú principal en el cuadro de mensaje. En este ejemplo requiere que se haya creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[ParentMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberSignature Language="F#" Value="member this.PerformClick : unit -&gt; unit" Usage="menuItem.PerformClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Genera un evento <see cref="E:System.Windows.Forms.Control.Click" /> para el objeto <see cref="T:System.Windows.Forms.MenuItem" /> mediante la simulación de un clic realizado por un usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este menú para activar un elemento de menú mediante código sin pasar cualquier información de eventos. Por ejemplo, si desea activar el menú de un elemento en función de una acción que se produce en la aplicación, puede llamar a la <xref:System.Windows.Forms.MenuItem.PerformClick%2A> método para que <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 En este ejemplo, mediante programación un elemento de menú mediante el uso de la `PerformClick` método. En primer lugar, se crea un menú principal (`mainMenu1`) y agregar dos elementos de menú, `menuItem1` (`File`) y `menuItem2` (`Edit`). También usa el <xref:System.Windows.Forms.MenuItem.Click> eventos para enviar datos al controlador de eventos cuando se hace clic en un elemento de menú. A continuación, usar el `PerformClick` método hacer clic en el `File` elemento de menú. Cuando se inicia la aplicación, el `File` se activa el elemento de menú y un cuadro de mensaje que contiene el texto "Se hace clic en el menú archivo." aparece en la pantalla. El ejemplo requiere que se haya creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[PerformClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PerformSelect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformSelect();" />
      <MemberSignature Language="F#" Value="abstract member PerformSelect : unit -&gt; unit&#xA;override this.PerformSelect : unit -&gt; unit" Usage="menuItem.PerformSelect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provoca el evento <see cref="E:System.Windows.Forms.MenuItem.Select" /> para este elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite elevar el <xref:System.Windows.Forms.MenuItem.Select> un evento sin pasar información al controlador de eventos.  
  
   
  
## Examples  
 En este ejemplo se selecciona un elemento de menú mediante programación utilizando la `PerformSelect` método. En primer lugar, se crea un menú principal (`mainMenu1`) y agregar dos elementos de menú, `menuItem1` (`File`) y `menuItem2` (`Edit`). También usa el <xref:System.Windows.Forms.MenuItem.Select> eventos para enviar datos al controlador de eventos cuando se selecciona un elemento de menú. A continuación, usar el `PerformSelect` método para seleccionar el `File` elemento de menú. Cuando se inicia la aplicación, el `File` se selecciona el elemento de menú y un cuadro de mensaje que contiene el texto "Se selecciona el menú archivo." aparece en la pantalla. El ejemplo requiere que se haya creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[PerformSelect#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce antes de que se muestre la lista de elementos de menú de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento solo se produce cuando un elemento de menú tiene elementos de submenú para mostrar. Puede utilizar este controlador de eventos para agregar, quitar, habilitar, deshabilitar, activar o desactivar los elementos de menú en función del estado de la aplicación antes de que se muestren. Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Popup> evento para determinar si <xref:System.Windows.Forms.MenuItem> están habilitados los objetos que proporcionan compatibilidad para cortar, copiar y eliminación operaciones antes de que se muestren en el menú. El ejemplo determina si `textBox1`, un <xref:System.Windows.Forms.TextBox> control en el formulario, está habilitado, tiene foco de entrada y tiene texto seleccionado antes de habilitar la <xref:System.Windows.Forms.MenuItem> objetos. Este ejemplo requiere que tres <xref:System.Windows.Forms.MenuItem> se crean los objetos con nombre `menuCut`, `menuCopy`, y `menuDelete` se han creado.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RadioCheck { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RadioCheck : bool with get, set" Usage="System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el objeto <see cref="T:System.Windows.Forms.MenuItem" /> mostrará un botón de opción en lugar de una marca de verificación cuando esté seleccionado.</summary>
        <value>
          <see langword="true" /> si se va a utilizar un botón de opción en lugar de una marca de verificación; <see langword="false" /> si se va a mostrar la marca de verificación estándar cuando el elemento de menú esté seleccionado. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marcas de verificación no implica necesariamente un estado mutuamente excluyente para un grupo de elementos de menú. Puede utilizar esta propiedad para indicar al usuario que la marca de verificación de un elemento de menú es mutuamente excluyente.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.MenuItem.Checked%2A> propiedad para cambiar el estado de una aplicación. En el ejemplo, un grupo de elementos de menú son siempre que se usan para especificar el color del texto de un <xref:System.Windows.Forms.TextBox> control. En el ejemplo, se usa el controlador de eventos proporcionado por el <xref:System.Windows.Forms.MenuItem.Click> eventos de los tres elementos de menú. Cada elemento de menú especifica un color, `menuItemRed`, `menuItemGreen`, o `menuItemBlue`. El controlador de eventos determina qué elemento de menú se hizo clic, coloca una marca de verificación para el elemento de menú seleccionado y cambia el color del texto del formulario <xref:System.Windows.Forms.TextBox> control denominado `textBox1`. El ejemplo también usa el <xref:System.Windows.Forms.MenuItem.RadioCheck%2A> propiedad para demostrar cómo se utiliza un botón de opción para mostrar los elementos de menú que se excluyen mutuamente. Este ejemplo requiere que el <xref:System.Drawing?displayProperty=nameWithType> espacio de nombres se ha agregado al formulario que contiene este código.  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Select As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Select;" />
      <MemberSignature Language="F#" Value="member this.Select : EventHandler " Usage="member this.Select : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario coloca el puntero sobre un elemento de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, este evento se provoca cuando el usuario coloca el puntero del mouse sobre el elemento de menú. El evento también puede generarse cuando el usuario resalta un elemento de menú mediante el teclado si se desplaza al elemento de menú con las teclas de dirección. Puede usar este evento para mostrar una cadena de ayuda detallada que pertenecen a este elemento de menú en la barra de estado de la aplicación. Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad para el <xref:System.Windows.Forms.MenuItem> contiene elementos, no se genera este evento. Este evento no se desencadena para elementos de menú primario.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Windows.Forms.MenuItem.Select> eventos de la <xref:System.Windows.Forms.MenuItem> clase para asignar el texto de ayuda para un <xref:System.Windows.Forms.StatusBarPanel> de un <xref:System.Windows.Forms.StatusBar> control. Este ejemplo requiere que <xref:System.Windows.Forms.MenuItem> objetos denominados `menuOpen`, `menuSave`, y `menuExit` se agregan a un <xref:System.Windows.Forms.MainMenu> control en un formulario. El ejemplo también requiere que un <xref:System.Windows.Forms.StatusBar> control denominado `statusBar1` se ha agregado al formulario. El <xref:System.Windows.Forms.StatusBar> control debe contener un <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property Shortcut As Shortcut" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Shortcut Shortcut { System::Windows::Forms::Shortcut get(); void set(System::Windows::Forms::Shortcut value); };" />
      <MemberSignature Language="F#" Value="member this.Shortcut : System.Windows.Forms.Shortcut with get, set" Usage="System.Windows.Forms.MenuItem.Shortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica la tecla de método abreviado asociada al elemento de menú.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.Shortcut" />. El valor predeterminado es <see langword="Shortcut.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teclas de método abreviado proporcionan un método para que los usuarios activar con frecuencia utiliza los elementos de menú en el sistema de menús y para proporcionar acceso de teclado a la aplicación para aquellos usuarios que no tienen acceso a un mouse u otro dispositivo de puntero.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú, Establece el título, asigna una tecla de método abreviado, hace visible el elemento de menú y se muestra la presentación de teclas de método abreviado del elemento de menú. El ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> se haya creado denominado `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor asignado no es uno de los valores de <see cref="T:System.Windows.Forms.Shortcut" />.</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowShortcut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowShortcut { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowShortcut : bool with get, set" Usage="System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la tecla de método abreviado asociada al elemento de menú aparecerá junto al título del mismo.</summary>
        <value>
          <see langword="true" /> si la combinación de teclas se va a mostrar junto al título del elemento de menú; <see langword="false" /> si la combinación de teclas no se va a mostrar. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para proporcionar a los usuarios la opción Ocultar los accesos directos de menús para ahorrar espacio u ocultar una tecla de método abreviado de mostrarse.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú, Establece el título, asigna una tecla de método abreviado, hace visible el elemento de menú y se muestra la presentación de teclas de método abreviado del elemento de menú. El ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> se haya creado denominado `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MenuItem.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica el título del elemento de menú.</summary>
        <value>Título del elemento de menú.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se especifica un título para el elemento de menú, también puede especificar una clave de acceso, colocando '&' antes del carácter que se usará como la clave de acceso. Por ejemplo, para especificar la "F" en "File" como una clave de acceso, podría especificar el título del elemento de menú como "& archivo". Puede usar esta característica para proporcionar navegación mediante el teclado para los menús.  
  
 Establecer esta propiedad en "`-`" hace que el elemento de menú se muestre como un separador (una línea horizontal) en lugar de un elemento de menú estándar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú, Establece el título, asigna una tecla de método abreviado, hace visible el elemento de menú y se muestra la presentación de teclas de método abreviado del elemento de menú. El ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> se haya creado denominado `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="menuItem.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <returns>Cadena que representa el objeto <see cref="T:System.Windows.Forms.MenuItem" /> actual. La cadena incluye el tipo y la propiedad <see cref="P:System.Windows.Forms.MenuItem.Text" /> del control.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.MenuItem.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento de menú es visible.</summary>
        <value>
          <see langword="true" /> si el elemento será visible en el menú; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para modificar una estructura de menú sin tener que combinar o deshabilitar los menús. Por ejemplo, si desea ocultar una sección completa de la funcionalidad de los menús de la aplicación, puede ocultarlas del usuario al establecer esta propiedad en `false`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un elemento de menú, Establece el título, asigna una tecla de método abreviado, hace visible el elemento de menú y se muestra la presentación de teclas de método abreviado del elemento de menú. El ejemplo requiere que un <xref:System.Windows.Forms.MenuItem> se haya creado denominado `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>