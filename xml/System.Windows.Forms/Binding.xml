<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4984d03b4d295a484905b4224f78cefcf41340" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36348816" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the simple binding between the property value of an object and the property value of a control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.Binding> clase para crear y mantener un enlace sencillo entre la propiedad de un control y la propiedad de un objeto, o bien la propiedad del objeto actual en una lista de objetos.  
  
 Como ejemplo del primer caso, puede enlazar la <xref:System.Windows.Forms.Control.Text%2A> propiedad de un <xref:System.Windows.Forms.TextBox> el control a la `FirstName` propiedad de un `Customer` objeto. Como ejemplo del segundo caso, puede enlazar la <xref:System.Windows.Forms.Control.Text%2A> propiedad de un <xref:System.Windows.Forms.TextBox> el control a la `FirstName` propiedad de un <xref:System.Data.DataTable> que contiene los clientes.  
  
 El <xref:System.Windows.Forms.Binding> clase también le permite dar formato a valores para su presentación a través de la <xref:System.Windows.Forms.Binding.Format> eventos y para recuperar valores con formato a través de la <xref:System.Windows.Forms.Binding.Parse> eventos.  
  
 Al construir un <xref:System.Windows.Forms.Binding> instancia <xref:System.Windows.Forms.Binding.%23ctor%2A> constructor, debe especificar tres elementos:  
  
-   El nombre de la propiedad del control para enlazar a.  
  
-   Origen de datos.  
  
-   La ruta de navegación que se resuelve en una lista o una propiedad en el origen de datos. La ruta de navegación también se utiliza para crear el objeto <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> propiedad.  
  
 En primer lugar, debe especificar el nombre de la propiedad de control que desea enlazar los datos. Por ejemplo, para mostrar los datos en un <xref:System.Windows.Forms.TextBox> controlar, especifique la <xref:System.Windows.Forms.TextBoxBase.Text%2A> propiedad.  
  
 En segundo lugar, puede especificar una instancia de cualquiera de las clases en la siguiente tabla como el origen de datos.  
  
  En tercer lugar, debe especificar la ruta de navegación, que puede ser una cadena vacía (""), un único nombre de propiedad o una jerarquía de nombres delimitado por puntos. Si establece la ruta de navegación en una cadena vacía, el <xref:System.Object.ToString%2A> se llamará el método en el objeto de origen de datos subyacente.  
  
 Si el origen de datos es un <xref:System.Data.DataTable>, que puede contener varios <xref:System.Data.DataColumn> objetos, debe usarse la ruta de navegación para resolver una columna específica.  
  
> [!NOTE]
>  Cuando el origen de datos es un <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, o <xref:System.Data.DataTable>, realmente está enlazando a un <xref:System.Data.DataView>. Por lo tanto, las filas enlazadas son realmente <xref:System.Data.DataRowView> objetos.  
  
 Se requiere una ruta de navegación delimitado por puntos cuando el origen de datos se establece en un objeto que contiene varias <xref:System.Data.DataTable> objetos (como un <xref:System.Data.DataSet> o <xref:System.Data.DataViewManager>). También puede utilizar una ruta de navegación delimitado al enlazar a un objeto cuyas propiedades devuelven referencias a otros objetos (por ejemplo, una clase con propiedades que devuelven otros objetos de clase). Por ejemplo, todas las rutas de navegación siguientes describen los campos de datos válidos:  
  
-   "Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Cada miembro de la ruta de acceso puede devolver una propiedad que se resuelve en un único valor (por ejemplo, un número entero), o una lista de valores (por ejemplo, una matriz de cadenas). Aunque cada miembro de la ruta de acceso puede ser una lista o una propiedad, el miembro final debe resolverse en una propiedad. Cada miembro se basa en el miembro anterior: "Size.Height" resuelve la <xref:System.Drawing.Size.Height%2A> propiedad actuales <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName" resuelve el nombre del cliente actual, donde el cliente es uno de los clientes para la región actual.  
  
 A <xref:System.Data.DataRelation> devuelve una lista de valores al vincular un <xref:System.Data.DataTable> a un segundo <xref:System.Data.DataTable> en un <xref:System.Data.DataSet>. Si el <xref:System.Data.DataSet> contiene <xref:System.Data.DataRelation> objetos, puede especificar el miembro de datos como un <xref:System.Data.DataTable.TableName%2A> seguido por un <xref:System.Data.DataRelation.RelationName%2A>y, a continuación, un <xref:System.Data.DataColumn.ColumnName%2A>. Por ejemplo, si la <xref:System.Data.DataTable> denominado "Suppliers" contiene un <xref:System.Data.DataRelation> denominado "suppliers2products", el miembro de datos podría ser "Suppliers.suppliers2products.ProductName".  
  
 El origen de datos puede constar de un conjunto de clases relacionadas. Por ejemplo, imagine un conjunto de clases que cataloga sistemas solares. La clase denominada `System` contiene una propiedad denominada `Stars` que devuelve una colección de `Star` objetos. Cada `Star` objeto tiene `Name` y `Mass` propiedades, así como un `Planets` propiedad que devuelve una colección de `Planet` objetos. En este sistema, cada planeta tiene también `Mass` y `Name` propiedades. Cada `Planet` aún más el objeto tiene una `Moons` propiedad que devuelve una colección de `Moon` objetos, cada uno de los cuales tiene también `Name` y `Mass` propiedades. Si especifica un `System` objeto como origen de datos, puede especificar cualquiera de los siguientes valores como el miembro de datos:  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 Controles que pueden tener un enlace sencillo representan una colección de <xref:System.Windows.Forms.Binding> objetos en un <xref:System.Windows.Forms.ControlBindingsCollection>, que puede tener acceso a través del control <xref:System.Windows.Forms.Control.DataBindings%2A> propiedad. Agrega un <xref:System.Windows.Forms.Binding> a la colección mediante una llamada a la <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> método, con lo que se enlaza una propiedad del control a una propiedad de un objeto (o a una propiedad del objeto actual en una lista).  
  
 Puede enlazar sencilla a cualquier objeto que se deriva de la <xref:System.Windows.Forms.Control?displayProperty=nameWithType> de la clase, por ejemplo, los siguientes controles de Windows:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Solo el <xref:System.Windows.Forms.ListControl.SelectedValue%2A> propiedad de la <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, y <xref:System.Windows.Forms.ListBox> control está enlazada a un simple.  
  
 El <xref:System.Windows.Forms.BindingManagerBase> clase es una clase abstracta que administra todos los <xref:System.Windows.Forms.Binding> objetos para un origen de datos determinado y un miembro de datos. Las clases que derivan de <xref:System.Windows.Forms.BindingManagerBase> son la <xref:System.Windows.Forms.CurrencyManager> y <xref:System.Windows.Forms.PropertyManager> clases. Cómo un <xref:System.Windows.Forms.Binding> administrado depende de si la <xref:System.Windows.Forms.Binding> es un enlace a la lista o un enlace de propiedad. Por ejemplo, si es un enlace a la lista, puede usar el <xref:System.Windows.Forms.BindingManagerBase> para especificar un <xref:System.Windows.Forms.BindingManagerBase.Position%2A> en la lista; el <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, por lo tanto, determina qué elemento (de todos los elementos de la lista) está realmente enlazado a un control. Para devolver la correspondiente <xref:System.Windows.Forms.BindingManagerBase>, use el <xref:System.Windows.Forms.BindingContext>.  
  
 Para agregar una nueva fila a un conjunto de controles enlazados al mismo <xref:System.Windows.Forms.Binding.DataSource%2A>, use la <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> método de la <xref:System.Windows.Forms.BindingManagerBase> clase. Use la <xref:System.Windows.Forms.BindingContext.Item%2A> propiedad de la <xref:System.Windows.Forms.BindingContext> clase para devolver la correspondiente <xref:System.Windows.Forms.CurrencyManager>. Para salir de la adición de la nueva fila, use el <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un formulario Windows Forms con varios controles que muestran el enlace de datos simple. El ejemplo se crea un <xref:System.Data.DataSet> con dos tablas denominadas `Customers` y `Orders`y un <xref:System.Data.DataRelation> denominado `custToOrders`. Cuatro controles (un <xref:System.Windows.Forms.DateTimePicker> y tres <xref:System.Windows.Forms.TextBox> controles) se enlazan datos a las columnas de las tablas. Para cada control, en el ejemplo se crea y agrega un <xref:System.Windows.Forms.Binding> al control a través de la <xref:System.Windows.Forms.Control.DataBindings%2A> propiedad. El ejemplo devuelve una <xref:System.Windows.Forms.BindingManagerBase> para cada tabla a través del formulario <xref:System.Windows.Forms.BindingContext>. Cuatro <xref:System.Windows.Forms.Button> controla el incremento o decremento el <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propiedad en el <xref:System.Windows.Forms.BindingManagerBase> objetos.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that simple-binds the indicated control property to the specified data member of the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar una instancia de cualquiera de las siguientes clases para el origen de datos:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Cualquier clase que implemente la <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier clase  
  
 Consulte la <xref:System.Windows.Forms.Binding> clase para obtener más información acerca de cómo crear el `dataMember` cadena.  
  
 Cuando se crea un enlace a la propiedad de un control, el nuevo <xref:System.Windows.Forms.Binding> inspecciona los eventos expuestos por el control enlazado y los asocia a dos eventos concretos:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominado *PropertyName* `Changed` (por ejemplo, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Si intenta enlazar a una propiedad que no existe, un <xref:System.ArgumentException> se produce cuando el <xref:System.Windows.Forms.Binding> se agrega al control <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> colección.  
  
   
  
## Examples  
 El siguiente código de ejemplo se enlaza un <xref:System.Windows.Forms.TextBox> control a una columna de tabla en una <xref:System.Data.DataSet> denominado `myDataSet`. El ejemplo requiere que se ha declarado `myDataSet` en la sección de declaraciones del módulo.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> is neither a valid property of a control nor an empty string ("").</exception>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the indicated control property to the specified data member of the data source, and optionally enables formatting to be applied.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The property given is a read-only property.</exception>
        <exception cref="T:System.Exception">Formatting is disabled and <paramref name="propertyName" /> is neither a valid property of a control nor an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the specified control property to the specified data member of the specified data source. Optionally enables formatting and propagates values to the data source based on the specified update setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar una instancia de cualquiera de las siguientes clases para el origen de datos:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Cualquier clase que implemente la <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier clase  
  
 Consulte la <xref:System.Windows.Forms.Binding> clase para obtener más información acerca de cómo crear el `dataMember` cadena.  
  
 Cuando se crea un enlace a la propiedad de un control, el nuevo <xref:System.Windows.Forms.Binding> inspecciona los eventos expuestos por el control enlazado y los asocia a dos eventos concretos:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   Un evento denominado *PropertyName* `Changed` (por ejemplo, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the indicated control property to the specified data member of the specified data source. Optionally enables formatting, propagates values to the data source based on the specified update setting, and sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar una instancia de cualquiera de las siguientes clases para el origen de datos:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Cualquier clase que implemente la <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier clase  
  
 Consulte la <xref:System.Windows.Forms.Binding> clase para obtener más información acerca de cómo crear el `dataMember` cadena.  
  
 Cuando se crea un enlace a la propiedad de un control, el nuevo <xref:System.Windows.Forms.Binding> inspecciona los eventos expuestos por el control enlazado y los asocia a dos eventos concretos:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominado *PropertyName* `Changed` (por ejemplo, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the specified control property to the specified data member of the specified data source. Optionally enables formatting with the specified format string; propagates values to the data source based on the specified update setting; and sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar una instancia de cualquiera de las siguientes clases para el origen de datos:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Cualquier clase que implemente la <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier clase  
  
 Consulte la <xref:System.Windows.Forms.Binding> clase para obtener más información acerca de cómo crear el `dataMember` cadena.  
  
 Cuando se crea un enlace a la propiedad de un control, el nuevo <xref:System.Windows.Forms.Binding> inspecciona los eventos expuestos por el control enlazado y los asocia a dos eventos concretos:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominado *PropertyName* `Changed` (por ejemplo, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
        <param name="formatInfo">An implementation of <see cref="T:System.IFormatProvider" /> to override default formatting behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class with the specified control property to the specified data member of the specified data source. Optionally enables formatting with the specified format string; propagates values to the data source based on the specified update setting; enables formatting with the specified format string; sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source; and sets the specified format provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar una instancia de cualquiera de las siguientes clases para el origen de datos:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Cualquier clase que implemente la <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier clase  
  
 Consulte la <xref:System.Windows.Forms.Binding> clase para obtener más información acerca de cómo crear el `dataMember` cadena.  
  
 Cuando se crea un enlace a la propiedad de un control, el nuevo <xref:System.Windows.Forms.Binding> inspecciona los eventos expuestos por el control enlazado y los asocia a dos eventos concretos:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominado *PropertyName* `Changed` (por ejemplo, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control the <see cref="T:System.Windows.Forms.Binding" /> is associated with.</summary>
        <value>El <see cref="T:System.Windows.Forms.IBindableComponent" /> la <see cref="T:System.Windows.Forms.Binding" /> está asociado.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> property is set to <see langword="true" /> and a binding operation is complete, such as when data is pushed from the control to the data source or vice versa</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se desencadena en cualquiera de las siguientes condiciones cuando <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> es `true`:  
  
-   Datos del origen de datos se insertan en la propiedad de control.  
  
-   Datos de la propiedad de control se insertan en el origen de datos.  
  
 Este evento se provoca al finalizar estas operaciones, independientemente del estado de finalización. Por ejemplo, si una operación de enlace enlaza un valor nulo a un <xref:System.Windows.Forms.DateTimePicker.Value%2A> propiedad, se produce una excepción, pero la <xref:System.Windows.Forms.Binding.BindingComplete> todavía se produce el evento. El controlador de este evento puede tomar la acción adecuada, basándose en el éxito, error o las excepciones producidas en el proceso de enlace, examinando la <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> propiedad de la <xref:System.Windows.Forms.BindingCompleteEventArgs> parámetro.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo controlar la <xref:System.Windows.Forms.Binding.BindingComplete> eventos.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.BindingManagerBase" /> for this <see cref="T:System.Windows.Forms.Binding" />.</summary>
        <value>El <see cref="T:System.Windows.Forms.BindingManagerBase" /> que encarga de ello <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.BindingManagerBase> para recorrer en iteración una lista enlazado a datos al aumentar o disminuir el <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propiedad. La <xref:System.Windows.Forms.BindingManagerBase> clase es abstracta. El <xref:System.Windows.Forms.CurrencyManager> (clase), que administra listas con enlace a datos, hereda de la <xref:System.Windows.Forms.BindingManagerBase> clase.  
  
   
  
## Examples  
 El código siguiente en el ejemplo se obtiene la <xref:System.Windows.Forms.BindingManagerBase> de cada <xref:System.Windows.Forms.Binding> en el formulario y se imprime el <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propiedad para cada <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that contains information about this binding based on the <paramref name="dataMember" /> parameter in the <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> constructor.</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingMemberInfo" /> que contiene información sobre este <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.BindingMemberInfo> se crea a partir del `dataMember` cadena pasada a la <xref:System.Windows.Forms.Binding.%23ctor%2A> constructor.  
  
   
  
## Examples  
 El código siguiente en el ejemplo se obtiene la <xref:System.Windows.Forms.BindingMemberInfo> de cada <xref:System.Windows.Forms.Binding> en un formulario y se imprime el <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, y <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> valores de propiedad para que <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control that the binding belongs to.</summary>
        <value>El <see cref="T:System.Windows.Forms.Control" /> que pertenece el enlace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El código siguiente en el ejemplo se obtiene la <xref:System.Windows.Forms.BindingManagerBase> para un origen de datos específico y se imprime información sobre cada una <xref:System.Windows.Forms.Binding.Control%2A> propiedad que está enlazada al origen de datos. El ejemplo se utiliza la <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> propiedad de la <xref:System.Windows.Forms.BindingManagerBase> para obtener todos los controles.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets when changes to the data source are propagated to the bound control property.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.ControlUpdateMode" />. De manera predeterminada, es <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data source for this binding.</summary>
        <value>
          <see cref="T:System.Object" /> que representa el origen de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entre los posibles orígenes de datos se incluyen:  
  
-   <xref:System.Data.DataSet>.  
  
-   <xref:System.Data.DataTable>.  
  
-   <xref:System.Data.DataView>.  
  
-   <xref:System.Data.DataViewManager>.  
  
-   Cualquier objeto que implementa el <xref:System.Collections.IList> (interfaz)  
  
-   Cualquier objeto  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.Binding.DataSource%2A> propiedad para devolver un <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value to be stored in the data source if the control value is <see langword="null" /> or empty.</summary>
        <value>El <see cref="T:System.Object" /> que se almacenará en el origen de datos cuando la propiedad de control está vacía o <see langword="null" />. El valor predeterminado es <see cref="T:System.DBNull" /> para tipos de valor y <see langword="null" /> para tipos de valor no.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.Binding.NullValue%2A> propiedad para especificar el valor mostrado en un control enlazado cuando el origen de datos contiene <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates when changes to the bound control property are propagated to the data source.</summary>
        <value>Valor que indica cuándo se propagan los cambios. De manera predeterminada, es <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que, incluso si esta propiedad se establece en <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, el enlace se actualizará al menos una vez, cuando se establece en primer lugar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the property of a control is bound to a data value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Binding.Format> evento se desencadena cuando se insertan datos del origen de datos en el control. Puede controlar la <xref:System.Windows.Forms.Binding.Format> eventos para convertir los datos sin formato desde el origen de datos en formato de datos para su presentación. Cuando se extraen datos del control en el origen de datos, el <xref:System.Windows.Forms.Binding.Parse> evento se desencadena para quitar el valor mostrado, el <xref:System.Windows.Forms.Binding.Format> se produce un evento para volver a formatear los datos para su presentación. Esto garantiza que el control enlazado muestra los datos con el formato correcto, independientemente de si el usuario escribe datos con o sin formato en el control.  
  
 El <xref:System.Windows.Forms.Binding.Format> y <xref:System.Windows.Forms.Binding.Parse> eventos permiten crear formatos personalizados para mostrar los datos. Por ejemplo, si los datos de una tabla están de tipo <xref:System.Decimal>, puede mostrar los datos en el formato de moneda local estableciendo la <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> propiedad de la <xref:System.Windows.Forms.ConvertEventArgs> en el valor con formato en el <xref:System.Windows.Forms.Binding.Format> eventos. Por lo tanto debe quitar el valor mostrado en el <xref:System.Windows.Forms.Binding.Parse> eventos.  
  
 El <xref:System.Windows.Forms.Binding.Format> evento se produce siempre que el <xref:System.Windows.Forms.BindingManagerBase.Current%2A> valor de la <xref:System.Windows.Forms.BindingManagerBase> cambios, lo que incluye:  
  
-   La primera vez que se enlaza la propiedad.  
  
-   Siempre que el <xref:System.Windows.Forms.BindingManagerBase.Position%2A> cambios.  
  
-   Cada vez que la lista enlazado a datos se ordenan o filtran, que es lleva a cabo cuando un <xref:System.Data.DataView> proporciona una lista.  
  
 El <xref:System.Windows.Forms.Binding.Format> evento también se produce después de la <xref:System.Windows.Forms.Binding.Parse> eventos. Por ejemplo, cuando un control pierde el foco, se analiza su contenido. Inmediatamente después, cuando se insertan nuevos datos en el control, la <xref:System.Windows.Forms.Binding.Format> evento se produce lo que el contenido nuevo formato.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.Binding>, agrega un <xref:System.Windows.Forms.ConvertEventHandler> delegado a ambos el <xref:System.Windows.Forms.Binding.Parse> y <xref:System.Windows.Forms.Binding.Format> eventos y agrega el <xref:System.Windows.Forms.Binding> a la <xref:System.Windows.Forms.BindingsCollection> de un <xref:System.Windows.Forms.TextBox> controlar a través de la <xref:System.Windows.Forms.Control.DataBindings%2A> propiedad. El `DecimalToCurrencyString` delegado de evento, agrega a la <xref:System.Windows.Forms.Binding.Format> eventos, da formato al valor enlazado (un <xref:System.Decimal> tipo) como moneda mediante el <xref:System.Decimal.ToString%2A> método. El `CurrencyStringToDecimal` delegado de evento, agrega a la <xref:System.Windows.Forms.Binding.Parse> eventos, convierte el valor mostrado por el control a la <xref:System.Decimal> tipo.  
  
 En este ejemplo se da por supuesto la presencia de un <xref:System.Data.DataSet> denominado `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.IFormatProvider" /> that provides custom formatting behavior.</summary>
        <value>El <see cref="T:System.IFormatProvider" /> implementación que proporciona un comportamiento de formato personalizado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer esta propiedad, se reemplazará el comportamiento predeterminado de formato, que usa el <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> configuración de la propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the format specifier characters that indicate how a value is to be displayed.</summary>
        <value>Cadena de caracteres especificadores de formato que indican cómo se va a mostrar un valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de formato utilizada debe seguir las especificaciones de formato estándares de .NET Framework. Para obtener más información, consulte [aplicar formato a tipos de .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether type conversion and formatting is applied to the control property data.</summary>
        <value>
          <see langword="true" /> Si está habilitada la conversión de tipos y el formato de datos de la propiedad de control; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se establece esta propiedad en `true` también habilita el comportamiento de control de errores y hace que el <xref:System.Windows.Forms.Binding.BindingComplete> evento. El controlador de este evento puede tomar la acción adecuada, basándose en el éxito, error o las excepciones producidas en el proceso de enlace, examinando la <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> propiedad de la <xref:System.Windows.Forms.BindingCompleteEventArgs> parámetro.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the binding is active.</summary>
        <value>
          <see langword="true" /> Si el enlace está activo; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un enlace está activo cuando se cumplen estas condiciones:  
  
-   Se establecen todas sus propiedades.  
  
-   El usuario no llamó a <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> o <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> en el <xref:System.Windows.Forms.BindingManagerBase> que la <xref:System.Windows.Forms.Binding> pertenece.  
  
-   El control al que el <xref:System.Windows.Forms.Binding> pertenece se ha creado.  
  
   
  
## Examples  
 El siguiente código de ejemplo imprime la <xref:System.Windows.Forms.Binding.PropertyName%2A> y <xref:System.Windows.Forms.Binding.IsBinding%2A> valor para cada <xref:System.Windows.Forms.Binding> en un formulario.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Object" /> to be set as the control property when the data source contains a <see cref="T:System.DBNull" /> value.</summary>
        <value>El <see cref="T:System.Object" /> que se establecerá como la propiedad del control cuando el origen de datos contiene un <see cref="T:System.DBNull" /> valor. De manera predeterminada, es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El origen de datos debe contener <xref:System.DBNull> para el <xref:System.Windows.Forms.Binding.NullValue%2A> propiedad se aplique correctamente. Si el tipo del origen de datos es un tipo como una cadena o entero el valor de la <xref:System.Windows.Forms.Binding.NullValue%2A> propiedad se omitirá. Además, el <xref:System.Windows.Forms.Binding.NullValue%2A> propiedad se omite si se establece en `null`.  
  
 Un valor null se agregará al origen de datos cuando la propiedad del control se establece en el objeto de <xref:System.Windows.Forms.Binding.NullValue%2A>. Si <xref:System.Windows.Forms.Binding.NullValue%2A> se establece en un valor de cadena, las comparaciones distinguen entre mayúsculas y minúsculas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.Format" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.Binding.OnFormat%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.Parse" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.Binding.OnParse%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of a data-bound control changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Binding.Format> y <xref:System.Windows.Forms.Binding.Parse> eventos permiten crear formatos personalizados para mostrar los datos. Por ejemplo, si los datos de una tabla están de tipo <xref:System.Decimal>, puede mostrar los datos en el formato de moneda local estableciendo la <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> propiedad de la <xref:System.Windows.Forms.ConvertEventArgs> en el valor con formato en el <xref:System.Windows.Forms.Binding.Format> eventos. Por lo tanto debe quitar el valor mostrado en el <xref:System.Windows.Forms.Binding.Parse> eventos.  
  
 El <xref:System.Windows.Forms.Binding.Parse> evento tiene lugar en las siguientes condiciones:  
  
-   Después de la <xref:System.Windows.Forms.Control.Validated> eventos de la <xref:System.Windows.Forms.Control> se produce.  
  
-   Cuando el <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> método de la <xref:System.Windows.Forms.BindingManagerBase> se llama.  
  
-   Cuando el <xref:System.Windows.Forms.BindingManagerBase.Current%2A> de la <xref:System.Windows.Forms.BindingManagerBase> cambios (es decir, cuando la <xref:System.Windows.Forms.BindingManagerBase.Position%2A> cambios).  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.Binding>, agrega un <xref:System.Windows.Forms.ConvertEventHandler> delegado a ambos el <xref:System.Windows.Forms.Binding.Parse> y <xref:System.Windows.Forms.Binding.Format> eventos y agrega el <xref:System.Windows.Forms.Binding> a la <xref:System.Windows.Forms.BindingsCollection> de un <xref:System.Windows.Forms.TextBox> controlar a través de la <xref:System.Windows.Forms.Control.DataBindings%2A> propiedad. El `DecimalToCurrencyString` delegado de evento, agrega a la <xref:System.Windows.Forms.Binding.Format> eventos, da formato al valor enlazado (un <xref:System.Decimal> tipo) como moneda mediante el <xref:System.Decimal.ToString%2A> método. El `CurrencyStringToDecimal` delegado de evento, agrega a la <xref:System.Windows.Forms.Binding.Parse> eventos, convierte el valor mostrado por el control a la <xref:System.Decimal> tipo.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the control's data-bound property.</summary>
        <value>Nombre de una propiedad de control con la que se va a establecer un enlace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Windows.Forms.Binding.PropertyName%2A> para especificar la propiedad del control que desea enlazar a una lista en un origen de datos. Normalmente, enlazar una propiedad de pantalla como la <xref:System.Windows.Forms.Control.Text%2A> propiedad de un <xref:System.Windows.Forms.TextBox> control. Sin embargo, dado que se puede enlazar cualquier propiedad de un control, puede crear mediante programación controles en tiempo de ejecución utilizando los datos de una base de datos.  
  
   
  
## Examples  
 El siguiente código de ejemplo imprime la <xref:System.Windows.Forms.Binding.PropertyName%2A> valor de cada <xref:System.Windows.Forms.Binding> para cada control en un formulario.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the control property to the value read from the data source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the current value from the control property and writes it to the data source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>