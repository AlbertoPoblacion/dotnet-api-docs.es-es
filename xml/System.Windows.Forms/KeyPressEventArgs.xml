<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25038ad91908b5dabca4612a74eb04e74f6e6cab" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56361363" /></Metadata><TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona datos para el evento <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.KeyPressEventArgs> especifica el carácter que se compone cuando el usuario presiona una tecla. Por ejemplo, cuando el usuario presiona MAYÚS + K, el <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> propiedad devuelve una k mayúscula.  
  
 Un <xref:System.Windows.Forms.Control.KeyPress> evento tiene lugar cuando el usuario presiona una tecla. Dos eventos que están estrechamente relacionados con el <xref:System.Windows.Forms.Control.KeyPress> son eventos <xref:System.Windows.Forms.Control.KeyUp> y <xref:System.Windows.Forms.Control.KeyDown>. El <xref:System.Windows.Forms.Control.KeyDown> evento precede a cada <xref:System.Windows.Forms.Control.KeyPress> eventos cuando el usuario presiona una tecla y un <xref:System.Windows.Forms.Control.KeyUp> evento tiene lugar cuando el usuario suelta una tecla. Cuando el usuario mantiene presionada una tecla, duplicar <xref:System.Windows.Forms.Control.KeyDown> y <xref:System.Windows.Forms.Control.KeyPress> cada vez que se repite el carácter se producen eventos. Una <xref:System.Windows.Forms.Control.KeyUp> evento se genera después de su lanzamiento.  
  
 Con cada <xref:System.Windows.Forms.Control.KeyPress> evento, un <xref:System.Windows.Forms.KeyPressEventArgs> se pasa. Un <xref:System.Windows.Forms.KeyEventArgs> se pasa con cada <xref:System.Windows.Forms.Control.KeyDown> y <xref:System.Windows.Forms.Control.KeyUp> eventos. Un <xref:System.Windows.Forms.KeyEventArgs> especifica si se han presionado teclas modificadoras (CTRL, ALT o MAYÚS) junto con otra clave. (Esta información de modificador también puede obtenerse a través de la <xref:System.Windows.Forms.Control.ModifierKeys%2A> propiedad de la <xref:System.Windows.Forms.Control> clase.)  
  
 Establecer <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> a `true` para cancelar la `KeyPress` eventos. Esto evita que el control de presionar la tecla de procesamiento.  
  
> [!NOTE]
>  Algunos controles procesarán ciertas pulsaciones de teclas en <xref:System.Windows.Forms.Control.KeyDown>. Por ejemplo, <xref:System.Windows.Forms.RichTextBox> procesa la tecla ENTRAR antes <xref:System.Windows.Forms.Control.KeyPress> se llama. En tales casos, no puede cancelar la <xref:System.Windows.Forms.Control.KeyPress> eventos y debe cancelar la pulsación de tecla de <xref:System.Windows.Forms.Control.KeyDown> en su lugar.  
  
 Para obtener información sobre el modelo de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 El ejemplo siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.KeyPressEventArgs> para contar teclas a medida que se presionan y mostrar los resultados después de cada pulsación de tecla. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> a continuación, establecido en True para mantener el sistema operativo desde más procesa la clave. El ejemplo supone un formulario con un <xref:System.Windows.Forms.TextBox> coloca en él.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 Debe crear una nueva instancia de esta clase. También debe establecer el controlador de eventos. Puede hacerlo en el constructor para la clase.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 Cuando se provoca el evento especificado en el control, se llama al método asociado y la aplicación puede ejecutar código en respuesta al evento.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">Carácter ASCII correspondiente a la tecla que el usuario presionó.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.KeyPressEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> propiedad va a obtener el estado actual de las teclas modificadoras.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un cuadro de mensaje que muestra el estado actual de la tecla MAYÚS.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se controló el evento <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
        <value><see langword="true" /> si el evento está controlado; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se controla el evento, se enviará al sistema operativo para el procesamiento predeterminado. Establecer <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> a `true` para cancelar la `KeyPress` eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Forms.TextBox> control. El `keypressed` método usa el <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> propiedad para comprobar si se presionó la tecla ENTRAR. Si se presiona la tecla ENTRAR, el <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> propiedad está establecida en `true`, lo que indica el evento se controla.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter correspondiente a la tecla presionada.</summary>
        <value>Carácter ASCII que se crea. Por ejemplo, si el usuario presiona MAYÚS + K, esta propiedad devuelve una K mayúscula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> propiedad pulsaciones de teclas de ejemplo en tiempo de ejecución y modificar las pulsaciones de teclas en circunstancias especiales de tiempo de ejecución. Por ejemplo, puede usar <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> para deshabilitar de pulsaciones de teclas no numéricos cuando el usuario escribe un código postal, cambiar todas las teclas alfabéticas a mayúsculas en un campo de entrada de datos o controlar el teclado u otro dispositivo de entrada clave para combinaciones de teclas concretas.  
  
 Puede obtener o establecer las siguientes claves:  
  
-   a-z, A-Z.  
  
-   CTRL.  
  
-   Signos de puntuación.  
  
-   Número de claves, tanto en la parte superior del teclado y del teclado numérico.  
  
-   ESCRIBA.  
  
 No se puede obtener o establecer las siguientes claves:  
  
-   Tecla TAB.  
  
-   INSERT y DELETE.  
  
-   PÁGINA DE INICIO.  
  
-   FIN.  
  
-   RE PÁG y AV PÁG.  
  
-   F1-F2.  
  
-   ALT.  
  
-   Teclas de dirección.  
  
> [!NOTE]
>  Para obtener información acerca de cómo detectar cualquiera de las claves no son de caracteres se mencionó anteriormente, vea el <xref:System.Windows.Forms.KeyEventArgs> clase.  
  
-  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Forms.TextBox> control. El `keypressed` método usa el <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> propiedad para comprobar si se presionó la tecla ENTRAR. Si se presiona la tecla ENTRAR, el <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> propiedad está establecida en `true`, lo que indica el evento se controla.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>