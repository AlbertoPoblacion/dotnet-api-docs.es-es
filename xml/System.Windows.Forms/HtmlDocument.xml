<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d6ea42599f937798371ada9988169189c5fb02d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30641139" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlDocument sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona acceso mediante programación de nivel superior a un documento HTML hospedado por el control <see cref="T:System.Windows.Forms.WebBrowser" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> Proporciona un contenedor administrado alrededor de objeto de documento de Internet Explorer, también conocido como el HTML Document Object Model (DOM). Obtener una instancia de <xref:System.Windows.Forms.HtmlDocument> a través de la <xref:System.Windows.Forms.WebBrowser.Document%2A> propiedad de la <xref:System.Windows.Forms.WebBrowser> control.  
  
 Etiquetas HTML dentro de un documento HTML pueden anidarse dentro de otros. <xref:System.Windows.Forms.HtmlDocument> lo que representa un árbol de documentos, cuyos elementos secundarios son instancias de la <xref:System.Windows.Forms.HtmlElement> clase. En el ejemplo de código siguiente se muestra un archivo HTML simple.  
  
```  
<HTML>  
    <BODY>  
        <DIV name="Span1">Simple HTML Form</DIV>  
        <FORM>  
            <SPAN name="TextLabel">Enter Your Name:</SPAN>  
            <INPUT type="text" size="20" name="Text1">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 En este ejemplo, <xref:System.Windows.Forms.HtmlDocument> representa todo el documento dentro de la `HTML` etiquetas. El `BODY`, `DIV`, `FORM` y `SPAN` etiquetas se representan mediante individuales <xref:System.Windows.Forms.HtmlElement> objetos.  
  
 Hay varias maneras puede tener acceso a los elementos de este árbol. Use la <xref:System.Windows.Forms.HtmlDocument.Body%2A> propiedad para tener acceso a la `BODY` etiqueta y todos sus elementos secundarios. El <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> propiedad le da la <xref:System.Windows.Forms.HtmlElement> para el elemento en una página HTML que tiene el foco de entrada de usuario. Todos los elementos dentro de una página HTML pueden tener un nombre; el <xref:System.Windows.Forms.HtmlDocument.All%2A> colección proporciona acceso a cada uno de ellos <xref:System.Windows.Forms.HtmlElement> usando su nombre como un índice. <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> devolverá un <xref:System.Windows.Forms.HtmlElementCollection> de todos los <xref:System.Windows.Forms.HtmlElement> objetos que tienen un nombre de etiqueta HTML determinado, como `DIV` o `TABLE`. <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> Devuelve el único <xref:System.Windows.Forms.HtmlElement> correspondiente al identificador único que suministre. <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> devolverá el <xref:System.Windows.Forms.HtmlElement> que pueden encontrarse en la pantalla en las coordenadas del puntero del mouse proporcionado.  
  
 También puede usar el <xref:System.Windows.Forms.HtmlDocument.Forms%2A> y <xref:System.Windows.Forms.HtmlDocument.Images%2A> colección para recorrer en iteración elementos que representan el usuario de entrada formularios y gráficos, respectivamente.  
  
 <xref:System.Windows.Forms.HtmlDocument> se basa en las interfaces no administradas implementadas por el DOM DHTML de Internet Explorer: `IHTMLDocument`, `IHTMLDocument2`, `IHTMLDocument3`, y `IHTMLDocument4`. Solo las propiedades utilizadas con frecuencia y se exponen métodos en estas interfaces no administradas por <xref:System.Windows.Forms.HtmlDocument>. Puede tener acceso a todas las demás propiedades y métodos directamente mediante el <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> propiedad, que puede convertirse en el puntero de interfaz no administrada deseado.  
  
 Un documento HTML puede contener marcos, que son ventanas diferentes dentro de la <xref:System.Windows.Forms.WebBrowser> control. Cada marco muestra su propia página HTML. El <xref:System.Windows.Forms.HtmlWindow.Frames%2A> está disponible a través de la colección el <xref:System.Windows.Forms.HtmlDocument.Window%2A> propiedad. También puede usar el <xref:System.Windows.Forms.HtmlDocument.Window%2A> propiedad para cambiar el tamaño de la página mostrada, desplazar el documento o mostrar alertas y solicita al usuario.  
  
 <xref:System.Windows.Forms.HtmlDocument> expone los eventos más comunes que esperaría controlar al hospedar páginas HTML. Para los eventos no expuestos directamente por la interfaz, puede agregar un controlador para el evento mediante <xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A>.  
  
 Los archivos HTML pueden contener `SCRIPT` etiquetas que encapsulan código escrito en uno de los lenguajes Active Scripting, como VBScript o JScript. El <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> método se proporciona para la ejecución de propiedades y métodos definidos en un `SCRIPT` etiqueta.  
  
> [!NOTE]
>  Aunque la mayor parte de las propiedades, métodos y eventos en <xref:System.Windows.Forms.HtmlDocument> han mantenido los mismos nombres que tienen en el DOM no administrado, algunos se han cambiado para mantener la coherencia con el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
   
  
## Examples  
 En el ejemplo de código siguiente se usa datos de la base de datos Northwind para crear un `HTML TABLE` dinámicamente mediante <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. El <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> primero método también se utiliza para agregar celdas (`TD` elementos) a las filas (`TR` elementos), a continuación, agregar filas a la tabla y, finalmente, para anexar la tabla al final del documento actual. El ejemplo de código requiere que la aplicación tenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`. El código debe llamarse una vez se ha cargado un documento.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement ActiveElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActiveElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ ActiveElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Proporciona el elemento <see cref="T:System.Windows.Forms.HtmlElement" /> que tiene actualmente el foco de entrada del usuario.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElement" /> que tiene actualmente el foco de entrada del usuario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el documento tiene el foco, pero ningún elemento del documento que ha recibido el foco, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> devuelve el elemento correspondiente a la `<BODY>` etiqueta.  
  
 Si el documento no tiene el foco, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> devuelve `null`.  
  
 Si el elemento actual tiene el foco de entrada es una celda (`TD`) en un elemento HTML `TABLE` etiqueta, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> devolverá el elemento que contiene el `TABLE` elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Drawing.Color" /> de un hipervínculo cuando un usuario hace clic en él.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> para los vínculos activos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un vínculo está activo cuando un usuario hace clic en él. Cambiar esta propiedad para cambiar el color del vínculo antes de navegación.  
  
 El <xref:System.Drawing.Color> escriba en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] admite un `Alpha` valor, pero el DOM de HTML no lo hace. Por lo tanto, `Alpha` no tiene ningún efecto cuando se asigna a esta propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una instancia de <see cref="T:System.Windows.Forms.HtmlElementCollection" />, que almacena todos los objetos <see cref="T:System.Windows.Forms.HtmlElement" /> para el documento.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de todos los elementos del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.HtmlDocument.All%2A> colección proporciona acceso aleatorio a cualquier elemento en el documento HTML, independientemente de su posición en el árbol del documento. Usar para tener acceso a cualquier elemento de un documento HTML por nombre, identificador, o un índice. También puede iterar por todos los elementos dentro de un documento.  
  
 Algunos elementos, como `HEAD` y `TITLE`, nunca tendrán nombres asociados a ellos. Todos los demás elementos tendrán nombres solo si se les ha asignado el autor del archivo HTML. Puede tener acceso a los elementos sin nombres por identificador o índice.  
  
 No se puede agregar elementos directamente a la <xref:System.Windows.Forms.HtmlDocument.All%2A> colección, porque todos los elementos de HTML del archivo fuera de la `HTML` etiqueta debe tener un elemento primario. Use el <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método o la <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad <xref:System.Windows.Forms.HtmlElement> para agregar nuevos elementos al árbol.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se recorre en iteración todos los elementos en un documento y se establece `Enabled=True`, habilitar los elementos que se han deshabilitado de forma predeterminada para evitar proporcionados por el usuario mientras se cargaba el documento. El ejemplo de código requiere que la aplicación contiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea controlar.</param>
        <param name="eventHandler">Código administrado que controla el evento.</param>
        <summary>Agrega un controlador de eventos para el evento de DOM de HTML indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No debe asociar un evento al documento o uno de sus objetos hasta que el documento haya terminado de cargarse. Es el más antiguo se debe llamar a este método en el <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos de la <xref:System.Windows.Forms.WebBrowser> control.  
  
 Este método le permite asociar controladores a los eventos DOM no administrados no expuestos <xref:System.Windows.Forms.HtmlDocument>. Para obtener más información acerca de los eventos de DOM no administrados disponibles, vea [acceso a miembros no expuestos en el modelo de objetos de documento HTML administrado](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) y las interfaces IHTMLDocument: [IHTMLDocument](http://go.microsoft.com/fwlink/?LinkId=104882), [IHTMLDocument2](http://go.microsoft.com/fwlink/?LinkId=104884), [IHTMLDocument3](http://go.microsoft.com/fwlink/?LinkId=104886), [IHTMLDocument4](http://go.microsoft.com/fwlink/?LinkId=104887), [IHTMLDocument5](http://go.microsoft.com/fwlink/?LinkId=104888).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de fondo del documento HTML.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> del fondo del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.BackColor%2A> se mostrará cuando ningún otro elemento ocupe esa área de la pantalla.  
  
 El <xref:System.Drawing.Color> escriba en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] admite un `Alpha` valor, pero el DOM de HTML no lo hace. Por lo tanto, `Alpha` no tiene ningún efecto cuando se asigna a esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Body" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Body { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Forms.HtmlElement" /> para la etiqueta <c>BODY</c>.</summary>
        <value>El <see cref="T:System.Windows.Forms.HtmlElement" /> de objeto para el <c>cuerpo</c> etiqueta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento HTML se divide en dos secciones principales:  
  
-   `HEAD`, que contiene el título del documento, los metadatos de documento y `SCRIPT` elementos.  
  
-   `BODY`, que contiene todos los elementos implicados en la pantalla la apariencia del documento.  
  
 No hay ningún equivalente `Head` propiedad <xref:System.Windows.Forms.HtmlDocument>. Para obtener la `HEAD` elemento, utilice <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo `DIV` elemento y lo agrega a la parte inferior del documento mediante el <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en cualquier lugar del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se detecta al hacer clic en el documento, busca el elemento y usa <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> para alinear el elemento con la parte superior de la página Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.ContextMenuShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuShowing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ ContextMenuShowing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario solicita mostrar el menú contextual del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, si hace doble clic en el mouse en un documento o un elemento en un documento, mostrará un menú contextual de predeterminado específico para el elemento. Use este evento para cancelar la presentación del menú contextual y mostrar uno propio.  
  
   
  
## Examples  
 El siguiente código de ejemplo captura el <xref:System.Windows.Forms.HtmlDocument.ContextMenuShowing> eventos y usa para mostrar un <xref:System.Windows.Forms.ContextMenuStrip>.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Cookie" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookie As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Cookie { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las cookies HTTP asociadas a este documento.</summary>
        <value>
          <see cref="T:System.String" /> que contiene una lista de cookies, separadas unas de otras con punto y coma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propiedad de <xref:System.Windows.Forms.HtmlDocument> expone todas las cookies establecida para una página Web.  
  
 A *cookie* es un par de nombre/valor arbitrario asociado a una determinada página Web. Los desarrolladores Web usan cookies para realizar el seguimiento cuando los usuarios visitan o vuelven a un sitio Web. Una cookie se compone de varias partes, denominadas de navegación cookie, que determinan lo siguiente:  
  
-   Establece el documento al que se aplica la cookie; su dominio y la ruta de acceso.  
  
-   El nombre y el valor de la cookie.  
  
-   La fecha de expiración de la cookie.  
  
-   Si la cookie solo se puede enviar mediante una conexión segura.  
  
 El <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propiedad puede contener varias cookies.  
  
 Sólo se puede utilizar el <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propiedad para establecer una cookie a la vez.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement CreateElement(string elementTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (elementTag As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ CreateElement(System::String ^ elementTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementTag">Nombre del elemento HTML que se va a crear.</param>
        <summary>Crea un nuevo <see langword="HtmlElement" /> del tipo de etiqueta HTML especificado.</summary>
        <returns>Nuevo elemento del tipo de etiqueta especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `elementTag` puede ser uno de cualquiera de las etiquetas HTML compatibles en Internet Explorer, excepto para `FRAME` o `IFRAME`.  
  
 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Devuelve un elemento adjuntas en el árbol del documento actual. Para agregar el elemento al documento, use la <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> o <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> métodos.  
  
 Este método no afectará el estado del código de origen de un documento existente cuando se usa el <xref:System.Windows.Forms.WebBrowser> del control **ver código fuente** comando de menú contextual o el <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> y <xref:System.Windows.Forms.WebBrowser.DocumentStream%2A> propiedades de la <xref:System.Windows.Forms.WebBrowser> control.  
  
 Al crear nuevos elementos con <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, no podrá establecer ciertas propiedades, como `Name`. En casos donde es necesario para establecer el atributo Name, asígnelos como código HTML para la <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad de otro objeto en el documento.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza utilizando la tabla de datos de la base de datos Northwind para crear un elemento HTML <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. El <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> primero método también se utiliza para agregar celdas (`TD` elementos) a las filas (`TR` elementos), a continuación, agregar filas a la tabla y, finalmente, para anexar la tabla al final del documento actual. El ejemplo de código requiere que la aplicación tenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultEncoding { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la codificación utilizada de manera predeterminada para el documento actual.</summary>
        <value>
          <see cref="T:System.String" /> que representa la codificación que el explorador utiliza la primera vez que se muestra la página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La codificación predeterminada es la codificación administrado HTML Document Object Model (DOM) intentará usar cuando se carga la página por primera vez. Esta codificación se deriva desde Internet Explorer **codificación** configuración, o desde un `META` etiqueta incrustado en la página.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea dejar de controlar.</param>
        <param name="eventHandler">Código administrado que controla el evento.</param>
        <summary>Quita un controlador de eventos de un evento con nombre en el DOM de HTML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que describe el dominio de este documento por motivos de seguridad.</summary>
        <value>Un dominio válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, dos páginas Web de marcos diferentes impide tener acceso al contenido de la otra mediante script; incluso www.Microsoft.com/spanish y msdn.microsoft.com, en este caso, se consideran dominios diferentes. Para habilitar el scripting entre marcos para las páginas del mismo dominio de nivel superior, puede asignar un nuevo valor para el <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propiedad. En el ejemplo de dirección URL anterior, establecer <xref:System.Windows.Forms.HtmlDocument.Domain%2A> a microsoft.com permitiría dos páginas para comunicarse entre sí.  
  
 Las cadenas asignadas a la <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propiedad debe ser dominios de nivel superior válidos. En el ejemplo de dirección URL anterior, puede establecer <xref:System.Windows.Forms.HtmlDocument.Domain%2A> en microsoft.com, pero no en .com, lo que permitiría que cualquier página en Internet para el contenido de una página del script.  
  
 No se puede utilizar el <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propiedad para permitir el scripting entre marcos para páginas que se tiene acceso mediante dos protocolos diferentes. Si un fotograma en la página procede de un servidor Web (el protocolo http://) y otro procede el protocolo file system (file://), no podrán comunicarse entre sí independientemente del valor de la <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El argumento para la propiedad <c>Domain</c> debe ser un nombre de dominio válido según las convenciones del Sistema de nombres de dominio (DNS).</exception>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomDocument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomDocument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomDocument { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el puntero de interfaz no administrada para este <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
        <value>Un <see cref="T:System.Object" /> que representa un <c>IDispatch</c> puntero en el documento no administrado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> es un contenedor para la Internet Explorer Document Object Model (DOM), que está escrito en COM. Si necesita obtener acceso a métodos en las interfaces COM subyacentes, o propiedades no expuestos como `IHTMLDocument2`, puede utilizar este objeto para la consulta para ellos.  
  
 Para usar las interfaces no administradas, importar la biblioteca MSHTML (mshtml.dll) en la aplicación. Sin embargo, también puede ejecutar no expuestos propiedades y métodos que utilizan el `IDispatch::Invoke` método.  
  
   
  
## Examples  
 El siguiente código en el ejemplo se convierte el <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> a una `IHTMLDocument2` puntero y muestra el valor de la `lastModified` propiedad, lo que indica el propietario del documento actualizó por última vez su contenido. El ejemplo de código requiere que haya un <xref:System.Windows.Forms.Button> en el formulario denominado `Button6`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permiso. Enumeración asociada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Encoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la codificación de caracteres para este documento.</summary>
        <value>
          <see cref="T:System.String" /> que representa la codificación de caracteres actual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">El objeto que se va a probar.</param>
        <summary>Prueba el objeto para ver si es igual que el objeto actual.</summary>
        <returns>
          <see langword="true" /> si los objetos son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecCommand(string command, bool showUI, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecCommand (command As String, showUI As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecCommand(System::String ^ command, bool showUI, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">Nombre del comando que se va a ejecutar.</param>
        <param name="showUI">Si se mostrarán o no al usuario cuadros de diálogo o cuadros de mensajes específicos del comando.</param>
        <param name="value">Valor que se va a asignar mediante el comando. No aplicable para todos los comandos.</param>
        <summary>Ejecuta el comando especificado sobre el documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> expone una matriz grande de comandos para el que existen son no hay métodos expuestos en <xref:System.Windows.Forms.HtmlDocument>. Con <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> puede insertar nuevos elementos HTML, seleccionar y dar formato al texto y las desactive almacena en caché las credenciales de autenticación. Para obtener una lista completa de comandos, consulte [identificadores de comandos](http://go.microsoft.com/fwlink/?LinkId=198814).  
  
> [!NOTE]
>  Determinados comandos, como copiar, tienen valores devueltos. En la implementación actual de <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>, no se puede obtener un valor devuelto de la llamada. Para recuperar los valores devueltos, utilice el método no administrado correspondiente en un <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> referencia en su lugar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el foco de entrada del usuario en el documento actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a <xref:System.Windows.Forms.HtmlDocument.Focus%2A> se establecerá el foco en el <xref:System.Windows.Forms.WebBrowser> el control, si actualmente el control no tiene el foco. Si el documento está alojado dentro de un `FRAME`, este método pondrá el foco en ese `FRAME` dentro de la `FRAMESET`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> permiso para establecer el foco en un formulario. Enumeración asociada: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Focused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el documento tiene el foco de entrada del usuario.</summary>
        <value>
          <see langword="true" /> si el elemento tiene el foco; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.Focus" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.Focusing" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce antes de dar el foco al documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.Focusing> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.Focusing> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#424](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#424)]
 [!code-vb[System.Windows.Forms.EventExamples#424](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#424)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color del texto del documento.</summary>
        <value>Color del texto del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Color> <xref:System.Drawing.Color> escriba en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] admite un `Alpha` valor, pero el DOM de HTML no lo hace. Por lo tanto, `Alpha` no tiene ningún efecto cuando se asigna a esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Forms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Forms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forms As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Forms { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de todos los elementos <c>&lt;FORM&gt;</c> del documento.</summary>
        <value>Un <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de la <c> &lt;formulario&gt; </c> elementos dentro del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento HTML puede tener uno o más `FORM` elementos con campos de entrada para enviar datos de nuevo a un servidor.  
  
 Puede enviar mediante programación un `FORM` obteniendo sus <xref:System.Windows.Forms.HtmlElement> y llamar a su `Submit` método mediante el <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> método.  
  
 Para agregar un nuevo `FORM` a un documento, puede crear un nuevo `FORM` etiqueta como una cadena y asígnelo a la <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad de un elemento agregado anteriormente al DOM HTML; o bien puede usar el <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método, establezca sus propiedades mediante <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, y se agrega como un elemento secundario de un elemento existente mediante <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se recorre en iteración todas las `Form` elementos en un servidor Web, página y borra todos los usuarios de entrada, los formularios de volver a establecer sus valores predeterminados.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementById (id As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementById(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Atributo ID del elemento que se va a recuperar.</param>
        <summary>Recupera un único <see cref="T:System.Windows.Forms.HtmlElement" /> usando el atributo <c>ID</c> del elemento como clave de búsqueda.</summary>
        <returns>Devuelve el primer objeto que tiene el mismo atributo <c>ID</c> que el valor especificado o <see langword="null" /> si no se encuentra <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si hay varios elementos en el documento con el mismo valor de Id., <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> devolverá la primera de ellas que encuentre.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se recupera un conjunto con nombre `TABLE` de un documento, cuenta el número de filas y muestra el resultado en la página Web. El ejemplo de código requiere que haya un <xref:System.Windows.Forms.WebBrowser> control en el proyecto denominado `WebBrowser1`, y que ha cargado una página Web con un `TABLE` cuyo `ID` atributo es `Table1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementFromPoint(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementFromPoint(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">La posición X, Y del elemento en la pantalla, con respecto a la esquina superior izquierda del documento.</param>
        <summary>Recupera el elemento HTML situado en las coordenadas del cliente especificadas.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.HtmlElement" /> que se encuentra en la ubicación de pantalla especificada del documento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> usa las coordenadas de cliente, en el que la esquina superior izquierda del documento tiene asignada el valor (0,0). Coordenadas de cliente para la posición actual del cursor se pueden obtener mediante la <xref:System.Windows.Forms.HtmlWindow.Position%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se detecta al hacer clic en el documento, busca el elemento y usa <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> para alinear el elemento con la parte superior de la página Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">El nombre de la etiqueta HTML para los objetos <see cref="T:System.Windows.Forms.HtmlElement" /> que desea recuperar.</param>
        <summary>Recupera una colección de elementos con la etiqueta HTML especificada.</summary>
        <returns>La colección de elementos cuyo nombre de etiqueta es igual al argumento <paramref name="tagName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Páginas HTML suelen utilizar la `META` etiqueta para incrustar información arbitraria acerca del documento. El ejemplo de código HTML siguiente recupera todos los `META` etiquetas dentro de un documento HTML, busca la `META` etiqueta con el nombre `Description`y muestra al usuario. El ejemplo de código requiere que la aplicación tenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera el código hash para este objeto.</summary>
        <returns>
          <see cref="T:System.Int32" /> que representa un hash en memoria de este objeto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Images" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Images" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Images As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Images { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de todas las etiquetas de imagen del documento.</summary>
        <value>Colección de objetos <see cref="T:System.Windows.Forms.HtmlElement" />, uno para cada etiqueta IMG del documento. Los elementos se devuelven de la colección en orden de origen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Images%2A> Devuelve una colección de <xref:System.Windows.Forms.HtmlElement> objetos. Para obtener acceso a atributos, como `ALT` y `SRC`, que no están directamente expuestos por <xref:System.Windows.Forms.HtmlElement>, use el <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> método.  
  
 Para agregar una nueva imagen a un documento, cree una nueva `IMG` etiqueta como una cadena y asígnelo a la <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad de un elemento agregado anteriormente al DOM de HTML; o usar el <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método, establezca sus propiedades mediante <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, y se agrega como un elemento secundario de un elemento existente mediante <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se examina la `ALT` atributo de todas las imágenes en el documento y establece el valor predeterminado es `ALT` si aún no se ha establecido un valor de atributo.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ejecuta una función de Active Scripting definida en una página HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se ejecuta el contenido de una secuencia de comandos en una página Web. El ejemplo de código requiere que haya cargado la siguiente página Web.  
  
```  
<HTML>  
<SCRIPT>  
function test(name, address) {  
window.alert("Name is " + name + "; address is " + address);  
}  
</SCRIPT>  
  
<BODY>  
</BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nombre del método de script que se va a invocar.</param>
        <summary>Ejecuta una función de Active Scripting definida en una página HTML.</summary>
        <returns>El objeto devuelto por la llamada Active Scripting.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo subyacente del objeto devuelto por <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> varían. Si la función Active Scripting llamada devuelve datos escalares, como una cadena o un entero, se devolverán como una cadena. Si devuelve un objeto basado en la secuencia de comandos, como un objeto creado con JScript o VBScript `new` operador, será del tipo `Object`. (Puede realizar llamadas en dichos objetos mediante una llamada a <xref:System.Object.GetType%2A> y el uso de <xref:System.Type.InvokeMember%2A>.) Si devuelve un elemento DOM de HTML, como un `DIV` o un `TABLE`, será del tipo `Object`; si ha agregado una referencia de proyecto a MSHTML. DLL, sin embargo, se convertirá a su tipo DOM no administrado específico.  
  
 Puede llamar a cualquier función escrita en cualquier lenguaje de Active Scripting instalado en el equipo del usuario, incluidos VBScript y JScript.  
  
 El <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> no hará nada si el usuario ha desactivado explícitamente la ejecución de scripts en Internet Explorer, o si la configuración de seguridad actual para la página Web no lo permite.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ejecuta el contenido de una secuencia de comandos en una página Web. El ejemplo de código requiere que haya un <xref:System.Windows.Forms.WebBrowser> en su aplicación llamado `WebBrowser1`, y que haya cargado la siguiente página Web.  
  
```  
<HTML>  
  
    <HEAD>  
        <TITLE>Invoke Script Sample</TITLE>  
  
        <SCRIPT>  
            function MyObject() {  
                this.Data = "Data for my private object.";  
            }  
            // Return a string.  
            function test() {  
                return("This is a test.");  
            }  
            // Return a JScript object.  
            function testJScriptObject() {  
                return(new(MyObject));  
            }  
            // Return a DOM element.  
            function testElement() {  
                return(div1);  
            }  
        </SCRIPT>  
    </HEAD>  
  
    <BODY>  
  
        <DIV id="div1">  
        </DIV>  
  
    </BODY>  
  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nombre del método de script que se va a invocar.</param>
        <param name="args">Argumentos que se van a pasar al método de script.</param>
        <summary>Ejecuta una función de Active Scripting definida en una página HTML.</summary>
        <returns>El objeto devuelto por la llamada Active Scripting.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El tipo subyacente del objeto devuelto por <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> varían. Si la función Active Scripting llamada devuelve datos escalares, como una cadena o un entero, se devolverán como una cadena. Si devuelve un objeto basado en la secuencia de comandos, como un objeto creado con JScript o VBScript `new` operador, será del tipo `Object`. (Puede realizar llamadas en dichos objetos mediante una llamada a <xref:System.Object.GetType%2A> y el uso de <xref:System.Type.InvokeMember%2A>.) Si devuelve un elemento DOM de HTML, como un `DIV` o un `TABLE`, será del tipo `Object`; si ha agregado una referencia de proyecto a MSHTML. DLL, sin embargo, se convertirá a su tipo DOM no administrado específico.  
  
 Puede llamar a cualquier función escrita en cualquier lenguaje de Active Scripting instalado en el equipo del usuario, incluidos VBScript y JScript.  
  
 Este método no hará nada si el usuario ha desactivado explícitamente la ejecución de scripts en Internet Explorer, o si la configuración de seguridad actual para la página Web no lo permite.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ejecuta el contenido de una secuencia de comandos en una página Web. El ejemplo de código requiere que haya un <xref:System.Windows.Forms.WebBrowser> en su aplicación llamado `WebBrowser1`, y que haya cargado la siguiente página Web.  
  
```  
<HTML>  
    <SCRIPT>  
        function test(name, address) {  
            window.alert("Name is " + name + "; address is " + address);  
        }  
    </SCRIPT>  
  
    <BODY>  
    </BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de los hipervínculos.</summary>
        <value>Color para los hipervínculos del documento actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Color> escriba en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] admite un `Alpha` valor, pero el DOM de HTML no lo hace. Por lo tanto, `Alpha` no tiene ningún efecto cuando se asigna a esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Links { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una lista de todos los hipervínculos que hay dentro de este documento HTML.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de objetos <see cref="T:System.Windows.Forms.HtmlElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta colección contendrá todos los vínculos creados mediante el `A`, `LINK`, y `AREA` etiquetas en HTML.  
  
 El <xref:System.Windows.Forms.HtmlElement> objetos contenidos en esta colección encapsulan la no administrada `IHTMLLinkElement` interfaz. Para obtener acceso a las propiedades de la interfaz subyacente de forma segura, utilice el <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce mientras el foco está abandonando un control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.LosingFocus> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.LosingFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#425](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#425)]
 [!code-vb[System.Windows.Forms.EventExamples#425](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#425)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic con el botón primario del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.HtmlDocument.MouseDown> evento tiene lugar antes de la <xref:System.Windows.Forms.HtmlDocument.Click> eventos.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.MouseDown> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.MouseDown> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#426](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#426)]
 [!code-vb[System.Windows.Forms.EventExamples#426](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#426)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el mouse ya no se está desplazando sobre el documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.MouseLeave> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.MouseLeave> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#427](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#427)]
 [!code-vb[System.Windows.Forms.EventExamples#427](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#427)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el puntero del mouse se mueve sobre el documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.MouseMove> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.MouseMove> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#428](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#428)]
 [!code-vb[System.Windows.Forms.EventExamples#428](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#428)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el puntero del mouse se mueve sobre el documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.MouseOver> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.MouseOver> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#429](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#429)]
 [!code-vb[System.Windows.Forms.EventExamples#429](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#429)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario suelta el botón primario del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.HtmlDocument.MouseUp> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlDocument> denominado `HtmlDocument1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.HtmlDocument.MouseUp> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#430](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#430)]
 [!code-vb[System.Windows.Forms.EventExamples#430](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#430)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Primera instancia que se va a comparar.</param>
        <param name="right">Segunda instancia que se va a comparar.</param>
        <summary>Devuelve un valor que indica si las instancias especificadas de <see cref="T:System.Windows.Forms.HtmlDocument" /> representan el mismo valor.</summary>
        <returns>
          <see langword="true" /> si las instancias especificadas son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[El método equivalente para este operador es <xref:System.Windows.Forms.HtmlDocument.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Primera instancia que se va a comparar.</param>
        <param name="right">Segunda instancia que se va a comparar.</param>
        <summary>Devuelve un valor que indica si las instancias especificadas de <see cref="T:System.Windows.Forms.HtmlDocument" /> no representan el mismo valor.</summary>
        <returns>
          <see langword="true" /> si las instancias especificadas no son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlDocument OpenNew(bool replaceInHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (replaceInHistory As Boolean) As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlDocument ^ OpenNew(bool replaceInHistory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replaceInHistory">Si la navegación de la nueva ventana debe reemplazar el elemento anterior en el historial de navegación del DOM.</param>
        <summary>Obtiene un nuevo <see cref="T:System.Windows.Forms.HtmlDocument" /> que se utilizará con el método <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />.</summary>
        <returns>Un nuevo documento para escribir.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> se borrará el anterior documento cargado, incluyendo cualquier estado asociado, como las variables. No se producirán eventos de navegación en <xref:System.Windows.Forms.WebBrowser> que se genere.  
  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> siempre crea un nuevo documento en la ventana actual. Para abrir un documento en una nueva ventana, utilice la <xref:System.Windows.Forms.HtmlWindow.Open%2A> método en la <xref:System.Windows.Forms.HtmlWindow> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se prepara DOM para escribir en él y escribe un documento nuevo mediante el <xref:System.Windows.Forms.HtmlDocument.Write%2A> método.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección del texto del documento actual.</summary>
        <value>
          <see langword="true" /> si el texto se representa de derecha a izquierda; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> no tendrá ningún valor a menos que se ha establecido explícitamente, ya sea en código o en HTML.  
  
 A diferencia de la <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> propiedad en los controles de formularios Windows Forms, <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> en el DOM HTML administrado no afectará a la dirección del texto latino.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Stop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Stop As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Stop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se detiene la navegación a otra página web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La carga de una página Web se detendrá si el código de programa llama el <xref:System.Windows.Forms.WebBrowser.Stop%2A> método de la <xref:System.Windows.Forms.WebBrowser> control. No provocará errores de navegación debidos a las interrupciones de red o sitios Web que no funciona correctamente <xref:System.Windows.Forms.HtmlDocument.Stop> para que se produzca.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se restablece la barra de estado en una aplicación de formularios Windows Forms cuando el `Stop` se ha producido el evento. El ejemplo de código requiere que haya un <xref:System.Windows.Forms.StatusBar> control denominado `StatusBar1` en la aplicación.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de texto de la etiqueta <c>&lt;TITLE&gt;</c> en el documento HTML actual.</summary>
        <value>Título del documento actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.HtmlDocument.Title%2A> propiedad para identificar el documento mediante un nombre legible para el usuario.  
  
 Cambios a esta propiedad también se reflejarán en el <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> propiedad de la <xref:System.Windows.Forms.WebBrowser> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un hipervínculo HTML al documento actual utilizando la dirección URL del documento como la ubicación del vínculo y el título del documento como el texto del vínculo. El ejemplo de código requiere que la aplicación tenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#14)]
 [!code-vb[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" />
        <altmember cref="T:System.Windows.Forms.WebBrowser" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección URL que describe la ubicación de este documento.</summary>
        <value>
          <see cref="T:System.Uri" /> que representa la dirección URL de este documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es de sólo lectura. Para navegar hasta un nuevo documento, use la <xref:System.Windows.Forms.WebBrowser.Url%2A> propiedad en el <xref:System.Windows.Forms.WebBrowser> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de los vínculos en las páginas HTML que el usuario ya ha visitado.</summary>
        <value>Color de los vínculos visitados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Color` escriba en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] admite un `Alpha` valor, pero el DOM de HTML no lo hace. Por lo tanto, `Alpha` no tiene ningún efecto cuando se asigna a esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Window" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Window { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Forms.HtmlWindow" /> asociado con este documento.</summary>
        <value>La ventana para este documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los documentos HTML tienen un objeto DOM HTML llamado a una ventana, que puede utilizarse para manipular el tamaño de pantalla del documento y abrir nuevas ventanas, así como tener acceso a otros objetos importantes, como un <xref:System.Windows.Forms.HtmlHistory>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">El texto HTLM que se escribirá en el documento.</param>
        <summary>Escribe una nueva página HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas las llamadas a <xref:System.Windows.Forms.HtmlDocument.Write%2A> debe ir precedido por una llamada a <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>, que borrará el documento actual y todas sus variables. Las llamadas a <xref:System.Windows.Forms.HtmlDocument.Write%2A> creará un nuevo documento HTML en su lugar. Para cambiar únicamente una parte concreta del documento, obtener adecuado <xref:System.Windows.Forms.HtmlElement> y establecer su <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad.  
  
 Se recomienda que escriba un entero válido documento HTML utilizando el <xref:System.Windows.Forms.HtmlDocument.Write%2A> método, incluidos los `HTML` y `BODY` etiquetas. Sin embargo, si escribe elementos HTML, el modelo de objetos de documento (DOM) proporcionará estos elementos automáticamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre una nueva <xref:System.Windows.Forms.HtmlDocument> y los escribe en un nuevo archivo HTML.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>