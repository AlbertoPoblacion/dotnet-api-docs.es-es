<Type Name="RichTextBox" FullName="System.Windows.Forms.RichTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c88f8672a65894ced1dff6fde3334fb2d268fec2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30651289" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RichTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RichTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.RichTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class RichTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RichTextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un control RichTextBox de Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con el <xref:System.Windows.Forms.RichTextBox> (control), el usuario puede escribir y editar texto. El control también proporciona características de formato más avanzadas que el estándar <xref:System.Windows.Forms.TextBox> control. Texto puede asignarse directamente al control o se puede cargar desde un formato de texto enriquecido (RTF) o un archivo de texto sin formato. El texto dentro del control se puede asignar caracteres y el formato de párrafo.  
  
 El <xref:System.Windows.Forms.RichTextBox> control proporciona una serie de propiedades que puede utilizar para aplicar formato a cualquier parte del texto dentro del control. Para cambiar el formato del texto, se debe se selecciona por primera vez. Sólo el texto seleccionado se puede asignar caracteres y el formato de párrafo. Una vez que se ha realizado una configuración en una sección de texto seleccionada, se selecciona todo el texto escrito después de la selección también se da formato con la misma configuración hasta que se realiza un cambio de configuración u otra sección del documento del control. El <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> propiedad le permite convertir texto en negrita o cursiva. También puede utilizar esta propiedad para cambiar el tamaño y el tipo de letra del texto. El <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> propiedad le permite cambiar el color del texto. Para crear listas con viñetas que puede usar el <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> propiedad. También puede ajustar mediante el establecimiento de formato de párrafo el <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A>, <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A>, y <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> propiedades.  
  
 El <xref:System.Windows.Forms.RichTextBox> control proporciona métodos que proporcionan funcionalidad para abrir y guardar archivos. El <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método le permite cargar un archivo de texto RTF o ASCII existente en el control. También puede cargar datos desde un flujo de datos ya está abierto. El <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> permite guardar un archivo en formato RTF o ASCII. Similar a la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método, también puede usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método para guardar en una secuencia de datos abierta. El <xref:System.Windows.Forms.RichTextBox> control también proporciona características para buscar cadenas de texto. El <xref:System.Windows.Forms.RichTextBox.Find%2A> método se sobrecarga para buscar cadenas de texto caracteres específicos, así como en el texto del control.  
  
 También se puede inicializar el <xref:System.Windows.Forms.RichTextBox> control a los datos almacenados en la memoria. Por ejemplo, se puede inicializar el <xref:System.Windows.Forms.RichTextBox.Rtf%2A> propiedad a una cadena que contiene el texto para mostrar, incluyendo los códigos RTF que determinan cómo debe tener el formato del texto.  
  
 Si el texto dentro del control contiene vínculos, por ejemplo, un vínculo a un sitio Web, puede usar el <xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> propiedad para mostrar correctamente el vínculo en el texto del control. A continuación, puede controlar la <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos para realizar las tareas asociadas con el vínculo. El <xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> propiedad le permite proteger el texto dentro del control de manipulación por el usuario. Con texto protegido en el control, puede controlar la <xref:System.Windows.Forms.RichTextBox.Protected> eventos para determinar cuándo el usuario ha intentado modificar texto protegido y advertirle de que el texto está protegido o proporcionar al usuario con un método estándar para manipular el texto protegido.  
  
 Las aplicaciones que ya utilizan <xref:System.Windows.Forms.TextBox> controles pueden adaptados fácilmente para hacer uso de <xref:System.Windows.Forms.RichTextBox> controles. Sin embargo, el <xref:System.Windows.Forms.RichTextBox> control no tiene el mismo límite de capacidad de caracteres de 64K de la <xref:System.Windows.Forms.TextBox> control. El <xref:System.Windows.Forms.RichTextBox> se utiliza normalmente para manipular texto y proporcionar funciones de presentación similares a las aplicaciones de procesamiento de textos como Microsoft Word.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.TextBoxBase.Undo%2A?displayProperty=nameWithType> método no funciona con la <xref:System.Windows.Forms.Control.KeyPress> o <xref:System.Windows.Forms.Control.TextChanged> eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.RichTextBox> control que carga un archivo RTF en el control y busca la primera instancia de la palabra "Text". A continuación, el código cambia el estilo de fuente, tamaño de fuente y color de fuente del texto seleccionado y guarda los cambios en el archivo original. El código de ejemplo finaliza al agregar el control a su <xref:System.Windows.Forms.Form>. Este ejemplo requiere que el método creado en el ejemplo de código se agrega a un <xref:System.Windows.Forms.Form> clase y se llama desde el constructor del formulario. El ejemplo también requiere que se crea un archivo RTF, en la raíz de la unidad C, que contiene la palabra "Text".  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
    <altmember cref="T:System.Windows.Forms.TextBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RichTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RichTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> propiedad del control se establece en `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.RichTextBox> control que carga un archivo RTF en el control y busca la primera instancia de la palabra "Text". A continuación, el código cambia el estilo de fuente, tamaño de fuente y color de fuente del texto seleccionado y guarda los cambios en el archivo original. El código de ejemplo finaliza al agregar el control a su <xref:System.Windows.Forms.Form>. Este ejemplo requiere que el método creado en el ejemplo de código se agrega a un <xref:System.Windows.Forms.Form> clase y se llama desde el constructor del formulario. El ejemplo también requiere que se crea un archivo RTF, en la raíz de la unidad C, que contiene la palabra "Text".  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public override bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control habilitará las operaciones de arrastrar y colocar.</summary>
        <value>
          Es <see langword="true" /> si están habilitadas las operaciones de arrastrar y colocar en el control; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo realizar operaciones de arrastrar y colocar mediante un <xref:System.Windows.Forms.ListBox> control que contiene elementos que se va a colocar en un <xref:System.Windows.Forms.RichTextBox> control. El constructor del formulario establece la <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> propiedad `true` para permitir operaciones de arrastrar y colocar se producen en el <xref:System.Windows.Forms.RichTextBox>. El ejemplo se utiliza la <xref:System.Windows.Forms.Control.MouseDown> eventos de la <xref:System.Windows.Forms.ListBox> para iniciar la operación de arrastre mediante una llamada a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método. El ejemplo se utiliza la <xref:System.Windows.Forms.Control.DragEnter> evento para determinar si se arrastra un elemento en el <xref:System.Windows.Forms.RichTextBox> es un tipo de datos válido. El <xref:System.Windows.Forms.Control.DragDrop> evento lleva a cabo la eliminación real de un elemento arrastrado en la <xref:System.Windows.Forms.RichTextBox> control en la ubicación del cursor actual dentro de la <xref:System.Windows.Forms.RichTextBox>. Este ejemplo requiere que el <xref:System.Windows.Forms.Control.DragDrop> y <xref:System.Windows.Forms.Control.DragEnter> eventos se han conectado a los controladores de eventos definidos en el ejemplo.  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>
          <see langword="true" /> si está habilitado; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoWordSelection">
      <MemberSignature Language="C#" Value="public bool AutoWordSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoWordSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoWordSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoWordSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoWordSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la selección automática de palabras está habilitada.</summary>
        <value>
          Es <see langword="true" /> si la selección automática de fuentes está habilitada; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si esta propiedad se establece en `true`, al seleccionar cualquier parte del texto en el control selecciona la palabra completa.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Windows.Forms.RichTextBox> que acercar el texto, se selecciona automáticamente las palabras en el texto del control cuando se hace doble clic en una palabra y tiene un margen en el lado derecho del área cliente del control. Si el <xref:System.Windows.Forms.RichTextBox> control tiene un ancho pequeño, el uso de este código crea un <xref:System.Windows.Forms.RichTextBox> donde cada carácter de texto se muestra en su propia línea. Mientras está en esta posición vertical, al hacer clic en cualquier parte de una palabra seleccionará todos los caracteres de la palabra sin tener en cuenta el hecho de que se muestra el texto verticalmente. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>Imagen de fondo que se muestra en el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.RichTextBox.BackgroundImage" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>El diseño de la imagen de fondo que se muestra en el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulletIndent">
      <MemberSignature Language="C#" Value="public int BulletIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulletIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property BulletIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulletIndent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la sangría que se utiliza en el control <see cref="T:System.Windows.Forms.RichTextBox" /> cuando se aplica el estilo de viñeta al texto.</summary>
        <value>Número de píxeles insertados como sangría después de una viñeta. El valor predeterminado es cero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para aplicar el estilo de viñeta a un párrafo de texto, establezca la <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> propiedad `true` y, a continuación, establezca el <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> propiedad para el número de píxeles que debe aplicarse sangría el texto. El párrafo tendrá el estilo de viñeta que se aplican a ella con la cantidad especificada de sangría después de la viñeta. Esta propiedad solo afecta el párrafo actual en el texto del control y la viñeta actualmente seleccionada en una lista de elementos con viñetas. Para aplicar un nivel de sangría distinto a una lista completa de elementos con viñetas, se debe seleccionar todo el texto de los elementos con viñetas antes de establecer el <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> propiedad con el <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A>, <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, y <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> propiedades para crear una lista con viñetas en un <xref:System.Windows.Forms.RichTextBox> control. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` se crea en un formulario.  
  
 [!code-cpp[RichTextBox.BulletIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.BulletIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.BulletIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.BulletIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La sangría especificada era menor que cero.</exception>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      </Docs>
    </Member>
    <Member MemberName="CanPaste">
      <MemberSignature Language="C#" Value="public bool CanPaste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanPaste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanPaste (clipFormat As DataFormats.Format) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanPaste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat">Uno de los valores de <see cref="T:System.Windows.Forms.DataFormats.Format" />.</param>
        <summary>Determina si se puede pegar información desde el Portapapeles en el formato de datos especificado.</summary>
        <returns>
          Es <see langword="true" /> si se pueden pegar datos desde el Portapapeles en el formato especificado; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para determinar si el contenido actual del Portapapeles está en un formato de datos específico antes de permitir al usuario que pegue la información en el <xref:System.Windows.Forms.RichTextBox> control. Por ejemplo, podría crear un controlador de eventos para un <xref:System.Windows.Forms.MenuItem.Popup> eventos de un comando Pegar <xref:System.Windows.Forms.MenuItem> y usar este método para determinar si la operación de pegado <xref:System.Windows.Forms.MenuItem> debe habilitarse en función del tipo de datos en el Portapapeles.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.Paste%2A> método para pegar un mapa de bits en el <xref:System.Windows.Forms.RichTextBox> control. Después de abrir un mapa de bits del archivo, el ejemplo se utiliza la <xref:System.Windows.Forms.Clipboard.SetDataObject%2A> método para copiar el mapa de bits en el Portapapeles de Windows. Por último, en el ejemplo se recupera el formato para la <xref:System.Drawing.Bitmap> objeto, usa el <xref:System.Windows.Forms.RichTextBox.CanPaste%2A> método para comprobar que el formato se puede pegar en el <xref:System.Windows.Forms.RichTextBox> control y, a continuación, utiliza el <xref:System.Windows.Forms.RichTextBox.Paste%2A> método para pegar los datos.  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public bool CanRedo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRedo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CanRedo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRedo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRedo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si hay acciones que se han producido en <see cref="T:System.Windows.Forms.RichTextBox" /> que se pueden volver a aplicar.</summary>
        <value>
          Es <see langword="true" /> si hay operaciones anuladas que se pueden volver a aplicar al contenido del control; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para determinar si la última operación anulada en el <xref:System.Windows.Forms.RichTextBox> pueden aplicarse mediante la <xref:System.Windows.Forms.RichTextBox.Redo%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> y <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> propiedades y la <xref:System.Windows.Forms.RichTextBox.Redo%2A> método para restringir una operación de puesta al día a cualquier acción salvo la eliminación de texto. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control y que una operación dentro de la <xref:System.Windows.Forms.RichTextBox> se ha realizado y anulado antes de que se llama al código en este ejemplo.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="ContentsResized">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ContentsResizedEventHandler ContentsResized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ContentsResizedEventHandler ContentsResized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentsResized As ContentsResizedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ContentsResizedEventHandler ^ ContentsResized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContentsResizedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el contenido del control cambia de tamaño.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.ContentsResized> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.ContentsResized> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#537](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#537)]
 [!code-vb[System.Windows.Forms.EventExamples#537](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#537)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContentsResizedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los parámetros de creación necesarios cuando se crea el identificador del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" /> que contiene los parámetros de creación necesarios cuando se crea el identificador del control.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRichEditOleCallback">
      <MemberSignature Language="C#" Value="protected virtual object CreateRichEditOleCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateRichEditOleCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CreateRichEditOleCallback" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRichEditOleCallback () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateRichEditOleCallback();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un objeto compatible con <see langword="IRichEditOleCallback" /> para controlar operaciones de devolución de llamada RichEdit.</summary>
        <returns>Objeto que implementa la interfaz <see langword="IRichEditOleCallback" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para el llamador inmediato llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Puede invalidar este método en su clase derivada para habilitar el acceso a las características de edición enriquecida subyacentes. Si invalida este método, no se provocarán todos los eventos de arrastrar y colocar. Como resultado, tendrá que proporcionar su propia compatibilidad para operaciones de arrastrar y colocar. Para obtener más información sobre la <see langword="IRichEditOleCallback" /> de la interfaz, consulte la documentación de Platform SDK en http://msdn.microsoft.com.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño predeterminado del control.</summary>
        <value>Valor <see cref="T:System.Drawing.Size" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.DefaultSize" />
      </Docs>
    </Member>
    <Member MemberName="DetectUrls">
      <MemberSignature Language="C#" Value="public bool DetectUrls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DetectUrls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      <MemberSignature Language="VB.NET" Value="Public Property DetectUrls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DetectUrls { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si <see cref="T:System.Windows.Forms.RichTextBox" /> debe aplicar formato a un localizador de recursos universal (URL) automáticamente cuando se escriba en el control.</summary>
        <value>
          Es <see langword="true" /> si <see cref="T:System.Windows.Forms.RichTextBox" /> debe aplicar formato de vínculo a las direcciones URL que se escriban en el control; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si esta propiedad se establece en `true`, cualquier texto escrito en el control que está determinado por la <xref:System.Windows.Forms.RichTextBox> sea una dirección URL se convierte automáticamente en un vínculo. Puede crear un controlador de eventos para el <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos controlar todos los vínculos que hizo clic en el control. El <xref:System.Windows.Forms.LinkClickedEventArgs> que se proporciona al controlador de eventos para el <xref:System.Windows.Forms.RichTextBox.LinkClicked> evento proporciona datos que le permite determinar qué vínculo se hizo clic en el control con el fin de procesar el vínculo.  
  
   
  
## Examples  
 El siguiente ejemplo de código contiene un controlador de eventos para el <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos. El controlador de eventos procesa los clics de vínculo en el documento de un <xref:System.Windows.Forms.RichTextBox> controlar e inicia una instancia del explorador predeterminado (mediante el <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> método), mostrar la página para el vínculo que se hizo clic. Este ejemplo requiere que el controlador de eventos se ha conectado a la <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos para un <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
        <altmember cref="T:System.Windows.Forms.LinkClickedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario finaliza una operación de arrastrar y colocar</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se arrastra un objeto dentro de los límites del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.DragEnter> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.DragEnter> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#539](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#539)]
 [!code-vb[System.Windows.Forms.EventExamples#539](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#539)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se arrastra un objeto fuera de los límites del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no es relevante para esta clase. Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se arrastra un objeto sobre los límites del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no es relevante para esta clase. Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap">Objeto <see cref="T:System.Drawing.Bitmap" />.</param>
        <param name="targetBounds">Objeto <see cref="T:System.Drawing.Rectangle" />.</param>
        <summary>Este método no es relevante para esta clase.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoDragDrop">
      <MemberSignature Language="C#" Value="public bool EnableAutoDragDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoDragDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.EnableAutoDragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableAutoDragDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableAutoDragDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que habilita las operaciones de arrastrar y colocar en el texto, las imágenes y otros datos.</summary>
        <value>
          <see langword="true" /> para habilitar las operaciones de arrastrar y colocar; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Busca texto en el contenido de <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="characterSet">Matriz de caracteres que se va a buscar.</param>
        <summary>Busca en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> la primera instancia de uno de los caracteres en una lista de caracteres.</summary>
        <returns>Ubicación en el control donde se encontraron los caracteres de búsqueda o -1 si no se encontraron los caracteres de búsqueda o se ha especificado un juego de caracteres de búsqueda en el parámetro <paramref name="char" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca la primera instancia de un carácter de una lista de caracteres especificados en el `characterSet` parámetro y devuelve la ubicación del carácter. Por ejemplo, pasar una matriz de caracteres que contiene el carácter 'Q'. Si el control contiene el texto "The Quick Brown Fox", el <xref:System.Windows.Forms.RichTextBox.Find%2A> método devolverá el valor de cuatro. Un carácter en mayúscula y un carácter en minúscula se consideran valores diferentes en la búsqueda.  
  
 Si la propiedad devuelve un valor negativo, no se encontraron los caracteres que se va a buscar dentro del contenido del control. Puede usar este método para buscar un grupo de caracteres dentro del control. Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método requiere que todo el documento contenido en el control se va a buscar los caracteres. Si un carácter en la lista de caracteres proporcionado en el método `characterSet` se encuentra el parámetro, el valor devuelto por este método es un índice de base cero de la posición del carácter en el control. Un espacio se considera un carácter por el método al determinar la ubicación de un carácter.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en el contenido de un <xref:System.Windows.Forms.RichTextBox> para los caracteres que se pasan al método en el `text` parámetro. Si el contenido de la `text` matriz se encuentran en el <xref:System.Windows.Forms.RichTextBox>, el método devuelve el índice del valor que se encuentra; en caso contrario, devuelve -1. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` y un <xref:System.Windows.Forms.Button> control denominado `button1`, es decir conectado a la `Click` definido en el controlador de eventos en el ejemplo.  
  
 [!code-cpp[RichTextBox.FindChar1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar1/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar1/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Texto que se debe buscar en el control.</param>
        <summary>Busca una cadena en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <returns>Ubicación en el control donde se encontró el texto de búsqueda o -1 si no se encontró la cadena de búsqueda o se ha especificado una cadena de búsqueda vacía en el parámetro <paramref name="str" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca el texto especificado en el `str` parámetro y devuelve la ubicación del primer carácter en el control. Si la propiedad devuelve un valor negativo, no se encontró la cadena de texto que se va a buscar dentro del contenido del control. Puede usar este método para crear la funcionalidad de búsqueda que se puede proporcionar al usuario del control. También puede usar este método para buscar texto que se reemplaza con un formato concreto. Por ejemplo, si el usuario escribió fechas en el control, puede utilizar el <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar todas las fechas en el documento y reemplácelas con el formato adecuado antes de usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> al método del control.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.Find%2A> métodos que aceptan un `string` como un parámetro no encuentra el texto que se encuentra en más de una línea de texto dentro de la <xref:System.Windows.Forms.RichTextBox>. Realización de una búsqueda devolverá un valor negativo uno (-1).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en todo el contenido de un <xref:System.Windows.Forms.RichTextBox> para la primera instancia de una cadena de búsqueda pasada en el parámetro de texto del método. Si la cadena de búsqueda se encuentra en la <xref:System.Windows.Forms.RichTextBox>, el método devuelve un valor de `true` y resalta el texto de búsqueda, de lo contrario devuelve `false`. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.Find Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">Matriz de caracteres que se va a buscar.</param>
        <param name="start">Lugar en el texto del control en el que comenzará la búsqueda.</param>
        <summary>Busca en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> la primera instancia de uno de los caracteres de una lista de caracteres a partir de un punto específico.</summary>
        <returns>Lugar del control en el que se encuentran los caracteres buscados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca la primera instancia de un carácter de una lista de caracteres especificados en el `characterSet` parámetro y devuelve la ubicación del carácter. Por ejemplo, pasar una matriz de caracteres que contiene el carácter 'Q'. Si el control contiene el texto "The Quick Brown Fox", el <xref:System.Windows.Forms.RichTextBox.Find%2A> método devolverá el valor de cuatro. Un carácter en mayúscula y un carácter en minúscula se consideran valores diferentes en la búsqueda.  
  
 Si la propiedad devuelve un valor negativo, no se encontraron los caracteres que se va a buscar dentro del contenido del control. Puede usar este método para buscar un grupo de caracteres dentro del control. Si un carácter en la lista de caracteres proporcionado en el método `characterSet` se encuentra el parámetro, el valor devuelto por este método es un índice de base cero de la posición del carácter en el control. Un espacio se considera un carácter por el método al determinar la ubicación de un carácter.  
  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método le permite buscar un juego de caracteres de una posición de inicio especificada dentro del texto del control especificando un valor para el `start` parámetro. Un valor de cero indica que la búsqueda debería comenzar desde el principio del documento del control. Puede utilizar esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método para restringir su búsqueda para evitar el texto que sepa que ya no contiene los caracteres especificados que está buscando o no son importantes en la búsqueda.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en el contenido de un <xref:System.Windows.Forms.RichTextBox> para los caracteres que se pasan al método en el `text` parámetro. Comienza la búsqueda de la ubicación en la <xref:System.Windows.Forms.RichTextBox> especificado por el `start` parámetro de la `FindMyText` método. Si el contenido de la matriz de texto se encuentra en el <xref:System.Windows.Forms.RichTextBox>, el método devuelve el índice del valor que se encuentra; en caso contrario, devuelve -1. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` y un <xref:System.Windows.Forms.Button> control denominado `button1` que está conectado a la <xref:System.Windows.Forms.Control.Click> controlador de eventos definido en el ejemplo.  
  
 [!code-cpp[RichTextBox.FindChar2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar2/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar2/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Texto que se debe buscar en el control.</param>
        <param name="options">Combinación bit a bit de los valores de <see cref="T:System.Windows.Forms.RichTextBoxFinds" />.</param>
        <summary>Busca una cadena en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> aplicando opciones específicas a la búsqueda.</summary>
        <returns>Lugar del control en el que se encontró el texto buscado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca el texto especificado en el `str` parámetro y devuelve la ubicación del primer carácter en el control. Si la propiedad devuelve un valor negativo, no se encontró la cadena de texto que se va a buscar dentro del contenido del control. Puede usar este método para crear la funcionalidad de búsqueda que se puede proporcionar al usuario del control. También puede usar este método para buscar texto que se reemplaza con un formato concreto. Por ejemplo, si el usuario escribió fechas en el control, puede utilizar el <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar todas las fechas en el documento y reemplácelas con el formato adecuado antes de usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> al método del control.  
  
 Con esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método, también puede especificar opciones que permiten ampliar o reducir la búsqueda. Puede especificar opciones que le permiten hacer coincidir las mayúsculas y minúsculas de la palabra de búsqueda o para buscar palabras completas en lugar de las palabras parciales. Mediante la especificación de la `RichTextBoxFinds.Reverse` en la enumeración de la `options` parámetro, puede buscar texto desde la parte inferior del documento a la parte superior en lugar de la parte superior de forma predeterminada al método de búsqueda de la parte inferior.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.Find%2A> métodos que aceptan un `string` como un parámetro no encuentra el texto que se encuentra en más de una línea de texto dentro de la <xref:System.Windows.Forms.RichTextBox>. Realización de una búsqueda devolverá un valor negativo uno (-1).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en todo el contenido de un <xref:System.Windows.Forms.RichTextBox> para la primera instancia de una cadena de búsqueda pasada en el parámetro de texto del método. Si la cadena de búsqueda se encuentra en la <xref:System.Windows.Forms.RichTextBox>, el método devuelve un valor de `true` y resalta el texto; de lo contrario, devuelve `false`. El ejemplo especifica también opciones en la búsqueda para que coincida con el caso de la cadena de búsqueda especificado. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer, end As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start, int end);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">Matriz de caracteres que se va a buscar.</param>
        <param name="start">Lugar en el texto del control en el que comenzará la búsqueda.</param>
        <param name="end">Lugar en el texto del control en el que finalizará la búsqueda.</param>
        <summary>Busca en un intervalo de texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> la primera instancia de uno de los caracteres de una lista de caracteres.</summary>
        <returns>Lugar del control en el que se encuentran los caracteres buscados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca la primera instancia de un carácter de una lista de caracteres especificados en el `characterSet` parámetro y devuelve la ubicación del carácter. Por ejemplo, pasar una matriz de caracteres que contiene el carácter 'Q'. Si el control contiene el texto "The Quick Brown Fox", el <xref:System.Windows.Forms.RichTextBox.Find%2A> método devolverá el valor de cuatro. Un carácter en mayúscula y un carácter en minúscula se consideran valores diferentes en la búsqueda.  
  
 Si la propiedad devuelve un valor negativo, no se encontraron los caracteres que se va a buscar dentro del contenido del control. Puede usar este método para buscar un grupo de caracteres dentro del control. Si un carácter en la lista de caracteres proporcionado en el método `characterSet` se encuentra el parámetro, el valor devuelto por este método es un cero según el índice de la posición del carácter en el control. Un espacio se considera un carácter por el método al determinar la ubicación de un carácter.  
  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método le permite buscar un juego de caracteres de un intervalo de texto en el control especificando un valor para el `start` y `end` parámetros. Un valor de cero para el `start` parámetro indica que la búsqueda debería comenzar desde el principio del documento del control. Un valor de-1 para el `end` parámetro indica que debe finalizar la búsqueda al final del texto dentro del control. Puede utilizar esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método para restringir su búsqueda a un intervalo de texto dentro del control para evitar las áreas del documento que no son importantes para las necesidades de la aplicación de búsqueda específico.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="characterSet" /> es null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="start" /> es menor que cero o mayor que la longitud del texto del control.</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Texto que se debe buscar en el control.</param>
        <param name="start">Lugar en el texto del control en el que comenzará la búsqueda.</param>
        <param name="options">Combinación bit a bit de los valores de <see cref="T:System.Windows.Forms.RichTextBoxFinds" />.</param>
        <summary>Busca una cadena en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> en una ubicación específica del control y aplicando opciones específicas a la búsqueda.</summary>
        <returns>Lugar del control en el que se encontró el texto buscado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca el texto especificado en el `str` parámetro y devuelve la ubicación del primer carácter de la búsqueda de la cadena dentro del control. Si la propiedad devuelve un valor negativo, no se encontró la cadena de texto que se va a buscar dentro del contenido del control. Puede usar este método para crear la funcionalidad de búsqueda que se puede proporcionar al usuario del control. También puede usar este método para buscar texto que se reemplaza con un formato concreto. Por ejemplo, si el usuario escribió fechas en el control, puede utilizar el <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar todas las fechas en el documento y reemplácelas con el formato adecuado antes de usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> al método del control.  
  
 Con esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método, también puede especificar opciones que permiten ampliar o reducir la búsqueda. Puede especificar opciones que le permiten hacer coincidir las mayúsculas y minúsculas de la palabra de búsqueda o para buscar palabras completas en lugar de las palabras parciales. Mediante la especificación de la `RichTextBoxFinds.Reverse` en la enumeración de la `options` parámetro, puede buscar texto desde la parte inferior del documento a la parte superior en lugar de la parte superior de forma predeterminada al método de búsqueda de la parte inferior. Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método también le permite limitar la búsqueda de texto mediante la selección de una posición inicial específica en el texto del control. Esta característica permite evitar texto que podría ya se han buscado o donde el texto específico que está buscando se sabe que no existe. Cuando el `RichTextBoxFinds.Reverse` se expresa en el `options` parámetro, el valor de la `start` parámetro indica la posición donde va a finalizar la búsqueda inversa ya que la búsqueda empezará en la parte inferior del documento al utilizar esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.Find%2A> métodos que aceptan un `string` como un parámetro no encuentra el texto que se encuentra en más de una línea de texto dentro de la <xref:System.Windows.Forms.RichTextBox>. Realización de una búsqueda devolverá un valor negativo uno (-1).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en todo el contenido de un <xref:System.Windows.Forms.RichTextBox> para la primera instancia de una cadena de búsqueda pasada en el parámetro de texto del método. Ubicación que comienza la búsqueda es especificada por el parámetro de inicio del método. Si la cadena de búsqueda se encuentra en la <xref:System.Windows.Forms.RichTextBox>, el método devuelve la ubicación de índice del primer carácter del texto encontrado y resalta el texto se encuentra; en caso contrario, devuelve un valor de -1. El ejemplo especifica también opciones en la búsqueda para que coincida con el caso de la cadena de búsqueda especificado. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> denominado `richTextBox1`. Puede utilizar este ejemplo para realizar un tipo de operación "Buscar siguiente". Una vez que se ha encontrado una instancia del texto de búsqueda, puede encontrar otras instancias del texto cambiando el valor de la `start` parámetro para buscar en una ubicación más allá de la posición de la coincidencia actual.  
  
 [!code-cpp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, int end, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, int32 end, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, end As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, int end, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">Texto que se debe buscar en el control.</param>
        <param name="start">Lugar en el texto del control en el que comenzará la búsqueda.</param>
        <param name="end">Lugar en el texto del control en el que finalizará la búsqueda. Este valor debe ser -1 o mayor o igual que el valor del parámetro <c>start</c>.</param>
        <param name="options">Combinación bit a bit de los valores de <see cref="T:System.Windows.Forms.RichTextBoxFinds" />.</param>
        <summary>Busca una cadena en el texto de un control <see cref="T:System.Windows.Forms.RichTextBox" /> en un intervalo de texto del control y aplicando opciones específicas a la búsqueda.</summary>
        <returns>Lugar del control en el que se encontró el texto buscado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.Find%2A> método busca el texto especificado en el `str` parámetro y devuelve la ubicación del primer carácter de la búsqueda de la cadena dentro del control. Si la propiedad devuelve un valor negativo, no se encontró la cadena de texto que se va a buscar dentro del contenido del control. Puede usar este método para crear la funcionalidad de búsqueda que se puede proporcionar al usuario del control. También puede usar este método para buscar texto que se reemplaza con un formato concreto. Por ejemplo, si el usuario escribió fechas en el control, puede utilizar el <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar todas las fechas en el documento y reemplácelas con el formato adecuado antes de usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> al método del control.  
  
 Con esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método, también puede especificar opciones que permiten ampliar o reducir la búsqueda. Puede especificar opciones que le permiten hacer coincidir las mayúsculas y minúsculas de la palabra de búsqueda o para buscar palabras completas en lugar de las palabras parciales. Mediante la especificación de la `RichTextBoxFinds.Reverse` en la enumeración de la `options` parámetro, puede buscar texto desde la parte inferior del documento a la parte superior en lugar de la parte superior de forma predeterminada al método de búsqueda de la parte inferior. Esta versión de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método también le permite limitar la búsqueda de texto mediante la selección de una posición de inicio y finalización específica dentro del texto del control. Esta característica permite limitar el intervalo de búsqueda a una sección concreta del texto del control. Si un valor negativo uno (-1) se asigna a la `end` parámetro, el método buscará hasta el final del texto en el <xref:System.Windows.Forms.RichTextBox> para búsquedas normales. Para realizar búsquedas inversas, un valor de un valor negativo (-1) asignado a la `end` parámetro indica que se buscará texto desde el final del texto (inferior) a la posición definida por `start` parámetro. Cuando el `start` y `end` se proporcionan parámetros de búsquedas normales se buscan en el mismo valor de todo el control. Para una búsqueda inversa, se busca en todo el control, pero la búsqueda comienza en la parte inferior del documento y busca en la parte superior del documento.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.Find%2A> métodos que aceptan un `string` como un parámetro no encuentra el texto que se encuentra en más de una línea de texto dentro de la <xref:System.Windows.Forms.RichTextBox>. Realización de una búsqueda devolverá un valor negativo uno (-1).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se busca en una sección de texto en un <xref:System.Windows.Forms.RichTextBox> para la primera instancia de una cadena de búsqueda se pasa en el `searchText` parámetro del método. El intervalo de búsqueda de texto en el control especificado por la `searchStart` y `searchEnd` parámetros del método. Si la cadena de búsqueda se encuentra en la <xref:System.Windows.Forms.RichTextBox>, el método devuelve la ubicación de índice del primer carácter del texto encontrado y resalta el texto se encuentra; en caso contrario, devuelve un valor de -1. El ejemplo también se utiliza la `options` parámetro de la <xref:System.Windows.Forms.RichTextBox.Find%2A> método para especificar que el texto encontrado debe coincidir con el caso de la cadena de búsqueda. En el ejemplo se requiere que este método se coloca en la clase de un <xref:System.Windows.Forms.Form> que contiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`. Después de la primera se ha encontrado la instancia de la cadena de búsqueda, puede utilizar este ejemplo para encontrar otras instancias en el texto.  
  
 [!code-cpp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindStringStartEnd#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="str" /> era <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="end" /> era menor que el valor del parámetro <paramref name="start" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la fuente del texto que muestra el control.</summary>
        <value>
          <see cref="T:System.Drawing.Font" /> que se va a aplicar al texto que muestra el control. El valor predeterminado es el valor de la propiedad <see cref="P:System.Windows.Forms.Control.DefaultFont" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de primer plano del control.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> que representa el color de primer plano del control.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.ForeColor" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Ubicación donde se va a buscar.</param>
        <summary>Recupera el índice del carácter más cercano a la ubicación especificada.</summary>
        <returns>Índice de carácter de base cero de la ubicación especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve el índice de carácter más próximo a la posición especificada en el `pt` parámetro. El índice de carácter es un índice de base cero del texto en el control, incluidos los espacios. Puede usar este método para determinar donde en el texto con la que el usuario ha colocado pasar el mouse en coordenadas a este método el mouse. Esto puede ser útil si desea realizar tareas cuando el usuario sitúa el puntero del mouse sobre una palabra en el texto del control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition%2A> método con el <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar una cadena específica dentro de un <xref:System.Windows.Forms.RichTextBox> controlar y mostrar el índice de caracteres donde se encuentra dentro de la cadena se encuentra el <xref:System.Windows.Forms.RichTextBox> control. En el ejemplo se busca la palabra "brown" dentro del contenido del control y devuelve la posición de índice del carácter donde se encuentra la cadena de búsqueda. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` que contiene texto. También requiere que el código en el ejemplo está conectado a la <xref:System.Windows.Forms.Control.MouseDown> eventos de la <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CS/form1.cs#1)]
 [!code-vb[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posición del índice de carácter que se va a buscar.</param>
        <summary>Recupera el número de línea a partir de la posición de carácter especificada en el texto del control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <returns>Número de línea de base cero donde se encuentra el índice de carácter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite determinar el número de línea basado en el índice de carácter especificado en el `index` parámetro del método. La primera línea de texto en el control devuelve el valor cero. El <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> método devuelve el número de línea física donde el carácter indizado se encuentra dentro del control. Por ejemplo, si una parte de la primera línea lógica de texto en el control se ajusta a la línea siguiente, la <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> método devuelve 1 si el carácter que ocupa el índice de carácter especificado ha saltado a la segunda línea física. Si <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> se establece en `false`, ninguna parte de la línea se ajusta a la siguiente y el método devuelve 0 para el índice de carácter especificado. Puede usar este método para determinar qué línea se encuentra dentro de un índice de carácter específico. Por ejemplo, después de llamar a la <xref:System.Windows.Forms.RichTextBox.Find%2A> método para buscar texto, puede obtener el índice de carácter donde se encuentran los resultados de búsqueda. Puede llamar a este método con el índice de carácter devuelto por el <xref:System.Windows.Forms.RichTextBox.Find%2A> se encontró el método para determinar qué línea de la palabra.  
  
 En algunos casos, <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> no produce una excepción cuando el `index` parámetro es un valor no válido. Por ejemplo:  
  
-   Si el `index` parámetro es <xref:System.Int32.MinValue> o -1, <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> devuelve 0.  
  
-   Si el `index` parámetro es la longitud del texto o <xref:System.Int32.MaxValue>, <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> devuelve el número de la última línea de texto, que no es necesariamente el mismo como `Lines.Length-1`, según el valor de la <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> propiedad.  
  
 En estos casos, validar la entrada antes de llamar a <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A>.  
  
> [!NOTE]
>  Si el índice de carácter especificado en el `index` parámetro queda fuera el número de líneas que contiene el control disponibles, se devuelve el último número de línea.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> método. Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `RichTextBox1`, un botón denominado `Button1` y dos cuadros de texto denominados `TextBox1` y `TextBox2`. Cuando se ejecuta el ejemplo, escriba una cadena de búsqueda en `TextBox2` y haga clic en el botón para obtener los resultados de la búsqueda.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del carácter cuya ubicación se desea recuperar.</param>
        <summary>Recupera la ubicación dentro del control en el índice de caracteres especificado.</summary>
        <returns>Ubicación del carácter especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite determinar dónde se encuentra un índice de carácter específico en el control. Puede usar este método para realizar tareas tales como mostrar información de elementos o la Ayuda de menú de acceso directo para una palabra en el control. Por ejemplo, si desea mostrar un menú de opciones al usuario cuando el usuario hace clic en una palabra en el control, puede usar este método para determinar la posición de la palabra para mostrar correctamente un <xref:System.Windows.Forms.ContextMenu> control.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce durante una operación de arrastre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HScroll">
      <MemberSignature Language="C#" Value="public event EventHandler HScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.HScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HScroll;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en la barra de desplazamiento horizontal del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.HScroll> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.HScroll> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#540](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#540)]
 [!code-vb[System.Windows.Forms.EventExamples#540](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#540)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeChange">
      <MemberSignature Language="C#" Value="public event EventHandler ImeChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeChange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ImeChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeChange As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeChange;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario intercambia métodos de entrada en una versión asiática del sistema operativo Windows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.ImeChange> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.ImeChange> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#542](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#542)]
 [!code-vb[System.Windows.Forms.EventExamples#542](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#542)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageOption">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.LanguageOption" />
      <MemberSignature Language="VB.NET" Value="Public Property LanguageOption As RichTextBoxLanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxLanguageOptions LanguageOption { System::Windows::Forms::RichTextBoxLanguageOptions get(); void set(System::Windows::Forms::RichTextBoxLanguageOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxLanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica los valores de configuración de <see cref="T:System.Windows.Forms.RichTextBox" /> para la compatibilidad con el Editor de métodos de entrada (IME) y el idioma asiático.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxLanguageOptions" />. El valor predeterminado es <see cref="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoFontSizeAdjust" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LinkClickedEventHandler LinkClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LinkClickedEventHandler LinkClicked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LinkClicked As LinkClickedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LinkClickedEventHandler ^ LinkClicked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkClickedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en un vínculo en el texto del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede crear un controlador de eventos para este evento procesar un vínculo que se ha hecho clic dentro del control. Con la información proporcionada al controlador de eventos, puede determinar de qué vínculo se hizo clic en el documento.  
  
> [!IMPORTANT]
>  De forma predeterminada, los vínculos se muestran como texto y no son seleccionables. Para que sean conjunto seleccionable la <xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> propiedad `true`.  
  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 El siguiente ejemplo de código contiene un controlador de eventos para el <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos. El controlador de eventos procesa los clics de vínculo en el documento de un <xref:System.Windows.Forms.RichTextBox> controlar e inicia una instancia del explorador predeterminado (mediante el <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> método), mostrar la página para el vínculo que se hizo clic. Este ejemplo requiere que el controlador de eventos se ha conectado a la <xref:System.Windows.Forms.RichTextBox.LinkClicked> eventos para un <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carga el contenido de un archivo en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Nombre y ubicación del archivo que se cargará en el control.</param>
        <summary>Carga un archivo de texto RTF (Formato de texto enriquecido) o ASCII estándar en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al cargar un archivo con el <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método, el contenido del archivo que se va a cargar reemplaza todo el contenido de la <xref:System.Windows.Forms.RichTextBox> control. Esto hará que los valores de la <xref:System.Windows.Forms.TextBoxBase.Text%2A> y <xref:System.Windows.Forms.RichTextBox.Rtf%2A> propiedades para cambiar. Puede usar este método para cargar un documento RTF o texto creado anteriormente en el control para la manipulación. Si desea guardar el archivo, puede usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método.  
  
> [!NOTE]
>  Con esta versión de la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método, si el archivo que se va a cargar no es un documento RTF, se producirá una excepción. Para cargar un tipo diferente de archivo como un archivo de texto ASCII, utilice las otras versiones de este método que acepten un valor de la <xref:System.Windows.Forms.RichTextBoxStreamType> enumeración como parámetro.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método no abrirá un archivo hasta que se crea un identificador para el <xref:System.Windows.Forms.RichTextBox>. Asegúrese de que el identificador del control se crea antes de llamar a la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre un archivo RTF en el <xref:System.Windows.Forms.RichTextBox> control. El ejemplo se utiliza la <xref:System.Windows.Forms.OpenFileDialog> clase para mostrar un cuadro de diálogo para solicitar el archivo del usuario. A continuación, el código carga ese archivo suponiendo que es un RTF el archivo de documento. Si el archivo no está, el código de ejemplo producirá una excepción. Este ejemplo requiere que el código se coloca en un <xref:System.Windows.Forms.Form> clase que tiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Error al cargar el archivo en el control.</exception>
        <exception cref="T:System.ArgumentException">El archivo que se está cargando no es un documento RTF.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Para abrir un archivo. Enumeración asociada: el <see langword="Read" /> valo <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data">Secuencia de datos que se cargará en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</param>
        <param name="fileType">Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />.</param>
        <summary>Carga el contenido de un flujo de datos existente en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta versión de la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para cargar el <xref:System.Windows.Forms.RichTextBox> con datos de una secuencia de datos existente. Los datos que se cargan en el control reemplazan todo el contenido de la <xref:System.Windows.Forms.RichTextBox> control. Esto hará que los valores de la <xref:System.Windows.Forms.TextBoxBase.Text%2A> y <xref:System.Windows.Forms.RichTextBox.Rtf%2A> propiedades para cambiar. Puede usar este método para cargar un archivo que se ha abierto previamente en un flujo de datos en el control para la manipulación. Si desea guardar el contenido del control a la secuencia, puede usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método que acepta un <xref:System.IO.Stream> objeto como parámetro.  
  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método también le permite especificar el tipo de datos que se va a cargar en el control. Esta característica permite utilizar secuencias de datos que contienen datos que no sean de documentos de texto enriquecido (RTF) de formato en el control.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método no abrirá un archivo hasta que se crea un identificador para el <xref:System.Windows.Forms.RichTextBox>. Asegúrese de que el identificador del control se crea antes de llamar a la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> y <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> métodos con secuencias. También muestra cómo utilizar el <xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, y <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> los miembros.  
  
 Se trata de un ejemplo completo que está listo para ejecutarse cuando se copia al proyecto.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Error al cargar el archivo en el control.</exception>
        <exception cref="T:System.ArgumentException">El archivo que se está cargando no es un documento RTF.</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">Nombre y ubicación del archivo que se cargará en el control.</param>
        <param name="fileType">Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />.</param>
        <summary>Carga un tipo de archivo específico en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al cargar un archivo con el <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método, el contenido del archivo que se va a cargar reemplaza todo el contenido de la <xref:System.Windows.Forms.RichTextBox> control. Esto hará que los valores de la <xref:System.Windows.Forms.TextBoxBase.Text%2A> y <xref:System.Windows.Forms.RichTextBox.Rtf%2A> propiedades para cambiar. Puede usar este método para cargar un documento de texto enriquecido (RTF) o de texto creado anteriormente en el control para la manipulación. Si desea guardar el archivo, puede usar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método.  
  
 Puede utilizar esta versión de la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para especificar el tipo de archivo del archivo que se va a cargar. Esta característica permite cargar archivos que no sean documentos RTF en el control.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método no abrirá un archivo hasta que se crea un identificador para el <xref:System.Windows.Forms.RichTextBox>. Asegúrese de que el identificador del control se crea antes de llamar a la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre un archivo de texto en el <xref:System.Windows.Forms.RichTextBox> control. El ejemplo se utiliza la <xref:System.Windows.Forms.OpenFileDialog> clase para mostrar un cuadro de diálogo para solicitar el archivo del usuario. El código, a continuación, carga el archivo en el <xref:System.Windows.Forms.RichTextBox> control. En el ejemplo se usa esta versión de la <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para especificar que el archivo se abre como un archivo de texto ASCII en lugar del formato de texto enriquecido estándar. Este ejemplo requiere que el código se coloca en un <xref:System.Windows.Forms.Form> clase que tiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Error al cargar el archivo en el control.</exception>
        <exception cref="T:System.ArgumentException">El archivo que se está cargando no es un documento RTF.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Para abrir un archivo. Enumeración asociada: el <see langword="Read" /> valo <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(2147483647)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número máximo de caracteres que el usuario puede escribir o pegar en el control RichTextBox.</summary>
        <value>Número de caracteres que pueden escribirse en el control. El valor predeterminado es <see cref="F:System.Int32.MaxValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando esta propiedad se establece en 0, la longitud máxima del texto que puede escribirse en el control es 64 KB de caracteres. Esta propiedad suele utilizar cuando la <xref:System.Windows.Forms.RichTextBox> se usa para mostrar una sola línea de texto de formato (RTF) de texto enriquecido. Puede utilizar esta propiedad para restringir la longitud del texto especificado en el control para valores como códigos postales y números de teléfono, o para restringir la longitud del texto escrito cuando los datos se deben especificar en una base de datos. Puede limitar el texto escrito en el control a la longitud máxima del campo correspondiente en la base de datos.  
  
> [!NOTE]
>  En el código, puede establecer el valor de la <xref:System.Windows.Forms.TextBoxBase.Text%2A> propiedad en un valor que tiene una longitud mayor que el valor especificado por el <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad. Esta propiedad solo afecta a texto escrito en el control en tiempo de ejecución.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.MaxLength%2A> propiedad para determinar si el texto que se asigna a un <xref:System.Windows.Forms.RichTextBox> control es mayor que el valor asignado a la <xref:System.Windows.Forms.RichTextBox.MaxLength%2A> propiedad. Si el texto no es mayor, el ejemplo se utiliza la <xref:System.Windows.Forms.RichTextBox.SelectedText%2A> propiedad para asignar el texto al control. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado a un formulario y que se llama al método en el ejemplo con el texto proporcionado para el parámetro que se van a pegar en el control. El ejemplo también requiere que el <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> propiedad se ha establecido en un valor para limitar la entrada de texto en el <xref:System.Windows.Forms.RichTextBox>.  
  
 [!code-cpp[RichTextBox.MaxLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.MaxLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.MaxLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.MaxLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.MaxLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.MaxLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor asignado a la propiedad es menor que 0.</exception>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.MaxLength" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si éste es un control <see cref="T:System.Windows.Forms.RichTextBox" /> multilínea.</summary>
        <value>
          Es <see langword="true" /> si es un control <see cref="T:System.Windows.Forms.RichTextBox" /> multilínea; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.BackColorChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentsResized">
      <MemberSignature Language="C#" Value="protected virtual void OnContentsResized (System.Windows.Forms.ContentsResizedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentsResized(class System.Windows.Forms.ContentsResizedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentsResized (e As ContentsResizedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentsResized(System::Windows::Forms::ContentsResizedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ContentsResizedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ContentsResizedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.ContentsResized" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnContentsResized%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleDestroyed" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnHScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHScroll(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.HScroll" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnHScroll%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.HScroll" />
      </Docs>
    </Member>
    <Member MemberName="OnImeChange">
      <MemberSignature Language="C#" Value="protected virtual void OnImeChange (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeChange(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeChange (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeChange(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.ImeChange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnImeChange%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ImeChange" />
      </Docs>
    </Member>
    <Member MemberName="OnLinkClicked">
      <MemberSignature Language="C#" Value="protected virtual void OnLinkClicked (System.Windows.Forms.LinkClickedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLinkClicked(class System.Windows.Forms.LinkClickedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLinkClicked (e As LinkClickedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLinkClicked(System::Windows::Forms::LinkClickedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LinkClickedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.LinkClickedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnLinkClicked%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      </Docs>
    </Member>
    <Member MemberName="OnProtected">
      <MemberSignature Language="C#" Value="protected virtual void OnProtected (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProtected(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProtected (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProtected(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.Protected" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnProtected%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectionChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnSelectionChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnVScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnVScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVScroll(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.RichTextBox.VScroll" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.RichTextBox.OnVScroll%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.VScroll" />
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (clipFormat As DataFormats.Format)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat">Formato de Portapapeles en el que se obtendrán los datos del Portapapeles.</param>
        <summary>Pega el contenido del Portapapeles en el formato de Portapapeles especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método para pegar datos del Portapapeles en el control. Esta versión de la <xref:System.Windows.Forms.RichTextBox.Paste%2A> método es diferente de la <xref:System.Windows.Forms.TextBoxBase.Paste%2A?displayProperty=nameWithType> método tal como le permite pegar sólo texto en un formato de Portapapeles especificado. Puede usar el <xref:System.Windows.Forms.RichTextBox.CanPaste%2A> método para determinar si los datos en el Portapapeles están en el formato de Portapapeles especificado. A continuación, puede llamar a esta versión de la <xref:System.Windows.Forms.RichTextBox.Paste%2A> método para asegurarse de que la operación de pegado se realiza con el formato de datos adecuado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.Paste%2A> método para pegar un mapa de bits en el <xref:System.Windows.Forms.RichTextBox> control. Después de abrir un mapa de bits del archivo, el ejemplo se utiliza la <xref:System.Windows.Forms.Clipboard.SetDataObject%2A> método para copiar el mapa de bits en el Portapapeles de Windows. Por último, en el ejemplo se recupera el formato para la <xref:System.Drawing.Bitmap> de objeto, comprueba que el formato se puede pegar en el <xref:System.Windows.Forms.RichTextBox> control y utiliza el <xref:System.Windows.Forms.RichTextBox.Paste%2A> método para pegar los datos.  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">para leer desde el Portapapeles. Enumeración asociada: el <see langword="AllClipboard" /> valo <see cref="T:System.Security.Permissions.UIPermissionClipboard" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Paste" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> que se pasa por referencia y que representa el mensaje de ventana que se va a procesar.</param>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" /> que representa la clave que se va a procesar.</param>
        <summary>Procesa una tecla de comando.</summary>
        <returns>
          <see langword="true" /> si el control procesó el carácter; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="Protected">
      <MemberSignature Language="C#" Value="public event EventHandler Protected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Protected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.Protected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Protected As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Protected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario intenta modificar texto protegido en el control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede crear un controlador de eventos para este evento en las aplicaciones para determinar cuándo el usuario ha intentado modificar el texto que se ha marcado como protegido en el control. El controlador de eventos puede usarse para notificar al usuario que el texto que el usuario intenta modificar está protegido o para mostrar un cuadro de diálogo que permite al usuario realizar los cambios apropiados en el texto. Por ejemplo, si el área protegida es una fecha, puede mostrar un cuadro de diálogo que permite al usuario elegir una fecha que, a continuación, se puede aplicar al texto del control.  
  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.Protected> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.Protected> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#543](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#543)]
 [!code-vb[System.Windows.Forms.EventExamples#543](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#543)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Este evento no es relevante para esta clase.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public void Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Redo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Redo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Redo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vuelve a aplicar la última operación anulada en el control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A continuación, puede usar el <xref:System.Windows.Forms.RichTextBox.Redo%2A> método para volver a aplicar la última operación de deshacer en el control. El <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> método le permite determinar si la última operación deshecha por el usuario puede volver a aplicar al control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> y <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> propiedades y la <xref:System.Windows.Forms.RichTextBox.Redo%2A> método para restringir una operación de puesta al día a cualquier acción salvo la eliminación de texto. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control y que una operación dentro de la <xref:System.Windows.Forms.RichTextBox> se ha realizado y anulado antes de que se llama al código en este ejemplo.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
      </Docs>
    </Member>
    <Member MemberName="RedoActionName">
      <MemberSignature Language="C#" Value="public string RedoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RedoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RedoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RedoActionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la acción que se puede volver a aplicar al control cuando se llame al método <see cref="M:System.Windows.Forms.RichTextBox.Redo" />.</summary>
        <value>Cadena que representa el nombre de la acción que se ejecutará cuando se realice una llamada al método <see cref="M:System.Windows.Forms.RichTextBox.Redo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si esta propiedad devuelve una cadena vacía (""), no hay ninguna operación disponible para volver a aplicar al control. Puede usar este método para determinar la última acción deshecha en el <xref:System.Windows.Forms.RichTextBox> control que, a continuación, volver a aplicar al control cuando una llamada a la <xref:System.Windows.Forms.RichTextBox.Redo%2A> se realiza el método. Puede determinar si hay cualquier operación que volver a aplicar al control mediante el uso de la <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> y <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> propiedades y la <xref:System.Windows.Forms.RichTextBox.Redo%2A> método para restringir una operación de puesta al día a cualquier acción salvo la eliminación de texto. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control y que una operación dentro de la <xref:System.Windows.Forms.RichTextBox> se ha realizado y anulado antes de que se llama al código en este ejemplo.  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="RichTextShortcutsEnabled">
      <MemberSignature Language="C#" Value="public bool RichTextShortcutsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RichTextShortcutsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RichTextShortcutsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property RichTextShortcutsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RichTextShortcutsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>
          Es <see langword="true" /> si se han habilitado teclas de método abreviado; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightMargin">
      <MemberSignature Language="C#" Value="public int RightMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RightMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RightMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property RightMargin As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RightMargin { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tamaño de una sola línea de texto del control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>Tamaño, en píxeles, de una línea de texto del control. El valor predeterminado es cero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se escribe un valor mayor que cero en el control, se coloca un margen invisible en el control en el número de píxeles desde el lado izquierdo del control especificado. Cualquier texto que se ha especificado que se extiende más allá de este margen se coloca en la siguiente línea de texto en el control. Esta propiedad afecta a todo el texto escrito actualmente en el control, así como cualquier texto adicional que escribió en el control después de establece la propiedad. Puede utilizar esta propiedad para especificar un ancho de línea máximo para todo el texto escrito en un <xref:System.Windows.Forms.RichTextBox> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Windows.Forms.RichTextBox> que acercar el texto, se selecciona automáticamente las palabras en el texto del control cuando se hace doble clic en una palabra y tiene un margen en el lado derecho del área cliente del control. Si el <xref:System.Windows.Forms.RichTextBox> control tiene un ancho pequeño, el uso de este código crea un <xref:System.Windows.Forms.RichTextBox> donde cada carácter de texto se muestra en su propia línea. Mientras está en esta posición vertical, al hacer clic en cualquier parte de una palabra seleccionará todos los caracteres de la palabra sin tener en cuenta el hecho de que se muestra el texto verticalmente. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor especificado era menor que cero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Rtf">
      <MemberSignature Language="C#" Value="public string Rtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Rtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Rtf" />
      <MemberSignature Language="VB.NET" Value="Public Property Rtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Rtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto del control <see cref="T:System.Windows.Forms.RichTextBox" />, incluidos todos los códigos con formato de texto enriquecido (RTF).</summary>
        <value>Texto del control en formato RTF.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar esta propiedad en texto con formato RTF de lugar en el control para su presentación o para extraer el texto del control con el formato RTF especificado definido en el texto del control. Esta propiedad se suele usar cuando se asigna texto RTF de otro origen RTF, como Microsoft Word o WordPad de Windows, el control.  
  
 Si cambia el <xref:System.Windows.Forms.Control.RightToLeft%2A> se mantiene la propiedad en tiempo de ejecución solo texto sin formato.  
  
 Para los códigos RTF, vea "especificación (RTF), versión 1.6 de formato de texto enriquecido" en MSDN library en http://msdn.microsoft.com/library.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Guarda en un archivo el contenido de <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Nombre y ubicación del archivo que se va a guardar.</param>
        <summary>Guarda el contenido de <see cref="T:System.Windows.Forms.RichTextBox" /> en un archivo con formato de texto enriquecido (RTF).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método le permite guardar todo el contenido del control en un archivo RTF que puede usarse en otros programas, como Microsoft Word y Windows WordPad. Si el nombre del archivo que se pasa a la `path` parámetro ya existe en el directorio especificado, el archivo se sobrescribe sin previo aviso. Puede usar el <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para cargar el contenido de un archivo en el <xref:System.Windows.Forms.RichTextBox>.  
  
> [!NOTE]
>  Para guardar el contenido del control en un tipo diferente de formato de archivo como texto ASCII, utilice las otras versiones de este método que acepten un valor de la <xref:System.Windows.Forms.RichTextBoxStreamType> enumeración como parámetro.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se guarda el contenido de un <xref:System.Windows.Forms.RichTextBox> control en un archivo RTF. El ejemplo se utiliza la <xref:System.Windows.Forms.SaveFileDialog> clase para mostrar un cuadro de diálogo que solicite al usuario, la ruta de acceso y el nombre del archivo para guardar. El código, a continuación, guarda el archivo suponiendo que el contenido está en formato de texto enriquecido. Si el archivo ya existe, se sobrescribe automáticamente. Este ejemplo requiere que el código se coloca en un <xref:System.Windows.Forms.Form> clase que tiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Se produce un error al guardar el contenido del control en un archivo.</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data">Flujo de datos que contiene el archivo donde se va a guardar.</param>
        <param name="fileType">Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />.</param>
        <summary>Guarda el contenido de un control <see cref="T:System.Windows.Forms.RichTextBox" /> en un flujo de datos abierto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método le permite guardar todo el contenido del control en el flujo de datos que ya está abierto. El flujo de datos, a continuación, puede guardar la información en un archivo. Puede usar el <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para cargar el contenido de un archivo en el <xref:System.Windows.Forms.RichTextBox>.  
  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método también le permite especificar un formato de datos de la información que se enviará a la <xref:System.IO.Stream> objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> y <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> métodos con secuencias. También muestra cómo utilizar el <xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, y <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> los miembros.  
  
 Se trata de un ejemplo completo que está listo para ejecutarse cuando se copia al proyecto.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">En el parámetro <paramref name="fileType" /> se especifica un tipo de archivo no válido.</exception>
        <exception cref="T:System.IO.IOException">Se produce un error al guardar el contenido del control en un archivo.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Para crear o modificar un archivo. Enumeración asociada: el <see langword="Write" /> valo <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">Nombre y ubicación del archivo que se va a guardar.</param>
        <param name="fileType">Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxStreamType" />.</param>
        <summary>Guarda el contenido de <see cref="T:System.Windows.Forms.RichTextBox" /> en un tipo de archivo específico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método le permite guardar todo el contenido del control en un archivo RTF que puede usarse en otros programas, como Microsoft Word y Windows WordPad. Si el nombre del archivo que se pasa a la `path` parámetro ya existe en el directorio especificado, el archivo se sobrescribe sin previo aviso. Puede usar el <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> método para cargar el contenido de un archivo en el <xref:System.Windows.Forms.RichTextBox>.  
  
 Esta versión de la <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método le permite especificar un tipo de archivo para guardar el contenido del control. Puede usar esta característica para asegurarse de que el archivo se guarda en el formato adecuado en función del contenido del control. Por ejemplo, si el documento no tiene ninguna diferencia en el estilo de fuente o color, puede guardar el archivo como un archivo de texto ASCII estableciendo el `fileType` parámetro `RichTextBoxStreamType.PlainText`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se guarda el contenido de la <xref:System.Windows.Forms.RichTextBox> en un archivo de texto ASCII. El ejemplo se utiliza la <xref:System.Windows.Forms.SaveFileDialog> clase para mostrar un cuadro de diálogo para solicitar la ruta de acceso y el nombre del usuario. El código, a continuación, guarda el contenido del control en ese archivo. En el ejemplo se usa esta versión de la <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> método para especificar que el archivo se guarda como un archivo de texto ASCII en lugar del formato de texto enriquecido estándar. Este ejemplo requiere que el código se coloca en un <xref:System.Windows.Forms.Form> clase que tiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">En el parámetro <paramref name="fileType" /> se especifica un tipo de archivo no válido.</exception>
        <exception cref="T:System.IO.IOException">Se produce un error al guardar el contenido del control en un archivo.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Para crear o modificar un archivo. Enumeración asociada: el <see langword="Write" /> valo <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As RichTextBoxScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxScrollBars ScrollBars { System::Windows::Forms::RichTextBoxScrollBars get(); void set(System::Windows::Forms::RichTextBoxScrollBars value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de barras de desplazamiento que se muestran en el control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.RichTextBoxScrollBars" />. El valor predeterminado es <see langword="RichTextBoxScrollBars.Both" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad le permite proporcionar barras de desplazamiento horizontal y vertical para el usuario de la <xref:System.Windows.Forms.RichTextBox> control para habilitar el desplazamiento de texto dentro del control que se encuentre fuera de las dimensiones físicas del control. También puede utilizar esta propiedad para quitar las barras de desplazamiento del control para restringir desplazando el contenido del control.  
  
> [!NOTE]
>  Barras de desplazamiento horizontal no se mostrará si el <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> es `true`, independientemente del valor de la <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no está definido en la enumeración <see cref="T:System.Windows.Forms.RichTextBoxScrollBars" />.</exception>
        <altmember cref="T:System.Windows.Forms.RichTextBoxScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="SelectedRtf">
      <MemberSignature Language="C#" Value="public string SelectedRtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedRtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedRtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectedRtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto con formato de texto enriquecido (RTF) actualmente seleccionado en el control.</summary>
        <value>Texto RTF seleccionado en el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite obtener el texto seleccionado en el control, incluidos lo códigos de formato RTF. Puede utilizar esta propiedad para copiar texto desde el control, completo con formato y pegar el texto en otras aplicaciones que aceptan RTF texto con formato, como Microsoft Word y Windows WordPad. Para obtener el texto seleccionado, sin códigos RTF, utilice la <xref:System.Windows.Forms.TextBoxBase.SelectedText%2A> propiedad.  
  
 Si no hay texto seleccionado, se inserta el texto especificado en esta propiedad en el punto de inserción. Si se selecciona texto, cualquier texto asignado a esta propiedad reemplaza el texto seleccionado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.Rtf" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto seleccionado en <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>Cadena que representa el texto seleccionado en el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> propiedad con el <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, y <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> propiedades para crear una lista con viñetas en un <xref:System.Windows.Forms.RichTextBox> control. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` se crea en un formulario.  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment SelectionAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment SelectionAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment SelectionAlignment { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la alineación que se aplicará a la selección o al punto de inserción actual.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay ningún párrafo está seleccionado en el control, al establecer esta propiedad aplica la configuración de alineación del párrafo en el que aparece el punto de inserción, así como a los párrafos creados después del párrafo que tiene el valor de la propiedad de alineación. Por ejemplo, si hay dos párrafos de un <xref:System.Windows.Forms.RichTextBox> control y el punto de inserción se encuentra en el segundo párrafo. Si establece la <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> propiedad `HorizontalAlignment.Center`, el párrafo en el punto de inserción se centrará en el control. Si se crea un tercer párrafo después del segundo párrafo, también está alineado en el centro del control.  
  
 Si se realiza una selección en el control cuando se establece la propiedad, todos los párrafos seleccionados se alinean en función de valor de esta propiedad. Puede utilizar esta propiedad para alinear los párrafos de un documento que se creó en el <xref:System.Windows.Forms.RichTextBox>. Por ejemplo, si desea que todos los párrafos de un documento se centra, puede seleccionar todos los párrafos del control y establecer el <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> propiedad `HorizontalAlignment.Center`.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> Devuelve `SelectionAlignment.Left` cuando la selección de texto contiene varios párrafos con diferentes tipos de alineación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo alinear el texto dentro de la <xref:System.Windows.Forms.RichTextBox>. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado al formulario.  
  
 [!code-cpp[RichTextBox.SelectionAlignment#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionAlignment#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionAlignment#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es un valor definido en la clase <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="SelectionBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionBackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color del texto cuando el texto se selecciona en un control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> que representa el color del texto cuando se selecciona el texto. El valor predeterminado es el valor de la propiedad <see cref="P:System.Windows.Forms.Control.DefaultBackColor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> para obtener o establecer el color del texto seleccionado en el <xref:System.Windows.Forms.RichTextBox>. Si no hay texto seleccionado, el <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> propiedad se aplica a la posición actual del símbolo de intercalación. Caracteres que se escriben desde esa posición tienen especificado <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBullet">
      <MemberSignature Language="C#" Value="public bool SelectionBullet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionBullet" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBullet As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionBullet { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el estilo de viñeta se aplicará a la selección o al punto de inserción.</summary>
        <value>
          Es <see langword="true" /> si se aplica el estilo de viñeta a la selección o al punto de inserción; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay texto seleccionado, el estilo de viñeta se aplica al punto de inserción actual y a todos los párrafos que el usuario escribe después del punto de inserción. El estilo de viñeta se aplica al texto del control hasta que se mueve el punto de inserción o cuando el usuario presiona la tecla ENTRAR en un elemento de viñeta vacía.  
  
 Si se selecciona texto en el control cuando se establece esta propiedad, todos los párrafos dentro del texto seleccionado se convierten en elementos con viñetas en la lista con viñetas. Puede utilizar esta propiedad para crear listas con viñetas en los documentos que cree en el <xref:System.Windows.Forms.RichTextBox> control.  
  
 El <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> propiedad le permite especificar la cantidad de sangría que se aplicará entre la viñeta y el texto del elemento con viñetas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> propiedad con el <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>, <xref:System.Windows.Forms.RichTextBox.SelectedText%2A>, y <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> propiedades para crear una lista con viñetas en un <xref:System.Windows.Forms.RichTextBox> control. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1` se crea en un formulario.  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la selección de texto del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede crear un controlador de eventos para este evento determinar cuándo el usuario ha cambiado la selección de texto dentro del control. Un controlador de eventos para este evento puede utilizarse para mantener el texto seleccionado hasta que el usuario ha completado una tarea dentro de la aplicación.  
  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.SelectionChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.SelectionChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#544](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#544)]
 [!code-vb[System.Windows.Forms.EventExamples#544](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#544)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionCharOffset">
      <MemberSignature Language="C#" Value="public int SelectionCharOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionCharOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionCharOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionCharOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionCharOffset { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si el texto del control aparece en la línea base, como superíndice o como subíndice por debajo de la línea base.</summary>
        <value>Número que especifica el desplazamiento de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta propiedad debe estar entre -2000 y 2000.  
  
 Si esta propiedad se establece en cero, el texto aparece en la línea de base. Si es un número positivo, el número especifica el número de píxeles que se elevará la selección de texto por encima de la línea de base. Si es un número negativo, este número especifica el número de píxeles que Subscript la selección de texto. Puede utilizar esta propiedad para especificar texto de superíndice o subíndice.  
  
 Si no hay texto seleccionado, el desplazamiento se aplica al punto de inserción actual y a todo el texto que el usuario escribe después del punto de inserción. El desplazamiento de caracteres se aplica hasta que se cambie la propiedad en un valor diferente o hasta que el punto de inserción se mueve a otra sección dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede utilizar esta propiedad para crear texto de superíndice y el subíndice para aplicaciones tales como expresiones matemáticas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar texto de superíndice y el subíndice de la <xref:System.Windows.Forms.RichTextBox> mediante el <xref:System.Windows.Forms.RichTextBox.SelectionCharOffset%2A> propiedad. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado al formulario.  
  
 [!code-cpp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionCharOffset#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor especificado era menor que -2000 o mayor que 2000.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color del texto seleccionado o el color del texto en el punto de inserción actual.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> que representa el color que se aplicará al texto seleccionado actualmente o al texto que se escriba a continuación del punto de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la selección de texto actual tiene más de un color especificado, esta propiedad devuelve `Color.Empty`. Si no hay texto seleccionado, el color del texto especificado en esta propiedad se aplica al punto de inserción actual y a todo el texto que se escribe en el control después del punto de inserción. La configuración de color del texto se aplica hasta que se cambie la propiedad con un color diferente o hasta que el punto de inserción se mueve a otra sección dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede utilizar esta propiedad para cambiar el color del texto en el <xref:System.Windows.Forms.RichTextBox>.  
  
 Para convertir texto en negrita en el control, use la <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> propiedad para asignar una nueva fuente que tenga especificado el estilo de fuente en negrita.  
  
   
  
## Examples  
 El siguiente código en el ejemplo se muestra un <xref:System.Windows.Forms.ColorDialog> al usuario para especificar un color para la selección de texto actual o el texto escrito después de la inserción actual dado un <xref:System.Windows.Forms.RichTextBox> control. Este ejemplo requiere que el método definido en el ejemplo se agrega a un <xref:System.Windows.Forms.Form> clase que contiene un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionFont" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font SelectionFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font SelectionFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionFont" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ SelectionFont { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la fuente del texto seleccionado o la fuente del texto en el punto de inserción actual.</summary>
        <value>
          <see cref="T:System.Drawing.Font" /> que representa la fuente que se aplicará al texto seleccionado actualmente o al texto que se escriba a continuación del punto de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la selección de texto actual tiene más de una fuente especificado, esta propiedad es `null`. Si no hay texto seleccionado, la fuente especificada en esta propiedad se aplica al punto de inserción actual y a todo el texto que se escribe en el control después del punto de inserción. La configuración de fuente se aplica hasta que se cambie la propiedad a una fuente diferente o hasta que el punto de inserción se mueve a otra sección dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede utilizar esta propiedad para cambiar el estilo de fuente del texto en el <xref:System.Windows.Forms.RichTextBox>. Puede poner el texto en el control de negrita, cursiva o subrayado. También puede cambiar el tamaño del texto y la fuente que se aplica al texto.  
  
 Para cambiar el color del texto en el control, use la <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se cambia el estilo de fuente negrita actual para la selección de texto o el texto escrito después de que el punto de inserción en el <xref:System.Windows.Forms.RichTextBox> control. Este ejemplo requiere que el código está contenido dentro de un método en un <xref:System.Windows.Forms.Form>. El ejemplo también requiere que un <xref:System.Windows.Forms.RichTextBox>, que se denomina `richTextBox1`, se ha agregado a la <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionColor" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionHangingIndent">
      <MemberSignature Language="C#" Value="public int SelectionHangingIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionHangingIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionHangingIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionHangingIndent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la distancia entre el margen izquierdo de la primera línea de texto del párrafo seleccionado y el margen izquierdo de las líneas siguientes del mismo párrafo.</summary>
        <value>Distancia, en píxeles, para la sangría francesa que se aplica al texto seleccionado o al punto de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay texto seleccionado, se aplica la sangría francesa para el párrafo en el que aparece el punto de inserción y a todo el texto que se escribe en el control después del punto de inserción. El valor de sangría francesa se aplica hasta que se cambie la propiedad en un valor diferente o hasta que el punto de inserción se mueve a un párrafo diferente dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede utilizar esta propiedad para aplicar una sangría francesa para los párrafos.  
  
 Para establecer la sangría de la primera línea de un párrafo seleccionado, utilice la <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar sangrías francesas en el <xref:System.Windows.Forms.RichTextBox> mediante el <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> propiedad. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado al formulario.  
  
 [!code-cpp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionIndent">
      <MemberSignature Language="C#" Value="public int SelectionIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionIndent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la longitud, en píxeles, de la sangría de la línea donde se inicia la selección.</summary>
        <value>Distancia actual, en píxeles, de la sangría que se aplica a la izquierda del texto seleccionado o del punto de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay texto seleccionado, el valor de sangría se aplica al párrafo en el que aparece el punto de inserción y a todo el texto que se escribe en el control después del punto de inserción. El valor de sangría se aplica hasta que se cambie la propiedad en un valor diferente o hasta que el punto de inserción se mueve a un párrafo diferente dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede usar esta propiedad para aplicar sangría a los párrafos del documento de la <xref:System.Windows.Forms.RichTextBox>. Puede utilizar esta propiedad junto con la <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> crear párrafos que se muestren en párrafos.  
  
 Para crear una sangría francesa para los párrafos del control, use la <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar texto con sangría en el <xref:System.Windows.Forms.RichTextBox> mediante el <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> propiedad. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado al formulario.  
  
 [!code-cpp[RichTextBox.SelectionIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionLength">
      <MemberSignature Language="C#" Value="public override int SelectionLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectionLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectionLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de caracteres seleccionados en el control.</summary>
        <value>Número de caracteres seleccionados en el cuadro de texto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para determinar si hay caracteres actualmente seleccionados en el control de cuadro de texto antes de realizar operaciones en el texto seleccionado. También puede utilizar esta propiedad para determinar el número total de caracteres (incluidos espacios) que se seleccionan al único carácter de realizar tareas en un `for` bucle.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.RichTextBox.SelectionLength%2A> propiedad para determinar si hay texto seleccionado en el <xref:System.Windows.Forms.RichTextBox>. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control, denominado `richTextBox1`, se ha agregado al formulario. El ejemplo también requiere que `richTextBox1` contiene texto que está seleccionado en el control.  
  
 [!code-cpp[RichTextBox.SelectionLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectionStart" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="SelectionProtected">
      <MemberSignature Language="C#" Value="public bool SelectionProtected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionProtected" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionProtected" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionProtected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionProtected { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la selección de texto actual está protegida.</summary>
        <value>
          Es <see langword="true" /> si la selección actual impide que se realicen cambios en el contenido; en caso contrario es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay texto seleccionado, se aplica la configuración de protección para el párrafo en el que aparece el punto de inserción y a todo el texto que se escribe en el control después del punto de inserción. La configuración de protección se aplica hasta que se cambie la propiedad en un valor diferente o hasta que el punto de inserción se mueve a un párrafo diferente dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede utilizar esta propiedad para impedir que el usuario modifique secciones de texto dentro del control.  
  
 Si esta propiedad se establece en `true`, el <xref:System.Windows.Forms.RichTextBox.Protected> evento se desencadena cuando el usuario intenta cambiar la selección de texto actual.  
  
> [!NOTE]
>  Esta propiedad devolverá `true` solo si toda la selección en el control incluye contenido protegido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar texto protegido en el <xref:System.Windows.Forms.RichTextBox> mediante el <xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> propiedad. Este ejemplo requiere que un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`, se ha agregado al formulario y que la <xref:System.Windows.Forms.RichTextBox> control tiene el texto que se agrega a ella y que contiene la palabra "RichTextBox".  
  
 [!code-cpp[RichTextBox.SelectionProtected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionProtected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionProtected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionProtected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="SelectionRightIndent">
      <MemberSignature Language="C#" Value="public int SelectionRightIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionRightIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionRightIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionRightIndent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Distancia (en píxeles) entre el margen derecho del control <see cref="T:System.Windows.Forms.RichTextBox" /> y el margen derecho del texto que se selecciona o agrega en el punto de inserción actual.</summary>
        <value>Espacio de la sangría, en píxeles, a la derecha de la selección o del punto de inserción actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay texto seleccionado, el valor de sangría se aplica al párrafo en el que aparece el punto de inserción y a todo el texto que se escribe en el control después del punto de inserción. El valor de sangría se aplica hasta que se cambie la propiedad en un valor diferente o hasta que el punto de inserción se mueve a un párrafo diferente dentro del control.  
  
 Si hay texto seleccionado en el control, el texto seleccionado y el texto especificado después de la selección de texto tendrá el valor de esta propiedad aplicada a él. Puede usar esta propiedad para aplicar sangría a los párrafos del documento de la <xref:System.Windows.Forms.RichTextBox>. Puede utilizar esta propiedad junto con la <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> crear párrafos que se muestren en párrafos.  
  
 Para crear una sangría francesa para los párrafos del control, use la <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un margen derecho en un <xref:System.Windows.Forms.RichTextBox> mediante el <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> propiedad. El ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`, y que el código de ejemplo se llama desde un evento dentro de la clase del formulario.  
  
 [!code-cpp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionRightIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionTabs">
      <MemberSignature Language="C#" Value="public int[] SelectionTabs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] SelectionTabs" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionTabs" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionTabs As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ SelectionTabs { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las posiciones de tabulación absolutas en un control <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>Matriz en la que cada miembro especifica un desplazamiento de tabulación, en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite obtener una matriz que contiene el espacio de cada tabulación en la selección de texto actual dentro de la <xref:System.Windows.Forms.RichTextBox> control. A continuación, puede utilizar esta propiedad para ajustar el tamaño de cada ficha dentro de la selección de texto. Por ejemplo, si desea ajustar el espacio de tabulación dentro del documento, puede seleccionar todo el documento y obtener la lista de espacios de tabulación mediante el <xref:System.Windows.Forms.RichTextBox.SelectionTabs%2A> propiedad. A continuación, puede ajustarlos a los nuevos valores y asignarlas de nuevo a esta propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La matriz tiene más de los 32 elementos máximos.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxSelectionTypes SelectionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxSelectionTypes SelectionType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionType As RichTextBoxSelectionTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxSelectionTypes SelectionType { System::Windows::Forms::RichTextBoxSelectionTypes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxSelectionTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tipo de selección del control.</summary>
        <value>Combinación bit a bit de los valores de <see cref="T:System.Windows.Forms.RichTextBoxSelectionTypes" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para determinar el tipo de datos que está seleccionados actualmente en el control con el fin de controlar correctamente la selección al realizar tareas en el control en la selección actual. La propiedad puede representar cualquier combinación de valores de la <xref:System.Windows.Forms.RichTextBoxSelectionTypes> enumeración que representa los distintos tipos de objetos de la selección actual.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      </Docs>
    </Member>
    <Member MemberName="ShowSelectionMargin">
      <MemberSignature Language="C#" Value="public bool ShowSelectionMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowSelectionMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ShowSelectionMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowSelectionMargin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowSelectionMargin { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se muestra un margen de selección en <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>
          Es <see langword="true" /> si el margen de selección está habilitado en el control; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para permitir al usuario seleccionar líneas de texto en fácilmente el <xref:System.Windows.Forms.RichTextBox>. El margen de selección se agrega a la izquierda de la <xref:System.Windows.Forms.RichTextBox>. Este margen facilita al usuario seleccionar a partir del lado izquierdo del control de texto. El usuario puede haga clic en el margen de selección para seleccionar una sola línea de texto o haga doble clic para seleccionar todo el párrafo que está dentro de la línea doble.  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> propiedad está establecida en `true`, y establece la <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> propiedad `RichTextBoxScrollBars.Horizontal`, `RichTextBoxScrollBars.Vertical`, o `RichTextBoxScrollBars.Both` no hará que las barras de desplazamiento que se mostrará. Para mostrar las barras de desplazamiento mientras la <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> propiedad está establecida en `true`, establezca el <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> propiedad a `RichTextBoxScrollBars.ForcedHorizontal`, `RichTextBoxScrollBars.ForcedVertical`, o `RichTextBoxScrollBars.ForcedBoth`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto actual del control RichTextBox.</summary>
        <value>Texto que se muestra en el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para mostrar varias líneas de texto en un <xref:System.Windows.Forms.RichTextBox>, establezca el <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> propiedad `true`. Para leer o establecer el texto de un cuadro de texto multilínea, utilice la <xref:System.Windows.Forms.TextBoxBase.Lines%2A> propiedad. El <xref:System.Windows.Forms.RichTextBox.Text%2A> propiedad no devuelve ninguna información sobre el formato aplicado al contenido de la <xref:System.Windows.Forms.RichTextBox>. Para obtener el texto enriquecido (RTF) códigos de formato, use la <xref:System.Windows.Forms.RichTextBox.Rtf%2A> propiedad. La cantidad de texto que puede escribirse en el <xref:System.Windows.Forms.RichTextBox> control está limitado únicamente por la memoria disponible del sistema.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Lines" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la longitud del texto en el control.</summary>
        <value>Número de caracteres contenidos en el texto del control.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="UndoActionName">
      <MemberSignature Language="C#" Value="public string UndoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UndoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.UndoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UndoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UndoActionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la acción que se puede deshacer en el control cuando se llame al método <see cref="M:System.Windows.Forms.TextBoxBase.Undo" />.</summary>
        <value>Nombre textual de la acción que se puede deshacer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad le permite determinar la última acción que se lleva a cabo en el control que se puede deshacer. Puede utilizar esta propiedad para limitar las operaciones que puede deshacer el usuario del control.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Undo" />
      </Docs>
    </Member>
    <Member MemberName="VScroll">
      <MemberSignature Language="C#" Value="public event EventHandler VScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.VScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VScroll;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en las barras de desplazamiento verticales del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.RichTextBox.VScroll> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.RichTextBox> denominado `RichTextBox1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.RichTextBox.VScroll> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#545](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#545)]
 [!code-vb[System.Windows.Forms.EventExamples#545](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#545)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Un objeto de mensaje de Windows.</param>
        <summary>Procesa los mensajes de Windows.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomFactor">
      <MemberSignature Language="C#" Value="public float ZoomFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ZoomFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ZoomFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property ZoomFactor As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float ZoomFactor { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nivel de zoom actual de <see cref="T:System.Windows.Forms.RichTextBox" />.</summary>
        <value>Factor en virtud del cual se aplica el zoom al contenido del control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta propiedad puede ser entre 1/64 (0.015625) y 64,0, no ambos inclusive. Un valor de 1.0 indica que se aplica ningún zoom al control. La característica de zoom se realiza de forma óptima cuando el documento contiene fuentes TrueType. Cuando se usa una fuente que no es TrueType en el documento del control, el <xref:System.Windows.Forms.RichTextBox.ZoomFactor%2A> propiedad usará el valor de número entero más cercano. Puede utilizar esta propiedad para permitir al usuario de la <xref:System.Windows.Forms.RichTextBox> control para hacer zoom en secciones de la documentación que son demasiado pequeñas para ver o para condensar la vista para habilitar la mayor parte del documento que se va a verse en pantalla.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Windows.Forms.RichTextBox> que acercar el texto, se selecciona automáticamente las palabras en el texto del control cuando se hace doble clic en una palabra y tiene un margen en el lado derecho del área cliente del control. Si el <xref:System.Windows.Forms.RichTextBox> control tiene un ancho pequeño, el uso de este código crea un <xref:System.Windows.Forms.RichTextBox> donde cada carácter de texto se muestra en su propia línea. Mientras está en esta posición vertical, al hacer clic en cualquier parte de una palabra seleccionará todos los caracteres de la palabra sin tener en cuenta el hecho de que se muestra el texto verticalmente. Este ejemplo requiere que tenga un formulario que contenga un <xref:System.Windows.Forms.RichTextBox> control denominado `richTextBox1`.  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El factor de zoom especificado no se encuentra dentro del margen permitido.</exception>
      </Docs>
    </Member>
  </Members>
</Type>