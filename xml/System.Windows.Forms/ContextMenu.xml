<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="822820bed01a6b7e96dac4c344fd0629655f87d5" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55415944" /></Metadata><TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un menú contextual. Aunque el control <see cref="T:System.Windows.Forms.ContextMenuStrip" /> reemplaza y agrega funcionalidad al control <see cref="T:System.Windows.Forms.ContextMenu" /> de las versiones anteriores, <see cref="T:System.Windows.Forms.ContextMenu" /> se conserva a efectos de compatibilidad con versiones anteriores y uso futuro, si se desea.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Forms.ContextMenu> clase representa los menús contextuales que pueden mostrarse cuando el usuario hace clic con el botón secundario del mouse sobre un control o el área del formulario. Menús contextuales se utilizan normalmente para combinar distintos elementos de menú de un <xref:System.Windows.Forms.MainMenu> de un formulario que son útiles para el usuario dado el contexto de la aplicación. Por ejemplo, puede usar un menú contextual asignado a un <xref:System.Windows.Forms.TextBox> control para proporcionar elementos de menú para cambiar la fuente del texto, buscar texto en el control, o funciones del Portapapeles para copiar y pegar texto. También puede mostrar nuevas <xref:System.Windows.Forms.MenuItem> objetos en un menú contextual que no se encuentran dentro de un <xref:System.Windows.Forms.MainMenu> para proporcionar comandos específicos de situación que no son adecuados para el <xref:System.Windows.Forms.MainMenu> para mostrar.  
  
 Normalmente, se muestra un menú contextual cuando un usuario hace clic con el botón secundario del mouse sobre un control o el propio formulario. Los controles visibles y <xref:System.Windows.Forms.Form> tiene un <xref:System.Windows.Forms.Control.ContextMenu%2A> propiedad que se enlaza el <xref:System.Windows.Forms.ContextMenu> clase para el control que muestra el menú contextual. Puede usar más de un control un <xref:System.Windows.Forms.ContextMenu>. Puede usar el <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> propiedad para determinar qué control mostrado por última vez el menú contextual para llevar a cabo tareas específicas para el control o para modificar el menú contextual que se muestra en el control.  
  
 Es posible que desee saber cuando se muestra el menú contextual con el fin de establecer marcas de verificación, deshabilitar elementos y realizar otras tareas de menú antes de que el menú se muestra al usuario. Puede controlar la <xref:System.Windows.Forms.ContextMenu.Popup> evento para determinar cuándo se muestra el menú contextual.  
  
> [!NOTE]
>  Para poder reutilizar <xref:System.Windows.Forms.MenuItem> objetos que se muestran en un <xref:System.Windows.Forms.MainMenu> para su uso en un <xref:System.Windows.Forms.ContextMenu>, debe crear una copia del menú mediante la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. También puede combinar elementos de menú y sus elementos de submenú en un único <xref:System.Windows.Forms.MenuItem> objeto utilizando el <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un controlador de eventos para el <xref:System.Windows.Forms.ContextMenu.Popup> eventos de la <xref:System.Windows.Forms.ContextMenu>. El código en el controlador de eventos determina cuál de los dos controles un <xref:System.Windows.Forms.PictureBox> denominado `pictureBox1` y un <xref:System.Windows.Forms.TextBox> denominado `textBox1` es el control muestra el menú contextual. Dependiendo de qué control que provocó la <xref:System.Windows.Forms.ContextMenu> para mostrar el menú contextual, el control agrega adecuado <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.ContextMenu>. En este ejemplo requiere que tenga una instancia de la <xref:System.Windows.Forms.ContextMenu> clase, denominada `contextMenu1`, que se define dentro del formulario. En este ejemplo también requiere que haya un <xref:System.Windows.Forms.TextBox> y <xref:System.Windows.Forms.PictureBox> agregado a un formulario y que la <xref:System.Windows.Forms.Control.ContextMenu%2A> propiedad de estos controles está establecida en `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ContextMenu" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ContextMenu" /> sin elementos de menú especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una vez que ha usado esta versión del constructor, puede agregar elementos de menú a la <xref:System.Windows.Forms.ContextMenu> utilizando el <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método de la <xref:System.Windows.Forms.Menu.MenuItemCollection> clase. Puede tener acceso a la <xref:System.Windows.Forms.Menu.MenuItemCollection> a través de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">Matriz de objetos <see cref="T:System.Windows.Forms.MenuItem" /> que representa a los elementos de menú que se van a agregar al menú contextual.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ContextMenu" /> con un conjunto especificado de objetos <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar esta versión del constructor para crear un <xref:System.Windows.Forms.ContextMenu> con sus elementos de menú especificados en el momento de crearlo. Una vez que ha usado esta versión del constructor, puede agregar elementos de menú adicionales a la <xref:System.Windows.Forms.ContextMenu> utilizando el <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método de la <xref:System.Windows.Forms.Menu.MenuItemCollection> clase. Puede tener acceso a la <xref:System.Windows.Forms.Menu.MenuItemCollection> a través de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propiedad.  
  
   
  
## Examples  
 El código siguiente muestra un menú contextual de construir y utilizar el <xref:System.Windows.Forms.ContextMenu.Show%2A> método. Para ejecutar el ejemplo, pegue el código siguiente en un formulario que contenga un botón denominado Button1. Asegúrese de que todos los eventos están asociados a sus métodos de control de eventos.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se contrae el menú contextual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.ContextMenu.Collapse> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ContextMenu> denominado `ContextMenu1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.ContextMenu.Collapse> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ContextMenu.Collapse" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ContextMenu.Popup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce antes de mostrarse el menú contextual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este evento para inicializar el <xref:System.Windows.Forms.MenuItem> objetos antes de que se muestren. Por ejemplo, si usa un <xref:System.Windows.Forms.ContextMenu> para tres <xref:System.Windows.Forms.TextBox> controles y desea deshabilitar ciertos elementos de menú en el <xref:System.Windows.Forms.ContextMenu> dependiendo de qué <xref:System.Windows.Forms.TextBox> es mostrar el menú contextual, puede crear un controlador de eventos para este evento. Puede usar el <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> propiedad para determinar qué <xref:System.Windows.Forms.TextBox> va a mostrar el <xref:System.Windows.Forms.ContextMenu> y deshabilitar adecuado <xref:System.Windows.Forms.MenuItem> objetos.  
  
 Para obtener más información sobre el manejo de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un controlador de eventos para el <xref:System.Windows.Forms.ContextMenu.Popup> eventos de la <xref:System.Windows.Forms.ContextMenu>. El código en el controlador de eventos determina cuál de los dos controles un <xref:System.Windows.Forms.PictureBox> denominado `pictureBox1` y un <xref:System.Windows.Forms.TextBox> denominado `textBox1` es el control muestra el menú contextual. Dependiendo de qué control que provocó la <xref:System.Windows.Forms.ContextMenu> para mostrar el menú contextual, el control agrega adecuado <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.ContextMenu>. En este ejemplo requiere que tenga una instancia de la <xref:System.Windows.Forms.ContextMenu> clase, denominada `contextMenu1`, que se define dentro del formulario. En este ejemplo también requiere que haya un <xref:System.Windows.Forms.TextBox> y <xref:System.Windows.Forms.PictureBox> agregado a un formulario y que la <xref:System.Windows.Forms.Control.ContextMenu%2A> propiedad de estos controles está establecida en `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="msg"><see cref="T:System.Windows.Forms.Message" /> que se pasa por referencia y que representa el mensaje de ventana que se va a procesar.</param>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" /> que representa la tecla que se va a procesar.</param>
        <param name="control">Control al que se aplica la tecla de comando.</param>
        <summary>Procesa una tecla de comando.</summary>
        <returns><see langword="true" /> si el control procesó el carácter; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama durante el preprocesamiento de mensajes para controlar las teclas de comando. Teclas de comando son claves que siempre tienen prioridad sobre las teclas de entrada normales. Algunos ejemplos de las teclas de comando son los aceleradores y accesos directos del menú. El método debe devolver `true` para indicar que procesó la tecla de comando, o `false` para indicar que la clave no es una tecla de comando. Este método solo se llama cuando el control se hospeda en una aplicación de Windows Forms o como un control ActiveX.  
  
 El <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> método determina si el control tiene un <xref:System.Windows.Forms.ContextMenu>y si es así, permite la <xref:System.Windows.Forms.ContextMenu> para procesar la tecla de comando. Si la tecla de comando no es un acceso directo del menú y el control tiene un elemento primario, la clave se pasa a la principal <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> método. El efecto neto es que ese comando claves hacen una "burbuja" por la jerarquía de controles. Además de la clave que el usuario ha presionado, los datos de clave indican también que, si los hay, las teclas modificadoras se presionaron al mismo tiempo que la clave. Teclas modificadoras incluyen las teclas MAYÚS, CTRL y ALT.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para que el llamador inmediato llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides"><para>Cuando se reemplaza el <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> método en una clase derivada, debe devolver un control <see langword="true" /> para indicar que ha procesado la clave. Para las claves que no son procesadas por el control, el resultado de llamar a la clase base <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> método se debe devolver. Controles rara vez, si alguna vez, debe invalidar este método.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el texto que muestra el control aparece de derecha a izquierda.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite que los menús se admitan idiomas que se escriben de derecha a izquierda. Cuando esta propiedad se establece en `RightToLeft.Yes`, el texto del elemento de menú se muestra de derecha a izquierda en lugar del predeterminado de izquierda a derecha (método).  
  
> [!NOTE]
>  Para obtener más información acerca de cómo afecta la alineación de derecha a izquierda a los controles de formularios Windows Forms, consulte el <xref:System.Windows.Forms.Control.RightToLeft%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor asignado a la propiedad no es un miembro válido de la enumeración <see cref="T:System.Windows.Forms.RightToLeft" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Muestra el menú contextual en la posición especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">Un control <see cref="T:System.Windows.Forms.Control" /> que especifica el control con el que está asociado este menú contextual.</param>
        <param name="pos"><see cref="T:System.Drawing.Point" /> que especifica las coordenadas en las que mostrar el menú. Estas coordenadas se especifican respecto a las coordenadas de cliente del control especificado en el parámetro <paramref name="control" />.</param>
        <summary>Muestra el menú contextual en la posición especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, un <xref:System.Windows.Forms.ContextMenu> se muestra cuando el usuario hace clic en el botón secundario del mouse en un control o el área del formulario que el <xref:System.Windows.Forms.ContextMenu> está enlazado. Puede usar este método para mostrar el menú contextual en una ubicación específica manualmente y enlazarlo con un control específico. Este método no devuelve hasta que se descarta el menú.  
  
   
  
## Examples  
 El código siguiente muestra un menú contextual de construir y utilizar el <xref:System.Windows.Forms.ContextMenu.Show%2A> método. Para ejecutar el ejemplo, pegue el código siguiente en un formulario que contenga un botón denominado Button1. Asegúrese de que todos los eventos están asociados a sus métodos de control de eventos.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El identificador del control no existe o el control no está visible.</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="control">Un control <see cref="T:System.Windows.Forms.Control" /> que especifica el control con el que está asociado este menú contextual.</param>
        <param name="pos"><see cref="T:System.Drawing.Point" /> que especifica las coordenadas en las que mostrar el menú. Estas coordenadas se especifican respecto a las coordenadas de cliente del control especificado en el parámetro <paramref name="control" />.</param>
        <param name="alignment"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> que especifica la alineación del control con relación al parámetro <paramref name="pos" />.</param>
        <summary>Muestra el menú contextual en la posición y con la alineación especificadas.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el control que muestra el menú contextual.</summary>
        <value><see cref="T:System.Windows.Forms.Control" /> que representa el control que muestra el menú contextual. Si ningún control ha mostrado el menú contextual, la propiedad devuelve <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite determinar qué control muestra actualmente el menú contextual que se definen en el <xref:System.Windows.Forms.ContextMenu>. Si no se muestra el menú contextual, puede utilizar esta propiedad para determinar qué control mostrado por última vez el menú contextual. Puede usar esta propiedad en el <xref:System.Windows.Forms.ContextMenu.Popup> eventos para asegurarse de que el control muestra los elementos de menú apropiados. También puede utilizar esta propiedad para pasar una referencia al control a un método que realiza las tareas asociadas con un comando de menú que se muestra en el menú contextual. Puesto que la <xref:System.Windows.Forms.Form> clase hereda de <xref:System.Windows.Forms.Control>, también puede utilizar esta propiedad si el <xref:System.Windows.Forms.ContextMenu> está asociado a un formulario.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un controlador de eventos para el <xref:System.Windows.Forms.ContextMenu.Popup> eventos de la <xref:System.Windows.Forms.ContextMenu>. El código en el controlador de eventos determina cuál de los dos controles un <xref:System.Windows.Forms.PictureBox> denominado `pictureBox1` y un <xref:System.Windows.Forms.TextBox> denominado `textBox1` es el control muestra el menú contextual. Dependiendo de qué control que provocó la <xref:System.Windows.Forms.ContextMenu> para mostrar el menú contextual, el control agrega adecuado <xref:System.Windows.Forms.MenuItem> objetos a la <xref:System.Windows.Forms.ContextMenu>. En este ejemplo requiere que tenga una instancia de la <xref:System.Windows.Forms.ContextMenu> clase, denominada `contextMenu1`, que se define dentro del formulario. En este ejemplo también requiere que haya un <xref:System.Windows.Forms.TextBox> y <xref:System.Windows.Forms.PictureBox> agregado a un formulario y que la <xref:System.Windows.Forms.Control.ContextMenu%2A> propiedad de estos controles está establecida en `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>