<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc42707342d636efd4f1d80f491634ecea277faf" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52205790" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa la ventana lógica que contiene una o más instancias de <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> no debe confundirse con el concepto de una ventana de Windows Forms o la API de Win32; No hay ningún `HWND` o recurso similar de Windows que se corresponde directamente con una instancia de <xref:System.Windows.Forms.HtmlWindow>. En su lugar, <xref:System.Windows.Forms.HtmlWindow> proporciona descripciones de alto nivel de la ubicación de un documento en un usuario de la pantalla, así como métodos para interactuar con los usuarios por medio de mensajes y cuadros de diálogo. <xref:System.Windows.Forms.HtmlWindow> actúa como un contenedor lógico para los documentos de una página Web y sus metadatos, como la ubicación del documento y las capacidades del explorador Web.  
  
 Una página consta de un documento de Web o una `FRAMESET` que contiene uno o más `FRAME` elementos, cada uno de los cuales aloja su propio documento. Los desarrolladores Web utilizan conjuntos de marcos para mostrar páginas relacionadas lógicamente en paralelo (por ejemplo, una página de contenido junto a una página de navegación). Cuando una página consta de un único documento, puede tener acceso a él a través de la <xref:System.Windows.Forms.HtmlWindow.Document%2A> propiedad de <xref:System.Windows.Forms.HtmlWindow>; si usa la página de marcos, puede tener acceso a sus documentos a través de la <xref:System.Windows.Forms.HtmlWindow.Frames%2A> colección, que consta de uno o varios <xref:System.Windows.Forms.HtmlWindow> objetos.  
  
 Cuando el host la <xref:System.Windows.Forms.WebBrowser> control en una aplicación Windows Forms, puede elegir interactuar con el usuario mediante las clases de Windows Forms estándares, como <xref:System.Windows.Forms.Form> o <xref:System.Windows.Forms.MessageBox>, o puede usar métodos en <xref:System.Windows.Forms.HtmlWindow> definido para este propósito. El <xref:System.Windows.Forms.HtmlWindow.Alert%2A> método presenta un cuadro de diálogo sencillo con texto personalizado y un **Aceptar** botón; <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> presenta una línea de texto personalizado y un campo de entrada de texto para el usuario; y <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> presenta un cuadro de diálogo con una línea de texto personalizado y **Aceptar** y **cancelar** botones.  
  
 Puede usar <xref:System.Windows.Forms.HtmlWindow> para abrir nuevas ventanas que contienen nuevos documentos. <xref:System.Windows.Forms.HtmlWindow.Open%2A> carga la dirección URL especificada en la ventana con nombre, mientras que crearlo si aún no existe, <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> siempre abre su dirección URL en una ventana recién creada.  
  
   
  
## Examples  
 El siguiente ejemplo de código contiene dos métodos. La primera abre una dirección URL en una ventana denominada `displayWindow`, que crea con una barra de estado muestra. El segundo abre otra dirección URL en la misma ventana, pero especifica que se debe mostrar solo la barra de ubicación. Tenga en cuenta que las dimensiones de la ventana y los controles que se muestran depende en el que se primero abre la dirección URL. El ejemplo de código requiere que el formulario contenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">Objeto de ventana</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">Interfaz IHTMLWindow2</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.String" /> que se muestra en el cuadro de mensaje.</param>
        <summary>Muestra un cuadro de mensaje.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.MessageBox> clase ofrece una versión más eficaz de la <xref:System.Windows.Forms.HtmlWindow.Alert%2A> método.  
  
 Aunque <xref:System.Windows.Forms.HtmlWindow.Alert%2A> acepta texto Unicode como entrada, el mensaje de secuencia de comandos de Internet Explorer no mostrará el texto de idiomas no latinos correctamente en Windows 95, Windows 98, Windows Millennium Edition o Windows NT debido a limitaciones del sistema operativo. Para obtener más información, consulte [INFO: Internet Explorer Script solicita y MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">Alert (método)</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea controlar.</param>
        <param name="eventHandler">Referencia al código administrado que controla el evento.</param>
        <summary>Agrega un controlador de eventos para el evento de DOM de HTML indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No debe adjuntar un evento a un documento HTML o uno de sus objetos hasta que el documento ha completado la carga. Lo antes posible, debe llamar a este método está en el <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos de la <xref:System.Windows.Forms.WebBrowser> control.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListenerx">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> propiedad para determinar si la ventana ya está cerrada. Si la ventana ya está cerrada, este método no tendrá ningún efecto.  
  
 Al crear nuevas ventanas mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> hace que el modelo de objetos de documento HTML abrir una nueva instancia de Internet Explorer. Si no se llama <xref:System.Windows.Forms.HtmlWindow.Close%2A> en todas las ventanas que ha creado, esta instancia de Internet Explorer seguirá ejecutándose incluso después de la aplicación se cierra.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre una ventana y se cierra si el usuario no ha usado en los últimos cinco minutos. El ejemplo de código se escribió con la asunción de que el formulario tiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`, un <xref:System.Windows.Forms.Button> denominado `Button1`y un <xref:System.Windows.Forms.Timer> clase denominada `Timer1`. Para ejecutar este ejemplo correctamente, cambie el primer argumento proporcionado para <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> a una dirección URL válida.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">Close (método)</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Texto que se va a mostrar al usuario.</param>
        <summary>Muestra un cuadro de diálogo con un mensaje y botones para solicitar una respuesta sí/no.</summary>
        <returns>Es <see langword="true" /> si el usuario hizo clic en **Sí**; es <see langword="false" /> si el usuario hizo clic en **No** o cerró el cuadro de diálogo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> muestra un cuadro de diálogo modal; el usuario no podrá tener acceso a la página HTML subyacente sin antes cerrar este cuadro de diálogo.  
  
 Aunque <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> acepta texto Unicode como entrada, el mensaje de secuencia de comandos de Internet Explorer no mostrará el texto de idiomas no latinos correctamente en Windows 95, Windows 98, Windows Millennium Edition o Windows NT debido a limitaciones del sistema operativo. Para obtener más información, consulte [INFO: Internet Explorer Script solicita y MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Copie el código HTML siguiente y guárdelo en un formulario denominado orderForm.htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 El siguiente código de ejemplo se muestra un <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> cuadro de diálogo cuando el usuario envía `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">Confirmar (método)</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea controlar.</param>
        <param name="eventHandler">Referencia al código administrado que controla el evento.</param>
        <summary>Quita el controlador de eventos con nombre.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">Método detachEvent</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el documento HTML incluido en la ventana.</summary>
        <value>Instancia válida de <see cref="T:System.Windows.Forms.HtmlDocument" />, si se carga un documento. Si esta ventana contiene un <c>FRAMESET</c>, o hay cargado ningún documento actualmente, devolverá <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, tendrá acceso a la <xref:System.Windows.Forms.HtmlWindow.Document%2A> a través de la <xref:System.Windows.Forms.WebBrowser.Document%2A> propiedad de la <xref:System.Windows.Forms.WebBrowser> control. Utilice esta propiedad cuando necesite tener acceso a un documento dentro de un `FRAME` utilizando el <xref:System.Windows.Forms.HtmlWindow.Frames%2A> colección.  
  
   
  
## Examples  
 El siguiente ejemplo de código inspecciona cada documento dentro de una página que contiene marcos y crea una tabla de todos los hipervínculos de salida de cada página para inspeccionarlos en el futuro.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la interfaz no administrada contenida por esta clase.</summary>
        <value>Un objeto que se puede convertir en un <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, o <see langword="IHTMLWindow4" /> puntero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice los punteros de interfaz no administrada subyacente a Document Object Model (DOM) para ejecutar métodos no expuestos por <xref:System.Windows.Forms.HtmlWindow>.  
  
 Debe agregar una referencia al MSHTML.dll no administrado para poder usar <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Para obtener más información, consulte [importar una biblioteca de tipos como un ensamblado](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se obtiene un `IHTMLWindow2` puntero desde un documento de la ventana y muestra un nuevo documento en una ventana modal.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">Interfaz IHTMLWindow2</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">Interfaz IHTMLWindow3</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">Interfaz IHTMLWindow4</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">El objeto que se va a probar.</param>
        <summary>Prueba el objeto para ver si es igual que el objeto actual.</summary>
        <returns><see langword="true" /> si los objetos son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el script que se ejecuta dentro de la ventana encuentra un error en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Páginas HTML pueden contener código de script, normalmente escrita en JScript o VBScript, que se ejecuta cuando se carga una página. <xref:System.Windows.Forms.HtmlWindow.Error> se produce siempre que un script encuentra un error en tiempo de ejecución. Dado que el código de script es en tiempo de ejecución, lo que significa que las llamadas en el objeto no se resuelven hasta el tiempo de ejecución, errores pueden incluir todo, desde la que hacen referencia a un objeto null a una propiedad sin definir o un método de llamada.  
  
 Puede establecer el <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> propiedad de <xref:System.Windows.Forms.HtmlElementErrorEventArgs> en true para impedir que se muestre el cuadro de diálogo de error nativo en Internet Explorer.
  
   
  
## Examples  
 El siguiente ejemplo de código intercepta el error que se produce cuando una secuencia de comandos en una página HTML intenta obtener acceso a un objeto que no está definido en el documento. La página debe ser totalmente cargada antes de la <xref:System.Windows.Forms.HtmlWindow.Error> está asociado el controlador de eventos, en caso contrario, el ejemplo no funcionará.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">OnError (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Coloca el foco en la ventana actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si otra ventana mantiene el foco antes <xref:System.Windows.Forms.HtmlWindow.Focus%2A> fue llamado, esa ventana perderá el foco.  
  
 No llame a centrarse en un elemento dentro de una ventana hasta que la ventana <xref:System.Windows.Forms.HtmlWindow.Load> ha generado el evento.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">Focus (método)</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a cada uno de los elementos <c>FRAME</c> definidos dentro de la página web.</summary>
        <value>Un <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> de un documento <c>marco</c> y <c>IFRAME</c> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `FRAME` es un conjunto de ventanas definido dentro de un `FRAMESET`. `FRAME`s permiten hospedar varios documentos en un único documento. Cada `FRAME` está definido con un determinado ancho de fila y columna, y es la posición en la página en relación con los demás `FRAME`s definidos dentro de la `FRAMESET`; la posición de un `FRAME` es fijo, aunque a veces, puede usar el mouse a un usuario cursor para aumentar o reducir el `FRAME`. Un `IFRAME` es similar a un marco, pero no necesita estar delimitado en una posición fija.  
  
 Marcos contendrá una instancia de <xref:System.Windows.Forms.HtmlWindow> para cada `FRAME` o `IFRAME` definidos dentro de una página Web.  
  
   
  
## Examples  
 El siguiente ejemplo de código inspecciona cada documento dentro de una página que contiene marcos y crea una tabla de todos los hipervínculos de salida de cada página para inspeccionarlos en el futuro.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Colección de marcos</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actúa como función hash para un tipo concreto.</summary>
        <returns>Código hash para el objeto <see cref="T:System.Windows.Forms.HtmlWindow" /> actual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la ventana actual recibe el foco de entrada del usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> se producirá por:  
  
-   La primera ventana de un `FRAMESET` cuando el `FRAMESET` carga por primera vez.  
  
-   El `FRAME` que por última vez tenía centrarse cuando la ventana que contiene el <xref:System.Windows.Forms.WebBrowser> control se pone en primer plano.  
  
-   Un `FRAME` donde ha hecho clic el usuario, pero solo si hace clic el usuario no coloca el foco en un elemento dentro de la ventana.  
  
 No se puede cancelar la acción predeterminada para el <xref:System.Windows.Forms.HtmlWindow.GotFocus> evento, o impedir que se propague.
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.GotFocus> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.GotFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">Evento onblur</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que contiene las direcciones URL que el usuario visitó más recientemente.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlHistory" /> de la ventana actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> contiene todas las direcciones URL desplazadas en la ventana actual, que se conoce como el *pila de navegación*y proporciona métodos para retroceder a esos documentos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si esta ventana está abierta o cerrada.</summary>
        <value>Es <see langword="true" /> si la ventana está todavía abierta en la pantalla; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.HtmlWindow> se ha cerrado por el usuario o por medio de una llamada a la <xref:System.Windows.Forms.HtmlWindow.Close%2A> método, al intentar navegar a una nueva dirección URL o tener acceso a documentos de la ventana se producirá un error. Utilice esta propiedad para determinar si es seguro llamar a métodos y propiedades en el objeto de ventana actual.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre una ventana y se cierra si el usuario no ha usado en los últimos cinco minutos. El ejemplo de código requiere que el formulario tiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`, un <xref:System.Windows.Forms.Button> denominado `Button1`y un <xref:System.Windows.Forms.Timer> clase denominada `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Propiedad cerrado</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el documento de la ventana y todos sus elementos terminaron de inicializarse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.HtmlWindow.Load> evento funciona de forma similar a la <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos en el <xref:System.Windows.Forms.WebBrowser> control: indica que es seguro a los elementos de acceso HTML dentro del documento.  
  
 No se puede cancelar la acción predeterminada para el <xref:System.Windows.Forms.HtmlWindow.Load> eventos.
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.Load> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.Load> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">Evento OnLoad</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el foco de entrada del usuario sale de la ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.LostFocus> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.LostFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mueve la ventana a las coordenadas especificadas en la pantalla.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordenadas X e Y de la esquina superior izquierda de la ventana.</param>
        <summary>Mueve la ventana a las coordenadas especificadas en la pantalla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No puede usar <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> para mover una ventana fuera del borde visible de la pantalla; este método también está disponible a través del script en una página Web y no se considera seguro permitir secuencias de comandos que no se confía representar invisible windows.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> se producirá un <xref:System.UnauthorizedAccessException> si la ventana está intentando mover y su ventana primaria tienen diferentes dominios de nivel superior. Por ejemplo, si está hospedando la <xref:System.Windows.Forms.WebBrowser> controlar señalando a a.adatum.com, cree una nueva ventana con <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para mostrar b.adatum.com. En este caso, ambas ventanas se consideran parte del mismo dominio de nivel superior y no se produce la excepción. Sin embargo, si se llama a <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para mostrar OpenNew, las dos ventanas ahora tienen diferentes dominios de nivel superior y el <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operación hará que la excepción que se inicia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">El código que intenta ejecutar esta operación no tiene permiso para manipular esta ventana.</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">moveTo (método)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordenada X de la esquina superior izquierda de la ventana.</param>
        <param name="y">Coordenada Y de la esquina superior izquierda de la ventana.</param>
        <summary>Mueve la ventana a las coordenadas especificadas en la pantalla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No puede usar <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> para mover una ventana fuera del borde visible de la pantalla; este método también está disponible a través del script en una página Web y no se considera seguro permitir secuencias de comandos que no se confía representar invisible windows.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> se producirá un <xref:System.UnauthorizedAccessException> si la ventana está intentando mover y su ventana primaria tienen diferentes dominios de nivel superior. Por ejemplo, si está hospedando la <xref:System.Windows.Forms.WebBrowser> control y está señalando a a.adatum.com, cree una nueva ventana con <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para mostrar b.adatum.com. En este caso, ambas ventanas se consideran parte del mismo dominio de nivel superior y no se produce la excepción. Sin embargo, si se llama a <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para mostrar OpenNew, las dos ventanas ahora tienen diferentes dominios de nivel superior y el <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operación hará que la excepción que se inicia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">El código que intenta ejecutar esta operación no tiene permiso para manipular esta ventana.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de la ventana.</summary>
        <value><see cref="T:System.String" /> que representa el nombre.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">name (Propiedad)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Muestra o descarga el nuevo contenido situado en la dirección URL especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Recurso que se va a mostrar, descrito por un localizador uniforme de recursos.</param>
        <summary>Muestra o descarga el nuevo contenido situado en la dirección URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `url` parámetro señala a una página HTML, se destruirá y se reemplaza con la nueva página de la página actualmente mostrada en la ventana; todas las referencias que contiene la aplicación a los objetos DOM administrados en la página anterior no será válidas. Si `url` apunta a un recurso que no se puede mostrar por Internet Explorer, el usuario se presentará un cuadro de diálogo que pregunta si desea abrir el recurso fuera de la aplicación, guárdela en el disco o cancelar la operación de descarga.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">Método Navigate</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Ubicación, especificada como un <see cref="T:System.Uri" />, del documento o del objeto que se va a mostrar en la ventana actual.</param>
        <summary>Muestra un nuevo documento en la ventana actual.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">El primer objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Comprueba si los dos objetos <see cref="T:System.Windows.Forms.HtmlWindow" /> son iguales.</summary>
        <returns>Es <see langword="true" /> si ambos parámetros son <see langword="null" /> o si ambos elementos tienen la misma interfaz COM subyacente; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las pruebas del operador de igualdad el `IUnknown` punteros de los objetos COM subyacentes ajustados por proporcionado <xref:System.Windows.Forms.HtmlWindow> clases.  
  
 Es el método equivalente para este operador <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">El primer objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Comprueba si dos objetos <see langword="HtmlWindow" /> no son iguales.</summary>
        <returns>Es <see langword="true" /> si uno pero no ambos objetos es <see langword="null" /> o si los punteros COM subyacentes no coinciden; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Muestra un archivo en la ventana con nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">Localizador uniforme de recursos que describe la ubicación del archivo que se va a cargar.</param>
        <param name="target">Nombre de la ventana en la que se va a abrir el recurso. Puede ser un nombre proporcionado por el desarrollador o uno de los valores especiales siguientes: 
 <c>_blank</c>: abre <paramref name="url" /> en una nueva ventana. Funciona igual que una llamada a <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: abre <paramref name="url" /> en la barra Multimedia.  
  
 <c>_parent</c>: abre <paramref name="url" /> en la ventana que creó la ventana actual.  
  
 <c>_search</c>: abre <paramref name="url" /> en la barra de búsqueda.  
  
 <c>_self</c>: abre <paramref name="url" /> en la ventana actual.  
  
 <c>_top</c>: si se llama en una ventana que pertenece a un elemento <c>FRAME</c>, abre <paramref name="url" /> en la ventana que hospeda su <c>FRAMESET</c>. En caso contrario, actúa igual que <c>_self</c>.</param>
        <param name="windowOptions">Cadena separada por comas que se compone de ninguna o alguna de las opciones siguientes bajo la forma <c>nombre=valor</c>. Excepto para las opciones <paramref name="left" />, <c>top</c>, <paramref name="height" /> y <paramref name="width" />, que toman enteros arbitrarios, cada opción acepta <c>yes</c> o <see langword="1" /> y <c>no</c> o <see langword="0" /> como valores válidos.  
  
 <c>channelmode</c>: se usa con la tecnología de canales ya obsoleta de Internet Explorer 4.0. El valor predeterminado es <c>no</c>.  
  
 <c>directories</c>: determina si la ventana debe mostrar botones de navegación de directorios. El valor predeterminado es <c>yes</c>.  
  
 <paramref name="height" />: el alto del área cliente de la ventana, en píxeles. El mínimo es 100; si se intenta abrir una ventana de un tamaño inferior, la ventana se abrirá según los valores predeterminados de Internet Explorer.  
  
 <paramref name="left" />: la posición izquierda (coordenada X) de la ventana con relación a la esquina superior izquierda de la pantalla del usuario, en píxeles. Debe ser un entero positivo.  
  
 <c>location</c>: determina si se debe mostrar la barra de direcciones, que permite a los usuarios dirigir la ventana a una nueva dirección URL. El valor predeterminado es <c>yes</c>.  
  
 <c>menubar</c>: determina si se deben mostrar los menús en la nueva ventana. El valor predeterminado es <c>yes</c>.  
  
 <c>resizable</c>: determina si el usuario puede cambiar el tamaño de la ventana. El valor predeterminado es <c>yes</c>.  
  
 <c>scrollbars</c>: determina si la ventana tiene barras de desplazamiento horizontal y vertical. El valor predeterminado es <c>yes</c>.  
  
 <c>status</c>: determina si la ventana tiene una barra de estado en la parte inferior. El valor predeterminado es <c>yes</c>.  
  
 <c>titlebar</c>: determina si se muestra el título de la página actual. Establecer esta opción en <c>no</c> no tiene ningún efecto en una aplicación administrada; la barra de título aparecerá siempre.  
  
 <c>toolbar</c>: determina si los botones de la barra de herramientas como **Atrás**, **Adelante** y **Detener** son visibles. El valor predeterminado es <c>yes</c>.  
  
 <c>top</c>: la posición superior (coordenada Y) de la ventana con relación a la esquina superior izquierda de la pantalla del usuario, en píxeles. Debe ser un entero positivo.  
  
 <paramref name="width" />: el ancho del área cliente de la ventana, en píxeles. El mínimo es 100; si se intenta abrir una ventana de un tamaño inferior, la ventana se abrirá según los valores predeterminados de Internet Explorer.</param>
        <param name="replaceEntry">Determina si <paramref name="url" /> reemplaza la dirección URL de la ventana actual en el historial de navegación. Afectará al funcionamiento de los métodos de la clase <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Muestra un archivo en la ventana con nombre.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> que representa la nueva ventana o la ventana previamente creada denominada por el parámetro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `target` parámetro puede denominar una ventana que se creó como resultado de una llamada anterior a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. El parámetro también puede señalar a una ventana abierta, haga clic en un hipervínculo (`A` elemento) o un `FORM` elemento que usa el `TARGET` atributo para abrir su dirección URL en una nueva ventana. El siguiente código HTML abrirá una ventana nueva denominada `orderWindow` cuando el usuario hace clic en él:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Si se proporciona ninguna opción para el `windowOptions` parámetro, cualquier opción que no incluida se deshabilita automáticamente. En otras palabras, si solo especifica por medio de `windowOptions` que desea que una barra de estado, a continuación, la barra de menús, barra de herramientas, título, las barras de desplazamiento etc. no se mostrarán a menos que habilite explícitamente ellos por medio de `windowOptions`.  
  
 Si el archivo al que hace referencia `url` es un archivo HTML, archivo de texto u otro tipo de archivo que se puede hospedar en Internet Explorer, se mostrará en la ventana con nombre. Si el archivo no se puede mostrar dentro de Internet Explorer y la ventana denominada por el destino no existe, se abrirá la ventana lo suficiente como para Internet Explorer descargar el recurso; cerrará inmediatamente después.  
  
 Al crear nuevas ventanas mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, hace que el modelo de objetos de documento HTML abrir una nueva instancia de Internet Explorer. Si no se llama <xref:System.Windows.Forms.HtmlWindow.Close%2A> en todas las ventanas que ha creado, esta instancia de Internet Explorer seguirá ejecutándose incluso después de la aplicación se ha cerrado.  
  
 Si usas <xref:System.Windows.Forms.HtmlWindow.Open%2A> para cargar una dirección URL en una ventana existente, `windowOptions` se pasará por alto; la ventana conservará las dimensiones, la apariencia y ubicación de la pantalla proporcionado primero mediante la llamada inicial a <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">Localizador uniforme de recursos que describe la ubicación del archivo que se va a cargar.</param>
        <param name="target">Nombre de la ventana en la que se va a abrir el recurso. Puede ser un nombre proporcionado por el desarrollador o uno de los valores especiales siguientes: 
 <c>_blank</c>: abre <paramref name="url" /> en una nueva ventana. Funciona igual que una llamada a <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: abre <paramref name="url" /> en la barra Multimedia.  
  
 <c>_parent</c>: abre <paramref name="url" /> en la ventana que creó la ventana actual.  
  
 <c>_search</c>: abre <paramref name="url" /> en la barra de búsqueda.  
  
 <c>_self</c>: abre <paramref name="url" /> en la ventana actual.  
  
 <c>_top</c>: si se llama en una ventana que pertenece a un elemento <c>FRAME</c>, abre <paramref name="url" /> en la ventana que hospeda su <c>FRAMESET</c>. En caso contrario, actúa igual que <c>_self</c>.</param>
        <param name="windowOptions">Cadena separada por comas que se compone de ninguna o alguna de las opciones siguientes bajo la forma <c>nombre=valor</c>. Excepto para las opciones <paramref name="left" />, <c>top</c>, <paramref name="height" /> y <paramref name="width" />, que toman enteros arbitrarios, cada opción acepta <c>yes</c> o <see langword="1" /> y <c>no</c> o <see langword="0" /> como valores válidos.  
  
 <c>channelmode</c>: se usa con la tecnología de canales ya obsoleta de Internet Explorer 4.0. El valor predeterminado es <c>no</c>.  
  
 <c>directories</c>: determina si la ventana debe mostrar botones de navegación de directorios. El valor predeterminado es <c>yes</c>.  
  
 <paramref name="height" />: el alto del área cliente de la ventana, en píxeles. El mínimo es 100; si se intenta abrir una ventana de un tamaño inferior, la ventana se abrirá según los valores predeterminados de Internet Explorer.  
  
 <paramref name="left" />: la posición izquierda (coordenada X) de la ventana con relación a la esquina superior izquierda de la pantalla del usuario, en píxeles. Debe ser un entero positivo.  
  
 <c>location</c>: determina si se debe mostrar la barra de direcciones, que permite a los usuarios dirigir la ventana a una nueva dirección URL. El valor predeterminado es <c>yes</c>.  
  
 <c>menubar</c>: determina si se deben mostrar los menús en la nueva ventana. El valor predeterminado es <c>yes</c>.  
  
 <c>resizable</c>: determina si el usuario puede cambiar el tamaño de la ventana. El valor predeterminado es <c>yes</c>.  
  
 <c>scrollbars</c>: determina si la ventana tiene barras de desplazamiento horizontal y vertical. El valor predeterminado es <c>yes</c>.  
  
 <c>status</c>: determina si la ventana tiene una barra de estado en la parte inferior. El valor predeterminado es <c>yes</c>.  
  
 <c>titlebar</c>: determina si se muestra el título de la página actual. Establecer esta opción en <c>no</c> no tiene ningún efecto en una aplicación administrada; la barra de título aparecerá siempre.  
  
 <c>toolbar</c>: determina si los botones de la barra de herramientas como **Atrás**, **Adelante** y **Detener** son visibles. El valor predeterminado es <c>yes</c>.  
  
 <c>top</c>: la posición superior (coordenada Y) de la ventana con relación a la esquina superior izquierda de la pantalla del usuario, en píxeles. Debe ser un entero positivo.  
  
 <paramref name="width" />: el ancho del área cliente de la ventana, en píxeles. El mínimo es 100; si se intenta abrir una ventana de un tamaño inferior, la ventana se abrirá según los valores predeterminados de Internet Explorer.</param>
        <param name="replaceEntry">Determina si <paramref name="url" /> reemplaza la dirección URL de la ventana actual en el historial de navegación. Afectará al funcionamiento de los métodos de la clase <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Muestra un archivo en la ventana con nombre.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> que representa la nueva ventana o la ventana previamente creada denominada por el parámetro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `target` parámetro puede denominar una ventana que se creó como resultado de una llamada anterior a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. El parámetro también puede señalar a una ventana abierta, haga clic en un hipervínculo (`A` elemento) o un `FORM` elemento que usa el `TARGET` atributo para abrir su dirección URL en una nueva ventana. El siguiente código HTML abrirá una ventana nueva denominada `orderWindow` cuando el usuario hace clic en él:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Si se proporciona ninguna opción para el `windowOptions` parámetro, cualquier opción que no incluida se deshabilita automáticamente. En otras palabras, si solo especifica por medio de `windowOptions` que desea que una barra de estado, a continuación, la barra de menús, barra de herramientas, título, las barras de desplazamiento etc. no se mostrarán a menos que habilite explícitamente ellos por medio de `windowOptions`.  
  
 Si el archivo al que hace referencia `url` es un archivo HTML, archivo de texto u otro tipo de archivo que se puede hospedar en Internet Explorer, se mostrará en la ventana con nombre. Si el archivo no se puede mostrar dentro de Internet Explorer y la ventana denominada por el destino no existe, se abrirá la ventana lo suficiente como para Internet Explorer descargar el recurso; cerrará inmediatamente después.  
  
 Al crear nuevas ventanas mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, hace que el modelo de objetos de documento HTML abrir una nueva instancia de Internet Explorer. Si no se llama <xref:System.Windows.Forms.HtmlWindow.Close%2A> en todas las ventanas que ha creado, esta instancia de Internet Explorer seguirá ejecutándose incluso después de la aplicación se ha cerrado.  
  
 Si usas <xref:System.Windows.Forms.HtmlWindow.Open%2A> para cargar una dirección URL en una ventana existente, `windowOptions` se pasará por alto; la ventana conservará las dimensiones, la apariencia y ubicación de la pantalla proporcionado primero mediante la llamada inicial a <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 El siguiente ejemplo de código contiene dos métodos:  
  
-   La primera abre una dirección URL en una ventana denominada `displayWindow`, que crea con una barra de estado muestra.  
  
-   El segundo abre otra dirección URL en la misma ventana, pero especifica que se debe mostrar solo la barra de ubicación.  
  
 Tenga en cuenta que las dimensiones de la ventana y los controles que se muestran depende en el que se primero abre la dirección URL. El ejemplo de código requiere que el formulario contenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Método Open</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a la ventana que abrió la ventana actual.</summary>
        <value>Clase <see cref="T:System.Windows.Forms.HtmlWindow" /> creada mediante una llamada a los métodos <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> o <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />. Si la ventana no se creó usando uno de estos métodos, esta propiedad devuelve <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Muestra un archivo en una ventana nueva.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Localizador uniforme de recursos que describe la ubicación del archivo que se va a cargar.</param>
        <param name="windowOptions">Cadena separada por comas que se compone de ninguna o alguna de las opciones siguientes bajo la forma <c>nombre=valor</c>. Vea <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> para obtener una descripción completa de las opciones válidas.</param>
        <summary>Muestra un archivo en una ventana nueva.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> que representa la ventana nueva.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el archivo al que hace referencia `url` es un archivo HTML, archivo de texto u otro tipo de archivo que se puede hospedar en Internet Explorer, se mostrará en una ventana nueva. Si el archivo no se puede mostrar dentro de Internet Explorer, se abrirá la ventana lo suficiente como para Internet Explorer descargar el recurso; cerrará inmediatamente después.  
  
 Al crear nuevas ventanas mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, hace que el modelo de objetos de documento HTML abrir una nueva instancia de Internet Explorer. Si no se llama <xref:System.Windows.Forms.HtmlWindow.Close%2A> en todas las ventanas que ha creado, esta instancia de Internet Explorer seguirá ejecutándose incluso después de la aplicación se ha cerrado.  
  
 Si desea cargar un documento en una ventana abierta, vea el <xref:System.Windows.Forms.HtmlWindow.Open%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Localizador uniforme de recursos que describe la ubicación del archivo que se va a cargar.</param>
        <param name="windowOptions">Cadena separada por comas que se compone de ninguna o alguna de las opciones siguientes bajo la forma <c>nombre=valor</c>. Vea <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> para obtener una descripción completa de las opciones válidas.</param>
        <summary>Muestra un archivo en una ventana nueva.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> que representa la ventana nueva.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el archivo al que hace referencia `url` es un archivo HTML, archivo de texto u otro tipo de archivo que se puede hospedar en Internet Explorer, se mostrará en una ventana nueva. Si el archivo no se puede mostrar dentro de Internet Explorer, se abrirá la ventana lo suficiente como para Internet Explorer descargar el recurso; cerrará inmediatamente después.  
  
 Al crear nuevas ventanas mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, hace que el modelo de objetos de documento HTML abrir una nueva instancia de Internet Explorer. Si no se llama <xref:System.Windows.Forms.HtmlWindow.Close%2A> en todas las ventanas que ha creado, esta instancia de Internet Explorer seguirá ejecutándose incluso después de la aplicación se ha cerrado.  
  
 Si desea cargar un documento en una ventana abierta, vea el <xref:System.Windows.Forms.HtmlWindow.Open%2A> método.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Método Open</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ventana que reside sobre la actual en una página que contiene marcos.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindow" /> que posee la ventana actual. Si la ventana actual no es un <c>marco</c>, o no se incrustan dentro de un <c>marco</c>, devuelve <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En un documento que contiene fotogramas, cada `FRAME` dentro de un `FRAMESET` actúa como una ventana secundaria independiente en la página. El elemento primario de cada `FRAME` es el `FRAMESET` que contiene el `FRAME`.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">Propiedad primaria</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la posición del área de cliente de la ventana en la pantalla.</summary>
        <value><see cref="T:System.Drawing.Point" /> que describe las coordenadas X e Y de la esquina superior izquierda de la pantalla, en píxeles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Control.Location%2A> propiedad de la <xref:System.Windows.Forms.WebBrowser> el control devuelve la posición del control en relación con la esquina superior izquierda del formulario. Por el contrario, <xref:System.Windows.Forms.HtmlWindow.Position%2A> devolverá la ubicación del área de visualización del documento con respecto a la esquina superior izquierda del monitor del usuario.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se abre una nueva ventana directamente a través de la <xref:System.Windows.Forms.WebBrowser> control en el formulario. El ejemplo de código requiere que el formulario contiene una instancia de la <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Coordenadas de formularios Windows Forms</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">Propiedad screenLeft</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">Propiedad screenTop</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a mostrar al usuario.</param>
        <param name="defaultInputValue">Valor predeterminado que se muestra en el cuadro de texto.</param>
        <summary>Muestra un cuadro de diálogo que presenta un mensaje y un cuadro de texto al usuario.</summary>
        <returns><see cref="T:System.String" /> que representa el texto escrito por el usuario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> Proporciona una manera rápida y fácil de obtener la entrada de texto simple del usuario.  
  
 Aunque <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> acepta texto Unicode como entrada, el mensaje de secuencia de comandos de Internet Explorer no mostrará el texto de idiomas no latinos correctamente en Windows 95, Windows 98, Windows Millennium Edition o Windows NT debido a limitaciones del sistema operativo. Para obtener más información, consulte [INFO: Internet Explorer Script solicita y MBCS/Unicode](https://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Prompt (método)</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita el foco de la ventana actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama en un `FRAME` ventana en un `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> hará que esa ventana pierde el foco, pero no establece automáticamente el foco en otra ventana.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">blur (método)</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario usa el mouse para cambiar las dimensiones de la ventana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.Resize> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.Resize> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">Evento onresize</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cambia el tamaño de la ventana a las dimensiones especificadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size"><see cref="T:System.Drawing.Size" /> que describe el ancho y el alto deseados de la ventana, en píxeles. Debe ser 100 píxeles o más en ambas dimensiones.</param>
        <summary>Cambia el tamaño de la ventana a las dimensiones especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se abre una nueva ventana y cambia su tamaño para rellenar el área de pantalla disponibles.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">La ventana cuyo tamaño está intentando cambiar está en un dominio diferente que su ventana primaria. Esta restricción es parte de la seguridad de scripting entre marcos; para más información, vea [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx) (Seguridad y scripting entre marcos).</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">resizeTo (método)</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Describe el ancho deseado de la ventana, en píxeles. Debe ser de 100 píxeles o más.</param>
        <param name="height">Describe el alto deseado de la ventana, en píxeles. Debe ser de 100 píxeles o más.</param>
        <summary>Cambia el tamaño de la ventana a las dimensiones especificadas.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">La ventana cuyo tamaño está intentando cambiar está en un dominio diferente que su ventana primaria. Esta restricción es parte de la seguridad de scripting entre marcos; para más información, vea [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx) (Seguridad y scripting entre marcos).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario se desplaza por la ventana para ver el texto fuera de la pantalla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.Scroll> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.Scroll> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">onscroll (evento)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Desplaza la ventana a la posición designada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordenadas X e Y, con respecto a la esquina superior izquierda de la ventana actual, a las que debe desplazarse la página.</param>
        <summary>Desplaza la ventana a las coordenadas especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> hará que el documento se desplaza para que las coordenadas especificadas en el documento se encuentran en la esquina superior izquierda de la ventana del documento. Si el documento no es largo o lo bastante ancha como para que esto ocurra, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> se desplazará por el documento, siempre que sea posible en la dirección especificada.  
  
   
  
## Examples  
 El siguiente ejemplo de código se desplaza por el documento para el usuario hace clic en la posición de la coordenada.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">scrollTo (método)</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordenada X, con relación a la esquina superior izquierda de la ventana actual, a la que se debe desplazar la página.</param>
        <param name="y">Coordenada Y, con relación a la esquina superior izquierda de la ventana actual, a la que se debe desplazar la página.</param>
        <summary>Desplaza la ventana a la posición designada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> hará que el documento se desplaza para que las coordenadas especificadas en el documento se encuentran en la esquina superior izquierda de la ventana del documento. Si el documento no es largo o lo bastante ancha como para que esto ocurra, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> se desplazará por el documento, siempre que sea posible en la dirección especificada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tamaño de la ventana actual.</summary>
        <value><see cref="T:System.Drawing.Size" /> que describe el tamaño de la ventana, en píxeles.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto mostrado en la barra de estado de una ventana.</summary>
        <value><see cref="T:System.String" /> que contiene el texto del estado actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.WebBrowser> control no muestra una barra de estado. Cualquier nueva ventana que se abra con la <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> métodos, sin embargo, mostrarán una barra de estado de forma predeterminada.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">Status (propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la página actual se está descargando y está a punto de mostrarse una nueva página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlWindow.Unload> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlWindow> denominado `HtmlWindow1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlWindow.Unload> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">OnUnload (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección URL que corresponde al elemento actual mostrado en la ventana.</summary>
        <value><see cref="T:System.Uri" /> que describe la dirección URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es de sólo lectura. Para navegar a la ventana a un nuevo documento, use el <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento de marco que corresponde a esta ventana.</summary>
        <value>Un <see cref="T:System.Windows.Forms.HtmlElement" /> correspondiente a esta ventana <c>marco</c> elemento. Si esta ventana no es un marco, devuelve <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se recupera un `FRAME` elemento desde el <xref:System.Windows.Forms.HtmlWindow.Frames%2A> colección, devuelve un <xref:System.Windows.Forms.HtmlWindow>. Llame a <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> en este objeto si necesita tener acceso a atributos de subyacente `FRAME` elemento, como el `SRC` atributo.  
  
   
  
## Examples  
 El siguiente código en el ejemplo se compara la `SRC` atributo de fotogramas en un `FRAMESET` a la ubicación actual. Si son diferentes, los fotogramas se restablecen a sus direcciones URL originales.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">No se puede obtener acceso a un <c>marco</c> elementos o la <c>marco</c>del documento si la <c>marco</c> está en una zona diferente a la <c>FRAMESET</c> que contiene él. Para obtener una explicación completa, consulte [About Cross-Frame Scripting and Security](https://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">Propiedad frameElement</related>
      </Docs>
    </Member>
  </Members>
</Type>