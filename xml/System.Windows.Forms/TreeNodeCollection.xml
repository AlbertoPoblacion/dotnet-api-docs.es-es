<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42583182650b03522029801fdf402b5a616c6fba" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650859" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una colección de objetos <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, y <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> métodos permiten agregar y quitar nodos de árbol individuales de la colección.  
  
> [!NOTE]
>  No se admiten la enumeración de la colección y quitar nodos.  
  
 También puede usar el <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos para agregar o quitar todos los nodos de árbol de la colección.  
  
 Las clases no se pueden heredar de la <xref:System.Windows.Forms.TreeNodeCollection> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la información del cliente en un <xref:System.Windows.Forms.TreeView> control. Los nodos de árbol raíz muestran los nombres de cliente y los nodos de árbol secundarios muestran los números de pedido asignados a cada cliente. En este ejemplo, se muestran 1.000 clientes con 15 pedidos. La actualización de la pantalla de la <xref:System.Windows.Forms.TreeView> suprimidas mediante la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> y <xref:System.Windows.Forms.TreeView.EndUpdate%2A> métodos y una espera <xref:System.Windows.Forms.Cursor> se muestra mientras el <xref:System.Windows.Forms.TreeView> se crea y se pinta el <xref:System.Windows.Forms.TreeNode> objetos. Este ejemplo requiere que haya un `Customer` objeto que puede contener una colección de `Order` objetos. También requiere que ha creado una instancia de un <xref:System.Windows.Forms.TreeView> controlar en un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega un nuevo nodo de árbol a la colección.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto de etiqueta que muestra el objeto <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Agrega un nuevo nodo de árbol al final de la actual colección de nodos de árbol con el texto de etiqueta especificado.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> que representa el nodo de árbol que se va a agregar a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 Para quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente, use la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la información del cliente en un <xref:System.Windows.Forms.TreeView> control. Los nodos de árbol raíz muestran los nombres de cliente y los nodos de árbol secundarios muestran los números de pedido asignados a cada cliente. En este ejemplo, se muestran 1.000 clientes con 15 pedidos. La actualización de la pantalla de la <xref:System.Windows.Forms.TreeView> suprimidas mediante la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> y <xref:System.Windows.Forms.TreeView.EndUpdate%2A> métodos y una espera <xref:System.Windows.Forms.Cursor> se muestra mientras el <xref:System.Windows.Forms.TreeView> se crea y se pinta el <xref:System.Windows.Forms.TreeNode> objetos. Este ejemplo requiere que haya un `Customer` objeto que puede contener una colección de `Order` objetos. También requiere que ha creado una instancia de un <xref:System.Windows.Forms.TreeView> controlar en un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se agrega a la colección.</param>
        <summary>Agrega un nodo de árbol anteriormente creado al final de la colección de nodos de árbol.</summary>
        <returns>Valor del índice de base cero del objeto <see cref="T:System.Windows.Forms.TreeNode" /> agregado a la colección de nodos de árbol.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> método le permite agregar creado anteriormente <xref:System.Windows.Forms.TreeNode> objetos hasta el final de la colección de nodos de árbol.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 Para quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente, use la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> puede asignarse a una <xref:System.Windows.Forms.TreeView> control a la vez. Para agregar el nodo de árbol a un nuevo control de vista de árbol, debe quitarlo de la otra vista de árbol en primer lugar o clonarlo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la información del cliente en un <xref:System.Windows.Forms.TreeView> control. Los nodos de árbol raíz muestran los nombres de cliente y los nodos de árbol secundarios muestran los números de pedido asignados a cada cliente. En este ejemplo, se muestran 1.000 clientes con 15 pedidos. La actualización de la pantalla de la <xref:System.Windows.Forms.TreeView> suprimidas mediante la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> y <xref:System.Windows.Forms.TreeView.EndUpdate%2A> métodos y una espera <xref:System.Windows.Forms.Cursor> se muestra mientras el <xref:System.Windows.Forms.TreeView> se crea y se pinta el <xref:System.Windows.Forms.TreeNode> objetos. Este ejemplo requiere que haya un `Customer` objeto que puede contener una colección de `Order` objetos. También requiere que ha creado una instancia de un <xref:System.Windows.Forms.TreeView> controlar en un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El <paramref name="node" /> está asignado actualmente a otro control <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nuevo nodo de árbol con la clave y texto especificados y lo agrega a la colección.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> que se agregó a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imagen especificados y lo agrega a la colección.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> que se agregó a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El `imageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 El nodo de árbol se agrega al final de la colección. También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageKey">Imagen que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imagen especificados y lo agrega a la colección.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> que se agregó a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El nodo de árbol se agrega al final de la colección. También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 El `imageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol.</param>
        <param name="selectedImageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol cuando está en un estado seleccionado.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imágenes especificados y lo agrega a la colección.</summary>
        <returns>Nodo de árbol agregado a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El nodo de árbol se agrega al final de la colección. También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 El `imageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 El `selectedImageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.StateImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageKey">Clave de la imagen que se va a mostrar en el nodo de árbol.</param>
        <param name="selectedImageKey">La clave de la imagen que se va a mostrar cuando el nodo de árbol está seleccionado.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imágenes especificados y lo agrega a la colección.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> que se agregó a la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El nodo de árbol se agrega al final de la colección. También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
 El `imageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 El `selectedImageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.StateImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Matriz de objetos <see cref="T:System.Windows.Forms.TreeNode" /> que representa los nodos de árbol que se van a agregar a la colección.</param>
        <summary>Agrega a la colección una matriz de nodos de árbol anteriormente creados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode> objetos incluidos en el `nodes` matriz se anexan al final de la colección.  
  
 Puede usar el <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> método para agregar rápidamente un grupo de previamente creado <xref:System.Windows.Forms.TreeNode> objetos a la colección en lugar de agregar manualmente cada <xref:System.Windows.Forms.TreeNode> a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> método.  
  
 Para quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente, use la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
   
  
## Examples  
 El siguiente código de ejemplo copias el <xref:System.Windows.Forms.TreeNodeCollection> desde una <xref:System.Windows.Forms.TreeView> a un archivo temporal <xref:System.Array>y, a continuación, agrega el contenido de la matriz a otra <xref:System.Windows.Forms.TreeView> mediante el <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (método). El <xref:System.Windows.Forms.TreeNodeCollection> desde el origen de <xref:System.Windows.Forms.TreeView> se borra con el <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> método. Este ejemplo requiere que haya dos <xref:System.Windows.Forms.TreeView> controla, uno con una colección de <xref:System.Windows.Forms.TreeNode> objetos.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nodes" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodes" /> es el elemento secundario del control <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los nodos de árbol de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para borrar toda la colección de nodos de árbol de una vista de árbol.  
  
 Para quitar un nodo de árbol individual de la colección, utilice el <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> o <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> métodos.  
  
 Para agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección, utilice el <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
   
  
## Examples  
 El siguiente código de ejemplo copias el <xref:System.Windows.Forms.TreeNodeCollection> desde una <xref:System.Windows.Forms.TreeView> a un archivo temporal <xref:System.Array>y, a continuación, agrega el contenido de la matriz a otra <xref:System.Windows.Forms.TreeView> mediante el <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (método). El <xref:System.Windows.Forms.TreeNodeCollection> desde el origen de <xref:System.Windows.Forms.TreeView> se borra con el <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> método. Este ejemplo requiere que haya dos <xref:System.Windows.Forms.TreeView> controla, uno con una colección de <xref:System.Windows.Forms.TreeNode> objetos.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a buscar en la colección.</param>
        <summary>Determina si el nodo de árbol especificado es un miembro de la colección.</summary>
        <returns>
          Es <see langword="true" /> si el objeto <see cref="T:System.Windows.Forms.TreeNode" /> es un miembro de la colección; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite determinar si un <xref:System.Windows.Forms.TreeNode> es un miembro de la colección antes de intentar realizar operaciones en el <xref:System.Windows.Forms.TreeNode>. Puede usar este método para confirmar que un <xref:System.Windows.Forms.TreeNode> se ha agregado a o que sigue siendo un miembro de la colección.  
  
 La cantidad de tiempo que tarda este método es proporcional al tamaño de la colección de nodos, por lo que puede evitar el uso con las colecciones grandes.  
  
 Este método comprueba la igualdad de referencia sólo. No puede utilizarlo para determinar si un nodo equivalente pero diferente se encuentra en la colección.  
  
> [!NOTE]
>  Una implicación del requisito de igualdad de referencia es que no se puede personalizar el comportamiento de este método para los derivados <xref:System.Windows.Forms.TreeNode> tipos invalidando el <xref:System.Object.Equals%2A> método de la <xref:System.Windows.Forms.TreeNode> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se determina si un determinado <xref:System.Windows.Forms.TreeNode> está dentro de un <xref:System.Windows.Forms.TreeNodeCollection>y, a continuación, enumera la colección. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> que tiene un <xref:System.Windows.Forms.TreeNodeCollection> que contiene un <xref:System.Windows.Forms.TreeNode> denominado `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">El nombre del <see cref="T:System.Windows.Forms.TreeNode" /> que se va a buscar.</param>
        <summary>Determina si la colección contiene un nodo de árbol con la clave especificada.</summary>
        <returns>
          Es <see langword="true" /> para indicar que la colección contiene un control <see cref="T:System.Windows.Forms.TreeNode" /> con la clave especificada; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, el <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propiedad devuelve `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Matriz de destino.</param>
        <param name="index">Índice de la matriz de destino donde se inicia el almacenamiento.</param>
        <summary>Copia toda la colección en una matriz existente, en un lugar especificado de la matriz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el número de <xref:System.Windows.Forms.TreeNode> objetos en un <xref:System.Windows.Forms.TreeNodeCollection>, copia el contenido de la colección en una <xref:System.Object> de matriz y muestra una lista de los nodos de árbol en una <xref:System.Windows.Forms.Label> control. Este ejemplo requiere que haya un <xref:System.Windows.Forms.TreeView> con al menos una <xref:System.Windows.Forms.TreeNode> en su <xref:System.Windows.Forms.TreeNodeCollection>y un <xref:System.Windows.Forms.Label> controlar en un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número total de objetos <see cref="T:System.Windows.Forms.TreeNode" /> de la colección.</summary>
        <value>Número total de objetos <see cref="T:System.Windows.Forms.TreeNode" /> de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> propiedad contiene el número de <xref:System.Windows.Forms.TreeNode> objetos asignados a la colección. Puede usar el <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> valor de la propiedad como límite superior de un bucle para recorrer en iteración una colección.  
  
> [!NOTE]
>  Dado que el valor de índice de una colección es un índice basado en cero, se debe restar uno a la variable de bucle. Si no tiene en cuenta, se superarán los límites superiores de la colección y se iniciará un <xref:System.IndexOutOfRangeException> excepción.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el número de <xref:System.Windows.Forms.TreeNode> objetos en un <xref:System.Windows.Forms.TreeNodeCollection>, copia el contenido de la colección en una <xref:System.Object> de matriz y muestra una lista de los nodos de árbol en una <xref:System.Windows.Forms.Label> control. Este ejemplo requiere que haya un <xref:System.Windows.Forms.TreeView> con al menos una <xref:System.Windows.Forms.TreeNode> en su <xref:System.Windows.Forms.TreeNodeCollection>y un <xref:System.Windows.Forms.Label> controlar en un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol que se va a buscar.</param>
        <param name="searchAllChildren">
          Es <see langword="true" /> para buscar nodos secundarios de los nodos de árbol; en caso contrario, es <see langword="false" />.</param>
        <summary>Encuentra los nodos de árbol con clave especificada, opcionalmente los subnodos de búsqueda.</summary>
        <returns>Matriz de objetos <see cref="T:System.Windows.Forms.TreeNode" /> cuya propiedad <see cref="P:System.Windows.Forms.TreeNode.Name" /> coincide con la clave especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, o no hay ninguna coincidencia, la <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propiedad devuelve una matriz vacía`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que se puede utilizar para recorrer en iteración la colección de nodos de árbol.</summary>
        <returns>Control <see cref="T:System.Collections.IEnumerator" /> que representa la colección de nodos de árbol.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se determina si un determinado <xref:System.Windows.Forms.TreeNode> está dentro de un <xref:System.Windows.Forms.TreeNodeCollection>y, a continuación, enumera la colección. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> que tiene un <xref:System.Windows.Forms.TreeNodeCollection> que contiene un <xref:System.Windows.Forms.TreeNode> denominado `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a buscar en la colección.</param>
        <summary>Devuelve el índice del nodo de árbol especificado de la colección.</summary>
        <returns>Índice de base cero del elemento encontrado en la colección de nodos de árbol; en caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cantidad de tiempo que tarda este método es proporcional al tamaño de la colección de nodos, por lo que puede evitar el uso con las colecciones grandes.  
  
 Este método comprueba la igualdad de referencia sólo. No puede utilizarlo para recuperar el índice de un nodo equivalente pero diferente de la colección.  
  
> [!NOTE]
>  Una implicación del requisito de igualdad de referencia es que no se puede personalizar el comportamiento de este método para los derivados <xref:System.Windows.Forms.TreeNode> tipos invalidando el <xref:System.Object.Equals%2A> método de la <xref:System.Windows.Forms.TreeNode> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se determina si un determinado <xref:System.Windows.Forms.TreeNode> está dentro de un <xref:System.Windows.Forms.TreeNodeCollection>y, a continuación, enumera la colección. Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> que tiene un <xref:System.Windows.Forms.TreeNodeCollection> que contiene un <xref:System.Windows.Forms.TreeNode> denominado `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol que se va a buscar.</param>
        <summary>Devuelve el índice de la primera aparición de un nodo de árbol con la clave especificada.</summary>
        <returns>Índice de base cero de la primera aparición del nodo de árbol dentro de la clave especificada, si se encuentra; en caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> es llamar sucesivamente, el último devuelve el índice se va a comprobar para una coincidencia de claves en primer lugar y, si no hay ninguna coincidencia, la búsqueda comienza al principio de la colección.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si `key` es `null` o una cadena vacía, el <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propiedad devuelve -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inserta un elemento en la colección en la ubicación especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con el texto especificado y lo inserta en el índice especificado.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación indizada de la colección donde se va a insertar el nodo de árbol.</param>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a insertar en la colección.</param>
        <summary>Inserta un nodo de árbol existente en la ubicación especificada de la colección de nodos de árbol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 Para quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente, use la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> puede asignarse a una <xref:System.Windows.Forms.TreeView> control a la vez. Para agregar el nodo de árbol a un nuevo control de vista de árbol, debe quitarlo de la otra vista de árbol en primer lugar o clonarlo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se quita el nodo de árbol seleccionado de uno <xref:System.Windows.Forms.TreeView> y lo agrega a otro si ambas colecciones de nodos de árbol no son de solo lectura. Cuando un <xref:System.Windows.Forms.Button> se hace clic, el <xref:System.Windows.Forms.TreeNode> representado por la <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propiedad se elimina de una <xref:System.Windows.Forms.TreeView> mediante la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (método) y se agrega a la otra <xref:System.Windows.Forms.TreeView> mediante el <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (método). Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> que contiene dos <xref:System.Windows.Forms.TreeView> controles y <xref:System.Windows.Forms.Button>. El <xref:System.Windows.Forms.TreeView> controles deben denominarse `treeView1` y `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El <paramref name="node" /> está asignado actualmente a otro control <see cref="T:System.Windows.Forms.TreeView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con el texto y clave especificados y lo inserta en la colección.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imagen especificados y lo inserta en la colección en el índice especificado.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El `imageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageKey">Clave de la imagen que se va a mostrar en el nodo de árbol.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imagen especificados y lo inserta en la colección en el índice especificado.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El `imageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol.</param>
        <param name="selectedImageIndex">Índice de la imagen que se va a mostrar en el nodo de árbol cuando está en un estado seleccionado.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imágenes especificados y lo inserta en la colección en el índice especificado.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El `imageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 El `selectedimageIndex` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.StateImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la colección donde se va a insertar el nodo.</param>
        <param name="key">Nombre del nodo de árbol.</param>
        <param name="text">Texto que se va a mostrar en el nodo de árbol.</param>
        <param name="imageKey">Clave de la imagen que se va a mostrar en el nodo de árbol.</param>
        <param name="selectedImageKey">Clave de la imagen que se va a mostrar en el nodo de árbol cuando está en un estado seleccionado.</param>
        <summary>Crea un nodo de árbol con la clave, texto e imágenes especificados y lo inserta en la colección en el índice especificado.</summary>
        <returns>Control <see cref="T:System.Windows.Forms.TreeNode" /> insertado en la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` se omite el valor del parámetro. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Windows.Forms.TreeView> se vuelve a ordenar.  
  
 También puede agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección utilizando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> métodos.  
  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 El `imageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.ImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 El `selectedimageKey` parámetro hace referencia a una imagen en el <xref:System.Windows.Forms.TreeView.StateImageList%2A> propiedad del elemento primario <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
        <value>
          <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se quita el nodo de árbol seleccionado de uno <xref:System.Windows.Forms.TreeView> y lo agrega a otro si ambas colecciones de nodos de árbol no son de solo lectura. Cuando un <xref:System.Windows.Forms.Button> se hace clic, el <xref:System.Windows.Forms.TreeNode> representado por la <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propiedad se elimina de una <xref:System.Windows.Forms.TreeView> mediante la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (método) y se agrega a la otra <xref:System.Windows.Forms.TreeView> mediante el <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (método). Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> que contiene dos <xref:System.Windows.Forms.TreeView> controles y <xref:System.Windows.Forms.Button>. El <xref:System.Windows.Forms.TreeView> controles deben denominarse `treeView1` y `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene o establece un nodo de árbol dentro de la colección.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación indizada del control <see cref="T:System.Windows.Forms.TreeNode" /> en la colección.</param>
        <summary>Obtiene o establece el control <see cref="T:System.Windows.Forms.TreeNode" /> en la ubicación indizada especificada en la colección.</summary>
        <value>Objeto <see cref="T:System.Windows.Forms.TreeNode" /> que se encuentra en la ubicación indizada especificada de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para asignar <xref:System.Windows.Forms.TreeNode> objetos en una ubicación específica o para recuperarlos desde el <xref:System.Windows.Forms.TreeNodeCollection>, hacer referencia al objeto de colección con un valor de índice específico. El valor de índice de la <xref:System.Windows.Forms.TreeNodeCollection> es un índice de base cero.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se quita la primera <xref:System.Windows.Forms.TreeNode> desde una <xref:System.Windows.Forms.TreeView> si su <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> propiedad está establecida en "Node0". Cuando un <xref:System.Windows.Forms.Button> se hace clic, la primera <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeView> se elimina mediante el <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> método. Este ejemplo requiere que se haya creado un <xref:System.Windows.Forms.TreeView> y un <xref:System.Windows.Forms.Button> en un <xref:System.Windows.Forms.Form>. La primera <xref:System.Windows.Forms.TreeNode> en su <xref:System.Windows.Forms.TreeView> deben tener una propiedad de texto de "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> es menor que 0 o mayor que el número de nodos de árbol de la colección.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del control <see cref="T:System.Windows.Forms.TreeNode" /> que se va a recuperar de la colección.</param>
        <summary>Obtiene el nodo de árbol con la clave especificada de la colección.</summary>
        <value>El objeto <see cref="T:System.Windows.Forms.TreeNode" /> con la clave especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, el <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propiedad devuelve `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a quitar.</param>
        <summary>Quita el nodo de árbol especificado de la colección de nodos de árbol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.TreeNode> se quita de la colección de nodos de árbol, todos los árboles posteriores nodos se mueven hacia arriba una posición en la colección.  
  
 También puede quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente mediante el uso de la <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
> [!NOTE]
>  No se admiten la enumeración de la colección y quitar nodos.  
  
 Para agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección, utilice el <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se quita el nodo de árbol seleccionado de uno <xref:System.Windows.Forms.TreeView> y lo agrega a otro si ambas colecciones de nodos de árbol no son de solo lectura. Cuando un <xref:System.Windows.Forms.Button> se hace clic, el <xref:System.Windows.Forms.TreeNode> representado por la <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propiedad se elimina de una <xref:System.Windows.Forms.TreeView> mediante la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (método) y se agrega a la otra <xref:System.Windows.Forms.TreeView> mediante el <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (método). Este ejemplo requiere que haya un <xref:System.Windows.Forms.Form> que contiene dos <xref:System.Windows.Forms.TreeView> controles y <xref:System.Windows.Forms.Button>. El <xref:System.Windows.Forms.TreeView> controles deben denominarse `treeView1` y `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del objeto <see cref="T:System.Windows.Forms.TreeNode" /> que se va a quitar.</param>
        <summary>Quita un nodo de árbol de la colección de nodos de árbol en el índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.TreeNode> se quita de la colección de nodos de árbol, todos los árboles posteriores nodos se mueven hacia arriba una posición en la colección.  
  
 También puede quitar un <xref:System.Windows.Forms.TreeNode> que agregó anteriormente mediante el uso de la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> métodos.  
  
> [!NOTE]
>  No se admiten la enumeración de la colección y quitar nodos.  
  
 Para agregar nuevos <xref:System.Windows.Forms.TreeNode> objetos a la colección, utilice el <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> métodos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se quita la primera <xref:System.Windows.Forms.TreeNode> desde una <xref:System.Windows.Forms.TreeView> si su <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> propiedad está establecida en "Node0". Cuando un <xref:System.Windows.Forms.Button> se hace clic, la primera <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeView> se elimina mediante el <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> método. Este ejemplo requiere que se haya creado un <xref:System.Windows.Forms.TreeView> y un <xref:System.Windows.Forms.Button> en un <xref:System.Windows.Forms.Form>. La primera <xref:System.Windows.Forms.TreeNode> en su <xref:System.Windows.Forms.TreeView> deben tener una propiedad de texto de "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nombre del nodo de árbol que se quitará de la colección.</param>
        <summary>Quita el nodo de árbol con la clave especificada de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TreeNode.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.TreeNode> en el <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
        <value>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Objeto que se va a agregar a la colección de nodos de árbol.</param>
        <summary>Agrega un objeto al final de la colección de nodos de árbol.</summary>
        <returns>Valor del índice de base cero del objeto <see cref="T:System.Windows.Forms.TreeNode" /> agregado a la colección de nodos de árbol.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` no es un <xref:System.Windows.Forms.TreeNodeCollection>, <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A> método utilizará la cadena devuelta por la <xref:System.Windows.Forms.TreeNode.ToString%2A> método de la <xref:System.Windows.Forms.TreeNode> clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="node" /> está asignado actualmente a otro control <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="node" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Objeto que se va a buscar en la colección.</param>
        <summary>Determina si el nodo de árbol especificado es un miembro de la colección.</summary>
        <returns>
          Es <see langword="true" /> si <paramref name="node" /> es un miembro de la colección; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` no es un <xref:System.Windows.Forms.TreeNode>, <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A> método `false`. Por lo tanto, no puede pasar una cadena para determinar si la colección contiene un nodo que tiene el valor de la cadena como su <xref:System.Windows.Forms.TreeNode.Text%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a buscar en la colección.</param>
        <summary>Devuelve el índice del nodo de árbol especificado de la colección.</summary>
        <returns>Índice de base cero del elemento encontrado en la colección de nodos de árbol; en caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` no es un <xref:System.Windows.Forms.TreeNode>, el <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A> método devuelve -1. Por lo tanto, no puede pasar una cadena para buscar el nodo que tiene el valor de la cadena como su <xref:System.Windows.Forms.TreeNode.Text%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación indizada de la colección donde se va a insertar el nodo de árbol.</param>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a insertar en la colección.</param>
        <summary>Inserta un nodo de árbol existente en la ubicación especificada de la colección de nodos de árbol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.TreeView.Sorted%2A> propiedad está establecida en `true`, el `index` parámetro se ignora. El <xref:System.Windows.Forms.TreeNode> se inserta en la vista de árbol y <xref:System.Web.UI.WebControls.TreeView> se vuelve a ordenar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> está asignado actualmente a otro control <see cref="T:System.Windows.Forms.TreeView" />.  
  
 O bien  
  
 <paramref name="node" /> no es un <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la colección de nodos de árbol tiene un tamaño fijo.</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero donde se obtiene o se establece el elemento.</param>
        <summary>Obtiene o establece el nodo del árbol en el índice especificado de la colección.</summary>
        <value>Control <see cref="T:System.Windows.Forms.TreeNode" /> en el índice especificado en <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El conjunto de valores no es un control <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> que se va a quitar de la colección.</param>
        <summary>Quita el nodo de árbol especificado de la colección de nodos de árbol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede pasar una cadena para quitar el nodo que tiene el valor de la cadena como su <xref:System.Windows.Forms.TreeNode.Text%2A> propiedad.  
  
 Cuando un <xref:System.Windows.Forms.TreeNode> se quita de la colección de nodos de árbol, todos los árboles posteriores nodos se mueven hacia arriba una posición en la colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>