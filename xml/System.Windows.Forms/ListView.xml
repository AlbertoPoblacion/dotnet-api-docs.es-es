<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48abdad84545b1f08adb5ce8c31cae031c876452" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un control de vista de lista de Windows, el cual muestra una colección de elementos que se pueden ver mediante una de cuatro vistas distintas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.ListView> control le permite mostrar una lista de elementos con el texto del elemento y, opcionalmente, un icono para identificar el tipo de elemento. Por ejemplo, la lista del explorador de Windows de archivos es similar en aspecto a un <xref:System.Windows.Forms.ListView> control. Muestra una lista de los archivos y carpetas seleccionadas actualmente en el árbol. Cada archivo y carpeta muestran un icono asociado para ayudar a identificar el tipo de archivo o carpeta. El <xref:System.Windows.Forms.ListViewItem> clase representa un elemento dentro de un <xref:System.Windows.Forms.ListView> control. Los elementos que se muestran en la lista se pueden mostrar en una de cinco vistas diferentes. Los elementos se pueden mostrar como iconos grandes, como iconos pequeños o como iconos pequeños en una lista vertical. Elementos también pueden tener subelementos que contienen información relacionada con el elemento primario. La vista de detalles permite mostrar el elemento y sus subelementos en una cuadrícula con encabezados de columna que identifican la información mostrada en un subelemento. La vista en mosaico, que tiene una disponibilidad limitada tal y como se describe a continuación, puede mostrar el elemento y sus subelementos como un icono que contiene un icono grande junto a la información de texto. <xref:System.Windows.Forms.ListView> admite la selección única o múltiple. La característica de selección múltiple permite al usuario seleccionar de una lista de elementos de forma similar a un <xref:System.Windows.Forms.ListBox> control. Además, el usuario puede activar elementos seleccionados para llevar a cabo una tarea. Por ejemplo, podría usar un <xref:System.Windows.Forms.ListView> control para mostrar una lista de archivos que la aplicación puede abrir y usar. El usuario puede seleccionar los archivos para abrir y, a continuación, haga doble clic en ellos para activar los elementos y abrir los archivos en la aplicación. El <xref:System.Windows.Forms.ListView> también puede mostrar casillas, mediante la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad para permitir al usuario comprobar los elementos que desea realizar una acción en. Puede usar el <xref:System.Windows.Forms.ListView> control en una variedad de formas. El control puede utilizarse para mostrar información de una aplicación, una base de datos o un archivo de texto. El <xref:System.Windows.Forms.ListView> también puede utilizarse para obtener información del usuario, como la selección de un conjunto de archivos que se va a procesar.  
  
 <xref:System.Windows.Forms.ListView> Proporciona un gran número de propiedades que proporcionan flexibilidad en apariencia y comportamiento. El <xref:System.Windows.Forms.ListView.View%2A> propiedad le permite cambiar la manera en que se muestran los elementos. El <xref:System.Windows.Forms.ListView.LargeImageList%2A>, <xref:System.Windows.Forms.ListView.SmallImageList%2A>, y <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedades permiten especificar el <xref:System.Windows.Forms.ImageList> objetos que contienen las imágenes mostradas para los elementos y, en el caso de la <xref:System.Windows.Forms.ListView.StateImageList%2A>, las casillas de verificación que sean que se muestran cuando el <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad está establecida en `true`. Para determinar qué elementos están activados, puede utilizar el <xref:System.Windows.Forms.ListView.CheckedItems%2A> propiedad para tener acceso a la <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection> colección. El <xref:System.Windows.Forms.ListView.Columns%2A> propiedad permite obtener acceso a la <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>, que almacena los encabezados de columna que se muestra cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad del control se establece en <xref:System.Windows.Forms.View.Details>. Los elementos se agregan y se quitan de la <xref:System.Windows.Forms.ListView> a través de la <xref:System.Windows.Forms.ListView.Items%2A> propiedad. El <xref:System.Windows.Forms.ListView.Items%2A> propiedad permite obtener acceso a la <xref:System.Windows.Forms.ListView.ListViewItemCollection> del control, que proporciona métodos para manipular los elementos en el control. Si desea permitir al usuario modificar el texto de un elemento, puede usar el <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad. Cuando el control contiene un gran número de elementos, a menudo resulta más fácil para el usuario verlos en una lista ordenada. Puede usar el <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad para ordenar alfabéticamente los elementos. Puede personalizar completamente el aspecto de un <xref:System.Windows.Forms.ListView> control. Para ello, establezca la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad `true` y administrar uno o varios de los siguientes eventos: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>.  
  
 Muchas de las propiedades de la <xref:System.Windows.Forms.ListView> control son se usa cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad del control se establece en <xref:System.Windows.Forms.View.Details>. El <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> propiedad permite al usuario de su <xref:System.Windows.Forms.ListView> control para volver a configurar el orden de columnas en tiempo de ejecución. El <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propiedad permite a un elemento y sus subelementos para seleccionarse en lugar de simplemente el elemento. Para mostrar las líneas de cuadrícula en la vista de detalles que identifiquen los límites de los elementos y subelementos en el <xref:System.Windows.Forms.ListView>, puede usar el <xref:System.Windows.Forms.ListView.GridLines%2A> propiedad. El <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad le permite especificar el tipo de encabezados de columna para mostrar.  
  
 A <xref:System.Windows.Forms.ListView> control puede funcionar en modo virtual, donde <xref:System.Windows.Forms.ListViewItem> objetos se generan dinámicamente en lugar de almacenarse en el <xref:System.Windows.Forms.ListView.Items%2A> colección. Esto puede ser útil para trabajar con listas muy grandes o cuyo contenido se cambia con frecuencia. Para habilitar el modo Virtual, establezca la <xref:System.Windows.Forms.ListView.VirtualMode%2A> propiedad `true` y controlar la <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>, <xref:System.Windows.Forms.ListView.CacheVirtualItems>, y <xref:System.Windows.Forms.ListView.SearchForVirtualItem> eventos.  
  
 Además de las numerosas propiedades que están disponibles para un <xref:System.Windows.Forms.ListView> controlar, existen métodos y eventos que la aplicación puede usar para proporcionar funcionalidades adicionales para el <xref:System.Windows.Forms.ListView>. El <xref:System.Windows.Forms.ListView.BeginUpdate%2A> y <xref:System.Windows.Forms.ListView.EndUpdate%2A> métodos permiten mejorar el rendimiento cuando se agregan varios elementos a un <xref:System.Windows.Forms.ListView> al impedir que el control vuelva a dibujar cada vez que se agrega un elemento. Si su <xref:System.Windows.Forms.ListView> control muestra elementos y subelementos, es aconsejable proporcionar alguna funcionalidad cuando el usuario seleccione un subelemento. Para determinar el elemento que se va a hacer clic en cuyo subelemento, puede usar el <xref:System.Windows.Forms.ListView.GetItemAt%2A> método. Al realizar la validación de los elementos después de que el usuario ha editado, desea mostrar un elemento específico al usuario a cambiar. El <xref:System.Windows.Forms.ListView.EnsureVisible%2A> método puede llamarse para garantizar que el elemento específico en el área visible del control.  
  
 Si el <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad establecida en `true`, puede realizar tareas como la validación del texto editado antes y después del texto cambiado mediante la creación de un controlador de eventos para el <xref:System.Windows.Forms.ListView.BeforeLabelEdit> y <xref:System.Windows.Forms.ListView.AfterLabelEdit> eventos. Para realizar tareas como la apertura de un archivo o mostrar un cuadro de diálogo para editar un elemento mostrado en un <xref:System.Windows.Forms.ListView>, puede crear un controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemActivate> eventos. Si permite que el usuario ordenar los elementos de un <xref:System.Windows.Forms.ListView> cuando hagan clic en un encabezado de columna, puede crear un controlador de eventos para el <xref:System.Windows.Forms.ListView.ColumnClick> eventos para realizar la ordenación. Cuando el <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad está establecida en `true`, puede determinar cuándo se ha producido un cambio en el estado de activación de un elemento controlando el <xref:System.Windows.Forms.ListView.ItemCheck> eventos.  
  
 También puede establecer una imagen de fondo para el <xref:System.Windows.Forms.ListView> con el <xref:System.Windows.Forms.Control.BackgroundImage%2A> propiedad. La aplicación debe tener la <xref:System.STAThreadAttribute> en su `Main` método para mostrar correctamente la imagen de fondo para el <xref:System.Windows.Forms.ListView> control. Además, si un <xref:System.Windows.Forms.ListView> control con una imagen de fondo se hospeda en Internet Explorer, especifique la versión 6.0 de comctl32.dll como un ensamblado dependiente en el archivo de manifiesto de aplicación para garantizar que la imagen de fondo se muestran.  
  
> [!NOTE]
>  Establecer el <xref:System.Windows.Forms.Control.Cursor%2A> propiedad para un <xref:System.Windows.Forms.ListView> control no tiene ningún efecto en la apariencia del cursor en [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] las versiones 1.1 y anteriores.  
  
 Windows XP y Windows Server 2003 proporcionan tres características que mejoran la <xref:System.Windows.Forms.ListView> controlar cuando la aplicación llama el <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método: vista en mosaico, agrupación y la marca de inserción.  
  
 La vista en mosaico permite equilibrar la información gráfica y textual mostrando texto de elemento y subelemento junto a iconos grandes. Establecer el <xref:System.Windows.Forms.ListView.View%2A> propiedad <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType> para habilitar este comportamiento.  
  
 La característica de agrupación permite agrupar visualmente los elementos en categorías relacionadas. Use la <xref:System.Windows.Forms.ListView.Groups%2A> propiedad que se va a agregar <xref:System.Windows.Forms.ListViewGroup> objetos a la <xref:System.Windows.Forms.ListView> controlar si desea habilitar esta característica. Para deshabilitar temporalmente la característica, establezca el <xref:System.Windows.Forms.ListView.ShowGroups%2A> propiedad `false`.  
  
 La característica de marca de inserción permite proporcionar el cambio de posición de elemento de arrastrar y colocar con información visual para indicar las ubicaciones de destino. Use la <xref:System.Windows.Forms.ListViewInsertionMark> objeto recuperar a través de la <xref:System.Windows.Forms.ListView.InsertionMark%2A> propiedad que se va a mostrar la marca de inserción.  
  
 Estas características solo están disponibles en Windows XP y Windows Server 2003. En sistemas operativos anteriores, el código que se relacionan con estas características no tiene ningún efecto, la vista en mosaico aparece como la vista de iconos grandes y la marca de inserción y grupos no se muestran. En algunos casos, podría desea incluir código que determina si estas características están disponibles y proporcionar una funcionalidad alternativa cuando no están disponibles. Estas características son proporcionadas por la misma biblioteca que proporciona la característica de temas del sistema operativo. Para comprobar la disponibilidad de esta biblioteca, llame a la <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> sobrecarga del método y pase la <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valor.  
  
 La tabla siguiente muestran algunos de los <xref:System.Windows.Forms.ListView> miembros y las vistas que son válidos.  
  
|Miembro de ListView|Ver|  
|---------------------|----------|  
|Propiedad <xref:System.Windows.Forms.ListView.Alignment%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Propiedad <xref:System.Windows.Forms.ListView.AutoArrange%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Método <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propiedad <xref:System.Windows.Forms.ListView.Columns%2A>|<xref:System.Windows.Forms.View.Details> o <xref:System.Windows.Forms.View.Tile>|  
|Evento <xref:System.Windows.Forms.ListView.DrawSubItem>|<xref:System.Windows.Forms.View.Details>|  
|Método <xref:System.Windows.Forms.ListView.FindItemWithText%2A>|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>o <xref:System.Windows.Forms.View.Tile>|  
|Método <xref:System.Windows.Forms.ListView.FindNearestItem%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Método <xref:System.Windows.Forms.ListView.GetItemAt%2A>|<xref:System.Windows.Forms.View.Details> o <xref:System.Windows.Forms.View.Tile>|  
|Propiedad <xref:System.Windows.Forms.ListView.Groups%2A>|Todas las vistas excepto <xref:System.Windows.Forms.View.List>|  
|Propiedad <xref:System.Windows.Forms.ListView.HeaderStyle%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propiedad <xref:System.Windows.Forms.ListView.InsertionMark%2A>|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>o <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de acción que el usuario debe llevar a cabo para activar un elemento.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.ItemActivation" />. El valor predeterminado es <see cref="F:System.Windows.Forms.ItemActivation.Standard" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.Activation%2A> propiedad le permite especificar cómo activará el usuario a un elemento en el <xref:System.Windows.Forms.ListView> control. Activación de un elemento en un <xref:System.Windows.Forms.ListView> difiere de seleccionar simplemente un elemento. Cuando se activa un elemento, normalmente se realiza una acción en un controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemActivate> eventos. Por ejemplo, cuando se activa un elemento podría abrir un archivo o mostrar un cuadro de diálogo que permite que el elemento que se pueda editar. Normalmente, se hace doble clic un elemento por el usuario para activarla. Si el <xref:System.Windows.Forms.ListView.Activation%2A> propiedad está establecida en <xref:System.Windows.Forms.ItemActivation.OneClick>, haga clic en el elemento una vez, se activa. Establecer el <xref:System.Windows.Forms.ListView.Activation%2A> propiedad <xref:System.Windows.Forms.ItemActivation.TwoClick> difiere del doble clic estándar porque los dos clics pueden tener cualquier duración entre ellos.  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.ListView.Activation%2A> propiedad está establecida en <xref:System.Windows.Forms.ItemActivation.OneClick> o <xref:System.Windows.Forms.ItemActivation.TwoClick>, edición de etiquetas no se permitirán independientemente del valor de la <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los miembros de <see cref="T:System.Windows.Forms.ItemActivation" />.</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario edita la etiqueta de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.AfterLabelEdit> evento tiene lugar cuando el usuario termina de modificar el texto de un elemento. La nueva cadena que el usuario escribe para el elemento se pasa al evento y el controlador de eventos puede rechazar el cambio. Si el controlador de eventos rechaza el cambio, el texto vuelve al texto tal como estaba antes de que el usuario empezara a editar el elemento.  
  
> [!NOTE]
>  Dado que la <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> eventos se lleva a cabo antes de la edición de la etiqueta se confirma, una llamada a la <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> método en un controlador para este evento ordenará el elemento utilizando el valor original.  
  
 En orden para el <xref:System.Windows.Forms.ListView.AfterLabelEdit> evento, el <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad de la <xref:System.Windows.Forms.ListView> control debe establecerse en `true`.  
  
 Puede crear un controlador de eventos para el <xref:System.Windows.Forms.ListView.BeforeLabelEdit> eventos para realizar tareas antes de que el usuario edita el texto de un elemento.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.AfterLabelEdit> eventos para restringir una etiqueta recién editada a los caracteres del alfabeto. El ejemplo se utiliza la <xref:System.Text.ASCIIEncoding> clase para obtener el código de carácter ASCII de cada carácter de la nueva etiqueta. Si el carácter está comprendido entre los códigos ASCII que representan números, no se puede aplicar la nueva etiqueta para el elemento. Este ejemplo requiere que se haya creado un <xref:System.Windows.Forms.ListView> control en un formulario y los elementos agregados a él. El ejemplo también requiere que se haya conectado la <xref:System.Windows.Forms.ListView.AfterLabelEdit> evento al controlador de eventos definido en el código de ejemplo. Para poder usar el <xref:System.Text.ASCIIEncoding> (clase), el archivo debe incluir la <xref:System.Text> espacio de nombres.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la alineación de los elementos del control.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.ListViewAlignment" />. El valor predeterminado es <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad solo afecta a la alineación cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon> o <xref:System.Windows.Forms.View.SmallIcon>.  
  
> [!NOTE]
>  Esta propiedad no tiene ningún efecto con el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.List>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.ListViewAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el usuario puede arrastrar encabezados de columna para reordenar las columnas del control.</summary>
        <value>
          Es <see langword="true" /> si se permite la reordenación de columnas mediante operaciones de arrastrar y colocar; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el valor de la <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> propiedad no tiene ningún efecto a menos que la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details>. Puede utilizar esta propiedad para permitir a los usuarios cambiar la posición de las columnas en el control en tiempo de ejecución. Cuando el <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> propiedad está establecida en `true`, los usuarios pueden colocar las columnas en el control para mostrar el elemento y sus subelementos de forma que satisfaga sus necesidades dentro de la aplicación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Organiza los elementos del control cuando se muestran como iconos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Organiza los elementos del control cuando se muestran como iconos, de acuerdo con el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.Alignment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método sólo es útil cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon> o <xref:System.Windows.Forms.View.SmallIcon>. Llamar a esta versión de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método organiza los elementos en función del valor de la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad. Para hacer que los elementos estén alineados en función de un valor que es distinto de la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad, utilice la otra versión de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">Uno de los valores de <see cref="T:System.Windows.Forms.ListViewAlignment" />.</param>
        <summary>Organiza los elementos del control cuando se muestran como iconos, con un valor de alineación especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método sólo es útil cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon> o <xref:System.Windows.Forms.View.SmallIcon>. Esta versión de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método organiza los iconos en el <xref:System.Windows.Forms.ListView> tomando como base la <xref:System.Windows.Forms.ListViewAlignment> valor especificado en el `value` parámetro. Llamar a este método no cambia el valor de la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad del control. Este método se utiliza para organizar los iconos en el control con un valor diferente de la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad. Para hacer que los elementos estén alineados en función del valor de la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad, utilice la otra versión de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor especificado en el parámetro <paramref name="value" /> no es un miembro de la enumeración <see cref="T:System.Windows.Forms.ListViewAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si los iconos se mantienen organizados automáticamente.</summary>
        <value>
          Es <see langword="true" /> si los iconos se mantienen organizados automáticamente y ajustados a la cuadrícula; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.AutoArrange%2A> propiedad sólo organiza los elementos en el <xref:System.Windows.Forms.ListView> controlar cuándo el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon> o <xref:System.Windows.Forms.View.SmallIcon>. Para cambiar la alineación de los elementos de la <xref:System.Windows.Forms.ListView> de control, use la <xref:System.Windows.Forms.ListView.Alignment%2A> propiedad. Puede usar <xref:System.Windows.Forms.ListView.AutoArrange%2A> para asegurarse de que todos los elementos de su <xref:System.Windows.Forms.ListView> control se organizan automáticamente para evitar la superposición en tiempo de ejecución.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">Índice de base cero de la columna cuyo ancho se va a cambiar.</param>
        <param name="headerAutoResize">Uno de los valores de <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</param>
        <summary>Cambia el ancho de la columna dada según lo indicado en el estilo de cambio de tamaño.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método solo es efectivo una vez el <xref:System.Windows.Forms.ListView> y que contiene <xref:System.Windows.Forms.Form> construidos y el <xref:System.Windows.Forms.ListView> columnas y encabezados de columna se rellenan con elementos. Si se agregan nuevos elementos a la <xref:System.Windows.Forms.ListView>, las columnas no cambiará de tamaño a menos que <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> se llama de nuevo.  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa un <xref:System.Windows.Forms.ListView> en la vista de detalle y automáticamente cambia el tamaño de las columnas utilizando la <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> método. Para ejecutar este ejemplo, pegue este código en un formulario Windows Forms y llame a la `InitializeResizingListView` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> es mayor que 0 cuando <see cref="P:System.Windows.Forms.ListView.Columns" /> es <see langword="null" />  
  
 O bien  
  
 <paramref name="columnIndex" /> es menor que 0 o mayor que el número de columnas establecido.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> no es un miembro de la enumeración <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">Uno de los valores de <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</param>
        <summary>Cambia el ancho de las columnas según el estilo de cambio de tamaño.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método solo es efectivo una vez el <xref:System.Windows.Forms.ListView> y que contiene <xref:System.Windows.Forms.Form> construidos y el <xref:System.Windows.Forms.ListView> columnas y encabezados de columna se rellenan con elementos. Si se agregan nuevos elementos a la <xref:System.Windows.Forms.ListView>, las columnas no cambiará de tamaño a menos que <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> se llama de nuevo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.ListView> en la vista de detalle y cambiar automáticamente el tamaño de las columnas utilizando la <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> método. Para ejecutar este ejemplo, pegue este código en un formulario Windows Forms y llame a la `InitializeResizingListView2` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se ha llamado a <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> con un valor distinto de <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> cuando el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.View" /> no está establecido en <see cref="F:System.Windows.Forms.View.Details" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de fondo.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> del fondo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor de <see cref="T:System.Windows.Forms.ImageLayout" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.ImageLayout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no tiene ningún efecto en el diseño de la imagen de fondo de la <xref:System.Windows.Forms.ListView> (control), por lo tanto, no aparece en el diseñador ni mediante IntelliSense.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.ImageLayout" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la propiedad <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la imagen de fondo del control <see cref="T:System.Windows.Forms.ListView" /> debe disponerse en mosaico.</summary>
        <value>
          <see langword="true" /> si la imagen de fondo del control <see cref="T:System.Windows.Forms.ListView" /> debe disponerse en mosaico; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A> propiedad devuelve `false` si no se ha establecido una imagen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario empieza a editar la etiqueta de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.BeforeLabelEdit> evento tiene lugar cuando el usuario empieza a modificar el texto de un elemento. Si el controlador de eventos cancela este evento, el usuario no puede editar el texto. Puede usar este evento para evitar que el usuario edite elementos específicos en el <xref:System.Windows.Forms.ListView> control. Si el <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en `false`, el <xref:System.Windows.Forms.ListView.BeforeLabelEdit> no se produce el evento; se rechazan automáticamente todos los intentos de usuario para editar las etiquetas de elemento.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ilustra el control de la <xref:System.Windows.Forms.ListView.BeforeLabelEdit> eventos y usar la <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType> propiedades. Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> control denominado `ListView1` y se rellena con al menos tres elementos. Asegúrese de que el controlador de eventos en el ejemplo está asociado a su evento.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Impide que se dibuje el control hasta que se llame al método <see cref="M:System.Windows.Forms.ListView.EndUpdate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La manera preferida para agregar varios elementos a un <xref:System.Windows.Forms.ListView> consiste en utilizar el <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> método de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (tiene acceso a través de la <xref:System.Windows.Forms.ListView.Items%2A> propiedad de la <xref:System.Windows.Forms.ListView>). Esto le permite agregar una matriz de elementos a la lista en una sola operación. Sin embargo, si desea agregar los elementos de uno en uno mediante el <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> método de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (clase), puede usar el <xref:System.Windows.Forms.ListView.BeginUpdate%2A> método para impedir que el control vuelva a dibujar el <xref:System.Windows.Forms.ListView> cada vez que se agrega un elemento. Cuando se haya completado la tarea de agregar elementos al control, llame a la <xref:System.Windows.Forms.ListView.EndUpdate%2A> método para habilitar el <xref:System.Windows.Forms.ListView> para volver a pintar. Esta forma de agregar elementos se pueden impedir el parpadeo durante el dibujo de la <xref:System.Windows.Forms.ListView> cuando se agregan una gran cantidad de elementos al control.  
  
 Si <xref:System.Windows.Forms.ListView.BeginUpdate%2A> se llama más de una vez, <xref:System.Windows.Forms.ListView.EndUpdate%2A> debe llamarse a un número equivalente de veces. Hasta que la última llamada a <xref:System.Windows.Forms.ListView.EndUpdate%2A> la <xref:System.Windows.Forms.ListView> no se volverá a dibujar. Además de estas funciones, varias llamadas a <xref:System.Windows.Forms.ListView.BeginUpdate%2A> no tienen ningún efecto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.ListView> control para que contenga casillas de verificación. También muestra cómo utilizar el <xref:System.Windows.Forms.ListView.BeginUpdate%2A> y <xref:System.Windows.Forms.ListView.EndUpdate%2A> métodos. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> denominado `ListView1`. Llame a la `InititalizeListView` método desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de borde del control.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.BorderStyle" />. El valor predeterminado es <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.ListView.BorderStyle%2A> propiedad para cambiar el estilo de borde de la <xref:System.Windows.Forms.ListView> control para que coincida con la configuración de estilo de borde de otros controles del formulario. Por ejemplo, si ninguno de los demás controles en el formulario muestra un borde, puede establecer la <xref:System.Windows.Forms.ListView.BorderStyle%2A> propiedad de la <xref:System.Windows.Forms.ListView> el control a <xref:System.Windows.Forms.BorderStyle.None> para que coincida con los demás controles.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.BorderStyle" />.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el contenido del área de presentación de un control <see cref="T:System.Windows.Forms.ListView" /> en modo virtual y <see cref="T:System.Windows.Forms.ListView" /> determina que se necesita un nuevo intervalo de elementos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento sólo se produce cuando <xref:System.Windows.Forms.ListView.VirtualMode%2A> es `true`. Permite controlar este evento el <xref:System.Windows.Forms.ListView> mantiene en la memoria caché actualizar la información de elemento para que esté disponible. Esto puede mejorar el rendimiento en listas grandes o cuyos elementos son caros de calcular las listas.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, el controlador de eventos comprueba para asegurarse de que una actualización de la caché sea necesario y, a continuación, vuelve a generar la memoria caché. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Windows.Forms.ListView.VirtualMode%2A> propiedad.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se va a mostrar una casilla junto al elemento del control.</summary>
        <value>
          Es <see langword="true" /> si aparece una casilla junto a cada elemento del control <see cref="T:System.Windows.Forms.ListView" />; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad le permite mostrar una casilla de verificación junto a cada elemento de la lista. Esto permite que la aplicación mostrar una lista de elementos (y subelementos si la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en `View.Details`) que el usuario puede seleccionar haciendo clic en la casilla de verificación. El <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad ofrece un método para seleccionar varios elementos en el <xref:System.Windows.Forms.ListView> control sin utilizar la tecla CTRL. Dependiendo de la aplicación, probablemente sea más fácil para el usuario con casillas para seleccionar elementos en lugar de la norma de método de selección múltiple. Incluso si la <xref:System.Windows.Forms.ListView.MultiSelect%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en `false`, todavía puede mostrar casillas de verificación y proporcionando funciones de selección múltiple al usuario. Esta característica puede ser útil si no desea que se seleccionen varios elementos pero aún así desea permitir al usuario seleccionar varios elementos de la lista para realizar una operación dentro de la aplicación.  
  
 Para determinar cuándo se ha activado un elemento, cree un controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemCheck> eventos. Para obtener todos los elementos que se comprueban en el <xref:System.Windows.Forms.ListView>, use la <xref:System.Windows.Forms.ListView.CheckedItems%2A> propiedad para tener acceso a la <xref:System.Windows.Forms.ListView.CheckedIndexCollection> para el control. Para obtener los índices de todos los elementos que se comprueban en el <xref:System.Windows.Forms.ListView>, use el <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propiedad.  
  
 Si un <xref:System.Windows.Forms.ImageList> se especifica en el <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedad, las imágenes en las posiciones de índice 0 y 1 en el <xref:System.Windows.Forms.ImageList> se muestran en lugar de la casilla de verificación. Se muestra la imagen en la posición de índice 0 en lugar de la casilla de verificación no está activada y se muestra la imagen en la posición de índice 1 en lugar de la casilla de verificación activada.  
  
> [!NOTE]
>  Cuando se establece esta propiedad en `true`, el <xref:System.Windows.Forms.ListView.ItemCheck> se produce el evento.  
>   
>  Casillas de verificación no están se muestran cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Tile>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los índices de los elementos actualmente activados en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> que contiene los índices de los elementos actualmente activados. Si no hay elementos activados actualmente, se devuelve una colección <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad sólo es útil cuando la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en `true`. El <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propiedad devuelve una colección que contiene las posiciones de índice en el <xref:System.Windows.Forms.ListView.ListViewItemCollection> de todos los elementos que se comprueban en el control. Para obtener más información acerca de cómo manipular los elementos de la colección, consulte <xref:System.Windows.Forms.ListView.CheckedIndexCollection>.  
  
 Si desea obtener una colección de los elementos que se comprueban en el <xref:System.Windows.Forms.ListView> control, en lugar de las posiciones de índice de los elementos que están activados, use la <xref:System.Windows.Forms.ListView.CheckedItems%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los elementos actualmente activados del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> que contiene los elementos actualmente activados. Si no hay elementos activados actualmente, se devuelve una colección <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad sólo es útil cuando la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en `true`. El <xref:System.Windows.Forms.ListView.CheckedItems%2A> propiedad devuelve una colección que contiene todos los elementos que se comprueban en el control. Para obtener más información acerca de cómo manipular los elementos de la colección, consulte <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>.  
  
 Si desea obtener una colección de las posiciones de índice dentro de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> de los elementos que se comprueban en el <xref:System.Windows.Forms.ListView> control, en lugar de los elementos que están activados, use la <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un comprobado <xref:System.Windows.Forms.ListView> que controla el <xref:System.Windows.Forms.ListView.ItemChecked> eventos. El ejemplo se utiliza la <xref:System.Windows.Forms.ListView.CheckedItems%2A> propiedad que se va a calcular un nuevo precio cada vez que un elemento está activada o desactivada. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `Textbox1`. Llame a la `InititalizeListView` método desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los elementos y columnas del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método para quitar todos los elementos y columnas de la <xref:System.Windows.Forms.ListView> control sin tener que llamar a la persona `Clear` métodos desde el <xref:System.Windows.Forms.ListView.ColumnHeaderCollection> y <xref:System.Windows.Forms.ListView.ListViewItemCollection> clases.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.ListView.Clear%2A> no borra el método <xref:System.Windows.Forms.ListView.Groups%2A> especificado para el <xref:System.Windows.Forms.ListView> control. Para borrar <xref:System.Windows.Forms.ListView.Groups%2A> llamar a <xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de <xref:System.Windows.Forms.ListView.Clear%2A> y <xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType> los miembros. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> denominado `ListView1` y un botón, situado en la parte inferior del formulario, denominado `Button1`. Llame a la `InitializeListView` método desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en un encabezado de columna en el control de vista de lista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ColumnClick> evento tiene lugar cuando el usuario hace clic en uno de los encabezados de columna en una vista de detalles de los elementos de un <xref:System.Windows.Forms.ListView> control (cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details>). El <xref:System.Windows.Forms.ListView.ColumnClick> normalmente se controla el evento para ordenar los elementos de la <xref:System.Windows.Forms.ListView> utilizando la columna seleccionada como la columna para ordenar por.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un formulario que contiene un <xref:System.Windows.Forms.ListView> control que ordena manualmente los elementos cuando una columna en el <xref:System.Windows.Forms.ListView> se hace clic en el control. En el ejemplo se define una clase denominada `ListViewItemComparer` que implementa el <xref:System.Collections.IComparer?displayProperty=nameWithType> interfaz que realiza el <xref:System.Windows.Forms.ListViewItem> comparación. En el ejemplo se crea una instancia de `ListViewItemComparer` y lo usa para establecer el <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad de la <xref:System.Windows.Forms.ListView> control. El <xref:System.Windows.Forms.ListView.Sort%2A> llamada al método el <xref:System.Windows.Forms.ListView.ColumnClick> controlador de eventos utiliza los métodos definidos en `ListViewItemComparer` para realizar la ordenación de elementos, en función de la columna que se ha hecho clic.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el orden de los encabezados de columna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ColumnReordered> evento es un evento cancelable y puede cancelarse, controlar el evento y configure el <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propiedad `true`. Sin embargo, si se cancela el evento, el <xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A> de la <xref:System.Windows.Forms.ColumnReorderedEventArgs> no cambiará a la <xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A> valor.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ColumnReordered> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ColumnReordered> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de todos los encabezados de columna que aparecen en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> que representa los encabezados de columna que aparecen cuando la propiedad <see cref="P:System.Windows.Forms.ListView.View" /> está establecida en <see cref="F:System.Windows.Forms.View.Details" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.Columns%2A> propiedad devuelve una colección que contiene el <xref:System.Windows.Forms.ColumnHeader> objetos que se muestran en el <xref:System.Windows.Forms.ListView> control. <xref:System.Windows.Forms.ColumnHeader> los objetos definen las columnas que se muestran en la <xref:System.Windows.Forms.ListView> controlar cuándo el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details>. Cada columna se usa para mostrar información de subelemento de cada elemento en el <xref:System.Windows.Forms.ListView>. Para obtener más información acerca de cómo manipular los elementos de la colección, consulte <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>.  
  
> [!NOTE]
>  Si su <xref:System.Windows.Forms.ListView> control no tiene ningún encabezado de columna especificado y establece la <xref:System.Windows.Forms.ListView.View%2A> propiedad <xref:System.Windows.Forms.View.Details>, el <xref:System.Windows.Forms.ListView> control no mostrará todos los elementos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce tras cambiar correctamente el ancho de una columna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento no se producirá si se cancela el cambio del ancho de columna en la <xref:System.Windows.Forms.ListView.ColumnWidthChanging> eventos  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ColumnWidthChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ColumnWidthChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el ancho de una columna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento le permite comprobar el nuevo ancho de columna con el <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> propiedad y cancelar el evento si elige estableciendo la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propiedad `true`.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ilustra el control de la <xref:System.Windows.Forms.ListView.ColumnWidthChanging> eventos. También muestra el <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> y <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> los miembros. Para ejecutar este ejemplo, pegue el código en un formulario Windows Forms. Llame a `InitializeListView1` desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un identificador para el control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>
          <see langword="null" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño predeterminado del control.</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> predeterminado del control.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.ListView" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a la <xref:System.Windows.Forms.ListView.Dispose%2A> método cuando ya no se necesita el componente. Este método quita el componente de su contenedor (si el componente tiene un sitio) y desencadena el evento dispose.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si este control debe volver a dibujar su superficie mediante un búfer secundario para reducir o evitar el parpadeo.</summary>
        <value>
          <see langword="true" /> si la superficie del control debe dibujarse utilizando el búfer doble; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se dibuja la vista de detalles de un control <see cref="T:System.Windows.Forms.ListView" /> y el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> se ha establecido en <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento le permite personalizar la apariencia de un <xref:System.Windows.Forms.ListView> control mediante el dibujo del propietario. Se genera solo cuando la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad está establecida en `true` y <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Este evento puede producirse para cada encabezado de columna en el control. Para obtener más información sobre el dibujo del propietario, consulte el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia de propiedad.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se proporciona una implementación de un <xref:System.Windows.Forms.ListView.DrawColumnHeader> controlador de eventos. Para obtener un ejemplo completo, incluida la implementación de la <xref:System.Windows.Forms.ListView.DrawSubItem> controlador de eventos, vea el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia.  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se dibuja un control <see cref="T:System.Windows.Forms.ListView" /> y el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> se ha establecido en <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento le permite personalizar la apariencia de un <xref:System.Windows.Forms.ListView> control mediante el dibujo del propietario. Se genera solo cuando la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad está establecida en `true`. Para obtener más información acerca de dibujo del propietario, consulte el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia de propiedad.  
  
 El <xref:System.Windows.Forms.ListView.DrawItem> evento puede producirse para cada <xref:System.Windows.Forms.ListView> elemento. Cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, <xref:System.Windows.Forms.ListView.DrawSubItem> y <xref:System.Windows.Forms.ListView.DrawColumnHeader> eventos también se producen. En este caso, puede controlar la <xref:System.Windows.Forms.ListView.DrawItem> eventos para dibujar los elementos comunes a todos los elementos, como el fondo y controlar la <xref:System.Windows.Forms.ListView.DrawSubItem> eventos para dibujar los elementos de los subelementos individuales, como los valores de texto. También puede dibujar todos los elementos en el <xref:System.Windows.Forms.ListView> controlar mediante solo uno de los dos eventos, aunque esto puede resultar menos práctico. Para dibujar los encabezados de columna en la vista de detalles, debe controlar el <xref:System.Windows.Forms.ListView.DrawColumnHeader> eventos.  
  
> [!NOTE]
>  Debido a un error en el control Win32 subyacente, el <xref:System.Windows.Forms.ListView.DrawItem> evento tiene lugar sin que acompaña a <xref:System.Windows.Forms.ListView.DrawSubItem> eventos una vez por fila en la vista de detalles cuando el puntero del mouse se mueve sobre la fila, provocando nada dibujado en una <xref:System.Windows.Forms.ListView.DrawSubItem> controlador de eventos que se deben pintar un fondo personalizado que se dibujan en la tecla un <xref:System.Windows.Forms.ListView.DrawItem> controlador de eventos. Vea el ejemplo en el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia para obtener una solución que invalida cada fila cuando se produce el evento adicional. Una solución alternativa consiste en colocar todo el código de dibujo personalizado un <xref:System.Windows.Forms.ListView.DrawSubItem> controlador de eventos y pintar el fondo de todo el elemento (incluidos los subelementos) sólo cuando el <xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType> valor es 0.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se proporciona una implementación de un <xref:System.Windows.Forms.ListView.DrawItem> controlador de eventos. Para obtener un ejemplo completo, vea el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia.  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se dibuja la vista de detalles de un control <see cref="T:System.Windows.Forms.ListView" /> y el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> se ha establecido en <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento le permite personalizar la apariencia de un <xref:System.Windows.Forms.ListView> control mediante el dibujo del propietario. Se genera solo cuando la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad está establecida en `true` y <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Para obtener más información sobre el dibujo del propietario, consulte el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia de propiedad.  
  
> [!NOTE]
>  Información de subelemento suele mostrar en la vista en mosaico, así como la vista de detalles, pero en la vista en mosaico, se debe dibujar en un controlador para el <xref:System.Windows.Forms.ListView.DrawItem> eventos.  
  
 El <xref:System.Windows.Forms.ListView.DrawSubItem> evento puede producirse para cada <xref:System.Windows.Forms.ListView> subelemento. Puede controlar la <xref:System.Windows.Forms.ListView.DrawItem> eventos para dibujar los elementos comunes a todos los subelementos, como el fondo y controlar la <xref:System.Windows.Forms.ListView.DrawSubItem> eventos para dibujar los elementos de los subelementos individuales, como los valores de texto. También puede dibujar todos los elementos en el <xref:System.Windows.Forms.ListView> controlar mediante solo uno de los dos eventos, aunque esto puede resultar menos práctico. Para dibujar los encabezados de columna en la vista de detalles, debe controlar el <xref:System.Windows.Forms.ListView.DrawColumnHeader> eventos.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.ListView.DrawSubItem> eventos no producen ningún subelemento para la que no <xref:System.Windows.Forms.ColumnHeader> objeto se ha agregado a la <xref:System.Windows.Forms.ListView.Columns%2A> colección. Tenga en cuenta también que el primer subelemento de cada <xref:System.Windows.Forms.ListViewItem> objeto representa el propio elemento primario y se muestra en la primera columna.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se proporciona una implementación de un <xref:System.Windows.Forms.ListView.DrawSubItem> controlador de eventos. Para obtener un ejemplo completo, vea el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> tema de referencia.  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reanuda el dibujo del control de vista de lista después de haber sido suspendido por el método <see cref="M:System.Windows.Forms.ListView.BeginUpdate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La manera preferida para agregar varios elementos a un <xref:System.Windows.Forms.ListView> consiste en utilizar el <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> método de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (tiene acceso a través de la <xref:System.Windows.Forms.ListView.Items%2A> propiedad de la <xref:System.Windows.Forms.ListView>). Esto le permite agregar una matriz de elementos a la lista en una sola operación. Sin embargo, si desea agregar los elementos de uno en uno mediante el <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> método de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (clase), puede usar el <xref:System.Windows.Forms.ListView.BeginUpdate%2A> método para impedir que el control vuelva a dibujar el <xref:System.Windows.Forms.ListView> cada vez que se agrega un elemento. Una vez haya completado la tarea de agregar elementos al control, llame a la <xref:System.Windows.Forms.ListView.EndUpdate%2A> método para habilitar el <xref:System.Windows.Forms.ListView> para volver a pintar. Esta forma de agregar elementos se pueden impedir el parpadeo durante el dibujo de la <xref:System.Windows.Forms.ListView> cuando un gran número de elementos se agregan al control.  
  
 Si <xref:System.Windows.Forms.ListView.BeginUpdate%2A> se llama más de una vez, <xref:System.Windows.Forms.ListView.EndUpdate%2A> debe llamarse a un número equivalente de veces. Hasta que la última llamada a <xref:System.Windows.Forms.ListView.EndUpdate%2A> la <xref:System.Windows.Forms.ListView> no se volverá a dibujar. Además de estas funciones, varias llamadas a <xref:System.Windows.Forms.ListView.BeginUpdate%2A> no tienen ningún efecto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo inicializar una <xref:System.Windows.Forms.ListView> control para que contenga casillas de verificación. También muestra cómo utilizar el <xref:System.Windows.Forms.ListView.BeginUpdate%2A> y <xref:System.Windows.Forms.ListView.EndUpdate%2A> métodos. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> denominado `ListView1`. Llame a la `InititalizeListView` método desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del elemento que se va a desplazar en la vista.</param>
        <summary>Garantiza que el elemento especificado esté visible en el control, desplazando el contenido del control si es necesario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método para asegurarse de que un elemento específico esté visible en el <xref:System.Windows.Forms.ListView> control. Al realizar la validación en los elementos de un <xref:System.Windows.Forms.ListView>, puede llamar a la <xref:System.Windows.Forms.ListView.EnsureVisible%2A> método para asegurarse de que un elemento que un error de validación se muestra en el <xref:System.Windows.Forms.ListView> control para permitir al usuario realizar cambios en el elemento. Si está visible el elemento que desee para asegurarse de que se encuentra por encima de la región visible de la <xref:System.Windows.Forms.ListView> controlar, una llamada a la <xref:System.Windows.Forms.ListView.EnsureVisible%2A> método desplazará el contenido del control hasta que se encuentre el primer elemento en el área visible del control. Si el elemento está por debajo de la región visible de la <xref:System.Windows.Forms.ListView> controlar, una llamada a la <xref:System.Windows.Forms.ListView.EnsureVisible%2A> método desplazará el contenido de la <xref:System.Windows.Forms.ListView> controlar hasta que el elemento es el último elemento en el área visible del control.  
  
 Para determinar si un elemento se encuentra en la parte superior del área de presentación de un <xref:System.Windows.Forms.ListView> de control, use la <xref:System.Windows.Forms.ListView.TopItem%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encuentra el primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> que comience por el valor de texto dado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a buscar.</param>
        <summary>Encuentra el primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> que comience con el valor de texto especificado.</summary>
        <returns>Primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> que comienza con el valor de texto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La búsqueda no distingue entre mayúsculas y minúsculas.  
  
 El `text` parámetro puede especificar una subcadena del texto coincidente deseado. Además, este método devolverá el primer elemento que empieza con el texto especificado. Por ejemplo, si un <xref:System.Windows.Forms.ListView> contiene dos elementos de lista: texto del primer elemento establecido en "corchete angular" y el segundo texto del elemento se establece en "bracket", una llamada a <xref:System.Windows.Forms.ListView.FindItemWithText%2A> pasar `brack` como el parámetro devolverá el elemento cuyo texto es "bracket".  
  
 El <xref:System.Windows.Forms.ListView.FindItemWithText%2A> método `null` si la lista está vacía o no hay ningún elemento coincidente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el <xref:System.Windows.Forms.ListView.FindItemWithText%2A> método. Para ejecutar este ejemplo, pegue el siguiente código en un formulario Windows Forms y llame a la `InitializeFindListView` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos. Haga clic en el botón para ver los resultados de la llamada al método.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a buscar.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> para incluir los subelementos en la búsqueda; de lo contrario, <see langword="false" />.</param>
        <param name="startIndex">Índice del elemento en el que se va a iniciar la búsqueda.</param>
        <summary>Encuentra el primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> o <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, si se ha indicado, que comience con el valor de texto especificado. La búsqueda se inicia en el índice especificado.</summary>
        <returns>Primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> que comienza con el valor de texto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La búsqueda no distingue entre mayúsculas y minúsculas.  
  
 El `text` parámetro puede especificar una subcadena del texto coincidente deseado. Además, este método devolverá el primer elemento que empieza con el texto especificado. Por ejemplo, si un <xref:System.Windows.Forms.ListView> contiene dos elementos de lista: texto del primer elemento establecido en "corchete angular" y el segundo texto del elemento se establece en "bracket", una llamada a <xref:System.Windows.Forms.ListView.FindItemWithText%2A> pase "corchete" como el parámetro devolverá el elemento cuyo texto es "bracket".  
  
 El <xref:System.Windows.Forms.ListView.FindItemWithText%2A> método `null` si la lista está vacía o no hay ningún elemento coincidente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> es menor que 0 o mayor que el número de elementos de <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a buscar.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> para incluir los subelementos en la búsqueda; de lo contrario, <see langword="false" />.</param>
        <param name="startIndex">Índice del elemento en el que se va a iniciar la búsqueda.</param>
        <param name="isPrefixSearch">
          Es <see langword="true" /> para permitir coincidencias parciales; de lo contrario, es <see langword="false" />.</param>
        <summary>Encuentra el primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> o <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, si se ha indicado, que comience con el valor de texto especificado. La búsqueda se inicia en el índice especificado.</summary>
        <returns>Primer objeto <see cref="T:System.Windows.Forms.ListViewItem" /> que comienza con el valor de texto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.FindItemWithText%2A> método `null` si la lista está vacía o no hay ningún elemento coincidente.  
  
 La búsqueda no distingue entre mayúsculas y minúsculas.  
  
 El `text` parámetro puede especificar una subcadena del texto coincidente deseado. Este método devolverá el primer elemento que empieza con el texto especificado, a menos que `false` se pasa para `isPrefixSearch`. Por ejemplo, si un <xref:System.Windows.Forms.ListView> contiene dos elementos de lista: texto del primer elemento establecido en "corchete angular" y el segundo texto del elemento se establece en "bracket", una llamada a <xref:System.Windows.Forms.ListView.FindItemWithText%2A> pase "corchete" como el texto de búsqueda devolverá el elemento cuyo texto es "bracket". Si `isPrefixSearch` está establecido en `false`, esta llamada devolverá `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> es menor que 0 o mayor que el número de elementos de <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Durante una búsqueda en la dirección especificada, encuentra el siguiente elemento a partir de un punto determinado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">Uno de los valores de <see cref="T:System.Windows.Forms.SearchDirectionHint" />.</param>
        <param name="point">Punto a partir del cual se va a iniciar la búsqueda.</param>
        <summary>Durante una búsqueda en la dirección especificada, encuentra el siguiente elemento a partir del punto determinado.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> más próximo al punto dado, en una búsqueda en la dirección especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.FindNearestItem%2A> método `null` si no hay ningún elemento se encuentra en la dirección dada. La identificación del elemento más cercano puede variar según el sistema operativo que se ejecuta la aplicación y afectará a los resultados de <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se ha establecido <see cref="P:System.Windows.Forms.ListView.View" /> en un valor distinto de <see cref="F:System.Windows.Forms.View.SmallIcon" /> o <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">Uno de los valores de <see cref="T:System.Windows.Forms.SearchDirectionHint" />.</param>
        <param name="x">Coordenada X del punto a partir del cual se va a comenzar la búsqueda.</param>
        <param name="y">Coordenada Y del punto a partir del cual se va a comenzar la búsqueda.</param>
        <summary>Durante una búsqueda en la dirección especificada, encuentra el siguiente elemento a partir de las coordenadas x e y dadas.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> más próximo a las coordenadas dadas para una búsqueda en la dirección especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.FindNearestItem%2A> método `null` si no hay ningún elemento se encuentra en la dirección dada. La identificación del elemento más cercano puede variar según el sistema operativo que se ejecuta la aplicación y afectará a los resultados de <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Se ha establecido <see cref="P:System.Windows.Forms.ListView.View" /> en un valor distinto de <see cref="F:System.Windows.Forms.View.SmallIcon" /> o <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el elemento del control que tiene actualmente el foco.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" /> que representa el elemento que tiene el foco. Es <see langword="null" /> si ningún elemento tiene el foco en el control <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.FocusedItem%2A> propiedad devuelve el <xref:System.Windows.Forms.ListViewItem> que representa el elemento que muestra el rectángulo de foco para el <xref:System.Windows.Forms.ListView> control. Dado que un <xref:System.Windows.Forms.ListView> control no tiene ningún áreas puede editables directamente, salvo los elementos que muestra, cuando el <xref:System.Windows.Forms.ListView> control tiene el foco, un elemento de la <xref:System.Windows.Forms.ListView> muestra el retículo del foco alrededor de su texto. Por lo general, seleccionada en el último elemento en el <xref:System.Windows.Forms.ListView> control es el elemento tiene el foco. Aunque un elemento puede ser el muestra el retículo del foco, es posible no sea realmente un elemento seleccionado en el <xref:System.Windows.Forms.ListView>. Use la <xref:System.Windows.Forms.ListView.SelectedItems%2A> o <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propiedades para obtener los elementos seleccionados en el <xref:System.Windows.Forms.ListView> (control), el <xref:System.Windows.Forms.ListView.FocusedItem%2A> propiedad no es necesariamente seleccionada. Puede usar el <xref:System.Windows.Forms.ListView.FocusedItem%2A> propiedad para determinar qué elemento por última hizo clic en el <xref:System.Windows.Forms.ListView> control, independientemente del estado de selección.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de primer plano.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> que representa el color de primer plano.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si al hacer clic en un elemento se seleccionan todos sus subelementos.</summary>
        <value>
          Es <see langword="true" /> si al hacer clic en un elemento se selecciona el elemento y todos sus subelementos; y <see langword="false" />, si al hacer clic en un elemento sólo se selecciona el propio elemento. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propiedad no tiene ningún efecto a menos que la <xref:System.Windows.Forms.ListView.View%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en <xref:System.Windows.Forms.View.Details>. El <xref:System.Windows.Forms.ListView.FullRowSelect%2A> suele ser propiedad se usa cuando un <xref:System.Windows.Forms.ListView> muestra los elementos con varios subelementos y es importante poder ver los elementos seleccionados cuando el texto del elemento no está visible debido al desplazamiento horizontal del contenido del control.  
  
> [!NOTE]
>  Cuando <xref:System.Windows.Forms.ListView.FullRowSelect%2A> está establecido en `true`, información sobre herramientas para un <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> no se mostrará; solo la información sobre herramientas primario <xref:System.Windows.Forms.ListViewItem> se muestra.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordenada x de la ubicación en la que se desea buscar un elemento (expresada en coordenadas de cliente).</param>
        <param name="y">Coordenada y de la ubicación en la que se desea buscar un elemento (expresada en coordenadas de cliente).</param>
        <summary>Recupera el elemento en la ubicación especificada.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> que representa el elemento en la posición especificada. Si no hay ningún elemento en la posición especificada, el método devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.GetItemAt%2A> método le permite determinar qué elemento se encuentra en una ubicación específica dentro de la región del cliente de la <xref:System.Windows.Forms.ListView> control. Puede usar este método cuando el usuario hace clic en o secundario del mouse un subelemento (cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en `View.Details`) y desea determinar qué elemento pertenece el subelemento que se hizo clic basado en las coordenadas del mouse en el momento en que el usuario hace clic en el mouse.  
  
> [!NOTE]
>  Cuando el <xref:System.Windows.Forms.ListView.FullRowSelect%2A> es el valor de la propiedad `false`, este método devuelve un elemento solo cuando la ubicación especificada está dentro de los límites del elemento primario (que se muestra en la primera columna cuando el control está en modo de detalles). Debe establecer el <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propiedad `true` para recuperar un elemento con este método a partir de una ubicación dentro de los límites de un subelemento. También puede usar el <xref:System.Windows.Forms.ListView.HitTest%2A> método para recuperar información detallada sobre el elemento en una ubicación concreta.  
  
 Hacer arrastrar y colocar reordenación de los elementos dentro de un <xref:System.Windows.Forms.ListView>, desea utilizar el <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> método en lugar de la <xref:System.Windows.Forms.ListView.GetItemAt%2A> método. El <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> método busca el elemento más cercano independientemente de donde se encuentra el puntero del mouse. El <xref:System.Windows.Forms.ListView.GetItemAt%2A> método, por otro lado, devuelve `null` si no hay ningún elemento en la ubicación especificada.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.ListViewInsertionMark> clase solo se admite en Windows XP y Windows Server 2003 cuando la aplicación llama a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Windows.Forms.PictureBox> y <xref:System.Windows.Forms.ListView> controles. El <xref:System.Windows.Forms.PictureBox> se inicializa estableciendo la <xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType> propiedades mediante el <xref:System.Windows.Forms.BorderStyle> y <xref:System.Windows.Forms.PictureBoxSizeMode> enumeraciones, respectivamente. El <xref:System.Windows.Forms.ListView> se rellena con imágenes del directorio Samples. El <xref:System.Windows.Forms.ListView.GetItemAt%2A> se usa el método al controlar la <xref:System.Windows.Forms.ListView> del control <xref:System.Windows.Forms.Control.MouseDown> evento para determinar si un elemento está seleccionado. Si se selecciona un elemento, el controlador de eventos muestra el archivo seleccionado estableciendo el <xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType> propiedad. El ejemplo requiere la existencia de archivos JPG ubicados en el directorio C:\documents and Settings\All Users\documentos\mis imágenes\Sample. Para ejecutar este ejemplo, pegue el código en un formulario y llame a la `InitializePictureBox` y `PopulateListView` métodos en el constructor del formulario o `Load` método. Asegúrese de que todos los eventos están asociados a sus controladores de eventos.  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera el rectángulo delimitador de un elemento del control.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del elemento del <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> cuyo rectángulo delimitador se desea devolver.</param>
        <summary>Recupera el rectángulo delimitador de un elemento específico del control de vista de lista.</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" /> que representa el rectángulo delimitador del <see cref="T:System.Windows.Forms.ListViewItem" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El rectángulo delimitador devuelto por esta versión de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> método representa el elemento completo, incluido el icono, el texto del elemento y el texto del subelemento. Para especificar una parte específica del elemento del rectángulo delimitador, use la otra versión de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del elemento del <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> cuyo rectángulo delimitador se desea devolver.</param>
        <param name="portion">Uno de los valores de <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> que representa una parte del <see cref="T:System.Windows.Forms.ListViewItem" /> para el que se desea recuperar el rectángulo delimitador.</param>
        <summary>Recupera la parte indicada del rectángulo delimitador de un elemento específico del control de vista de lista.</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" /> que representa el rectángulo delimitador de la parte indicada del <see cref="T:System.Windows.Forms.ListViewItem" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El rectángulo delimitador devuelto por esta versión de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> método representa sólo la sección del elemento especificado en el `portion` parámetro. Para devolver el rectángulo delimitador del elemento completo, use la otra versión de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si aparecen líneas de cuadrícula entre las filas y las columnas que contienen los elementos y subelementos del control.</summary>
        <value>
          Es <see langword="true" /> si se dibujan líneas de cuadrícula alrededor de los elementos y subelementos; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.GridLines%2A> propiedad no tiene ningún efecto a menos que la <xref:System.Windows.Forms.ListView.View%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en <xref:System.Windows.Forms.View.Details>. El <xref:System.Windows.Forms.ListView.GridLines%2A> propiedad le permite mostrar líneas para identificar las filas y columnas que se muestran en la <xref:System.Windows.Forms.ListView> controlar cuando muestra los elementos y sus subelementos. Las líneas de cuadrícula que se muestran no proporcionan la capacidad de cambiar el tamaño de filas y columnas como una aplicación, como Microsoft Excel. Columnas sólo pueden cambiarse, si se muestran los encabezados de columna, mueva el puntero del mouse en el lado derecho de la columna para cambiar el tamaño y, a continuación, haga clic y arrastre hasta que la columna es el tamaño que desee. La característica de líneas de cuadrícula se utiliza para proporcionar al usuario del control límites visibles alrededor de los elementos y subelementos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de objetos <see cref="T:System.Windows.Forms.ListViewGroup" /> asignados al control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewGroupCollection" /> que contiene todos los grupos del control <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView> característica de agrupación le permite crear grupos visuales de relacionadas lógicamente <xref:System.Windows.Forms.ListView> elementos. Cada grupo consta de un encabezado de texto seguido de una línea horizontal y los elementos asignados a ese grupo. Puede alinear el texto del encabezado a la izquierda, derecha o el centro del control. Los grupos asignados a un <xref:System.Windows.Forms.ListView> control cada vez que aparezca el <xref:System.Windows.Forms.ListView.View%2A> propiedad se establece en un valor distinto de <xref:System.Windows.Forms.View.List?displayProperty=nameWithType>.  
  
 <xref:System.Windows.Forms.ListView> grupos ayudan a los usuarios a encontrar los elementos que están buscando al separar los elementos en categorías útiles. Puede crear las categorías que se necesiten. Un enfoque típico es agrupar los elementos basándose en la manera en que la lista está ordenada. Por ejemplo, puede agrupar los elementos por la letra inicial del nombre de elemento cuando la lista está ordenada alfabéticamente o por subelementos como tipo o fecha cuando se ordena la lista haciendo clic en un encabezado de columna en la vista de detalles. El Explorador de Windows utiliza este tipo de agrupación.  
  
 Para usar la característica de agrupación, agregue uno o varios <xref:System.Windows.Forms.ListViewGroup> objetos a la <xref:System.Windows.Forms.ListView.Groups%2A> colección de un <xref:System.Windows.Forms.ListView> control. Establecer la alineación de texto y encabezado de encabezado de grupo el <xref:System.Windows.Forms.ListViewGroup.%23ctor%2A> constructor, o puede establecer mediante el <xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType> propiedades.  
  
 Para deshabilitar temporalmente la característica de agrupación, establezca el <xref:System.Windows.Forms.ListView.ShowGroups%2A> propiedad `false`.  
  
 Puede asignar un elemento a un grupo especificando el grupo en el <xref:System.Windows.Forms.ListViewItem.%23ctor%2A> constructor, estableciendo el <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> propiedad, o agregando directamente el elemento a la <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> colección de un grupo. Todos los elementos deben asignarse a grupos antes de que se muestren. Todos los elementos que no están asignados a un grupo aparecerá en el grupo predeterminado, que tiene la etiqueta de encabezado "DefaultGroup{0}". El grupo predeterminado no está contenido en el <xref:System.Windows.Forms.ListView.Groups%2A> colección y no se puede modificar. Es especialmente útil en la depuración para asegurarse de que todos los elementos se han agregado correctamente a los grupos.  
  
 Un elemento solo puede estar en un grupo a la vez. Puede cambiar el grupo al que pertenece un elemento estableciendo la <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> propiedad en tiempo de ejecución o agregándolo a la <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> colección de otro grupo, que automáticamente lo quita del grupo anterior.  
  
 La característica de marca de inserción está deshabilitada cuando se usan grupos. Esto es porque la característica de agrupación ordena los elementos por su pertenencia a grupo, mientras que la característica de marca de inserción se utiliza con la colocación de arrastrar y colocar en un <xref:System.Windows.Forms.ListView> control que no ordena los elementos.  
  
 <xref:System.Windows.Forms.ListView> grupos solo están disponibles en Windows XP y Windows Server 2003 cuando la aplicación llama a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método. En sistemas operativos anteriores, cualquier código relacionado con grupos no tiene ningún efecto y los grupos no aparecerán. Como resultado, cualquier código que dependa de la característica de agrupación no funcionen correctamente.  
  
 Posible que desee incluir código que determina si está disponible la característica de agrupación y proporcionar una funcionalidad alternativa cuando no está disponible. Por ejemplo, puede proporcionar una ordenación alternativa cuando se ejecuta en sistemas operativos que no admiten la ordenación por grupo.  
  
 La característica de agrupación se proporciona la misma biblioteca que proporciona la característica de temas del sistema operativo. Para comprobar la disponibilidad de esta biblioteca, llame a la <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> sobrecarga del método y pase la <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView> característica de agrupación para organizar los elementos por valor de subelemento en la vista de detalles. Esta forma de agrupación es similar a la agrupación utilizada en el Explorador de Windows. En el ejemplo, los grupos se crean dinámicamente. Para cada columna de subelementos, se crea un grupo para cada valor de subelemento único. En la columna de elemento primario, se crea un grupo para cada letra inicial única. Haga clic en el encabezado de una columna ordena los elementos en los grupos creados para esa columna. Haga clic de nuevo en el mismo encabezado de columna, invierte el orden de los grupos.  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo del encabezado de columna.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />. El valor predeterminado es <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad le permite especificar el tipo de encabezados de columna para mostrar cuándo el <xref:System.Windows.Forms.ListView.View%2A> propiedad de la <xref:System.Windows.Forms.ListView> control se establece en <xref:System.Windows.Forms.View.Details> y la <xref:System.Windows.Forms.ListView> control tiene <xref:System.Windows.Forms.ColumnHeader> objetos especificados en el <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> los objetos definen las columnas que se muestran en el <xref:System.Windows.Forms.ListView> control. Cada columna se usa para mostrar información de subelemento de cada elemento en el <xref:System.Windows.Forms.ListView>.  
  
 El <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad le permite especificar si los encabezados de columna están visibles o, si están visibles, si funcionan como botones seleccionables. Si el <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad está establecida en <xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>, no se muestran los encabezados de columna, aunque los elementos y subelementos de los <xref:System.Windows.Forms.ListView> control todavía se organizan en columnas. Si el <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad está establecida en <xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>, los encabezados de columna actúan como botones en los que los usuarios puedan seleccionar para llevar a cabo una acción, como la ordenación de los elementos de la <xref:System.Windows.Forms.ListView> controlar mediante los elementos en la columna seleccionada como una clave. Puede implementar este comportamiento en un controlador para el <xref:System.Windows.Forms.ListView.ColumnClick> eventos. Si el <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedad está establecida en <xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>, aparecen los encabezados de columna, pero no se puede hacer clic.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un <xref:System.Windows.Forms.ListView> que permite que se seleccionen varios elementos. En el ejemplo se demuestra cómo establecer el <xref:System.Windows.Forms.ListView.HideSelection%2A> y <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedades. También muestra el <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> propiedades. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />.</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el elemento seleccionado del control continúa resaltado cuando el control pierde el foco.</summary>
        <value>
          Es <see langword="true" /> si el elemento seleccionado no aparece resaltado cuando el control pierde el foco; y <see langword="false" />, si el elemento seleccionado permanece resaltado cuando el control pierde el foco. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando esta propiedad se establece en `false`, los elementos seleccionados en el <xref:System.Windows.Forms.ListView> control permanecerá resaltado en un color diferente que el color de selección actual especificado por el sistema operativo cuando el <xref:System.Windows.Forms.ListView> control pierde el foco. Puede utilizar esta propiedad para mantener los elementos seleccionados por el usuario visible cuando el usuario hace clic en un control diferente en el formulario o se mueve a una ventana diferente.  
  
> [!NOTE]
>  Si le preocupa la accesibilidad de las aplicaciones, se recomienda establecer el <xref:System.Windows.Forms.ListView.HideSelection%2A> propiedad `false`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un <xref:System.Windows.Forms.ListView> que permite que se seleccionen varios elementos. En el ejemplo se demuestra cómo establecer el <xref:System.Windows.Forms.ListView.HideSelection%2A> y <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedades. También muestra el <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>, y <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> propiedades. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Proporciona información acerca de los elementos basándose en las coordenadas X e Y dadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> en que se va a recuperar la información acerca de los elementos. Las coordenadas son relativas a la esquina superior izquierda del control.</param>
        <summary>Proporciona información acerca de los elementos basándose en el punto dado.</summary>
        <returns>Información acerca de los elementos basándose en el punto dado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para determinar si un punto se encuentra en un elemento o subelemento y donde en el elemento el punto se encuentra, como en el área de imagen o etiqueta. Si las coordenadas se encuentran fuera del control, el valor devuelto <xref:System.Windows.Forms.ListViewHitTestInfo> objeto tiene una <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> propiedad de "None"; y la <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> y <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> propiedades se establecen como `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El punto contiene coordenadas que son menores que 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordenada X en que se va a recuperar la información acerca del elemento. La coordenada es relativa a la esquina superior izquierda del control.</param>
        <param name="y">Coordenada Y en que se va a recuperar la información acerca del elemento. La coordenada es relativa a la esquina superior izquierda del control.</param>
        <summary>Proporciona información acerca de los elementos basándose en las coordenadas X e Y dadas.</summary>
        <returns>Información acerca de los elementos basándose en las coordenadas X e Y dadas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para determinar si un punto se encuentra en un elemento o subelemento y donde en el elemento el punto se encuentra, como en el área de imagen o etiqueta. Si las coordenadas se encuentran fuera del control, el valor devuelto <xref:System.Windows.Forms.ListViewHitTestInfo> objeto tiene una <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> propiedad de "None"; y la <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> y <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> propiedades se establecen como `null`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.HitTest%2A> método para determinar la ubicación de un evento de mouse (ratón) en un <xref:System.Windows.Forms.ListView>. Para ejecutar este ejemplo, péguelo en un formulario Windows Forms que contiene un <xref:System.Windows.Forms.ListView> denominado `listView1` que se rellena con elementos. Asociar el <xref:System.Windows.Forms.Control.MouseDown> eventos para `listView1` con el `listView1_MouseDown` método en este ejemplo.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La coordenada x o y es menor que 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el texto de un elemento o subelemento tiene la apariencia de un hipervínculo cuando el puntero del mouse se desplaza sobre él.</summary>
        <value>
          <see langword="true" /> si el texto del elemento tiene la apariencia de un hipervínculo cuando el puntero del mouse se desplaza sobre él; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Habilitar el seguimiento activo willcause el <xref:System.Windows.Forms.ListView.Activation%2A> propiedad se establezca en <xref:System.Windows.Forms.ItemActivation.OneClick> y <xref:System.Windows.Forms.ListView.HoverSelection%2A> propiedad se establezca en `true`. Además, no se permite editar la etiqueta de tiempo de ejecución cuando se habilita el seguimiento activo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un <xref:System.Windows.Forms.ListView> con el seguimiento activo habilitado. Para ejecutar este ejemplo, pegue el siguiente código en un formulario Windows Forms y llame a la `InitializeHotTrackingListView` método desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si un elemento se selecciona automáticamente cuando el puntero del mouse permanece sobre él durante unos segundos.</summary>
        <value>
          Es <see langword="true" /> si un elemento se selecciona automáticamente cuando el puntero del mouse se desplaza sobre él; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando esta propiedad se establece en `true`, el usuario puede apuntar a un elemento en el <xref:System.Windows.Forms.ListView> control para seleccionar el elemento. Se pueden seleccionar varios elementos (cuando el <xref:System.Windows.Forms.ListView.MultiSelect%2A> propiedad está establecida en true) manteniendo presionada la tecla CTRL mientras se apunta a cada elemento. Puede utilizar esta característica para ofrecer un método sencillo para el usuario de la aplicación para seleccionar elementos en el <xref:System.Windows.Forms.ListView> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto utilizado para indicar la ubicación de colocación esperada al arrastrar un elemento dentro de un control <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>Objeto <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> que representa la marca de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView> característica de marca de inserción permite indicar visualmente la ubicación de colocación esperada en una operación de arrastrar y colocar cuando se arrastra un elemento a una nueva posición. Esta característica sólo funcionará cuando el <xref:System.Windows.Forms.ListView.AutoArrange%2A> propiedad está establecida en `true` y cuándo el <xref:System.Windows.Forms.ListView> control no ordena los elementos automáticamente. Para evitar la ordenación automática, el <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad debe establecerse en <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> y <xref:System.Windows.Forms.ListView.View%2A> propiedad debe establecerse en <xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>, <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>, o <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Además, la característica de marca de inserción puede no estar visible con el <xref:System.Windows.Forms.ListView> característica de agrupación porque la característica de agrupación ordena los elementos por su pertenencia a grupo.  
  
 El <xref:System.Windows.Forms.ListViewInsertionMark> clase se usa normalmente en un controlador para el <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> o <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> evento para actualizar la posición de la marca de inserción cuando se arrastra un elemento. También se utiliza en un controlador para el <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> o <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> eventos para insertar un elemento arrastrado en la ubicación correcta. Para obtener más información, consulte <xref:System.Windows.Forms.ListViewInsertionMark> y [Cómo: mostrar una marca de inserción en un ListView Control de formularios Windows Forms](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md).  
  
> [!NOTE]
>  La característica de marca de inserción solo está disponible en Windows XP y Windows Server 2003 cuando la aplicación llama a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método. En sistemas operativos anteriores, cualquier código relacionado con la marca de inserción no tiene ningún efecto y la marca de inserción no aparecerá. Como resultado, cualquier código que dependa de la característica de marca de inserción no funcionen correctamente. Posible que desee incluir código que determina si esta característica está disponible y proporcionar una funcionalidad alternativa cuando no está disponible. Por ejemplo, puede omitir todo el código que implementa la posición cuando se ejecuta en sistemas operativos que no admitan las marcas de inserción de arrastrar y colocar los elementos.  
>   
>  La característica de marca de inserción se proporciona la misma biblioteca que proporciona la característica de temas del sistema operativo. Para comprobar la disponibilidad de esta biblioteca, llame a la <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> sobrecarga del método y pase la <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView> característica de marca de inserción. En este ejemplo implementa la reordenación de elementos de arrastrar y colocar con los eventos de arrastre estándar. La posición de la marca de inserción se actualiza en un controlador para el <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> eventos. En este controlador, la posición del puntero del mouse se compara con el punto medio del elemento más cercano y el resultado se usa para determinar si la marca de inserción aparece a la izquierda o a la derecha del elemento.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Uno de los valores de <see cref="T:System.Windows.Forms.Keys" />.</param>
        <summary>Determina si la tecla especificada es una tecla de entrada normal o una tecla especial que requiere preprocesamiento.</summary>
        <returns>
          <see langword="true" /> si la tecla especificada es una tecla de entrada normal; de lo contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar cuando se activa un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ItemActivate> evento tiene lugar cuando el usuario activa uno o varios elementos en el <xref:System.Windows.Forms.ListView> control. El usuario puede activar un elemento con un solo clic o doble clic, dependiendo del valor de la <xref:System.Windows.Forms.ListView.Activation%2A> propiedad, o con el teclado. Desde dentro del controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemActivate> eventos, puede hacer referencia a la <xref:System.Windows.Forms.ListView.SelectedItems%2A> o <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propiedades para tener acceso a la colección de elementos seleccionados en el <xref:System.Windows.Forms.ListView> para determinar qué elementos se está activando.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ItemActivate> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ItemActivate> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el estado de activación de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad debe establecerse en true en el orden de las casillas de verificación que se mostrará junto a cada elemento en el <xref:System.Windows.Forms.ListView> control. El <xref:System.Windows.Forms.ListView.ItemCheck> evento se produce cuando cambia el estado de activación de un elemento o cuando el <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad está establecida en `true`. Puede crear un controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemCheck> eventos para realizar tareas como cambiar el estado de icono de un elemento u otra tarea específica de la aplicación cada vez que un elemento está activado en el <xref:System.Windows.Forms.ListView> control.  
  
> [!NOTE]
>  Si el identificador de ventana no se ha creado cuando la <xref:System.Windows.Forms.ListView.ItemCheck> evento se desencadena, se retrasará el evento. Una vez que se crea el identificador de ventana (cuando el formulario se muestra), cualquier retrasa <xref:System.Windows.Forms.ListView.ItemCheck> los eventos se producen. Para obtener más información, vea <xref:System.Windows.Forms.Control.HandleCreated>.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un comprobado <xref:System.Windows.Forms.ListView> control que administra el <xref:System.Windows.Forms.ListView.ItemCheck> eventos. El método usa la <xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType> propiedades para recuperar y calcular el precio de los elementos de menú seleccionado. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un `ListView` denominado `ListView1` y un `TextBox` denominado `Textbox1`. Llame a la `InititalizeListView` método desde el constructor del formulario o `Load` método. Asegúrese de que el <xref:System.Windows.Forms.ListView.ItemCheck> evento está asociado con el controlador de eventos en este ejemplo.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el estado de activación de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento es similar a la <xref:System.Windows.Forms.ListView.ItemCheck> eventos, pero se produce después de que el elemento se ha comprobado.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ItemChecked> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para obtener otro ejemplo, vea el <xref:System.Windows.Forms.ListView.ItemCheck> eventos. El código funciona allí igualmente bien si se adjunta el controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemChecked> eventos.  
  
 Para ejecutar este código de ejemplo, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ItemChecked> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario comienza a arrastrar un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ItemDrag> evento tiene lugar cuando el usuario comienza a arrastrar un elemento. Normalmente, el controlador de eventos para el <xref:System.Windows.Forms.ListView.ItemDrag> eventos realiza la tarea de arrastre mediante una llamada a la <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> método. Puede usar este evento para realizar las tareas necesarias para arrastrar elementos dentro y fuera de la aplicación <xref:System.Windows.Forms.ListView> control.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ItemDrag> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ItemDrag> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se desplaza el puntero sobre un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ItemMouseHover> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ItemMouseHover> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección que contiene todos los elementos del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> que contiene todos los elementos del control <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mediante la <xref:System.Windows.Forms.ListView.ListViewItemCollection> devuelta por esta propiedad, puede agregar elementos, quitar elementos y obtener un recuento de elementos. Para obtener más información sobre las tareas que se pueden realizar con los elementos de la colección, vea el <xref:System.Windows.Forms.ListView.ListViewItemCollection> temas de referencia de la clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el estado de selección de un elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En modo virtual, la <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> evento se producirá cuando cambia el estado de selección de varios elementos.  
  
 El <xref:System.Windows.Forms.ListView.ItemSelectionChanged> evento se produce si cambia el estado del elemento de seleccionado a no seleccionado o no seleccionado a seleccionado.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.ItemSelectionChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.ItemSelectionChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el usuario puede editar las etiquetas de los elementos del control.</summary>
        <value>
          Es <see langword="true" /> si el usuario puede editar las etiquetas de los elementos en tiempo de ejecución; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad está establecida en `true`, el usuario puede modificar el texto de un elemento haciendo clic en el texto del elemento para seleccionarlo y, a continuación, haga clic en el texto del elemento nuevo para poner el texto de etiqueta en el modo de edición. El usuario, a continuación, puede modificar o reemplazar la etiqueta de texto del elemento. Puede usar el <xref:System.Windows.Forms.ListView.BeforeLabelEdit> y <xref:System.Windows.Forms.ListView.AfterLabelEdit> eventos para realizar tareas antes y después de que el usuario edita el texto de un elemento. No se puede modificar el texto de los subelementos si esta propiedad se establece en `true`. Para cambiar el texto de subelementos, puede mostrar un cuadro de diálogo a los usuarios cuando haga doble clic en un subelemento en el control.  
  
> [!NOTE]
>  Si el <xref:System.Windows.Forms.ListView.Activation%2A> propiedad está establecida en <xref:System.Windows.Forms.ItemActivation.OneClick> o <xref:System.Windows.Forms.ItemActivation.TwoClick>, edición de etiquetas no se permitirán independientemente del valor de la <xref:System.Windows.Forms.ListView.LabelEdit%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si las etiquetas de los elementos se ajustan cuando los elementos se muestran en el control como iconos.</summary>
        <value>
          Es <see langword="true" /> si las etiquetas de los elementos se ajustan cuando estos se muestran como iconos; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.Forms.ListView.LabelWrap%2A> propiedad está establecida en `true`, el texto del elemento se ajusta a la siguiente línea de texto si es necesario. Si el texto tiene más de dos líneas de texto, se acorta el texto. Si el usuario selecciona el elemento, se muestra todo el texto del elemento. Si el <xref:System.Windows.Forms.ListView.LabelWrap%2A> propiedad está establecida en `false`, todo el texto de elemento se muestra en una sola línea. Todo el texto se muestra cuando el <xref:System.Windows.Forms.ListView.LabelWrap%2A> está establecido en `false`. Esta propiedad es utiliza únicamente cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon> o <xref:System.Windows.Forms.View.SmallIcon>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Forms.ImageList" /> que se utiliza al mostrar los elementos como iconos grandes en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> que contiene los iconos que se utilizan cuando el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.View" /> está establecido en <see cref="F:System.Windows.Forms.View.LargeIcon" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.LargeImageList%2A> propiedad le permite especificar un <xref:System.Windows.Forms.ImageList> objeto que contiene iconos que se utilizan para mostrar elementos con iconos grandes (cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon>). El <xref:System.Windows.Forms.ListView> control puede aceptar cualquier formato gráfico admitido el <xref:System.Windows.Forms.ImageList> control admite al mostrar iconos. El <xref:System.Windows.Forms.ListView> control no se limita a archivos .ico. Una vez un <xref:System.Windows.Forms.ImageList> se asigna a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> propiedad, puede establecer la <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propiedad de cada <xref:System.Windows.Forms.ListViewItem> en el <xref:System.Windows.Forms.ListView> control a la posición de índice de la imagen apropiada en el <xref:System.Windows.Forms.ImageList>. El tamaño de los iconos de la <xref:System.Windows.Forms.ListView.LargeImageList%2A> especificado por el <xref:System.Windows.Forms.ImageList.ImageSize%2A>.  
  
 Dado que solo un índice puede especificarse para el <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> propiedad, el <xref:System.Windows.Forms.ImageList> objetos especificados en el <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> las propiedades deben tener las mismas posiciones de índice para las imágenes mostrar. Por ejemplo, si la <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propiedad de un <xref:System.Windows.Forms.ListViewItem> se establece en 0, las imágenes que se usará para iconos pequeños y grandes deben estar en la misma posición de índice en el <xref:System.Windows.Forms.ImageList> objetos especificados en el <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades.  
  
> [!NOTE]
>  Cuando se especifican las imágenes con claves, deberá colocar versiones pequeñas y grandes de la imagen en la misma ubicación de índice en las listas de imágenes respectivas. Al cambiar entre las vistas, la ubicación de índice de la imagen en una lista se utiliza para buscar la imagen en la lista, independientemente del valor de clave especificado.  
  
 Para establecer el <xref:System.Windows.Forms.ImageList> que se usará al mostrar los elementos con iconos pequeños (todos los modos de vista distinto de <xref:System.Windows.Forms.View.LargeIcon>), use el <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedad. Si desea utilizar imágenes para mostrar el estado del elemento, utilice la <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el comparador de ordenación para el control.</summary>
        <value>
          <see cref="T:System.Collections.IComparer" /> que representa el comparador de ordenación para el control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad le permite especificar el objeto que realiza la ordenación de elementos en una <xref:System.Windows.Forms.ListView> controlar cuándo el <xref:System.Windows.Forms.ListView.Sort%2A> se llama al método o cuando se agregan elementos a la lista. Tenga en cuenta que los elementos no se ordenan automáticamente cuando cambia el texto de etiqueta.  
  
 El objeto especificado debe ser una instancia de una clase que implementa el <xref:System.Collections.IComparer> interfaz, que tiene un método único denominado <xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>.  
  
 Puede utilizar esta propiedad para proporcionar la ordenación personalizada, por ejemplo, cuando se hace clic en un encabezado de columna en la vista de detalles. Para ello, cree una clase que implementa el <xref:System.Collections.IComparer> de interfaz y proporciona un constructor que acepta el índice de una columna para ordenar por. A continuación, puede implementar un controlador para el <xref:System.Windows.Forms.ListView.ColumnClick> eventos que crea una instancia de esta clase con el índice de la columna seleccionada. Al establecer el <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad a la nueva instancia de la <xref:System.Windows.Forms.ListView> control se ordena automáticamente mediante el objeto especificado. Las llamadas posteriores a la <xref:System.Windows.Forms.ListView.Sort%2A> método utilizar el mismo objeto.  
  
> [!NOTE]
>  Al establecer el valor de la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad, el <xref:System.Windows.Forms.ListView.Sort%2A> método se llama automáticamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un formulario que contiene un <xref:System.Windows.Forms.ListView> control que ordena manualmente los elementos cuando una columna en el <xref:System.Windows.Forms.ListView> se hace clic en el control. En el ejemplo se define una clase denominada `ListViewItemComparer` que implementa el <xref:System.Collections.IComparer?displayProperty=nameWithType> interfaz que realiza el <xref:System.Windows.Forms.ListViewItem> comparación. En el ejemplo se crea una instancia de `ListViewItemComparer` y lo usa para establecer el <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad de la <xref:System.Windows.Forms.ListView> control. El <xref:System.Windows.Forms.ListView.Sort%2A> llamada al método el <xref:System.Windows.Forms.ListView.ColumnClick> controlador de eventos utiliza los métodos definidos en `ListViewItemComparer` para realizar la ordenación de elementos, en función de la columna que se ha hecho clic.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se pueden seleccionar varios elementos.</summary>
        <value>
          Es <see langword="true" /> si se pueden seleccionar varios elementos del control al mismo tiempo; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.Forms.ListView.MultiSelect%2A> propiedad está establecida en `true`, se pueden seleccionar varios elementos en el <xref:System.Windows.Forms.ListView> control. Para seleccionar varios elementos, el usuario debe mantener presionada la tecla CTRL mientras hace clic en los elementos que se va a seleccionar. Haciendo clic en el primer elemento que se va a seleccionar y, a continuación, mientras mantiene presionada la tecla MAYÚS, haga clic en el último elemento que seleccione, se pueden seleccionar elementos consecutivos. Puede usar la característica de selección múltiple para seleccionar varios elementos en el <xref:System.Windows.Forms.ListView> controlar y realizar una operación en todos los elementos seleccionados. Por ejemplo, el usuario puede seleccionar varios elementos y, a continuación, haga clic en un elemento seleccionado para mostrar un menú contextual que muestra un conjunto de tareas que se pueden realizar en los elementos seleccionados.  
  
 Para determinar qué elementos están seleccionados en el <xref:System.Windows.Forms.ListView> de control, use la <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad. El <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad permite obtener acceso a la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> que contiene una lista de los elementos seleccionados. Si desea que las posiciones de índice de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> en lugar de los elementos, puede usar el <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propiedad para tener acceso a la <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Si no desea permitir varias selecciones en la <xref:System.Windows.Forms.ListView>, pero aun así desea ofrecer al usuario una manera para que varios elementos elegido, puede mostrar casillas de verificación estableciendo la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un <xref:System.Windows.Forms.ListView> que permite que se seleccionen varios elementos. En el ejemplo se demuestra cómo establecer el <xref:System.Windows.Forms.ListView.HideSelection%2A> y <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propiedades. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o `Load` método.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.AfterLabelEdit> eventos para restringir una etiqueta recién editada a los caracteres del alfabeto. El ejemplo se utiliza la <xref:System.Text.ASCIIEncoding> clase para obtener el código de carácter ASCII de cada carácter de la nueva etiqueta. Si el carácter está comprendido entre los códigos ASCII que representan números, no se puede aplicar la nueva etiqueta para el elemento. Este ejemplo requiere que se haya creado un <xref:System.Windows.Forms.ListView> control en un formulario y los elementos agregados a él. El ejemplo también requiere que se haya conectado la <xref:System.Windows.Forms.ListView.AfterLabelEdit> evento al controlador de eventos definido en el código de ejemplo. Para poder usar el <xref:System.Text.ASCIIEncoding> (clase), el archivo debe incluir la <xref:System.Text> espacio de nombres.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ColumnClickEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ColumnClick" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnColumnClick%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un formulario que contiene un <xref:System.Windows.Forms.ListView> control que ordena manualmente los elementos cuando una columna en el <xref:System.Windows.Forms.ListView> se hace clic en el control. En el ejemplo se define una clase denominada `ListViewItemComparer` que implementa el <xref:System.Collections.IComparer?displayProperty=nameWithType> interfaz que realiza el <xref:System.Windows.Forms.ListViewItem> comparación. En el ejemplo se crea una instancia de `ListViewItemComparer` y lo usa para establecer el <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad de la <xref:System.Windows.Forms.ListView> control. El <xref:System.Windows.Forms.ListView.Sort%2A> llamada al método el <xref:System.Windows.Forms.ListView.ColumnClick> controlador de eventos utiliza los métodos definidos en `ListViewItemComparer` para realizar la ordenación de elementos, en función de la columna que se ha hecho clic.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ColumnReordered" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.ColumnWidthChanging> evento no se producirá si la ventana de la propiedad Value de completa característica de arrastrar, la opción "Mostrar ventana contenido mientras se arrastra", está deshabilitada.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.DrawItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnDrawItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.DrawSubItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see langword="FontChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.HandleDestroyed" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemActivate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemActivate%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">Objeto <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemCheck" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemCheck%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemChecked" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemChecked%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemDrag%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.MouseHover" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListView.OnMouseHover%2A> método se llama cuando se mantiene el mouse sobre un <xref:System.Windows.Forms.ListViewItem>, el método genera el <xref:System.Windows.Forms.ListView.ItemMouseHover> eventos.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnMouseHover%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.MouseLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.ParentChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.Resize" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Windows.Forms.ListView" /> lo dibuja el sistema operativo o el código proporcionado.</summary>
        <value>
          <see langword="true" /> si el control <see cref="T:System.Windows.Forms.ListView" /> se dibuja mediante el código que se proporciona; <see langword="false" /> si el sistema operativo dibuja el control <see cref="T:System.Windows.Forms.ListView" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.ListView> control normalmente se dibuja el sistema operativo. Para personalizar la apariencia de <xref:System.Windows.Forms.ListView> conjunto de elementos, subelementos y encabezados de columna, el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad `true` y se proporciona un controlador para uno o varios de los siguientes eventos: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>. Esto se denomina dibujo del propietario. Cuando el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, se producen los tres eventos; en caso contrario, solo el <xref:System.Windows.Forms.ListView.DrawItem> se produce el evento.  
  
> [!NOTE]
>  Información de subelemento suele mostrar en la vista en mosaico, así como la vista de detalles, pero en la vista en mosaico, se debe dibujar en un controlador para el <xref:System.Windows.Forms.ListView.DrawItem> eventos. El <xref:System.Windows.Forms.ListView.DrawSubItem> eventos no producen ningún subelemento para la que no <xref:System.Windows.Forms.ColumnHeader> objeto se ha agregado a la <xref:System.Windows.Forms.ListView.Columns%2A> colección. Tenga en cuenta también que el primer subelemento de cada <xref:System.Windows.Forms.ListViewItem> objeto representa el propio elemento primario y se muestra en la primera columna.  
  
 En la vista de detalles, puede controlar la <xref:System.Windows.Forms.ListView.DrawItem> eventos para dibujar los elementos comunes a todos los subelementos, como el fondo y controlar la <xref:System.Windows.Forms.ListView.DrawSubItem> eventos para dibujar los elementos de los subelementos individuales, como los valores de texto. También puede dibujar todos los elementos en el <xref:System.Windows.Forms.ListView> controlar mediante solo uno de los dos eventos, aunque esto puede resultar menos práctico. Para dibujar los encabezados de columna en la vista de detalles, debe controlar el <xref:System.Windows.Forms.ListView.DrawColumnHeader> eventos.  
  
> [!NOTE]
>  Para evitar problemas con gráficos parpadee cuando dibujos de propietario, invalidar la <xref:System.Windows.Forms.ListView> controlar y establecer el <xref:System.Windows.Forms.ListView.DoubleBuffered%2A> propiedad `true`.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo proporcionar un dibujo personalizado para un <xref:System.Windows.Forms.ListView> control. El <xref:System.Windows.Forms.ListView> control en el ejemplo tiene un fondo degradado. Los subelementos con valores negativos tienen un primer plano rojo y un fondo negro.  
  
 Un controlador para el <xref:System.Windows.Forms.ListView.DrawItem> eventos dibuja el fondo de todos los elementos. Un controlador para el <xref:System.Windows.Forms.ListView.DrawSubItem> eventos dibuja los valores de texto y el texto y fondo de los subelementos que tienen valores negativos. Un controlador para el <xref:System.Windows.Forms.ListView.DrawColumnHeader> eventos dibuja cada encabezado de columna.  
  
 Un <xref:System.Windows.Forms.ContextMenu> componente proporciona un mecanismo que permite cambiar entre la vista de detalles y la vista de lista. En la vista de lista, solo el <xref:System.Windows.Forms.ListView.DrawItem> evento se desencadena. En este caso, el texto y el fondo se dibujan ambos en el <xref:System.Windows.Forms.ListView.DrawItem> controlador de eventos.  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio que hay entre el control <see cref="T:System.Windows.Forms.ListView" /> y su contenido.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> que especifica el espacio entre el control <see cref="T:System.Windows.Forms.ListView" /> y su contenido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.Padding" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se dibuja el control <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView> control se dibuja el sistema operativo o está dibujado por el propietario, por lo que el <xref:System.Windows.Forms.ListView.Paint> nunca se genera el evento. Para obtener más información acerca de dibujo del propietario, consulte el <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa las propiedades del control <see cref="T:System.Windows.Forms.ListView" /> que administran su apariencia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">Índice del primer elemento del intervalo que se va a volver a dibujar.</param>
        <param name="endIndex">Índice del último elemento del intervalo que se va a volver a dibujar.</param>
        <param name="invalidateOnly">
          <see langword="true" /> para invalidar el intervalo de elementos; <see langword="false" /> para invalidar y volver a dibujar los elementos.</param>
        <summary>Obliga a volver a dibujar un intervalo de objetos <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.RedrawItems%2A> método puede ser utilizado si el <xref:System.Windows.Forms.ListView> está en modo virtual o en modo normal.  
  
 Si el <xref:System.Windows.Forms.ListView.BeginUpdate%2A> ha llamado al método antes de llamar a <xref:System.Windows.Forms.ListView.RedrawItems%2A>, no se realizará la actualización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> o <paramref name="endIndex" /> es menor que 0, mayor o igual que el número de elementos del control <see cref="T:System.Windows.Forms.ListView" /> o, si se está en modo virtual, mayor que el valor de <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />.  
  
 O bien  
  
 El valor del parámetro <paramref name="startIndex" /> dado es mayor que el valor de <paramref name="endIndex." /></exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el control <see cref="T:System.Windows.Forms.ListView" /> está en modo virtual y requiere un objeto <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.ListView> objeto está en modo virtual, sino que crea <xref:System.Windows.Forms.ListViewItem> objetos dinámicamente, en lugar de usar el <xref:System.Windows.Forms.ListView.Items%2A> colección. Este evento se desencadena cuando el objeto se debe crear un <xref:System.Windows.Forms.ListViewItem> objeto. Un controlador de este evento debe crear la correspondiente <xref:System.Windows.Forms.ListViewItem> o recuperar de la memoria caché y para pasar atrás por medio de la <xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A> propiedad.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un controlador para este evento. En este ejemplo, listView1 necesita cada <xref:System.Windows.Forms.ListViewItem> para mostrar el cuadrado de su índice. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Windows.Forms.ListView.VirtualMode%2A> propiedad.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> no se establece en un elemento cuando se controla el evento <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control se debe disponer de derecha a izquierda.</summary>
        <value>
          <see langword="true" /> para indicar que el control <see cref="T:System.Windows.Forms.ListView" /> se dispone de derecha a izquierda; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView> propiedad es para su uso con aplicaciones internacionales donde el idioma se lee de derecha a izquierda. Si establece <xref:System.Windows.Forms.ListView> y <xref:System.Windows.Forms.RightToLeft> en true el contenido y el texto del control se debe disponer de derecha a izquierda.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se agrega una barra de desplazamiento al control cuando no hay espacio suficiente para mostrar todos los elementos.</summary>
        <value>
          Es <see langword="true" /> si se agregan barras de desplazamiento al control cuando sea necesario para permitir al usuario ver todos los elementos; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando esta propiedad se establece en `true`, el <xref:System.Windows.Forms.ListView> muestra una barra de desplazamiento vertical que se usará cuando el número de elementos supera el tamaño del área cliente del control. Puede utilizar esta propiedad para asegurarse de que el usuario puede tener acceso a todos los elementos que están disponibles en el <xref:System.Windows.Forms.ListView> control.  
  
> [!NOTE]
>  En las versiones de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] antes de la versión 2.0, los encabezados de columna no se dibujan correctamente cuando se establece esta propiedad en `false` y cambiar el tamaño del control para que sea mayor. Para solucionar este problema, establezca esta propiedad en `true` en un <xref:System.Windows.Forms.Form.ResizeBegin> controlador de eventos y restablézcala a `false` en un <xref:System.Windows.Forms.Form.ResizeEnd> controlador de eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el control <see cref="T:System.Windows.Forms.ListView" /> está en modo virtual y se está realizando una búsqueda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se produce cuando un <xref:System.Windows.Forms.ListView> está en modo virtual y el <xref:System.Windows.Forms.ListView.FindNearestItem%2A> o <xref:System.Windows.Forms.ListView.FindItemWithText%2A> se llama al método. Al controlar este evento, debe calcular qué elemento de la lista de elementos proporcionados por el <xref:System.Windows.Forms.ListView.Items%2A> propiedad coincide con los criterios de búsqueda y establezca el <xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType> propiedad en el índice de la <xref:System.Windows.Forms.ListViewItem>. Si no se proporciona un elemento, <xref:System.Windows.Forms.ListView.FindNearestItem%2A> y <xref:System.Windows.Forms.ListView.FindItemWithText%2A> devolverá `null`.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, una búsqueda devuelve a la coincidencia más cercana en un entero especificado en una lista de los primeros diez mil cuadrados. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Windows.Forms.ListView.VirtualMode%2A> propiedad.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la colección <see cref="P:System.Windows.Forms.ListView.SelectedIndices" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.SelectedIndices%2A> colección cada vez que cambia la <xref:System.Windows.Forms.ListViewItem.Selected%2A> propiedad de un <xref:System.Windows.Forms.ListViewItem> cambios. El cambio de propiedad puede producir mediante programación o cuando el usuario selecciona un elemento o anula la selección de un elemento. Cuando el usuario selecciona un elemento sin tener que presionar la tecla CTRL para realizar una selección múltiple, el control primero elimina la selección anterior. En este caso, este evento produce una vez para cada elemento que se ha seleccionado anteriormente y una vez para el elemento recién seleccionado.  
  
 Para determinar qué elementos están seleccionados en el <xref:System.Windows.Forms.ListView> de control, use la <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad para tener acceso a la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>. Puede crear un controlador de eventos para este evento realizar tareas siempre que hay un cambio en los elementos seleccionados en el <xref:System.Windows.Forms.ListView> control.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> eventos, <xref:System.Windows.Forms.ListView.HeaderStyle%2A> miembros y la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> clase. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o `Load` método. Este ejemplo requiere que el controlador de eventos está correctamente asociado con el <xref:System.Windows.Forms.ListView.SelectedIndexChanged> eventos  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los índices de los elementos seleccionados en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> que contiene los índices de los elementos seleccionados. Si no hay ningún elemento seleccionado, se devuelve una colección <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propiedad no contendrá ningún índice si se tiene acceso a la propiedad antes de la <xref:System.Windows.Forms.ListView> se crea el identificador, que normalmente se produce cuando el <xref:System.Windows.Forms.ListView> se carga inicialmente para su presentación en el formulario. También puede comprobar si el identificador se crea con el <xref:System.Windows.Forms.Control.IsHandleCreated%2A> propiedad. Cuando el <xref:System.Windows.Forms.ListView.MultiSelect%2A> propiedad está establecida en `true`, esta propiedad devuelve una colección que contiene los índices de todos los elementos que están seleccionados en el <xref:System.Windows.Forms.ListView>. Para una sola selección <xref:System.Windows.Forms.ListView>, esta propiedad devuelve una colección que contiene un único elemento que contiene el índice del elemento seleccionado en el <xref:System.Windows.Forms.ListView>. Para obtener más información sobre las tareas que se pueden realizar con los elementos de la colección, consulte <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Si desea obtener una colección de los elementos que están seleccionados en el <xref:System.Windows.Forms.ListView> control, en lugar de las posiciones de índice de los elementos que están seleccionadas, use el <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.SelectedIndices%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged>, y <xref:System.Windows.Forms.ListView.HeaderStyle%2A> miembros y la <xref:System.Windows.Forms.ListView.SelectedIndexCollection> clase. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o `Load` método. Este ejemplo se necesita el controlador de eventos está correctamente asociado con el <xref:System.Windows.Forms.ListView.SelectedIndexChanged> eventos.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los elementos seleccionados en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> que contiene los elementos seleccionados en el control. Si no hay ningún elemento seleccionado, se devuelve una colección <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.SelectedItems%2A> propiedad no contendrá ningún elemento si se tiene acceso a la propiedad antes de la <xref:System.Windows.Forms.ListView> se crea el identificador, que normalmente se produce cuando <xref:System.Windows.Forms.ListView> se carga inicialmente para su presentación en el formulario. También puede comprobar si el identificador se crea con el <xref:System.Windows.Forms.Control.IsHandleCreated%2A> propiedad. Cuando el <xref:System.Windows.Forms.ListView.MultiSelect%2A> propiedad está establecida en `true`, esta propiedad devuelve una colección que contiene los elementos que están seleccionados en el <xref:System.Windows.Forms.ListView>. Para una sola selección <xref:System.Windows.Forms.ListView>, esta propiedad devuelve una colección que contiene el único elemento seleccionado en el <xref:System.Windows.Forms.ListView>. Para obtener más información sobre las tareas que se pueden realizar con los elementos de la colección, consulte <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>.  
  
 Si desea obtener una colección de las posiciones de índice dentro de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> de los elementos que están seleccionados en el <xref:System.Windows.Forms.ListView> control, en lugar de los elementos que están seleccionadas, use el <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.SelectedItems%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> eventos, y <xref:System.Windows.Forms.ListView.HeaderStyle%2A> miembros y la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> clase. Para ejecutar este ejemplo, pegue el siguiente código en un formulario que contenga un <xref:System.Windows.Forms.ListView> objeto denominado `ListView1` y un <xref:System.Windows.Forms.TextBox> denominado `TextBox1`. Llame a la `InitializeListView` método desde el constructor del formulario o `Load` método. Este ejemplo se necesita el controlador de eventos está correctamente asociado con el <xref:System.Windows.Forms.ListView.SelectedIndexChanged> eventos  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los elementos se muestran en grupos.</summary>
        <value>
          <see langword="true" /> para mostrar los elementos en grupos; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los grupos asignados a un <xref:System.Windows.Forms.ListView> control cada vez que aparezca el <xref:System.Windows.Forms.ListView.View%2A> propiedad se establece en un valor distinto de <xref:System.Windows.Forms.View.List>. El <xref:System.Windows.Forms.ListView> característica de agrupación le permite crear grupos visuales de relacionadas lógicamente <xref:System.Windows.Forms.ListView> elementos en Windows XP y Windows Server 2003. Para habilitar esta característica, la aplicación debe llamar a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método. Para obtener más información, vea la propiedad <xref:System.Windows.Forms.ListView.Groups%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se muestra información sobre herramientas para los objetos <see cref="T:System.Windows.Forms.ListViewItem" /> que forman parte de <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> si se debe mostrar información sobre herramientas para <see cref="T:System.Windows.Forms.ListViewItem" />; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> propiedad está establecida en `true`, cualquier <xref:System.Windows.Forms.ListViewItem> que tiene una obtendrá información sobre herramientas muestre; de lo contrario, se muestra nada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> y <xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType> propiedades. Para ejecutar este ejemplo, pegue el código en un formulario Windows Forms y llame a `InitializeItemsWithToolTips` desde el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Forms.ImageList" /> que se utiliza al mostrar elementos como iconos pequeños en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> que contiene los iconos que se utilizan cuando el valor de la propiedad <see cref="P:System.Windows.Forms.ListView.View" /> está establecido en <see cref="F:System.Windows.Forms.View.SmallIcon" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedad le permite especificar un <xref:System.Windows.Forms.ImageList> objeto que contiene iconos que se utilizan para mostrar elementos con iconos pequeños (cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad se establece en cualquier valor distinto de <xref:System.Windows.Forms.View.LargeIcon>). El <xref:System.Windows.Forms.ListView> control puede aceptar cualquier formato gráfico admitido el <xref:System.Windows.Forms.ImageList> control admite al mostrar iconos. El <xref:System.Windows.Forms.ListView> control no se limita a archivos .ico. Una vez un <xref:System.Windows.Forms.ImageList> se asigna a la <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedad, puede establecer la <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propiedad de cada <xref:System.Windows.Forms.ListViewItem> en el <xref:System.Windows.Forms.ListView> control a la posición de índice de la imagen apropiada en el <xref:System.Windows.Forms.ImageList>. El tamaño de los iconos de la <xref:System.Windows.Forms.ListView.SmallImageList%2A> especificado por el <xref:System.Windows.Forms.ImageList.ImageSize%2A> propiedad.  
  
 Dado que solo un índice puede especificarse para el <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> propiedad, el <xref:System.Windows.Forms.ImageList> objetos especificados en el <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> las propiedades deben tener las mismas posiciones de índice para las imágenes mostrar. Por ejemplo, si la <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propiedad de un <xref:System.Windows.Forms.ListViewItem> se establece en 0, las imágenes que se usará para iconos pequeños y grandes deben estar en la misma posición de índice en el <xref:System.Windows.Forms.ImageList> objetos especificados en el <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades.  
  
> [!NOTE]
>  Cuando se especifican las imágenes con claves, deberá colocar versiones pequeñas y grandes de la imagen en la misma ubicación de índice en las listas de imágenes respectivas. Al cambiar entre las vistas, la ubicación de índice de la imagen en una lista se utiliza para buscar la imagen en la lista, independientemente del valor de clave especificado.  
  
 Para establecer el <xref:System.Windows.Forms.ImageList> que se usará al mostrar los elementos con iconos grandes (cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.LargeIcon>), use el <xref:System.Windows.Forms.ListView.LargeImageList%2A> propiedad. Si desea utilizar imágenes para mostrar el estado del elemento, utilice la <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ordena los elementos de la vista de lista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente los elementos se ordenan mediante el <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad, que ordena los elementos según el texto del elemento. Para personalizar el criterio de ordenación, debe escribir una clase que implementa el <xref:System.Collections.IComparer> interfaz y establezca el <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad a un objeto de esa clase. Esto es útil, por ejemplo, si desea ordenar los elementos por el texto del subelemento. Para obtener más información acerca de cómo realizar la clasificación manual de elementos, vea el ejemplo de la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad.  
  
 Si el <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> propiedad se establece en un valor distinto de <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> o si la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad está establecida, la lista se ordena automáticamente cuando se agregan elementos. Elementos no se ordenan automáticamente cuando cambia el texto del rótulo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el criterio de ordenación de los elementos en el control.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.SortOrder" />. El valor predeterminado es <see cref="F:System.Windows.Forms.SortOrder.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad le permite especificar si se permite o no se ordenan los elementos en el <xref:System.Windows.Forms.ListView> control. De forma predeterminada, no se realiza ninguna ordenación. Cuando el <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad está establecida en <xref:System.Windows.Forms.SortOrder.Ascending> o <xref:System.Windows.Forms.SortOrder.Descending>, los elementos de la <xref:System.Windows.Forms.ListView> se ordenan automáticamente en orden alfabético ascendente (cuando la propiedad se establece en <xref:System.Windows.Forms.SortOrder.Ascending>) o el orden alfabético descendente (cuando la propiedad se establece en <xref:System.Windows.Forms.SortOrder.Descending>). Puede utilizar esta propiedad para ordenar automáticamente los elementos que se muestran en el <xref:System.Windows.Forms.ListView> control para que sea más fácil para los usuarios buscar elementos cuando hay un gran número de elementos.  
  
 Si desea realizar su propio elemento de ordenación en lugar de utilizar el <xref:System.Windows.Forms.ListView.Sorting%2A> propiedad, utilice la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad en combinación con la <xref:System.Windows.Forms.ListView.Sort%2A> método.  
  
 Si el <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> propiedad se establece en un valor distinto de <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> o si la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propiedad está establecida, la lista se ordena automáticamente cuando se agregan elementos. Elementos no se ordenan automáticamente cuando cambia el texto del rótulo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.SortOrder" />.</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Forms.ImageList" /> asociado a los estados definidos por la aplicación en el control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> que contiene un conjunto de imágenes de estado que se pueden utilizar para indicar el estado definido por la aplicación de un elemento. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedad le permite especificar un <xref:System.Windows.Forms.ImageList> que contiene imágenes que se utilizan para representar un estado específico de la aplicación de un elemento en un <xref:System.Windows.Forms.ListView> control. Las imágenes de estado se muestran a la izquierda de un icono para el elemento. Puede utilizar imágenes de estado, por ejemplo, casillas checked y unchecked para indicar los Estados de elemento definidos por la aplicación. Las imágenes de estado están visibles en todas las vistas de la <xref:System.Windows.Forms.ListView> control.  
  
 Si un <xref:System.Windows.Forms.ImageList> se especifica en el <xref:System.Windows.Forms.ListView.StateImageList%2A> propiedad y el <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propiedad está establecida en `true`, las imágenes en las posiciones de índice 0 y 1 en el <xref:System.Windows.Forms.ImageList> se muestran en lugar de la casilla de verificación. Se muestra la imagen en la posición de índice 0 en lugar de la casilla de verificación no está activada y se muestra la imagen en la posición de índice 1 en lugar de la casilla de verificación activada.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esta propiedad no es relevante para esta clase.</summary>
        <value>Texto que se va a mostrar en el control <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no es relevante para esta clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la propiedad <see cref="P:System.Windows.Forms.ListView.Text" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tamaño de los iconos que se muestran en la vista en mosaico.</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> que contiene el nuevo tamaño de mosaico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad controla el tamaño de iconos cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Establecer esta propiedad es útil para evitar el ajuste de línea cuando el texto del subelemento es demasiado largo para mostrarse en una sola línea.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.ListView> característica de disposición en mosaico. En el ejemplo, la vista de mosaico muestra elementos que representan libros. Cada elemento se muestra como un icono que contiene un icono de un libro, el título, el autor y el año de publicación. Para que funcione el código de ejemplo, debe incluir un archivo de icono llamado Book.ico en el mismo directorio que el ejemplo. Para ver el icono de vista sin iconos, comente las líneas relacionadas con la <xref:System.Windows.Forms.ImageList> objeto.  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el primer elemento visible del control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" /> que representa el primer elemento visible del control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inicialmente, es el elemento con la posición de índice de cero (0) en la parte superior de la <xref:System.Windows.Forms.ListView> control. Si el <xref:System.Windows.Forms.ListView> se desplaza el contenido del control, puede ser un elemento diferente en la parte superior del control. Puede utilizar esta propiedad para indicar o determinar qué elemento está visible en la parte superior de la <xref:System.Windows.Forms.ListView> control. El valor de la <xref:System.Windows.Forms.ListView.TopItem%2A> propiedad no siempre se conserva, dependiendo de dónde esté el elemento superior deseado en la vista de lista.  
  
 El número de elementos visibles de un <xref:System.Windows.Forms.ListView> control en cualquier momento depende del alto de la vista de lista y el tamaño de los elementos que contiene. Si los elementos superan el alto de la vista de lista, los elementos se seguirán en varias páginas, que el usuario puede desplazarse a través de. Si establece la <xref:System.Windows.Forms.ListView.TopItem%2A> propiedad a un elemento en la última página de la <xref:System.Windows.Forms.ListView>, el elemento se desplazará automáticamente en la vista; sin embargo, <xref:System.Windows.Forms.ListView.TopItem%2A> se establecerá en el elemento superior real de la última página.  
  
 Para asegurarse de que un elemento específico en la región visible del control (pero no necesariamente en la posición superior), use el <xref:System.Windows.Forms.ListView.EnsureVisible%2A> método.  
  
> [!NOTE]
>  Al establecer esta propiedad no tiene ningún efecto cuando la <xref:System.Windows.Forms.ListView.Scrollable%2A> es el valor de la propiedad `false`.  
>   
>  Al establecer esta propiedad no se admite en las versiones de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] antes de la versión 2.0.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo restablecer el estilo de un <xref:System.Windows.Forms.ListViewItem> subelementos del objeto mediante el uso de la <xref:System.Windows.Forms.ListView.TopItem%2A> propiedad y el <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType> método. Para ejecutar el ejemplo, pegue el siguiente código en un formulario que contenga un botón denominado `Button1` y llamar a la `InitializeListView` método en el constructor del formulario o <xref:System.Windows.Forms.Form.Load> controlador de eventos.  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El valor de la propiedad <see cref="P:System.Windows.Forms.ListView.View" /> está establecido en <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" /> o <see cref="F:System.Windows.Forms.View.Tile" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una representación en forma de cadena del control <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <returns>Cadena que indica el tipo de control, el número de elementos en el control <see cref="T:System.Windows.Forms.ListView" /> y el tipo del primer elemento de <see cref="T:System.Windows.Forms.ListView" /> si el recuento no es 0.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualiza los estilos extendidos aplicados al control de vista de lista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A> método en una clase derivada para reemplazar los estilos extendidos utilizados por el <xref:System.Windows.Forms.ListView> control. Si se llama a este método, debe asegurarse de que los estilos extendidos establecidos por las propiedades en el <xref:System.Windows.Forms.ListView> control se utilizan en la versión derivada del control.  
  
 Los siguientes son las propiedades que se aplican un estilo extendido para el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si <see cref="T:System.Windows.Forms.ListView" /> utiliza un comportamiento de imágenes de estado compatible con [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0.</summary>
        <value>
          <see langword="true" /> si el comportamiento de las imágenes de estado es compatible con [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1; <see langword="false" /> si el comportamiento es compatible con [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cambia a la <xref:System.Windows.Forms.ListView> controlar en el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 habilitar imágenes de estado personalizadas establecer para indicar si un elemento está activada o desactivada o en un estado indeterminado. Con la adición de esta característica, la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 tiene un comportamiento diferente de .NET Framework 1.1. Si ha creado aplicaciones que dependen del comportamiento en la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1, asegúrese de que el <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> propiedad está establecida en `true`, que es el valor predeterminado. Para sacar el máximo provecho de las imágenes de estado personalizado, establecer <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> a `false`.  
  
> [!NOTE]
>  Si usas el [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)] diseñador, el <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> propiedad se establecerá en `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece cómo se muestran los elementos en el control.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.View" />. El valor predeterminado es <see cref="F:System.Windows.Forms.View.LargeIcon" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ListView.View%2A> propiedad le permite especificar el tipo de visualización de la <xref:System.Windows.Forms.ListView> control usa para mostrar los elementos. Puede establecer el <xref:System.Windows.Forms.ListView.View%2A> propiedad para mostrar los elementos con iconos grandes o pequeños o mostrar los elementos en una lista vertical. La opción más completa es la vista de detalles, que le permite ver no solo los elementos sino también cualquier subelemento especificado para cada elemento. Cada elemento se muestra en una cuadrícula, con cada elemento presentado de forma vertical y los subelementos para cada elemento que se muestra en una columna, con encabezados de columna. La vista de detalles es una manera perfecta para mostrar información de base de datos a un usuario. Con Windows XP y Windows Server 2003, también puede mostrar los elementos como mosaicos que equilibran la información gráfica y textual mostrando un icono grande junto con información de subelemento de su elección. Para habilitar la vista en mosaico, la aplicación debe llamar a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método. La vista de imágenes pequeñas muestra cada elemento con un icono e información textual a la derecha del icono. La vista de la imagen grande muestra cada elemento con un icono e información textual debajo del icono. El tamaño de los iconos de la lista de imágenes especificado por el <xref:System.Windows.Forms.ImageList.ImageSize%2A> propiedad de la <xref:System.Windows.Forms.ImageList> para el <xref:System.Windows.Forms.ListView.SmallImageList%2A> o <xref:System.Windows.Forms.ListView.LargeImageList%2A> propiedades.  
  
> [!NOTE]
>  Si utiliza varias listas de imágenes, para la vista de iconos pequeños y grandes, con un <xref:System.Windows.Forms.ListView> (control), debe colocar pequeños y grandes versiones de la imagen en la misma ubicación en las listas de imágenes respectivas de índice. Al cambiar entre las vistas, la ubicación de índice de la imagen en una lista se utiliza para buscar la imagen en la lista, independientemente del valor de clave especificado.  
  
 La mayoría de las propiedades de la <xref:System.Windows.Forms.ListView> control afecta a cómo se comportan o se muestran las distintas vistas. Algunas propiedades que afectan a las vistas de los elementos sólo son útiles cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad se establece en un valor específico, mientras que otras son útiles en todas las vistas. Por ejemplo, las propiedades como <xref:System.Windows.Forms.ListView.GridLines%2A> y <xref:System.Windows.Forms.ListView.FullRowSelect%2A> sólo son útiles cuando la <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, mientras que la <xref:System.Windows.Forms.ListView.MultiSelect%2A> y <xref:System.Windows.Forms.ListView.CheckBoxes%2A> las propiedades son útiles en todas las vistas.  
  
 La tabla siguiente muestran algunos de los <xref:System.Windows.Forms.ListView> miembros y las vistas que son válidos.  
  
|Miembro de ListView|Ver|  
|---------------------|----------|  
|Propiedad <xref:System.Windows.Forms.ListView.Alignment%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Propiedad <xref:System.Windows.Forms.ListView.AutoArrange%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Método <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|Todas las vistas excepto <xref:System.Windows.Forms.View.Tile>|  
|Propiedad <xref:System.Windows.Forms.ListView.Columns%2A>|<xref:System.Windows.Forms.View.Details> o <xref:System.Windows.Forms.View.Tile>|  
|Evento <xref:System.Windows.Forms.ListView.DrawSubItem>|<xref:System.Windows.Forms.View.Details>|  
|Método <xref:System.Windows.Forms.ListView.FindItemWithText%2A>|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>o <xref:System.Windows.Forms.View.Tile>|  
|Método <xref:System.Windows.Forms.ListView.FindNearestItem%2A>|<xref:System.Windows.Forms.View.SmallIcon> o <xref:System.Windows.Forms.View.LargeIcon>|  
|Método <xref:System.Windows.Forms.ListView.GetItemAt%2A>|<xref:System.Windows.Forms.View.Details> o <xref:System.Windows.Forms.View.Tile>|  
|Propiedad <xref:System.Windows.Forms.ListView.Groups%2A>|Todas las vistas excepto <xref:System.Windows.Forms.View.List>|  
|Propiedad <xref:System.Windows.Forms.ListView.HeaderStyle%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propiedad <xref:System.Windows.Forms.ListView.InsertionMark%2A>|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>o <xref:System.Windows.Forms.View.Tile>|  
  
 Puede usar el <xref:System.Windows.Forms.ListView.View%2A> propiedad para proporcionar vistas diferentes de los datos de la aplicación o para bloquear una vista específica y utilizar las ventajas de dicha vista. Por ejemplo, el <xref:System.Windows.Forms.ListView.View%2A> propiedad a menudo se establece en <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType> porque la vista de detalles proporciona una serie de visualización de opciones no están disponibles en las otras vistas.  
  
> [!NOTE]
>  Si su <xref:System.Windows.Forms.ListView> control no tiene ningún encabezado de columna especificado y establece la <xref:System.Windows.Forms.ListView.View%2A> propiedad <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, el <xref:System.Windows.Forms.ListView> control no mostrará todos los elementos. Si su <xref:System.Windows.Forms.ListView> control no tiene ningún encabezado de columna especificado y establece la <xref:System.Windows.Forms.ListView.View%2A> propiedad <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>, el <xref:System.Windows.Forms.ListView> control no mostrará ningún subelemento.  
  
 La vista de mosaico muestra cada elemento con un icono grande en la izquierda e información textual a la derecha. La información de texto está formada por la etiqueta del elemento seguida de subelementos. De forma predeterminada, se muestra solo el primer subelemento, que corresponde a la etiqueta del elemento. Para mostrar más subelementos, debe agregar <xref:System.Windows.Forms.ColumnHeader> objetos a la <xref:System.Windows.Forms.ListView.Columns%2A> colección. Cada subelemento en el mosaico se corresponde con un encabezado de columna. Para controlar el orden en que se muestran y se muestran los subelementos, debe establecer el <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType> propiedad para cada elemento y el <xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType> propiedad para cada encabezado. A continuación, puede agregar, quitar y reorganizar los encabezados en la <xref:System.Windows.Forms.ListView.Columns%2A> colección para lograr el resultado deseado.  
  
 Para controlar el tamaño de los iconos en la vista en mosaico, establezca el <xref:System.Windows.Forms.ListView.TileSize%2A> propiedad. Esto es útil para evitar el ajuste de línea cuando el texto del subelemento es demasiado largo para una sola línea.  
  
 Para obtener un ejemplo de la vista en mosaico, vea el <xref:System.Windows.Forms.ListView.TileSize%2A> propiedad.  
  
> [!NOTE]
>  Aunque solo se muestran las columnas en la vista de detalles, los subelementos sin encabezados de columna no se mostrarán en la vista de detalles o la vista de mosaico.  
  
 La vista de mosaico solo está disponible en Windows XP y Windows Server 2003 cuando la aplicación llama a la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> método. En sistemas operativos anteriores, el código relacionado con la vista de mosaico no tiene ningún efecto y el control <xref:System.Windows.Forms.ListView> se muestra en la vista de iconos grandes. Como resultado, cualquier código que depende de la vista de mosaico no funcionen correctamente.  
  
 Posible que desee incluir código que determina si la vista en mosaico está disponible y proporcionar una funcionalidad alternativa cuando no está disponible. Por ejemplo, cuando usa el dibujo para personalizar la apariencia del propietario <xref:System.Windows.Forms.ListView> elementos en la vista en mosaico, puede usar código de dibujo adecuado a la vista de iconos grandes cuando se ejecuta en sistemas operativos que no son compatibles con la vista de mosaico.  
  
 La característica de vista de mosaico se proporciona la misma biblioteca que proporciona la característica de temas del sistema operativo. Para comprobar la disponibilidad de esta biblioteca, llame a la <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> sobrecarga del método y pase la <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Windows.Forms.ListView> control con tres <xref:System.Windows.Forms.ListViewItem> objetos especificados y tres <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objetos especificados para cada elemento. El ejemplo también crea <xref:System.Windows.Forms.ColumnHeader> objetos que se mostrarán los subelementos en la vista de detalles. Dos <xref:System.Windows.Forms.ImageList> objetos también se crean en el ejemplo de código para proporcionar imágenes para la <xref:System.Windows.Forms.ListViewItem> objetos. Estos <xref:System.Windows.Forms.ImageList> se agregan objetos a la <xref:System.Windows.Forms.ListView.LargeImageList%2A> y <xref:System.Windows.Forms.ListView.SmallImageList%2A> propiedades. El ejemplo utiliza las propiedades siguientes para crear el <xref:System.Windows.Forms.ListView> control.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Este ejemplo requiere que haya agregado el código a un <xref:System.Windows.Forms.Form> y llame al método creado en el ejemplo desde el constructor u otro método en el formulario. El ejemplo también requiere que las imágenes denominen `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, y `MyLargeImage2` se encuentran en el directorio raíz de la unidad C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es ninguno de los valores de <see cref="T:System.Windows.Forms.View" />.</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un control <see cref="T:System.Windows.Forms.ListView" /> está en modo virtual y cambia el estado de selección de un intervalo de elementos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Forms.ListView> no está en modo virtual, el <xref:System.Windows.Forms.ListView.ItemSelectionChanged> se producirá el evento.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar. Para informar sobre varios eventos o sobre eventos que se producen con frecuencia, considere la posibilidad de reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.ListView> denominado `ListView1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de objetos <see cref="T:System.Windows.Forms.ListViewItem" /> que contiene la lista cuando se está en el modo virtual.</summary>
        <value>Número de objetos <see cref="T:System.Windows.Forms.ListViewItem" /> que contiene <see cref="T:System.Windows.Forms.ListView" /> en modo virtual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtener o establecer el <xref:System.Windows.Forms.ListView.VirtualListSize%2A> propiedad cuando <xref:System.Windows.Forms.ListView.VirtualMode%2A> establecido en `false` no tiene ningún efecto el <xref:System.Windows.Forms.ListView>.  
  
 Si <xref:System.Windows.Forms.ListView.VirtualMode%2A> está establecido en `true`y el <xref:System.Windows.Forms.ListView.VirtualListSize%2A> propiedad es mayor que 0, se debe controlar la <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> eventos, proporcionar válido <xref:System.Windows.Forms.ListViewItem>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Se ha establecido <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> en un valor menor que 0.</exception>
        <exception cref="T:System.InvalidOperationException">
          Se ha establecido <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> en <see langword="true" />, <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> es mayor que 0 y no se controla <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />.</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si proporcionó sus propias operaciones de administración de datos para el control <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Windows.Forms.ListView" /> utiliza las operaciones de administración de datos proporcionadas; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Windows.Forms.ListView.VirtualMode%2A> propiedad `true` coloca el <xref:System.Windows.Forms.ListView> en modo virtual. En el modo Virtual, la normal <xref:System.Windows.Forms.ListView.Items%2A> no se utiliza la colección. En su lugar, <xref:System.Windows.Forms.ListViewItem> objetos se crean de manera dinámica como la <xref:System.Windows.Forms.ListView> los necesita.  
  
 Modo virtual puede ser útil en muchas circunstancias. Si un <xref:System.Windows.Forms.ListView> se debe rellenar el objeto de una colección muy grande en la memoria, crear un <xref:System.Windows.Forms.ListViewItem> objeto por cada entrada puede ser innecesarios. En modo virtual, se crean solo los elementos necesarios. En otros casos, los valores de la <xref:System.Windows.Forms.ListViewItem> objetos que necesite volver a calcular con frecuencia, y hacer esto para toda la colección generaría un rendimiento inaceptable. En el modo virtual, se calculan solo los elementos necesarios.  
  
 Para utilizar el modo virtual, debe controlar el <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> evento, que se genera cada vez el <xref:System.Windows.Forms.ListView> requiere un elemento. Este controlador de eventos debe crear el <xref:System.Windows.Forms.ListViewItem> objeto al que pertenece en el índice especificado. Además, la <xref:System.Windows.Forms.ListView.VirtualListSize%2A> propiedad debe establecerse en el tamaño de la lista virtual.  
  
 Controlar la <xref:System.Windows.Forms.ListView.SearchForVirtualItem> eventos permite la búsqueda en modo virtual. Si este evento no está controlado, el <xref:System.Windows.Forms.ListView.FindItemWithText%2A> y <xref:System.Windows.Forms.ListView.FindNearestItem%2A> métodos devolverán `null`.  
  
 Puede controlar la <xref:System.Windows.Forms.ListView.CacheVirtualItems> eventos para mantener una caché de <xref:System.Windows.Forms.ListViewItem> objetos. Si el cálculo o la búsqueda para crear un <xref:System.Windows.Forms.ListViewItem> objeto es caro, mantiene una caché puede mejorar el rendimiento.  
  
 Si el <xref:System.Windows.Forms.ListView.View%2A> propiedad está establecida en <xref:System.Windows.Forms.View.Tile>, el valor se cambiará automáticamente a <xref:System.Windows.Forms.View.LargeIcon> cuando <xref:System.Windows.Forms.ListView.VirtualMode%2A> está establecido en `true`.  
  
 En modo virtual, el <xref:System.Windows.Forms.ListView.Items%2A> se deshabilita la recopilación. Intenta tener acceso a los resultados en un <xref:System.InvalidOperationException>. Lo mismo puede decirse de la <xref:System.Windows.Forms.ListView.CheckedItems%2A> colección y <xref:System.Windows.Forms.ListView.SelectedItems%2A> colección. Si van a recuperar los elementos seleccionados o activados, use la <xref:System.Windows.Forms.ListView.SelectedIndices%2A> y <xref:System.Windows.Forms.ListView.CheckedIndices%2A> colecciones en su lugar.  
  
   
  
## Examples  
 Este ejemplo muestra un sencillo <xref:System.Windows.Forms.ListView> cuyo contenido es los primeros diez mil cuadrados. Controla la búsqueda y usa una memoria caché para aumentar el rendimiento.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> se ha establecido en <see langword="true" /> y hay una de las siguientes condiciones:  
  
-   El valor de <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> es mayor que 0 y no se controla <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />.  
  
     O bien  
  
-   <see cref="P:System.Windows.Forms.ListView.Items" />, <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> o <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> contiene elementos.  
  
     O bien  
  
-   Se han realizado modificaciones en <see cref="P:System.Windows.Forms.ListView.Items" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> de Windows que se va a procesar.</param>
        <summary>Invalida <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>