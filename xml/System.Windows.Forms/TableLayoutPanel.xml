<Type Name="TableLayoutPanel" FullName="System.Windows.Forms.TableLayoutPanel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed08b9509e74677e8bda0d3b9dd473226c377b71" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36513530" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TableLayoutPanel : System.Windows.Forms.Panel, System.ComponentModel.IExtenderProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableLayoutPanel extends System.Windows.Forms.Panel implements class System.ComponentModel.IExtenderProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TableLayoutPanel" />
  <TypeSignature Language="VB.NET" Value="Public Class TableLayoutPanel&#xA;Inherits Panel&#xA;Implements IExtenderProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableLayoutPanel : System::Windows::Forms::Panel, System::ComponentModel::IExtenderProvider" />
  <TypeSignature Language="F#" Value="type TableLayoutPanel = class&#xA;    inherit Panel&#xA;    interface IExtenderProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Panel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IExtenderProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnCount")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TableLayoutPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ProvideProperty("ColumnSpan", typeof(System.Windows.Forms.Control))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ProvideProperty("RowSpan", typeof(System.Windows.Forms.Control))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ProvideProperty("Row", typeof(System.Windows.Forms.Control))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ProvideProperty("Column", typeof(System.Windows.Forms.Control))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ProvideProperty("CellPosition", typeof(System.Windows.Forms.Control))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un panel que dispone dinámicamente su contenido en una cuadrícula que se compone de filas y columnas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El control <xref:System.Windows.Forms.TableLayoutPanel> organiza su contenido en una cuadrícula. Como el diseño se realiza en tiempo de diseño y en tiempo de ejecución, puede cambiar dinámicamente cuando cambie el entorno de la aplicación. Esto proporciona a los controles del panel la capacidad de ajustar el tamaño proporcionalmente para poder responder a cambios como el ajuste de tamaño del control primario o el cambio de longitud del texto debido a la localización.  
  
 Cualquier control de Windows Forms puede ser un control secundario del control <xref:System.Windows.Forms.TableLayoutPanel>, incluidas otras instancias de <xref:System.Windows.Forms.TableLayoutPanel>. Esto le permite construir diseños sofisticados que se adaptan a los cambios en tiempo de ejecución.  
  
 El control <xref:System.Windows.Forms.TableLayoutPanel> puede expandirse para acomodar nuevos controles cuando se agreguen, dependiendo del valor de las propiedades <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A>, <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> y <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A>. Establecer las propiedades <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> o <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> en un valor de 0 especifica que el <xref:System.Windows.Forms.TableLayoutPanel> se desenlazará en la dirección correspondiente.  
  
 También puede controlar la dirección de expansión (horizontal o vertical) cuando el control <xref:System.Windows.Forms.TableLayoutPanel> se llene de controles secundarios. De forma predeterminada, el control <xref:System.Windows.Forms.TableLayoutPanel> se expande hacia abajo agregando filas.  
  
 Si quiere que el comportamiento de las filas y columnas sea diferente del predeterminado, puede controlar las propiedades de las filas y columnas mediante las propiedades <xref:System.Windows.Forms.TableLayoutPanel.RowStyles%2A> y <xref:System.Windows.Forms.TableLayoutPanel.ColumnStyles%2A>. Puede establecer las propiedades de las filas o columnas individualmente.  
  
 El control <xref:System.Windows.Forms.TableLayoutPanel> agrega las siguientes propiedades a sus controles secundarios: `Cell`, `Column`, `Row`, `ColumnSpan` y `RowSpan`.  
  
 Puede combinar las celdas del control <xref:System.Windows.Forms.TableLayoutPanel> estableciendo las propiedades `ColumnSpan` o `RowSpan` de un control secundario.  
  
> [!NOTE]
>  Para establecer el `Cell`, `Column`, `Row`, `ColumnSpan`, y `RowSpan` propiedades en tiempo de ejecución, utilice el <xref:System.Windows.Forms.TableLayoutPanel.SetCellPosition%2A>, <xref:System.Windows.Forms.TableLayoutPanel.SetColumn%2A>, <xref:System.Windows.Forms.TableLayoutPanel.SetRow%2A>, <xref:System.Windows.Forms.TableLayoutPanel.SetColumnSpan%2A>, y <xref:System.Windows.Forms.TableLayoutPanel.SetRowSpan%2A> métodos.  
>   
>  Para leer el `Cell`, `Column`, `Row`, `ColumnSpan`, y `RowSpan` propiedades en tiempo de ejecución, utilice el <xref:System.Windows.Forms.TableLayoutPanel.GetCellPosition%2A>, <xref:System.Windows.Forms.TableLayoutPanel.GetColumn%2A>, <xref:System.Windows.Forms.TableLayoutPanel.GetRow%2A>, <xref:System.Windows.Forms.TableLayoutPanel.GetColumnSpan%2A>, y <xref:System.Windows.Forms.TableLayoutPanel.GetRowSpan%2A> métodos.  
  
 El comportamiento de acoplamiento de los controles secundarios es igual que otros controles contenedor.  
  
 El comportamiento de anclaje de controles secundarios en un <xref:System.Windows.Forms.TableLayoutPanel> difiere del comportamiento de otros controles contenedor. Si el valor del control secundario <xref:System.Windows.Forms.Control.Anchor%2A> propiedad está establecida en <xref:System.Windows.Forms.AnchorStyles.Left> o <xref:System.Windows.Forms.AnchorStyles.Right>, el control se colocará en el borde izquierdo o derecho de la celda, a una distancia que es la suma del control <xref:System.Windows.Forms.Control.Margin%2A> propiedad y el panel <xref:System.Windows.Forms.Control.Padding%2A> propiedad. Si tanto la <xref:System.Windows.Forms.AnchorStyles.Left> y <xref:System.Windows.Forms.AnchorStyles.Right> están establecidas, el control que se dimensionarán el ancho de la celda, con el <xref:System.Windows.Forms.Control.Margin%2A> y <xref:System.Windows.Forms.Control.Padding%2A> valores tomados en consideración. El comportamiento de <xref:System.Windows.Forms.AnchorStyles.Top> y <xref:System.Windows.Forms.AnchorStyles.Bottom> delimitación es análoga. Para obtener más información, consulte [Cómo: delimitador y acoplar controles secundarios en un TableLayoutPanel Control](~/docs/framework/winforms/controls/how-to-anchor-and-dock-child-controls-in-a-tablelayoutpanel-control.md).  
  
 Si necesita un control secundario para imitar el comportamiento de anclaje predeterminado de otros controles contenedor, puede ajustar el <xref:System.Windows.Forms.Control.Margin%2A> y <xref:System.Windows.Forms.Control.Padding%2A> propiedades para mantener una distancia constante entre el borde del control y el borde de la celda.  
  
 Establecer los valores de la `Column` y `Row` propiedades de un control secundario en -1 hará que el control se muevan a la primera celda vacía de la <xref:System.Windows.Forms.TableLayoutPanel> control. La celda vacía se elegirá en una búsqueda que se realiza de izquierda a derecha y de arriba a abajo. Este orden es dependiente de la referencia cultural, por lo que se comportará correctamente en diseños de derecha a izquierda (RTL).  
  
> [!NOTE]
>  Sólo a los controles que tienen la <xref:System.Windows.Forms.Control.Visible%2A> propiedad establecida en `true` participar en la <xref:System.Windows.Forms.TableLayoutPanel> cálculos de diseño del control.  
  
 Vea también:  
  
-   [Cómo: Alinear y expandir un control en un control TableLayoutPanel](~/docs/framework/winforms/controls/how-to-align-and-stretch-a-control-in-a-tablelayoutpanel-control.md)  
  
-   [Cómo: Abarcar filas y columnas en un control TableLayoutPanel](~/docs/framework/winforms/controls/how-to-span-rows-and-columns-in-a-tablelayoutpanel-control.md)  
  
-   [Cómo: Editar columnas y filas en un control TableLayoutPanel](~/docs/framework/winforms/controls/how-to-edit-columns-and-rows-in-a-tablelayoutpanel-control.md)  
  
-   [Tutorial: Organizar controles en Windows Forms mediante TableLayoutPanel](~/docs/framework/winforms/controls/walkthrough-arranging-controls-on-windows-forms-using-a-tablelayoutpanel.md)  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Windows.Forms.TableLayoutPanel.OnCellPaint%2A> método para crear una apariencia personalizada para una celda.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#100)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#100)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.FlowLayoutPanel" />
    <altmember cref="T:System.Windows.Forms.TableLayoutSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableLayoutPanel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableLayoutPanel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor establece la <xref:System.Windows.Forms.TableLayoutPanel.BorderStyle%2A>, <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A>, <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A>, y <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedades con sus valores predeterminados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.TableLayoutPanel.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de borde del panel.</summary>
        <value>Uno de los valores <see cref="T:System.Windows.Forms.BorderStyle" /> que describen el estilo del borde del panel. El valor predeterminado es <see cref="F:System.Windows.Forms.BorderStyle.None" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutPanelCellBorderStyle CellBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.TableLayoutPanelCellBorderStyle CellBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.CellBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property CellBorderStyle As TableLayoutPanelCellBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutPanelCellBorderStyle CellBorderStyle { System::Windows::Forms::TableLayoutPanelCellBorderStyle get(); void set(System::Windows::Forms::TableLayoutPanelCellBorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.CellBorderStyle : System.Windows.Forms.TableLayoutPanelCellBorderStyle with get, set" Usage="System.Windows.Forms.TableLayoutPanel.CellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutPanelCellBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de los bordes de celda.</summary>
        <value>Uno de los valores <see cref="T:System.Windows.Forms.TableLayoutPanelCellBorderStyle" /> que describen el estilo de todos los bordes de celda de la tabla. El valor predeterminado es <see cref="F:System.Windows.Forms.TableLayoutPanelCellBorderStyle.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer este valor hará que el panel a dibujarse, así como su contenido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se establece el valor de la <xref:System.Windows.Forms.TableLayoutPanel.BorderStyle%2A> propiedad según seleccionado <xref:System.Windows.Forms.RadioButton>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.BorderStyle" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnStyles" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.RowStyles" />
      </Docs>
    </Member>
    <Member MemberName="CellPaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TableLayoutCellPaintEventHandler CellPaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TableLayoutCellPaintEventHandler CellPaint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TableLayoutPanel.CellPaint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellPaint As TableLayoutCellPaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TableLayoutCellPaintEventHandler ^ CellPaint;" />
      <MemberSignature Language="F#" Value="member this.CellPaint : System.Windows.Forms.TableLayoutCellPaintEventHandler " Usage="member this.CellPaint : System.Windows.Forms.TableLayoutCellPaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutCellPaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando vuelve a dibujarse la celda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos notifica la aparición de la <xref:System.Windows.Forms.TableLayoutPanel.CellPaint> eventos. Este informe le ayuda a obtener información cuando se produce el evento y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.TableLayoutPanel> denominado `TableLayoutPanel1`. A continuación, asegúrese de que el controlador de eventos esté asociado el <xref:System.Windows.Forms.TableLayoutPanel.CellPaint> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#561](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#561)]
 [!code-vb[System.Windows.Forms.EventExamples#561](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#561)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnCount : int with get, set" Usage="System.Windows.Forms.TableLayoutPanel.ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de columnas de la tabla.</summary>
        <value>El número de columnas del control <see cref="T:System.Windows.Forms.TableLayoutPanel" />. El valor predeterminado es 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar tanto el <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> y <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> propiedades para los diseños con un número conocido y fijo de celdas. También puede especificar una propiedad o la otra si espera que el número de celdas en su diseño crezca, suponiendo que el <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedad permita dicho crecimiento. Si el valor de <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> es 0, el panel crecerá agregando filas y si el valor de <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> es 0, el panel crecerá agregando columnas. Especificar el crecimiento del panel con el <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedad es preferible a la configuración de <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> o <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> en 0, sin embargo.  
  
 Pueden agregar o eliminar de la tabla mediante los controles del <xref:System.Windows.Forms.TableLayoutPanel.Controls%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.GrowStyle" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.RowCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.Controls" />
      </Docs>
    </Member>
    <Member MemberName="ColumnStyles">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutColumnStyleCollection ColumnStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TableLayoutColumnStyleCollection ColumnStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.ColumnStyles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnStyles As TableLayoutColumnStyleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutColumnStyleCollection ^ ColumnStyles { System::Windows::Forms::TableLayoutColumnStyleCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnStyles : System.Windows.Forms.TableLayoutColumnStyleCollection" Usage="System.Windows.Forms.TableLayoutPanel.ColumnStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("Columns")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutColumnStyleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de estilos de columna para <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TableLayoutColumnStyleCollection" /> que contiene un <see cref="T:System.Windows.Forms.ColumnStyle" /> para cada columna del control <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.TableLayoutPanel.ColumnStyles%2A> propiedad para tener acceso a las propiedades de estilo de columnas concretas. Puede utilizar los miembros de la <xref:System.Windows.Forms.ColumnStyle> clase para establecer las características de las columnas individuales de la tabla.  
  
 Cuando el <xref:System.Windows.Forms.TableLayoutPanel> control organiza sus columnas, asigna prioridades a cada uno de ellos <xref:System.Windows.Forms.ColumnStyle> en el siguiente orden:  
  
1.  Las columnas con <xref:System.Windows.Forms.ColumnStyle> establecido en <xref:System.Windows.Forms.SizeType.Absolute> se consideran se asigna primero y el ancho fijo.  
  
2.  Las columnas con <xref:System.Windows.Forms.ColumnStyle> establecido en <xref:System.Windows.Forms.SizeType.AutoSize> se ajusta a su contenido.  
  
3.  Espacio restante se divide entre las columnas con <xref:System.Windows.Forms.ColumnStyle> establecido en <xref:System.Windows.Forms.SizeType.Percent>.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la <xref:System.Windows.Forms.ColumnStyle> propiedades de cada columna cuando una <xref:System.Windows.Forms.Button> se hace clic en.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnStyle" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.RowStyles" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TableLayoutControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As TableLayoutControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutControlCollection ^ Controls { System::Windows::Forms::TableLayoutControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Windows.Forms.TableLayoutControlCollection" Usage="System.Windows.Forms.TableLayoutPanel.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de controles contenidos en el control <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <value>Una colección <see cref="T:System.Windows.Forms.TableLayoutControlCollection" /> que contiene los controles asociados al objeto <see cref="T:System.Windows.Forms.TableLayoutPanel" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TableLayoutPanel.Controls%2A> propiedad contiene todos los controles asociados a la tabla, incluidos los controles que no se muestran actualmente debido <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A>, <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A>, o <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> limitaciones.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se enumera todos los controles secundarios en el <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.TableLayoutControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="tableLayoutPanel.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la colección de controles para el control.</summary>
        <returns>Nueva instancia de <see cref="T:System.Windows.Forms.Control.ControlCollection" /> que se le asigna al control.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCellPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutPanelCellPosition GetCellPosition (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.TableLayoutPanelCellPosition GetCellPosition(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetCellPosition(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TableLayoutPanelCellPosition GetCellPosition(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetCellPosition : System.Windows.Forms.Control -&gt; System.Windows.Forms.TableLayoutPanelCellPosition" Usage="tableLayoutPanel.GetCellPosition control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Windows.Forms.TableLayoutPanelCellPosition), "-1,-1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("Cell")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutPanelCellPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control contenido en una celda.</param>
        <summary>Obtiene la propiedad <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la fila y la columna de la celda.</summary>
        <returns>Un objeto <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la posición de la celda.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetColumn">
      <MemberSignature Language="C#" Value="public int GetColumn (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetColumn(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetColumn(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetColumn : System.Windows.Forms.Control -&gt; int" Usage="tableLayoutPanel.GetColumn control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("Column")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <summary>Devuelve la posición de la columna del control secundario especificado.</summary>
        <returns>La posición de la columna del control secundario especificado o -1 si <see cref="P:System.Windows.Forms.TableLayoutPanel.LayoutEngine" /> determina la posición de <paramref name="control" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `control` abarca dos o más columnas, el <xref:System.Windows.Forms.TableLayoutPanel.GetColumn%2A> método devolverá el índice de columna más bajo.  
  
 El valor de la posición de columna es cero en la función, por lo que puede usar como un índice para la matriz devuelta por <xref:System.Windows.Forms.TableLayoutPanel.GetColumnWidths%2A>.  
  
 Este método es invocado por el `Column` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
 Para obtener la posición real de `control`, incluso si su posición está determinada por <xref:System.Windows.Forms.TableLayoutPanel.LayoutEngine%2A>, llame a la <xref:System.Windows.Forms.TableLayoutPanel.GetPositionFromControl%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se enumera todos los controles secundarios en el <xref:System.Windows.Forms.TableLayoutPanel> y busca el índice de columna para cada control mediante la <xref:System.Windows.Forms.TableLayoutPanel.GetColumn%2A> método.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="control" /> no es un tipo que pueda organizarse mediante este <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />.</exception>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumnWidths" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetControlFromPosition(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetColumnSpan">
      <MemberSignature Language="C#" Value="public int GetColumnSpan (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetColumnSpan(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetColumnSpan(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetColumnSpan(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetColumnSpan : System.Windows.Forms.Control -&gt; int" Usage="tableLayoutPanel.GetColumnSpan control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("ColumnSpan")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <summary>Devuelve el número de columnas que ocupa el control secundario especificado.</summary>
        <returns>Número de columnas que ocupa el control secundario. El valor predeterminado es 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ocupación en columnas suele ser útil para colocar un control que es considerablemente más ancho que sus elementos del mismo nivel.  
  
 Este método es invocado por el `ColumnSpan` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.GetColumnSpan%2A> y <xref:System.Windows.Forms.TableLayoutPanel.SetColumnSpan%2A> métodos para establecer el ancho de un <xref:System.Windows.Forms.Button> controlar en un <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#11)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetColumnSpan(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRowSpan(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GetColumnWidths">
      <MemberSignature Language="C#" Value="public int[] GetColumnWidths ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetColumnWidths() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetColumnWidths" />
      <MemberSignature Language="VB.NET" Value="Public Function GetColumnWidths () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetColumnWidths();" />
      <MemberSignature Language="F#" Value="member this.GetColumnWidths : unit -&gt; int[]" Usage="tableLayoutPanel.GetColumnWidths " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una matriz que representa los anchos, en píxeles, de las columnas de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <returns>Una matriz de tipo <see cref="T:System.Int32" /> que contiene los anchos, en píxeles, de las columnas de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetControlFromPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetControlFromPosition (int column, int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetControlFromPosition(int32 column, int32 row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetControlFromPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetControlFromPosition (column As Integer, row As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetControlFromPosition(int column, int row);" />
      <MemberSignature Language="F#" Value="member this.GetControlFromPosition : int * int -&gt; System.Windows.Forms.Control" Usage="tableLayoutPanel.GetControlFromPosition (column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Int32" />
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="column">Posición de la columna del control que se va a recuperar.</param>
        <param name="row">Posición de la fila del control que se va a recuperar.</param>
        <summary>Devuelve el control secundario que ocupa la posición especificada.</summary>
        <returns>El control secundario que ocupa la celda especificada; de lo contrario, <see langword="null" /> si no existe ningún control en la columna y la fila especificadas, o si el control tiene la propiedad <see cref="P:System.Windows.Forms.Control.Visible" /> establecida en <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores de posición de columna y fila están basadas en cero.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se enumera todas las posiciones de celda en el <xref:System.Windows.Forms.TableLayoutPanel> recorriendo las columnas y filas proporcionados por <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> y <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A>y, a continuación, llamar a la <xref:System.Windows.Forms.TableLayoutPanel.GetControlFromPosition%2A> método para recuperar el control en cada celda.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="column" /> o <paramref name="row" /> (o ambos) es menor que 0.</exception>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutPanelCellPosition GetPositionFromControl (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.TableLayoutPanelCellPosition GetPositionFromControl(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetPositionFromControl(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TableLayoutPanelCellPosition GetPositionFromControl(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetPositionFromControl : System.Windows.Forms.Control -&gt; System.Windows.Forms.TableLayoutPanelCellPosition" Usage="tableLayoutPanel.GetPositionFromControl control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutPanelCellPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control contenido en una celda.</param>
        <summary>Obtiene la <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la fila y la columna de la celda que contiene el control.</summary>
        <returns>Un objeto <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la posición de la celda.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TableLayoutPanel.GetPositionFromControl%2A> método devuelve la posición actual real de `control`, incluso si su posición está determinada por la <xref:System.Windows.Forms.TableLayoutPanel.LayoutEngine%2A>. Este método tiene en cuenta toda la <xref:System.Windows.Forms.TableLayoutPanel> estado del control, incluida la columna o fila de expansión y cuándo el <xref:System.Windows.Forms.TableLayoutPanel.LayoutEngine%2A> ha colocado un control con su `Column` y `Row` se establecen en -1. Esto es equivalente a la situación en la que <xref:System.Windows.Forms.TableLayoutPanel.GetColumn%2A> y <xref:System.Windows.Forms.TableLayoutPanel.GetRow%2A> devuelven -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRow">
      <MemberSignature Language="C#" Value="public int GetRow (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetRow(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetRow(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetRow : System.Windows.Forms.Control -&gt; int" Usage="tableLayoutPanel.GetRow control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("Row")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <summary>Devuelve la posición de la fila del control secundario especificado.</summary>
        <returns>La posición de la fila de <paramref name="control" /> o -1 si <see cref="P:System.Windows.Forms.TableLayoutPanel.LayoutEngine" /> determina la posición de <paramref name="control" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `control` abarca dos o más filas, el <xref:System.Windows.Forms.TableLayoutPanel.GetRow%2A> método devolverá el índice de la fila inferior.  
  
 El valor de la posición de fila es cero en la función, por lo que puede usar como un índice para la matriz devuelta por <xref:System.Windows.Forms.TableLayoutPanel.GetRowHeights%2A>.  
  
 Este método es invocado por el `Row` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
 Para obtener la posición real de `control`, incluso si su posición está determinada por <xref:System.Windows.Forms.TableLayoutPanel.LayoutEngine%2A>, llame a la <xref:System.Windows.Forms.TableLayoutPanel.GetPositionFromControl%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se enumera todos los controles secundarios en el <xref:System.Windows.Forms.TableLayoutPanel> y busca el índice de fila para cada mediante el <xref:System.Windows.Forms.TableLayoutPanel.GetRow%2A> método.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="control" /> no es un tipo que pueda organizarse mediante este <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />.</exception>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRowHeights" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetControlFromPosition(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetRowHeights">
      <MemberSignature Language="C#" Value="public int[] GetRowHeights ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetRowHeights() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetRowHeights" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowHeights () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetRowHeights();" />
      <MemberSignature Language="F#" Value="member this.GetRowHeights : unit -&gt; int[]" Usage="tableLayoutPanel.GetRowHeights " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una matriz que representa los altos, en píxeles, de las filas de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <returns>Una matriz de tipo <see cref="T:System.Int32" /> que contiene los altos, en píxeles, de las filas de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowSpan">
      <MemberSignature Language="C#" Value="public int GetRowSpan (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetRowSpan(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.GetRowSpan(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetRowSpan(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetRowSpan : System.Windows.Forms.Control -&gt; int" Usage="tableLayoutPanel.GetRowSpan control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("RowSpan")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <summary>Devuelve el número de filas que ocupa el control secundario especificado.</summary>
        <returns>Número de filas que ocupa el control secundario. El valor predeterminado es 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ocupación en filas suele ser útil para colocar un control que es considerablemente más alto que sus elementos del mismo nivel.  
  
 Este método es invocado por el `RowSpan` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.GetRowSpan%2A> y <xref:System.Windows.Forms.TableLayoutPanel.SetRowSpan%2A> métodos para establecer el ancho de un <xref:System.Windows.Forms.Button> controlar en un <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#11)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetRowSpan(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumnSpan(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GrowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutPanelGrowStyle GrowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.TableLayoutPanelGrowStyle GrowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.GrowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property GrowStyle As TableLayoutPanelGrowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutPanelGrowStyle GrowStyle { System::Windows::Forms::TableLayoutPanelGrowStyle get(); void set(System::Windows::Forms::TableLayoutPanelGrowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.GrowStyle : System.Windows.Forms.TableLayoutPanelGrowStyle with get, set" Usage="System.Windows.Forms.TableLayoutPanel.GrowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutPanelGrowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Windows.Forms.TableLayoutPanel" /> debe expandirse para alojar las nuevas celdas cuando todas las celdas existentes están ocupadas.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TableLayoutPanelGrowStyle" /> que indica el esquema de crecimiento. El valor predeterminado es <see cref="F:System.Windows.Forms.TableLayoutPanelGrowStyle.AddRows" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el control <xref:System.Windows.Forms.TableLayoutPanel> se expande hacia abajo agregando filas.  
  
> [!NOTE]
>  Si se realiza un intento para agregar un control a un completo <xref:System.Windows.Forms.TableLayoutPanel> control y el valor de <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> es <xref:System.Windows.Forms.TableLayoutPanelGrowStyle.FixedSize>, un <xref:System.ArgumentException> se produce.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se establece el valor de la <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedad según seleccionado <xref:System.Windows.Forms.RadioButton>. Durante la ejecución, cuando el usuario hace clic en el botón con la etiqueta **Probar GrowStyle**, <xref:System.Windows.Forms.Button> control se agrega a la <xref:System.Windows.Forms.TableLayoutPanel> control. Si el <xref:System.Windows.Forms.TableLayoutPanel> control está lleno, se expande agregando una fila o columna o produce una excepción, dependiendo del valor de <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de propiedad es no válido para la enumeración <see cref="T:System.Windows.Forms.TableLayoutPanelGrowStyle" />.</exception>
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.RowCount" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.LayoutEngine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LayoutEngine As LayoutEngine" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Layout::LayoutEngine ^ LayoutEngine { System::Windows::Forms::Layout::LayoutEngine ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LayoutEngine : System.Windows.Forms.Layout.LayoutEngine" Usage="System.Windows.Forms.TableLayoutPanel.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una instancia almacenada en caché del motor de diseño del panel.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> del contenido del panel.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutSettings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutSettings LayoutSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TableLayoutSettings LayoutSettings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.LayoutSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutSettings As TableLayoutSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutSettings ^ LayoutSettings { System::Windows::Forms::TableLayoutSettings ^ get(); void set(System::Windows::Forms::TableLayoutSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutSettings : System.Windows.Forms.TableLayoutSettings with get, set" Usage="System.Windows.Forms.TableLayoutPanel.LayoutSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que representa la configuración de diseño de tabla.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TableLayoutSettings" /> que contiene la configuración de diseño de tabla.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">El valor de propiedad es <see langword="null" /> o se ha intentado establecer directamente <see cref="T:System.Windows.Forms.TableLayoutSettings" />, lo que no se admite; en su lugar, establezca las propiedades individuales.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnCellPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnCellPaint (System.Windows.Forms.TableLayoutCellPaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellPaint(class System.Windows.Forms.TableLayoutCellPaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.OnCellPaint(System.Windows.Forms.TableLayoutCellPaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellPaint (e As TableLayoutCellPaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellPaint(System::Windows::Forms::TableLayoutCellPaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellPaint : System.Windows.Forms.TableLayoutCellPaintEventArgs -&gt; unit&#xA;override this.OnCellPaint : System.Windows.Forms.TableLayoutCellPaintEventArgs -&gt; unit" Usage="tableLayoutPanel.OnCellPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TableLayoutCellPaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.TableLayoutCellPaintEventArgs" /> que proporciona datos para el evento.</param>
        <summary>Recibe una llamada cuando se debe actualizar la celda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Windows.Forms.TableLayoutPanel.OnCellPaint%2A> método para crear una apariencia personalizada para una celda.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#100)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="tableLayoutPanel.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent">Objeto <see cref="T:System.Windows.Forms.LayoutEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.Layout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected override void OnPaintBackground (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaintBackground (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="tableLayoutPanel.OnPaintBackground e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.PaintEventArgs" /> que contiene información sobre el panel que se va a dibujar.</param>
        <summary>Pinta el fondo del panel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.RowCount" />
      <MemberSignature Language="VB.NET" Value="Public Property RowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RowCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RowCount : int with get, set" Usage="System.Windows.Forms.TableLayoutPanel.RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de filas de la tabla.</summary>
        <value>El número de filas del control <see cref="T:System.Windows.Forms.TableLayoutPanel" />. El valor predeterminado es 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar tanto el <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> y <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> propiedades para los diseños con un número conocido y fijo de celdas. También puede especificar una propiedad o la otra si espera que el número de celdas en su diseño crezca, suponiendo que el <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedad permita dicho crecimiento. Si el valor de <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> es 0, el panel crecerá agregando filas y si el valor de <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> es 0, el panel crecerá agregando columnas. Especificar el crecimiento del panel con el <xref:System.Windows.Forms.TableLayoutPanel.GrowStyle%2A> propiedad es preferible a la configuración de <xref:System.Windows.Forms.TableLayoutPanel.RowCount%2A> o <xref:System.Windows.Forms.TableLayoutPanel.ColumnCount%2A> en 0, sin embargo.  
  
 Pueden agregar o eliminar de la tabla mediante los controles del <xref:System.Windows.Forms.TableLayoutPanel.Controls%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.GrowStyle" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RowStyles">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TableLayoutRowStyleCollection RowStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TableLayoutRowStyleCollection RowStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TableLayoutPanel.RowStyles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RowStyles As TableLayoutRowStyleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TableLayoutRowStyleCollection ^ RowStyles { System::Windows::Forms::TableLayoutRowStyleCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RowStyles : System.Windows.Forms.TableLayoutRowStyleCollection" Usage="System.Windows.Forms.TableLayoutPanel.RowStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DisplayName("Rows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TableLayoutRowStyleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de estilos de fila para <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TableLayoutRowStyleCollection" /> que contiene un <see cref="T:System.Windows.Forms.RowStyle" /> para cada fila del control <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.TableLayoutPanel.RowStyles%2A> propiedad para tener acceso a las propiedades de estilo de determinadas filas. Puede utilizar los miembros de la <xref:System.Windows.Forms.RowStyle> clase para establecer las características de filas individuales en la tabla.  
  
 Cuando el <xref:System.Windows.Forms.TableLayoutPanel> control organiza sus filas, asigna prioridades a cada uno de ellos <xref:System.Windows.Forms.RowStyle> en el siguiente orden:  
  
1.  Filas con <xref:System.Windows.Forms.RowStyle> establecido en <xref:System.Windows.Forms.SizeType.Absolute> se consideran se asignan primero y sus altos fijos.  
  
2.  Filas con <xref:System.Windows.Forms.RowStyle> establecido en <xref:System.Windows.Forms.SizeType.AutoSize> se ajusta a su contenido.  
  
3.  Espacio restante se divide entre las filas con <xref:System.Windows.Forms.RowStyle> establecido en <xref:System.Windows.Forms.SizeType.Percent>.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la <xref:System.Windows.Forms.RowStyle> propiedades de cada fila cuando una <xref:System.Windows.Forms.Button> se hace clic en.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.RowStyle" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnStyles" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="tableLayoutPanel.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">El alto y el ancho de los límites del control.</param>
        <param name="specified">Uno de los valores de <see cref="T:System.Windows.Forms.BoundsSpecified" /> que especifica los límites del control que se usarán al definir su tamaño y posición.</param>
        <summary>Escala la ubicación, el tamaño, el relleno y el margen de un control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected override void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.ScaleCore(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleCore (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleCore(float dx, float dy);" />
      <MemberSignature Language="F#" Value="override this.ScaleCore : single * single -&gt; unit" Usage="tableLayoutPanel.ScaleCore (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Proporción en función de la cual se va a ajustar la escala horizontal del control.</param>
        <param name="dy">Proporción en función de la cual se va a ajustar la escala vertical del control.</param>
        <summary>Realiza la tarea de ajustar la escala de todo el panel y de todos los controles secundarios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TableLayoutPanel.ScaleCore%2A> método usa la `dx` y `dy` valores de parámetro para escalar el alto y el ancho del panel por separado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCellPosition">
      <MemberSignature Language="C#" Value="public void SetCellPosition (System.Windows.Forms.Control control, System.Windows.Forms.TableLayoutPanelCellPosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCellPosition(class System.Windows.Forms.Control control, valuetype System.Windows.Forms.TableLayoutPanelCellPosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.SetCellPosition(System.Windows.Forms.Control,System.Windows.Forms.TableLayoutPanelCellPosition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCellPosition(System::Windows::Forms::Control ^ control, System::Windows::Forms::TableLayoutPanelCellPosition position);" />
      <MemberSignature Language="F#" Value="member this.SetCellPosition : System.Windows.Forms.Control * System.Windows.Forms.TableLayoutPanelCellPosition -&gt; unit" Usage="tableLayoutPanel.SetCellPosition (control, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="position" Type="System.Windows.Forms.TableLayoutPanelCellPosition" />
      </Parameters>
      <Docs>
        <param name="control">Control contenido en una celda.</param>
        <param name="position">
          <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la fila y la columna de la celda.</param>
        <summary>Establece la propiedad <see cref="T:System.Windows.Forms.TableLayoutPanelCellPosition" /> que representa la fila y la columna de la celda.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColumn">
      <MemberSignature Language="C#" Value="public void SetColumn (System.Windows.Forms.Control control, int column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColumn(class System.Windows.Forms.Control control, int32 column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.SetColumn(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColumn(System::Windows::Forms::Control ^ control, int column);" />
      <MemberSignature Language="F#" Value="member this.SetColumn : System.Windows.Forms.Control * int -&gt; unit" Usage="tableLayoutPanel.SetColumn (control, column)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="column" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="control">Control que se va a desplazar a otra columna.</param>
        <param name="column">Columna a la que se moverá <c>control</c>.</param>
        <summary>Establece la posición de la columna del control secundario especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TableLayoutPanel.SetColumn%2A> método desplaza el control a otra columna en el <xref:System.Windows.Forms.TableLayoutPanel>. Las columnas y filas tienen índices de base cero. Si se establece la posición de columna en -1 especifica que el control fluirá a la primera celda vacía.  
  
 Este método vuelve a aplicar el diseño de tabla a todos los controles en el <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 Este método es invocado por el `Column` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.SetColumn%2A> método intercambiar dos controles contenidos dentro de un <xref:System.Windows.Forms.TableLayoutPanel> control. En el ejemplo se da por supuesto un <xref:System.Windows.Forms.TableLayoutPanel> control con al menos dos filas.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#12)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetRow(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="SetColumnSpan">
      <MemberSignature Language="C#" Value="public void SetColumnSpan (System.Windows.Forms.Control control, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColumnSpan(class System.Windows.Forms.Control control, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.SetColumnSpan(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColumnSpan(System::Windows::Forms::Control ^ control, int value);" />
      <MemberSignature Language="F#" Value="member this.SetColumnSpan : System.Windows.Forms.Control * int -&gt; unit" Usage="tableLayoutPanel.SetColumnSpan (control, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <param name="value">Número de columnas que se van a ocupar.</param>
        <summary>Establece el número de columnas que ocupa el control secundario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ocupación en columnas suele ser útil para colocar un control que es considerablemente más ancho que sus elementos del mismo nivel.  
  
 Este método es invocado por el `ColumnSpan` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.GetColumnSpan%2A> y <xref:System.Windows.Forms.TableLayoutPanel.SetColumnSpan%2A> métodos para establecer el ancho de un <xref:System.Windows.Forms.Button> controlar en un <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#11)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> es menor que 1.</exception>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumnSpan(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetRowSpan(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetRow">
      <MemberSignature Language="C#" Value="public void SetRow (System.Windows.Forms.Control control, int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRow(class System.Windows.Forms.Control control, int32 row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.SetRow(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRow(System::Windows::Forms::Control ^ control, int row);" />
      <MemberSignature Language="F#" Value="member this.SetRow : System.Windows.Forms.Control * int -&gt; unit" Usage="tableLayoutPanel.SetRow (control, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="control">Control que se va a desplazar a otra fila.</param>
        <param name="row">Fila a la que se moverá <c>control</c>.</param>
        <summary>Establece la posición de la fila del control secundario especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.TableLayoutPanel.SetRow%2A> método desplaza el control a otra fila de la <xref:System.Windows.Forms.TableLayoutPanel> control. Las columnas y filas tienen índices de base cero. Si se establece la posición de fila en -1 especifica que el control fluirá a la primera celda vacía.  
  
 Este método vuelve a aplicar el diseño de tabla a todos los controles en el <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 Este método es invocado por el `Row` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.SetColumn%2A> método intercambiar dos controles contenidos dentro de un <xref:System.Windows.Forms.TableLayoutPanel> control. En el ejemplo se da por supuesto un <xref:System.Windows.Forms.TableLayoutPanel> control con al menos dos filas.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#13)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetRow(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="SetRowSpan">
      <MemberSignature Language="C#" Value="public void SetRowSpan (System.Windows.Forms.Control control, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRowSpan(class System.Windows.Forms.Control control, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.SetRowSpan(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRowSpan(System::Windows::Forms::Control ^ control, int value);" />
      <MemberSignature Language="F#" Value="member this.SetRowSpan : System.Windows.Forms.Control * int -&gt; unit" Usage="tableLayoutPanel.SetRowSpan (control, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="control">Un control secundario de <see cref="T:System.Windows.Forms.TableLayoutPanel" />.</param>
        <param name="value">Número de filas que se van a ocupar.</param>
        <summary>Establece el número de filas que ocupa el control secundario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ocupación en filas suele ser útil para colocar un control que es considerablemente más alto que sus elementos del mismo nivel.  
  
 Este método es invocado por el `RowSpan` propiedad, que el panel agrega a sus controles secundarios en tiempo de diseño.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Windows.Forms.TableLayoutPanel.GetRowSpan%2A> y <xref:System.Windows.Forms.TableLayoutPanel.SetRowSpan%2A> métodos para establecer el ancho de un <xref:System.Windows.Forms.Button> controlar en un <xref:System.Windows.Forms.TableLayoutPanel>.  
  
 [!code-csharp[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/CS/form1.cs#11)]
 [!code-vb[System.Windows.Forms.TableLayoutPanel#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TableLayoutPanel/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> es menor que 1.</exception>
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRowSpan(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.SetColumnSpan(System.Windows.Forms.Control,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.TableLayoutPanel.ColumnCount" />
        <altmember cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IExtenderProvider.CanExtend">
      <MemberSignature Language="C#" Value="bool IExtenderProvider.CanExtend (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.IExtenderProvider.CanExtend(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TableLayoutPanel.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExtend (obj As Object) As Boolean Implements IExtenderProvider.CanExtend" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.IExtenderProvider.CanExtend(System::Object ^ obj) = System::ComponentModel::IExtenderProvider::CanExtend;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> para recibir las propiedades Extender.</param>
        <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)" />.</summary>
        <returns>
          <see langword="true" />si este objeto puede proporcionar propiedades extensoras al objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.TableLayoutPanel> se convierte en una interfaz <xref:System.ComponentModel.IExtenderProvider>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>