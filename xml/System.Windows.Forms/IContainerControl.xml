<Type Name="IContainerControl" FullName="System.Windows.Forms.IContainerControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="291132c1de48b2775d3b2ecfdfee12518868e1ac" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30638579" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona la funcionalidad para un control que va a actuar como primario de otros controles.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se hereda de la <xref:System.Windows.Forms.ScrollableControl> clase e implementa el <xref:System.Windows.Forms.IContainerControl> interfaz. Se agrega la implementación a la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propiedad y el <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> método.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implemente esta interfaz en clases que desea relacionar una colección de controles. Los miembros de esta interfaz permiten activar un control secundario, o para determinar qué control está activo actualmente. Cuando se implementa en una clase, <see cref="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" /> toma un <see cref="T:System.Windows.Forms.Control" /> como parámetro y activa el control especificado. El <see cref="P:System.Windows.Forms.IContainerControl.ActiveControl" /> propiedad activa o recupera el control que está activo.  
  
 En escenarios más comunes, no es necesario implementar esta interfaz directamente. Por ejemplo, si crea un proyecto de biblioteca de controles de Windows, Visual Studio genera una clase inicial automáticamente. Clase que se hereda de la <see cref="T:System.Windows.Forms.UserControl" /> (clase), y <see cref="T:System.Windows.Forms.UserControl" /> implementa <see cref="T:System.Windows.Forms.IContainerControl" /> para usted.</para>
    </block>
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.Windows.Forms.Control" />
  </Docs>
  <Members>
    <Member MemberName="ActivateControl">
      <MemberSignature Language="C#" Value="public bool ActivateControl (System.Windows.Forms.Control active);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ActivateControl(class System.Windows.Forms.Control active) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function ActivateControl (active As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ActivateControl(System::Windows::Forms::Control ^ active);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="active" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="active">
          <see cref="T:System.Windows.Forms.Control" /> que se está activando.</param>
        <summary>Activa un control especificado.</summary>
        <returns>
          <see langword="true" /> si el control se activa correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se hereda de la <xref:System.Windows.Forms.ScrollableControl> clase e implementa el <xref:System.Windows.Forms.IContainerControl> interfaz. Se agrega la implementación a la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propiedad y el <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> método.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se implementa en una clase, este método activa especificado <see cref="T:System.Windows.Forms.Control" />. El control debe ser un elemento secundario del control contenedor.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.IContainerControl.ActiveControl" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="ActiveControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control ActiveControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control ActiveControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IContainerControl.ActiveControl" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ ActiveControl { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el control que está activo en el control contenedor.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> que está activo actualmente en el control contenedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se hereda de la <xref:System.Windows.Forms.ScrollableControl> clase e implementa el <xref:System.Windows.Forms.IContainerControl> interfaz. Se agrega la implementación a la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propiedad y el <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> método.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se implementa en una clase, esta propiedad activa o recupera el control activo en el control contenedor.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
  </Members>
</Type>