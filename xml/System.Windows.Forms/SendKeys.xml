<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6b90a41865a14f9941de6661b51f1a014e0d0ae" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36514856" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona métodos para enviar pulsaciones de tecla a una aplicación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice <xref:System.Windows.Forms.SendKeys> para enviar pulsaciones de teclas y combinaciones a la aplicación activa de pulsaciones de teclas. No se puede crear una instancia de esta clase. Para enviar una pulsación de tecla a una clase y continuar inmediatamente con el flujo del programa, use <xref:System.Windows.Forms.SendKeys.Send%2A>. Para esperar a que los procesos iniciados por la pulsación de tecla, utilice <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Cada tecla está representada por uno o más caracteres. Para especificar un carácter único teclado, use el carácter propiamente dicho. Por ejemplo, para representar la letra A, pase la cadena "A" al método. Para representar más de un carácter, agregue cada carácter adicional a la anterior. Para representar las letras A, B y C, especifique el parámetro como "ABC".  
  
 El signo más (+), símbolo de intercalación (^), signo de porcentaje (%), tilde (~) y paréntesis () tienen un significado especial para <xref:System.Windows.Forms.SendKeys>. Para especificar uno de estos caracteres, inclúyalo entre llaves ({}). Por ejemplo, para especificar el signo más, use "{+}". Para especificar caracteres de llave, utilice "{{}"y"{}}". Corchetes ([]) no tienen ningún significado especial para <xref:System.Windows.Forms.SendKeys>, pero debe encerrar entre llaves. En otras aplicaciones, los corchetes tienen un significado especial que puede ser significativo cuando se produce el intercambio dinámico de datos (DDE).  
  
> [!CAUTION]
>  Si su aplicación está pensada para su uso internacional con distintos teclados, <xref:System.Windows.Forms.SendKeys.Send%2A> puede producir resultados imprevisibles y debe evitarse.  
  
 Para especificar caracteres que no se muestran cuando se presiona una tecla, como ENTRAR o TAB y las claves que representan acciones en lugar de caracteres, utilice los códigos de la tabla siguiente.  
  
|Key|Código|  
|---------|----------|  
|RETROCESO|{BACKSPACE}, {BS} o {retroceso}|  
|INTERRUMPIR|SALTO DE {}|  
|BLOCK MAYÚS|{CAPSLOCK}|  
|SUPR o suprimir|{DELETE} o {SUPR}|  
|FLECHA ABAJO|{ABAJO}|  
|FIN|{FINAL}|  
|ENTRAR|{ENTER} o ~|  
|ESC|{ESC}|  
|AYUDA|{HELP}|  
|INICIO|{PRINCIPAL}|  
|INS o INSERT|{INSERT} o {INS}|  
|FLECHA IZQUIERDA|{LEFT}|  
|BLOQ NUM|{NUMLOCK}|  
|AV PÁG|{PÁG}|  
|RE PÁG|{RE PÁG}|  
|IMPR PANT|{IMPR} (reservado para uso futuro)|  
|FLECHA DERECHA|{RIGHT}|  
|BLOQ DESPL|{BLOQ DESPL}|  
|TAB|{LA FICHA}|  
|FLECHA ARRIBA|{LA}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Agregar el teclado|{AGREGAR}|  
|Restar de teclado|{RESTAR}|  
|Multiplicar de teclado|{MULTIPLICAR}|  
|División de teclado|{DIVISIÓN}|  
  
 Para especificar teclas con cualquier combinación de la tecla MAYÚS, CTRL y ALT (teclas), preceda el código de tecla con uno o varios de los siguientes códigos.  
  
|Key|Código|  
|---------|----------|  
|TECLA MAYÚS|+|  
|CTRL|^|  
|ALT|%|  
  
 Para especificar que cualquier combinación de mayúsculas, CTRL y ALT debe mantenerse mientras se presionan otras teclas, inserte el código para esas claves entre paréntesis. Por ejemplo, para especificar que se mantenga presionada la tecla MAYÚS mientras se presionaron E y C, utilice "+ (EC)". Para especificar que se mantenga presionada la tecla MAYÚS mientras se presiona E, seguida de C sin MAYÚS, utilice "+ EC".  
  
 Para especificar la repetición de teclas, utilice el formato {tecla número}. Debe incluir un espacio entre la clave y el número. Por ejemplo, {LEFT 42} significa que presionar la tecla flecha izquierda 42 veces; {h 10} significa presionar que h 10 veces.  
  
> [!NOTE]
>  Porque no hay ningún método administrado para activar otra aplicación, puede utilizar esta clase en la aplicación actual o usar métodos nativos de Windows, como `FindWindow` y `SetForegroundWindow`, para forzar el foco en otras aplicaciones.  
  
> [!NOTE]
>  La clase <xref:System.Windows.Forms.SendKeys> se ha actualizado para .NET Framework 3.0 para que se pueda usar en aplicaciones que se ejecutan en Windows Vista. La seguridad mejorada de Windows Vista (conocida como Control de cuentas de usuario o UAC) impide que la implementación anterior funcione según lo esperado.  
>   
>  La clase <xref:System.Windows.Forms.SendKeys> es susceptible de tener problemas de temporización que algunos desarrolladores han tenido que solucionar. La implementación actualizada sigue siendo susceptible de tener problemas de temporización, pero es ligeramente más rápida y puede requerir cambios en las soluciones alternativas. La clase <xref:System.Windows.Forms.SendKeys> intenta usar primero la implementación anterior y, si se produce un error, usa la nueva implementación. Como resultado, la clase <xref:System.Windows.Forms.SendKeys> puede comportarse de manera diferente en los distintos sistemas operativos. Además, cuando la clase <xref:System.Windows.Forms.SendKeys> usa la nueva implementación, el método <xref:System.Windows.Forms.SendKeys.SendWait%2A> no esperará a que se procesen los mensajes cuando se envían a otro proceso.  
>   
>  Si la aplicación depende de un comportamiento coherente independientemente del sistema operativo, puede forzar que la clase <xref:System.Windows.Forms.SendKeys> use la nueva implementación agregando la siguiente opción de configuración de la aplicación al archivo app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forzar que la clase <xref:System.Windows.Forms.SendKeys> use la implementación anterior, use el valor `"JournalHook"` en su lugar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Windows.Forms.SendKeys.Send%2A>. Para ejecutar el ejemplo, pegue el siguiente código en un formulario denominado Form1 que contenga un botón denominado Button1. Asegúrese de que los eventos click están asociados a sus métodos de control de eventos en este ejemplo. El control de botón <xref:System.Windows.Forms.Control.TabIndex%2A> propiedad debe establecerse en 0. Cuando se ejecuta el ejemplo, haga doble clic en el formulario para desencadenar el evento click eventos.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Procesa todos los mensajes de Windows que hay actualmente en la cola de mensajes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.SendKeys.Flush%2A> para esperar a que la aplicación procesar las pulsaciones de tecla y otros mensajes del sistema operativo que se encuentran en la cola de mensajes. Esto equivale a llamar a <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> hasta que no haya ninguna clave para procesar más.  
  
> [!NOTE]
>  Porque no hay ningún método administrado para activar otra aplicación, puede utilizar esta clase en la aplicación actual o usar métodos nativos de Windows, como `FindWindow` y `SetForegroundWindow`, para forzar el foco en otras aplicaciones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Cadena de pulsaciones de tecla que se va a enviar.</param>
        <summary>Envía pulsaciones de tecla a la aplicación activa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada tecla está representada por uno o más caracteres. Para especificar un carácter único teclado, use el carácter propiamente dicho. Por ejemplo, para representar la letra A, pase la cadena "A" al método. Para representar más de un carácter, agregue cada carácter adicional a la anterior. Para representar las letras A, B y C, especifique el parámetro como "ABC".  
  
 El signo más (+), símbolo de intercalación (^), signo de porcentaje (%), tilde (~) y paréntesis () tienen un significado especial para <xref:System.Windows.Forms.SendKeys>. Para especificar uno de estos caracteres, inclúyalo entre llaves ({}). Por ejemplo, para especificar el signo más, use "{+}". Para especificar caracteres de llave, utilice "{{}"y"{}}". Corchetes ([]) no tienen ningún significado especial para <xref:System.Windows.Forms.SendKeys>, pero debe encerrar entre llaves. En otras aplicaciones, los corchetes tienen un significado especial que puede ser significativo cuando se produce el intercambio dinámico de datos (DDE).  
  
> [!CAUTION]
>  Si su aplicación está pensada para su uso internacional con distintos teclados, <xref:System.Windows.Forms.SendKeys.Send%2A> puede producir resultados imprevisibles y debe evitarse.  
  
 Para especificar caracteres que no se muestran cuando se presiona una tecla, como ENTRAR o TAB y las claves que representan acciones en lugar de caracteres, utilice los códigos de la tabla siguiente.  
  
|Key|Código|  
|---------|----------|  
|RETROCESO|{BACKSPACE}, {BS} o {retroceso}|  
|INTERRUMPIR|SALTO DE {}|  
|BLOCK MAYÚS|{CAPSLOCK}|  
|SUPR o suprimir|{DELETE} o {SUPR}|  
|FLECHA ABAJO|{ABAJO}|  
|FIN|{FINAL}|  
|ENTRAR|{ENTER} o ~|  
|ESC|{ESC}|  
|AYUDA|{HELP}|  
|INICIO|{PRINCIPAL}|  
|INS o INSERT|{INSERT} o {INS}|  
|FLECHA IZQUIERDA|{LEFT}|  
|BLOQ NUM|{NUMLOCK}|  
|AV PÁG|{PÁG}|  
|RE PÁG|{RE PÁG}|  
|IMPR PANT|{IMPR} (reservado para uso futuro)|  
|FLECHA DERECHA|{RIGHT}|  
|BLOQ DESPL|{BLOQ DESPL}|  
|TAB|{LA FICHA}|  
|FLECHA ARRIBA|{LA}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Agregar el teclado|{AGREGAR}|  
|Restar de teclado|{RESTAR}|  
|Multiplicar de teclado|{MULTIPLICAR}|  
|División de teclado|{DIVISIÓN}|  
  
 Para especificar teclas con cualquier combinación de la tecla MAYÚS, CTRL y ALT (teclas), preceda el código de tecla con uno o varios de los siguientes códigos.  
  
|Key|Código|  
|---------|----------|  
|TECLA MAYÚS|+|  
|CTRL|^|  
|ALT|%|  
  
 Para especificar que cualquier combinación de mayúsculas, CTRL y ALT debe mantenerse mientras se presionan otras teclas, inserte el código para esas claves entre paréntesis. Por ejemplo, para especificar que se mantenga presionada la tecla MAYÚS mientras se presionaron E y C, utilice "+ (EC)". Para especificar que se mantenga presionada la tecla MAYÚS mientras se presiona E, seguida de C sin MAYÚS, utilice "+ EC".  
  
 Para especificar la repetición de teclas, utilice el formato {tecla número}. Debe incluir un espacio entre la clave y el número. Por ejemplo, {LEFT 42} significa que presionar la tecla flecha izquierda 42 veces; {h 10} significa presionar que h 10 veces.  
  
> [!NOTE]
>  Porque no hay ningún método administrado para activar otra aplicación, puede utilizar esta clase en la aplicación actual o usar métodos nativos de Windows, como `FindWindow` y `SetForegroundWindow`, para forzar el foco en otras aplicaciones.  
  
> [!NOTE]
>  La clase <xref:System.Windows.Forms.SendKeys> se ha actualizado para .NET Framework 3.0 para que se pueda usar en aplicaciones que se ejecutan en Windows Vista. La seguridad mejorada de Windows Vista (conocida como Control de cuentas de usuario o UAC) impide que la implementación anterior funcione según lo esperado.  
>   
>  La clase <xref:System.Windows.Forms.SendKeys> es susceptible de tener problemas de temporización que algunos desarrolladores han tenido que solucionar. La implementación actualizada sigue siendo susceptible de tener problemas de temporización, pero es ligeramente más rápida y puede requerir cambios en las soluciones alternativas. La clase <xref:System.Windows.Forms.SendKeys> intenta usar primero la implementación anterior y, si se produce un error, usa la nueva implementación. Como resultado, la clase <xref:System.Windows.Forms.SendKeys> puede comportarse de manera diferente en los distintos sistemas operativos. Además, cuando la clase <xref:System.Windows.Forms.SendKeys> usa la nueva implementación, el método <xref:System.Windows.Forms.SendKeys.SendWait%2A> no esperará a que se procesen los mensajes cuando se envían a otro proceso.  
>   
>  Si la aplicación depende de un comportamiento coherente independientemente del sistema operativo, puede forzar que la clase <xref:System.Windows.Forms.SendKeys> use la nueva implementación agregando la siguiente opción de configuración de la aplicación al archivo app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forzar que la clase <xref:System.Windows.Forms.SendKeys> use la implementación anterior, use el valor `"JournalHook"` en su lugar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.SendKeys.Send%2A> método. Para ejecutar el ejemplo, pegue el siguiente código en un formulario denominado Form1 que contenga un botón denominado Button1. Asegúrese de que los eventos click están asociados a sus métodos de control de eventos en este ejemplo. El control de botón <xref:System.Windows.Forms.Control.TabIndex%2A> propiedad debe establecerse en 0. Cuando se ejecuta el ejemplo, haga doble clic en el formulario para desencadenar el evento click eventos.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No hay una aplicación activa a la que enviar las pulsaciones de tecla.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> no representa pulsaciones de tecla válidas</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">el código no administrado llamar a este método. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Cadena de pulsaciones de tecla que se va a enviar.</param>
        <summary>Envía las pulsaciones de tecla especificadas a la aplicación activa y, a continuación, espera a que se procesen los mensajes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice <xref:System.Windows.Forms.SendKeys.SendWait%2A> para enviar pulsaciones de teclas o combinaciones de pulsaciones de teclas a la aplicación activa y espere a que los mensajes de pulsación de tecla a procesarse. Puede usar este método para enviar pulsaciones de tecla a una aplicación y espere a que los procesos que se inician de forma las pulsaciones de teclas en completarse. Esto puede ser importante si la otra aplicación debe finalizar para que la aplicación pueda continuar.  
  
> [!NOTE]
>  Porque no hay ningún método administrado para activar otra aplicación, puede utilizar esta clase en la aplicación actual o usar métodos nativos de Windows, como `FindWindow` y `SetForegroundWindow`, para forzar el foco en otras aplicaciones.  
  
> [!NOTE]
>  La clase <xref:System.Windows.Forms.SendKeys> se ha actualizado para .NET Framework 3.0 para que se pueda usar en aplicaciones que se ejecutan en Windows Vista. La seguridad mejorada de Windows Vista (conocida como Control de cuentas de usuario o UAC) impide que la implementación anterior funcione según lo esperado.  
>   
>  La clase <xref:System.Windows.Forms.SendKeys> es susceptible de tener problemas de temporización que algunos desarrolladores han tenido que solucionar. La implementación actualizada sigue siendo susceptible de tener problemas de temporización, pero es ligeramente más rápida y puede requerir cambios en las soluciones alternativas. La clase <xref:System.Windows.Forms.SendKeys> intenta usar primero la implementación anterior y, si se produce un error, usa la nueva implementación. Como resultado, la clase <xref:System.Windows.Forms.SendKeys> puede comportarse de manera diferente en los distintos sistemas operativos. Además, cuando la clase <xref:System.Windows.Forms.SendKeys> usa la nueva implementación, el método <xref:System.Windows.Forms.SendKeys.SendWait%2A> no esperará a que se procesen los mensajes cuando se envían a otro proceso.  
>   
>  Si la aplicación depende de un comportamiento coherente independientemente del sistema operativo, puede forzar que la clase <xref:System.Windows.Forms.SendKeys> use la nueva implementación agregando la siguiente opción de configuración de la aplicación al archivo app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forzar que la clase <xref:System.Windows.Forms.SendKeys> use la implementación anterior, use el valor `"JournalHook"` en su lugar.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">el código no administrado llamar a este método. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>