<Type Name="GiveFeedbackEventArgs" FullName="System.Windows.Forms.GiveFeedbackEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4fdae29e2eb0954752b7699e2e4a550ab1dab618" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37568917" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GiveFeedbackEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.GiveFeedbackEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class GiveFeedbackEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type GiveFeedbackEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona los datos para el evento <see cref="E:System.Windows.Forms.Control.GiveFeedback" />, que se produce durante una operación de arrastre.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Control.GiveFeedback> evento se produce durante una operación de arrastre. Permite que el origen de un evento de arrastre para modificar la apariencia del puntero del mouse con el fin de proporcionar información visual al usuario durante una operación de arrastrar y colocar. Un <xref:System.Windows.Forms.GiveFeedbackEventArgs> objeto especifica el tipo de operación de arrastrar y colocar, y si se utilizan los cursores predeterminados.  
  
 Para obtener información sobre el modelo de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.GiveFeedbackEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GiveFeedbackEventArgs (System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.GiveFeedbackEventArgs.#ctor(System.Windows.Forms.DragDropEffects,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (effect As DragDropEffects, useDefaultCursors As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GiveFeedbackEventArgs(System::Windows::Forms::DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.GiveFeedbackEventArgs : System.Windows.Forms.DragDropEffects * bool -&gt; System.Windows.Forms.GiveFeedbackEventArgs" Usage="new System.Windows.Forms.GiveFeedbackEventArgs (effect, useDefaultCursors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="useDefaultCursors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="effect">Tipo de operación de arrastrar y colocar. Los posibles valores se obtienen aplicando la operación OR (|) bit a bit a las constantes definidas en <see cref="T:System.Windows.Forms.DragDropEffects" />.</param>
        <param name="useDefaultCursors">
          <see langword="true" /> si se utilizan punteros predeterminados; en cualquier otro caso, <see langword="false" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene información que se muestra sobre el tipo de operación de arrastrar y colocar.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Forms.DragDropEffects" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.GiveFeedbackEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCursors">
      <MemberSignature Language="C#" Value="public bool UseDefaultCursors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCursors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCursors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCursors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCursors : bool with get, set" Usage="System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si una operación de arrastrar debe utilizar los cursores predeterminados que se asocian a los efectos de arrastrar y colocar.</summary>
        <value>
          <see langword="true" /> si se utilizan punteros predeterminados; en cualquier otro caso, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El sistema proporciona el valor predeterminado los cursores de arrastrar y colocar para las operaciones de arrastrar y colocar distintos, como mover o copiar. Si <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A> está establecido en `false`, es responsabilidad del origen del evento para establecer el cursor apropiado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo llama a la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se utiliza para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación para la operación de arrastre personalizado y no colocar cursores, respectivamente. Los cursores personalizados que se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante el `DragOver` eventos. Si los datos que se va a quitar no están un `String`, el <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` viene determinada en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre sobrepasa los límites del formulario y, después, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.GiveFeedbackEventArgs> clase. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>