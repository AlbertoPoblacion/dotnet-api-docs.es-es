<Type Name="DragAction" FullName="System.Windows.Forms.DragAction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89f841d1c132f69b4cd1be4229d05e8256f0c3a3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36522529" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum DragAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DragAction extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragAction" />
  <TypeSignature Language="VB.NET" Value="Public Enum DragAction" />
  <TypeSignature Language="C++ CLI" Value="public enum class DragAction" />
  <TypeSignature Language="F#" Value="type DragAction = " />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica si debe continuar una operación de arrastrar y colocar y de qué forma.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta enumeración se usa en <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una operación de arrastrar y colocar entre dos <xref:System.Windows.Forms.ListBox> controles. El ejemplo se llama el <xref:System.Windows.Forms.Control.DoDragDrop%2A> método cuando se inicia la acción de arrastrar. La acción de arrastrar se inicia si se ha movido el mouse más de <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> desde la ubicación del mouse durante el <xref:System.Windows.Forms.Control.MouseDown> eventos. El <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> método se usa para determinar el índice del elemento que se va a arrastrar durante el `MouseDown` eventos.  
  
 El ejemplo también muestra cómo utilizar cursores personalizados para la operación de arrastrar y colocar. En el ejemplo se da por supuesto que dos archivos de cursor `3dwarro.cur` y `3dwno.cur`, existe en el directorio de aplicación, para la operación de arrastre personalizada y no colocar cursores, respectivamente. Los cursores personalizados se usará si el `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> está activada. Los cursores personalizados se establecen en el <xref:System.Windows.Forms.Control.GiveFeedback> controlador de eventos.  
  
 El estado del teclado se evalúa en el <xref:System.Windows.Forms.Control.DragOver> controlador de eventos para el derecho `ListBox`, para determinar cuál será la operación de arrastre en función del estado de las teclas MAYÚS, CTRL, ALT o CTRL + ALT. La ubicación en la `ListBox` donde se produciría la operación de colocar también se determina durante la `DragOver` eventos. Si los datos que se va a quitar no están un `String`, la <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> está establecido en <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Por último, se muestra el estado de la operación de colocar en el `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Los datos que se va a quitar de la derecha `ListBox` se determina en el <xref:System.Windows.Forms.Control.DragDrop> controlador de eventos y el `String` valor se agrega en el lugar adecuado en el `ListBox`. Si la operación de arrastre se mueve fuera de los límites del formulario, se cancela la operación de arrastrar y colocar en el <xref:System.Windows.Forms.Control.QueryContinueDrag> controlador de eventos.  
  
 Este fragmento de código muestra cómo utilizar el <xref:System.Windows.Forms.DragAction> enumeración. Consulte la <xref:System.Windows.Forms.Control.DoDragDrop%2A> método para el ejemplo de código completo.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="Cancel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.DragAction Cancel = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.DragAction.Cancel" />
      <MemberSignature Language="VB.NET" Value="Cancel" />
      <MemberSignature Language="C++ CLI" Value="Cancel" />
      <MemberSignature Language="F#" Value="Cancel = 2" Usage="System.Windows.Forms.DragAction.Cancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragAction</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>La operación se cancela sin mensaje relacionado con la operación de colocar.</summary>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="Continue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.DragAction Continue = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.DragAction.Continue" />
      <MemberSignature Language="VB.NET" Value="Continue" />
      <MemberSignature Language="C++ CLI" Value="Continue" />
      <MemberSignature Language="F#" Value="Continue = 0" Usage="System.Windows.Forms.DragAction.Continue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragAction</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>La operación continuará.</summary>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="Drop" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.DragAction Drop = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.DragAction.Drop" />
      <MemberSignature Language="VB.NET" Value="Drop" />
      <MemberSignature Language="C++ CLI" Value="Drop" />
      <MemberSignature Language="F#" Value="Drop = 1" Usage="System.Windows.Forms.DragAction.Drop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragAction</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>La operación se detendrá con una operación de colocar.</summary>
      </Docs>
    </Member>
  </Members>
</Type>