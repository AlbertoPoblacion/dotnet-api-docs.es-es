<Type Name="Menu+MenuItemCollection" FullName="System.Windows.Forms.Menu+MenuItemCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5056945ad6e9fef9c8ec6b0cdb811a4f57402c0a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517566" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Menu.MenuItemCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Menu/MenuItemCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu.MenuItemCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class Menu.MenuItemCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Menu::MenuItemCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type Menu.MenuItemCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of <see cref="T:System.Windows.Forms.MenuItem" /> objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase representa la colección de <xref:System.Windows.Forms.MenuItem> objetos almacenados en una <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, o <xref:System.Windows.Forms.MenuItem>. Para el <xref:System.Windows.Forms.MainMenu> y <xref:System.Windows.Forms.ContextMenu> clases, esta colección representa la estructura de menús completa para el control. Para el <xref:System.Windows.Forms.MenuItem> (clase), esta colección representa la lista de elementos de submenú asociados con la <xref:System.Windows.Forms.MenuItem>.  
  
 El <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> y <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> métodos permiten agregar y quitar elementos de menú individuales de la colección. También puede usar el <xref:System.Windows.Forms.Menu.MenuItemCollection.Clear%2A> método para quitar todos los elementos de menú de la colección.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItemCollection (System.Windows.Forms.Menu owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Menu owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.#ctor(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItemCollection(System::Windows::Forms::Menu ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu.MenuItemCollection : System.Windows.Forms.Menu -&gt; System.Windows.Forms.Menu.MenuItemCollection" Usage="new System.Windows.Forms.Menu.MenuItemCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="owner">The <see cref="T:System.Windows.Forms.Menu" /> that owns this collection.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase requiere que asociar la colección a una clase que deriva de <xref:System.Windows.Forms.Menu>, como el <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, o <xref:System.Windows.Forms.MenuItem> clase. Puesto que debe especificar un menú que está asociado a esta colección, no se puede crear menú varias colecciones de elementos y asociarlos a un menú según sea necesario. Para cambiar los elementos de menú asociados a un menú, debe borrar la colección de elementos y agregar los elementos de menú para mostrar a la colección.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a new <see cref="T:System.Windows.Forms.MenuItem" /> to the collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add caption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="caption">The caption of the menu item.</param>
        <summary>Adds a new <see cref="T:System.Windows.Forms.MenuItem" />, to the end of the current menu, with a specified caption.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> that represents the menu item being added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> sólo puede incluirse en un menú a la vez y no se puede agregar más de una vez en el mismo menú. Para reutilizar un <xref:System.Windows.Forms.MenuItem> en más de un menú, use la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. Para quitar un <xref:System.Windows.Forms.MenuItem> que agregó anteriormente, use la <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se utiliza la clase derivada <xref:System.Windows.Forms.MainMenu> para crear un menú principal, `mainMenu1`, que tiene dos <xref:System.Windows.Forms.MenuItem> objetos agregados a su <xref:System.Windows.Forms.Menu.MenuItems%2A> colección. El código, a continuación, asigna `mainMenu1` a la <xref:System.Windows.Forms.Form.Menu%2A> propiedad de la <xref:System.Windows.Forms.Form>. Este ejemplo requiere que el código definido en este ejemplo se incluye en un formulario.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The <see cref="T:System.Windows.Forms.MenuItem" /> to add.</param>
        <summary>Adds a previously created <see cref="T:System.Windows.Forms.MenuItem" /> to the end of the current menu.</summary>
        <returns>The zero-based index where the item is stored in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> sólo puede incluirse en un menú a la vez y no se puede agregar más de una vez en el mismo menú. Para reutilizar un <xref:System.Windows.Forms.MenuItem> en más de un menú, use la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. Para quitar un <xref:System.Windows.Forms.MenuItem> que agregó anteriormente, use la <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método.  
  
 Esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método le permite agregar creado anteriormente <xref:System.Windows.Forms.MenuItem> colección de elementos de objetos hasta el final del menú.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una instancia de la clase derivada, <xref:System.Windows.Forms.MainMenu>y agrega un <xref:System.Windows.Forms.MenuItem> a la colección de <xref:System.Windows.Forms.MenuItem> objetos. Este ejemplo requiere que el método definido en este ejemplo se encuentra dentro de la clase de un formulario y llama a un método de esa clase de formulario.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (int index, System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(int32 index, class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Int32,System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (index As Integer, item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(int index, System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : int * System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : int * System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="index">The position to add the new item.</param>
        <param name="item">The <see cref="T:System.Windows.Forms.MenuItem" /> to add.</param>
        <summary>Adds a previously created <see cref="T:System.Windows.Forms.MenuItem" /> at the specified index within the menu item collection.</summary>
        <returns>The zero-based index where the item is stored in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> sólo puede incluirse en un menú a la vez y no se puede agregar más de una vez en el mismo menú. Para reutilizar un <xref:System.Windows.Forms.MenuItem> en más de un menú, use la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. Para quitar un <xref:System.Windows.Forms.MenuItem> que agregó anteriormente, use la <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método.  
  
 Esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método le permite agregar creado anteriormente <xref:System.Windows.Forms.MenuItem> objetos en una ubicación de índice especificado dentro de la colección. Cualquier <xref:System.Windows.Forms.MenuItem> ubicados actualmente en ese índice y todos los <xref:System.Windows.Forms.MenuItem> objetos después de ese índice, se mueven a la siguiente índice inferior en la colección.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una instancia de la clase derivada, <xref:System.Windows.Forms.MainMenu>y agrega un <xref:System.Windows.Forms.MenuItem> objeto a la colección de <xref:System.Windows.Forms.MenuItem> objetos en una ubicación específica en el menú de la colección de elementos. Este ejemplo requiere que el método definido en este ejemplo se encuentra dentro de la clase de un formulario y llama a un método de esa clase de formulario.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The <see cref="T:System.Windows.Forms.MenuItem" /> being added is already in use.</exception>
        <exception cref="T:System.ArgumentException">The index supplied in the <paramref name="index" /> parameter is larger than the size of the collection.</exception>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, onClick As EventHandler) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, onClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="caption">The caption of the menu item.</param>
        <param name="onClick">An <see cref="T:System.EventHandler" /> that represents the event handler that is called when the item is clicked by the user, or when a user presses an accelerator or shortcut key for the menu item.</param>
        <summary>Adds a new <see cref="T:System.Windows.Forms.MenuItem" /> to the end of the current menu with a specified caption and a specified event handler for the <see cref="E:System.Windows.Forms.MenuItem.Click" /> event.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> that represents the menu item being added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> sólo puede incluirse en un menú a la vez y no se puede agregar más de una vez en el mismo menú. Para reutilizar un <xref:System.Windows.Forms.MenuItem> en más de un menú, use la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. Para quitar un <xref:System.Windows.Forms.MenuItem> que agregó anteriormente, use la <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método.  
  
 Esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método le permite especificar un título para el elemento de menú y un delegado para controlar el <xref:System.Windows.Forms.MenuItem.Click> eventos. Puede utilizar esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método si la aplicación ya tiene un controlador de eventos para controlar la <xref:System.Windows.Forms.MenuItem.Click> eventos.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.MenuItem.Click> no se produce el evento para un <xref:System.Windows.Forms.MenuItem> que contiene elementos de submenú.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se utiliza la clase derivada <xref:System.Windows.Forms.MainMenu> para crear un menú principal, `mainMenu1`, que tiene dos <xref:System.Windows.Forms.MenuItem> objetos agregados a su <xref:System.Windows.Forms.Menu.MenuItems%2A> colección. El código utiliza esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método para definir un controlador de eventos para el <xref:System.Windows.Forms.MenuItem.Click> eventos del segundo elemento de menú se agregan a la colección. El código, a continuación, asigna `mainMenu1` a la <xref:System.Windows.Forms.Form.Menu%2A> propiedad de la <xref:System.Windows.Forms.Form>. Este ejemplo requiere que el código definido en este ejemplo se encuentra dentro de un formulario.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, items As MenuItem()) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="caption">The caption of the menu item.</param>
        <param name="items">An array of <see cref="T:System.Windows.Forms.MenuItem" /> objects that this <see cref="T:System.Windows.Forms.MenuItem" /> will contain.</param>
        <summary>Adds a new <see cref="T:System.Windows.Forms.MenuItem" /> to the end of this menu with the specified caption, <see cref="E:System.Windows.Forms.MenuItem.Click" /> event handler, and items.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> that represents the menu item being added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.MenuItem> sólo puede incluirse en un menú a la vez y no se puede agregar más de una vez en el mismo menú. Para reutilizar un <xref:System.Windows.Forms.MenuItem> en más de un menú, use la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método de la <xref:System.Windows.Forms.MenuItem> clase. Para quitar un <xref:System.Windows.Forms.MenuItem> que agregó anteriormente, use la <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método.  
  
 Esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método le permite especificar un título para el elemento de menú y un delegado que va a controlar su <xref:System.Windows.Forms.MenuItem.Click> eventos. Puede utilizar esta versión de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método si la aplicación ya tiene un controlador de eventos para controlar la <xref:System.Windows.Forms.MenuItem.Click> eventos. Esta versión del método también permite especificar una matriz de previamente creados <xref:System.Windows.Forms.MenuItem> objetos que se va a agregar a la colección. Puede utilizar esta característica para volver a usar existente <xref:System.Windows.Forms.MenuItem> objetos que se han clonado mediante la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> método. Si el `items` parámetro no está vacío o `null`, el <xref:System.Windows.Forms.MenuItem> que se va a agregar a la colección contiene elementos de submenú.  
  
> [!NOTE]
>  El <xref:System.Windows.Forms.MenuItem.Click> no se produce el evento para un <xref:System.Windows.Forms.MenuItem> que contiene elementos de submenú.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.AddRange(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.MenuItem[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.MenuItem[] -&gt; unit" Usage="menuItemCollection.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">An array of <see cref="T:System.Windows.Forms.MenuItem" /> objects representing the menu items to add to the collection.</param>
        <summary>Adds an array of previously created <see cref="T:System.Windows.Forms.MenuItem" /> objects to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se puede utilizar el método para agregar rápidamente un grupo de creado anteriormente <xref:System.Windows.Forms.MenuItem> objetos a la colección en lugar de agregar manualmente cada <xref:System.Windows.Forms.MenuItem> a la colección utilizando la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método. Si la colección ya contiene <xref:System.Windows.Forms.MenuItem> objetos, llamar a este método se agregarán los nuevos <xref:System.Windows.Forms.MenuItem> objetos hasta el final de la colección.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una matriz y se copian los <xref:System.Windows.Forms.Menu.MenuItemCollection> objetos de dos <xref:System.Windows.Forms.MenuItem> objetos en la matriz. En el ejemplo, a continuación, se copia la matriz de <xref:System.Windows.Forms.MenuItem> objetos en la colección de controles para un <xref:System.Windows.Forms.ContextMenu> denominado `contextMenu1`. Este ejemplo requiere que haya dos <xref:System.Windows.Forms.MenuItem> objetos que contienen elementos de submenú denominados `menuItem1` y `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="menuItemCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Windows.Forms.MenuItem" /> objects from the menu item collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para borrar toda la colección de elementos de menú en un menú. Para quitar un elemento de menú individuales de la colección, utilice el <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> método. Para agregar nuevos <xref:System.Windows.Forms.MenuItem> objetos a la colección, utilice el <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> método.  
  
   
  
## Examples  
 En este ejemplo, se crea un menú principal, `myMainMenu`, con dos <xref:System.Windows.Forms.MenuItem> objetos, `File` y `Edit`. El `File` menú tiene tres elementos de submenú, `New`, `Open`, y `Exit`. Mediante el `Clear` método, se quitan todos el <xref:System.Windows.Forms.MenuItem> objetos en el `File` colección menú. Este programa requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[ClearItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClearItems/CPP/clearitems.cpp#1)]
 [!code-csharp[ClearItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClearItems/CS/clearitems.cs#1)]
 [!code-vb[ClearItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClearItems/VB/clearitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Contains(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As MenuItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.MenuItem -&gt; bool" Usage="menuItemCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to locate in the collection.</param>
        <summary>Determines if the specified <see cref="T:System.Windows.Forms.MenuItem" /> is a member of the collection.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.MenuItem" /> is a member of the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método le permite determinar si un <xref:System.Windows.Forms.MenuItem> es miembro de la colección antes de intentar realizar operaciones en el <xref:System.Windows.Forms.MenuItem>. Puede usar este método para confirmar que un <xref:System.Windows.Forms.MenuItem> se ha agregado a o que sigue siendo un miembro de la colección.  
  
   
  
## Examples  
 En este ejemplo, se crea un menú principal, `myMainMenu`, con dos <xref:System.Windows.Forms.MenuItem> objetos, `File` y `Edit`. El `File` menú tiene tres elementos de submenú, `New`, `Open`, y `Exit`. Mediante el uso de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Contains%2A> método, comprueba para ver si el `File` menú colección contiene el elemento `Open`. Si no existe el elemento, se muestra el resultado en un cuadro de texto. Este programa requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[ContainsItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ContainsItems/CPP/containsitems.cpp#1)]
 [!code-csharp[ContainsItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ContainsItems/CS/containsitems.cs#1)]
 [!code-vb[ContainsItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ContainsItems/VB/containsitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="menuItemCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the item to look for.</param>
        <summary>Determines whether the collection contains an item with the specified key.</summary>
        <returns>
          <see langword="true" /> if the collection contains an item with the specified key, otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Menu.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.MenuItem> en el <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, <xref:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey%2A> devuelve `false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="menuItemCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">The destination array.</param>
        <param name="index">The index in the destination array at which storing begins.</param>
        <summary>Copies the entire collection into an existing array at a specified location within the array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar este método para combinar <xref:System.Windows.Forms.MenuItem> objetos de varias colecciones en una sola matriz. Esta característica permite combinar fácilmente dos o más conjuntos de elementos de menú para su uso en un <xref:System.Windows.Forms.ContextMenu> o <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una matriz y se copian los <xref:System.Windows.Forms.Menu.MenuItemCollection> objetos de dos <xref:System.Windows.Forms.MenuItem> objetos en la matriz. En el ejemplo, a continuación, se copia la matriz de <xref:System.Windows.Forms.MenuItem> objetos en la colección de controles para un <xref:System.Windows.Forms.ContextMenu> denominado `contextMenu1`. Este ejemplo requiere que haya dos <xref:System.Windows.Forms.MenuItem> objetos que contienen elementos de submenú denominados `menuItem1` y `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating the total number of <see cref="T:System.Windows.Forms.MenuItem" /> objects in the collection.</summary>
        <value>Número de objetos <see cref="T:System.Windows.Forms.MenuItem" /> de la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Count` propiedad contiene el número de <xref:System.Windows.Forms.MenuItem> objetos asignados a la colección. Puede usar el `Count` valor de la propiedad como límite superior de un bucle para recorrer en iteración una colección. Tenga en cuenta, el valor de índice de una colección es un índice basado en cero, por lo que debe restar uno a la variable de bucle. Si no tiene en cuenta, se superarán los límites superiores de la colección y producirá una excepción.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un menú principal, `myMainMenu`, con una <xref:System.Windows.Forms.MenuItem>, `File`, que tiene tres elementos de submenú: `New`, `Open`, y `Exit`. Mediante el `Count` propiedad, contar el número de objetos en el `File` menú y mostrar este número en un cuadro de mensaje. Este ejemplo requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[CountProperty#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CountProperty/CPP/countitems.cpp#1)]
 [!code-csharp[CountProperty#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CountProperty/CS/countitems.cs#1)]
 [!code-vb[CountProperty#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CountProperty/VB/countitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As MenuItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.MenuItem[]" Usage="menuItemCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The name of the menu item to search for.</param>
        <param name="searchAllChildren">
          <see langword="true" /> to search child menu items; otherwise, <see langword="false" />.</param>
        <summary>Finds the items with the specified key, optionally searching the submenu items</summary>
        <returns>An array of <see cref="T:System.Windows.Forms.MenuItem" /> objects whose <see cref="P:System.Windows.Forms.Menu.Name" /> property matches the specified <paramref name="key" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, o no hay ninguna coincidencia, <xref:System.Windows.Forms.Menu.MenuItemCollection.Find%2A> devuelve una matriz vacía.  
  
 El <xref:System.Windows.Forms.Menu.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.MenuItem> en el <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" /> or an empty string.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="menuItemCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can be used to iterate through the menu item collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that represents the menu item collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOf(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to locate in the collection.</param>
        <summary>Retrieves the index of a specific item in the collection.</summary>
        <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un menú principal, `myMainMenu`, con dos <xref:System.Windows.Forms.MenuItem> objetos, `File` y `Edit`. El `File` menú tiene tres elementos de submenú: `New`, `Open`, y `Exit`. Mediante el uso de la <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOf%2A> método, se recupera el índice de la `Exit` de elemento en el `File` colección de menú y, a continuación, muestra su valor en un cuadro de mensaje. Este ejemplo requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[IndexOf#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[IndexOf#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IndexOf/CS/indexof.cs#1)]
 [!code-vb[IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="menuItemCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the menu item to search for.</param>
        <summary>Finds the index of the first occurrence of a menu item with the specified key.</summary>
        <returns>The zero-based index of the first menu item with the specified key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> es llamar sucesivamente, el último devuelve el índice se va a comprobar para una coincidencia de claves en primer lugar y, si no hay ninguna coincidencia, la búsqueda comienza al principio de la colección.  
  
 El <xref:System.Windows.Forms.Menu.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.MenuItem> en el <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, o no hay ninguna coincidencia, <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> devuelve -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection is read-only.</summary>
        <value>
          <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets an item from the collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[int] { System::Windows::Forms::MenuItem ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.MenuItem" /> in the collection.</param>
        <summary>Retrieves the <see cref="T:System.Windows.Forms.MenuItem" /> at the specified indexed location in the collection.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> de la ubicación especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para asignar <xref:System.Windows.Forms.MenuItem> objetos en una ubicación específica o para recuperarlos desde el <xref:System.Windows.Forms.Menu.MenuItemCollection>, hacer referencia al objeto de colección con un valor de índice específico. El valor de índice de la <xref:System.Windows.Forms.Menu.MenuItemCollection> es un índice de base cero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="value" /> parameter is <see langword="null" />.  or  The <paramref name="index" /> parameter is less than zero.  or  The <paramref name="index" /> parameter is greater than the number of menu items in the collection, and the collection of menu items is not <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[System::String ^] { System::Windows::Forms::MenuItem ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the item to retrieve from the collection.</param>
        <summary>Gets an item with the specified key from the collection.</summary>
        <value>El objeto <see cref="T:System.Windows.Forms.MenuItem" /> con la clave especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Menu.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.MenuItem> en el <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas. Si el `key` parámetro es `null` o una cadena vacía, <xref:System.Windows.Forms.Menu.MenuItemCollection.Item%2A> devuelve `null.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (item As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Windows.Forms.MenuItem -&gt; unit&#xA;override this.Remove : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItemCollection.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The <see cref="T:System.Windows.Forms.MenuItem" /> to remove.</param>
        <summary>Removes the specified <see cref="T:System.Windows.Forms.MenuItem" /> from the menu item collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.MenuItem> se quita de la colección de elementos de menú, menú posteriores todos los elementos se mueven hacia arriba una posición en la colección. Puede utilizar esta versión de la `Remove` para quitar un determinado <xref:System.Windows.Forms.MenuItem> de la colección utilizando una referencia a la <xref:System.Windows.Forms.MenuItem> va a quitar. Si no tiene una referencia a la <xref:System.Windows.Forms.MenuItem> que desea quitar, puede utilizar la otra versión de este método que acepta, como parámetro, un índice que corresponde a la <xref:System.Windows.Forms.MenuItem> va a quitar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un menú principal, `myMainMenu`, con dos <xref:System.Windows.Forms.MenuItem> objetos, `File` y `Edit`. El `File` menú tiene tres elementos de submenú: `New`, `Open`, y `Exit`. Mediante el `Remove` método, quite el `Open` de elemento de la `File` colección de menú. Este ejemplo requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[RemoveMenuItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveMenuItems/CPP/removeitems.cpp#1)]
 [!code-csharp[RemoveMenuItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveMenuItems/CS/removeitems.cs#1)]
 [!code-vb[RemoveMenuItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveMenuItems/VB/removeitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="menuItemCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the <see cref="T:System.Windows.Forms.MenuItem" /> to remove.</param>
        <summary>Removes a <see cref="T:System.Windows.Forms.MenuItem" /> from the menu item collection at a specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.MenuItem> se quita de la colección de elementos de menú, menú posteriores todos los elementos se mueven hacia arriba una posición en la colección.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un menú principal, `myMainMenu`, con dos <xref:System.Windows.Forms.MenuItem> objetos, `File` y `Edit`. El `File` menú tiene tres elementos de submenú: `New`, `Open`, y `Exit`. Mediante el uso de la `RemoveAt` método, quite el `Exit` de elementos de la `File` colección menú utilizando su número de índice. Este ejemplo requiere que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[RemoveAt#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveAt/CPP/removeat.cpp#1)]
 [!code-csharp[RemoveAt#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveAt/CS/removeat.cs#1)]
 [!code-vb[RemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveAt/VB/removeat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="menuItemCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the menu item to remove.</param>
        <summary>Removes the menu item with the specified key from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Menu.Name%2A> propiedad se corresponde con la clave para un <xref:System.Windows.Forms.MenuItem> en el <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 La comparación de claves no distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.Menu.MenuItemCollection.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.Menu.MenuItemCollection.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to add to the collection.</param>
        <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>The position into which the <see cref="T:System.Windows.Forms.MenuItem" /> was inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to locate in the collection.</param>
        <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> if the specified object is a <see cref="T:System.Windows.Forms.MenuItem" /> in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to locate in the collection.</param>
        <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
        <returns>The zero-based index if <paramref name="value" /> is a <see cref="T:System.Windows.Forms.MenuItem" /> in the collection; otherwise -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which the <see cref="T:System.Windows.Forms.MenuItem" /> should be inserted.</param>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to insert into the <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />.</param>
        <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.Menu.MenuItemCollection.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.Menu.MenuItemCollection.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get.</param>
        <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> en el índice especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.MenuItem" /> to remove.</param>
        <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Windows.Forms.Menu.MenuItemCollection> se convierte en una interfaz <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>