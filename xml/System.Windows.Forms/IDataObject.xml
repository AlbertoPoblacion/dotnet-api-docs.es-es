<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="107b075d1988af8904fd028834582734403a58f8" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015628" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona un mecanismo independiente del formato para la transferencia de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `IDataObject` interfaz la utiliza el <xref:System.Windows.Forms.Clipboard> clase y en las operaciones de arrastrar y colocar.  
  
 Cuando se implementa en una clase, el <xref:System.Windows.Forms.IDataObject> métodos permiten al usuario almacenar datos en varios formatos en una instancia de la clase. Almacenar datos en más de un formato aumenta la posibilidad de que una aplicación de destino, cuyos requisitos de formato no es posible que sabe, puede recuperar los datos almacenados. Para almacenar datos en una instancia de <xref:System.Windows.Forms.IDataObject>, llame a la <xref:System.Windows.Forms.IDataObject.SetData%2A> método y especificar el formato de datos en el `format` parámetro. Establecer el `autoConvert` parámetro `false` si no desea convertir a otro formato cuando se recuperan los datos almacenados. Invocar <xref:System.Windows.Forms.IDataObject.SetData%2A> varias veces en una instancia de <xref:System.Windows.Forms.IDataObject> para almacenar datos en más de un formato.  
  
 Recuperar los datos almacenados en un <xref:System.Windows.Forms.IDataObject> mediante una llamada a la <xref:System.Windows.Forms.IDataObject.GetData%2A> con formato de método y especificar los datos en el `format` parámetro. Establecer el `autoConvert` parámetro `false` para recuperar solo los datos que se almacenaron en el formato especificado. Para convertir los datos almacenados en el formato especificado, establezca `autoConvert` a `true`, o no use `autoConvert`.  
  
 Para determinar los formatos de los datos almacenados en un <xref:System.Windows.Forms.IDataObject>, use el siguiente <xref:System.Windows.Forms.IDataObject> métodos.  
  
-   Llame a la <xref:System.Windows.Forms.IDataObject.GetFormats%2A> método para recuperar una matriz de todos los formatos en los que los datos están disponibles. Establecer el `autoConvert` parámetro `false` para obtener solo los formatos en el que se almacenan los datos. Para obtener todos los formatos en los que los datos están disponibles, establezca `autoConvert` a `true`, o no use este parámetro.  
  
-   Llame a la <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> método para determinar si los datos almacenados están disponibles en un formato determinado. Si no desea que los datos almacenados se conviertan al formato especificado, establezca el `autoConvert` parámetro `false`.  
  
 Consulte la <xref:System.Windows.Forms.DataObject> clase para una implementación de esta interfaz. Consulte la <xref:System.Windows.Forms.DataFormats> clase para predefinido <xref:System.Windows.Forms.Clipboard> formatos de datos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera los datos asociados con el formato de datos especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Formato de los datos que se van a recuperar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <summary>Recupera los datos asociados con el formato de datos especificado.</summary>
        <returns>Los datos asociados con el formato especificado, o <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este método no encuentra los datos en el formato especificado, intenta convertir los datos en el formato. Si los datos no se puede convertir al formato especificado, este método devuelve `null`.  
  
 Para determinar si está asociadas con datos, o pueden convertirse en un formato, llame a <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para obtener una lista de formatos válidos para los datos almacenados en esta instancia.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject,` para demostrar el uso de la `GetData` método. El método se usa para recuperar los datos almacenados en `myDataObject`, que está asociado el `Text` formato. El ejemplo se supone que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1` y un <xref:System.Windows.Forms.TextBox> denominado `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> que representa el formato de los datos que se va a recuperar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <summary>Recupera los datos asociados con el formato de tipo de clase especificado.</summary>
        <returns>Los datos asociados con el formato especificado, o <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este método no encuentra los datos en el formato especificado, intenta convertir los datos en el formato. Si los datos no se puede convertir al formato especificado, este método devuelve `null`.  
  
 Para determinar si está asociadas con datos, o pueden convertirse en un formato, llame a <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para obtener una lista de formatos válidos para los datos almacenados en esta instancia.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetData` método. El método se usa para recuperar los datos almacenados en `myObject`, que está asociado a un tipo específico, `myType`. El tipo de los datos recuperados se muestra en un cuadro de mensaje. El ejemplo se supone que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Formato de los datos que se van a recuperar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <param name="autoConvert"><see langword="true" /> para convertir los datos al formato especificado; en caso contrario, <see langword="false" />.</param>
        <summary>Recupera los datos asociados con el formato de datos especificado, utilizando un valor booleano para determinar si se debe convertir los datos en el formato.</summary>
        <returns>Los datos asociados con el formato especificado, o <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `autoConvert` parámetro es `true` y este método no encuentra los datos en el formato especificado, intenta convertir los datos en el formato. Si los datos no se puede convertir al formato especificado, o si los datos se almacenaron con el `autoConvert` parámetro establecido en `false`, este método devuelve `null`.  
  
 Si el `autoConvert` parámetro es `false`, este método devuelve datos en el formato especificado, o `null` si no se encuentra ningún dato en este formato.  
  
 Para determinar si está asociadas con datos, o pueden convertirse en un formato, llame a <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para obtener una lista de formatos válidos para los datos almacenados en esta instancia.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetData` método. El ejemplo recupera los datos almacenados en un `DataObject`, usando la `autoConvert` parámetro para especificar si desea convertir el formato de datos o no. Primero, `myDataObject` se crea con los datos de texto. A continuación, el ejemplo se trata de dos veces recuperar los datos. En la primera prueba, especifica su formato como una cadena y establece el `autoConvert` parámetro `false`. Se produce un error en esta versión de prueba y el resultado se muestra en un cuadro de mensaje con la etiqueta "Mensaje #1". En la segunda prueba, el ejemplo recupera los mismos datos con el `autoConvert` parámetro establecido en `true`. Esta versión de prueba se realiza correctamente y se muestra el resultado en un cuadro de mensaje con la etiqueta "Mensaje #2". En el ejemplo se supone que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina si los datos almacenados en esta instancia están asociados con el formato especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">El formato para el que se va a comprobar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <summary>Determina si los datos almacenados en esta instancia está asociados o se pueden convertir al formato especificado.</summary>
        <returns><see langword="true" /> Si los datos almacenan en esta instancia está asociada o se puede convertir al formato especificado; en caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para determinar si existe un formato en este <xref:System.Windows.Forms.DataObject> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para los formatos que están disponibles en esta instancia.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetDataPresent` método. En primer lugar, crea un objeto de datos mediante una cadena y el `Text` formato. A continuación, comprueba que los datos están presentes en el `Text` dar formato y muestra los resultados en un cuadro de mensaje. En el ejemplo se supone que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> que representa el formato que se va a comprobar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <summary>Determina si los datos almacenados en esta instancia está asociados o se pueden convertir al formato especificado.</summary>
        <returns><see langword="true" /> Si los datos almacenan en esta instancia está asociada o se puede convertir al formato especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para determinar si existe un formato en este <xref:System.Windows.Forms.DataObject> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para los formatos que están disponibles en esta instancia.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetDataPresent` método. En primer lugar, crea un componente (`myComponent`) y lo almacena en un objeto de datos (`myDataObject`). A continuación, se comprueba si los datos especificados se almacenan en `myDataObject`. Si la prueba se evalúa como `true`, se muestra el resultado en un cuadro de mensaje y se muestra el tipo de datos en un cuadro de texto. En este ejemplo se da por supuesto que ya ha creado un <xref:System.Windows.Forms.Form> denominado `Form1` y un <xref:System.Windows.Forms.TextBox> denominado `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">El formato para el que se va a comprobar. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <param name="autoConvert"><see langword="true" /> para determinar si los datos almacenados en esta instancia se puede convertir al formato especificado; <see langword="false" /> para comprobar si los datos están en el formato especificado.</param>
        <summary>Determina si los datos almacenados en esta instancia están asociados con el formato especificado, utilizando un valor booleano para determinar si se debe convertir los datos en el formato.</summary>
        <returns><see langword="true" /> Si se están en los datos, o pueden convertirse al formato especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para determinar si existe un formato en este <xref:System.Windows.Forms.DataObject> antes de llamar a <xref:System.Windows.Forms.IDataObject.GetData%2A>. Llame a <xref:System.Windows.Forms.IDataObject.GetFormats%2A> para los formatos que están disponibles en esta instancia.  
  
 Este método devuelve `true` cuando:  
  
-   El `autoConvert` parámetro es `true` y los datos están en un formato que se puede convertir al formato apropiado.  
  
-   El `autoConvert` parámetro es `false` y los datos están en el formato adecuado.  
  
 Este método devuelve `false` cuando:  
  
-   El `autoConvert` parámetro es `true` y este método no encuentra los datos en el formato especificado y datos no puede convertir al formato especificado o los datos se almacenaron con `autoConvert` establecido en `false`.  
  
-   El `autoConvert` parámetro es `false`, y no existen datos en esta instancia con el formato especificado.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetDataPresent` método. En primer lugar, crea un objeto de datos (`myDataObject`) mediante una cadena y el `Text` formato. A continuación, consulta el objeto de datos asociados con el `Text` formato, con el `autoConvert` parámetro establecido en `false`. Se produce un error en esta versión de prueba y el resultado se muestra en un cuadro de mensaje con la etiqueta "Mensaje #1". En la segunda prueba, Establece la `autoConvert` parámetro `true`. Esta versión de prueba se realiza correctamente y se muestra el resultado en un cuadro de mensaje con la etiqueta "Mensaje #2". En el ejemplo se supone que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una lista de todos los formatos que está asociados o se pueden convertir en datos almacenados en esta instancia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una lista de todos los formatos que está asociados o se pueden convertir en datos almacenados en esta instancia.</summary>
        <returns>Una matriz de los nombres que representa una lista de todos los formatos que son compatibles con los datos almacenados en este objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para obtener los formatos de datos compatibles antes de llamar a la <xref:System.Windows.Forms.IDataObject.GetData%2A> método. Consulte la <xref:System.Windows.Forms.DataFormats> clase para los formatos predefinidos.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetFormats` método. En primer lugar, crea un objeto de datos (`myDataObject`) mediante una cadena y el `Text` formato. A continuación, recupera todos los formatos de datos y formatos de conversión de datos en el objeto de datos y muestra la lista resultante en un cuadro de mensaje. En este ejemplo se da por supuesto que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" /> para recuperar todos los formatos que los datos almacenados en esta instancia están asociados o se pueden convertir <see langword="false" /> para recuperar sólo los formatos de datos nativos.</param>
        <summary>Obtiene una lista de todos los formatos que los datos almacenados en esta instancia están asociados o se pueden convertir, utilizando un valor booleano para determinar si recuperar todos los formatos que se pueden convertir los datos a o datos nativos solo da formato.</summary>
        <returns>Una matriz de los nombres que representa una lista de todos los formatos que son compatibles con los datos almacenados en este objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para obtener los formatos de datos compatibles antes de llamar a la <xref:System.Windows.Forms.IDataObject.GetData%2A> método. Consulte la <xref:System.Windows.Forms.DataFormats> clase para los formatos predefinidos.  
  
> [!NOTE]
>  Pueden convertir los datos a otro formato si se han almacenado especificando que se permite la conversión, y si el formato solicitado es compatible con el formato almacenado. Por ejemplo, los datos almacenados como Unicode se puede convertir en texto.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `GetFormats` método. En primer lugar, crea un objeto de datos (`myDataObject`) mediante una cadena y el `UnicodeText` formato. A continuación, realiza dos consultas para obtener los formatos asociados a los datos. En la primera consulta, Establece la `autoConvert` parámetro `false` : en este caso, se devuelve solo el formato nativo de los datos. En la segunda consulta, Establece la `autoConvert` parámetro `true`, de modo que obtiene la lista de formatos, incluidos los que se pueden convertir los datos en. En cada caso, la lista resultante se muestra en un cuadro de mensaje. En este ejemplo se da por supuesto que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Almacena los datos especificados y su formato asociado en esta instancia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Para almacenar los datos.</param>
        <summary>Almacena los datos especificados en esta instancia, usando la clase de los datos para el formato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El formato se deriva de la clase de datos.  
  
 Datos almacenados mediante este método pueden convertirse en un formato compatible cuando se recuperan.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `SetData` método. En primer lugar, crea un componente (`myComponent`) y lo almacena en un objeto de datos (`myDataObject`). A continuación, comprueba si los datos especificados se almacenan en el objeto de datos y muestran el resultado en un cuadro de mensaje. En el ejemplo se supone que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Formato asociado a los datos. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <param name="data">Para almacenar los datos.</param>
        <summary>Almacena los datos especificados y su formato asociado en esta instancia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no conoce el formato de la aplicación de destino, puede almacenar datos en múltiples formatos mediante este método.  
  
 Datos almacenados mediante este método pueden convertirse en un formato compatible cuando se recuperan.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `SetData` método. En primer lugar, crea un objeto de datos (`myDataObject`) y almacena una cadena en el objeto que especifica el `UnicodeText` formato. A continuación, recupera los datos almacenados en el objeto que especifica el `Text` formato, para que los datos se convierten en el `Text` formato. El resultado se muestra en un cuadro de mensaje. En este ejemplo se da por supuesto que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> que representa el formato asociado a los datos. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <param name="data">Para almacenar los datos.</param>
        <summary>Almacena los datos especificados y su tipo de clase asociado en esta instancia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no conoce el formato de la aplicación de destino, puede almacenar datos en múltiples formatos mediante este método.  
  
 Datos almacenados mediante este método pueden convertirse en un formato compatible cuando se recuperan.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `SetData` método. En primer lugar, crea un componente (`myComponent`) y lo almacena en un objeto de datos (`myDataObject`), con `myType` para especificar el formato de datos. A continuación, comprueba si los datos del tipo especificado se almacenan en el objeto y muestran el resultado en un cuadro de mensaje. En el ejemplo se supone que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Formato asociado a los datos. Consulte <see cref="T:System.Windows.Forms.DataFormats" /> para los formatos predefinidos.</param>
        <param name="autoConvert"><see langword="true" /> para permitir que los datos que se va a convertir en otro formato; en caso contrario, <see langword="false" />.</param>
        <param name="data">Para almacenar los datos.</param>
        <summary>Almacena los datos especificados y su formato asociado en esta instancia, usando un valor booleano para especificar si los datos se pueden convertir a otro formato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no conoce el formato de la aplicación de destino, puede almacenar datos en múltiples formatos mediante este método.  
  
 Para una implementación de este método, consulte <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Este ejemplo se usa el <xref:System.Windows.Forms.DataObject> clase que implementa `IDataObject`, para demostrar el uso de la `SetData` método. En primer lugar, crea un objeto de datos (`myDataObject`) y almacena una `UnicodeText` de cadena, con el `autoConvert` parámetro establecido en `false`. A continuación, recupera los formatos asociados a los datos almacenados en el objeto y muestra el resultado en un cuadro de mensaje. El único formato asociado a los datos es el `UnicodeText` formato. En este ejemplo se da por supuesto que ha creado un <xref:System.Windows.Forms.Form> denominado `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>