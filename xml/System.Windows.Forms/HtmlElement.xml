<Type Name="HtmlElement" FullName="System.Windows.Forms.HtmlElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34291680a0c464724836438afb96c24559e8796c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51936566" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlElement sealed" />
  <TypeSignature Language="F#" Value="type HtmlElement = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un elemento HTML dentro de una página web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> representa cualquier tipo posibles de elemento en un documento HTML, como `BODY`, `TABLE`, y `FORM`, entre otros. La clase expone las propiedades más comunes que puede esperar encontrar en todos los elementos.  
  
 La mayoría de los elementos puede tener *elementos secundarios*: otros elementos HTML situados por debajo de ellos. Use la <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> propiedad para comprobar si un elemento determinado tiene elementos secundarios y el <xref:System.Windows.Forms.HtmlElement.Children%2A> colección para recorrer en iteración a través de ellos. El <xref:System.Windows.Forms.HtmlElement.Parent%2A> propiedad devuelve el <xref:System.Windows.Forms.HtmlElement> en que se anide el elemento actual.  
  
 A menudo necesitará acceso a atributos, propiedades y métodos en el elemento subyacente que no están directamente expuestos por <xref:System.Windows.Forms.HtmlElement>, como el `SRC` atributo una `IMG` elemento o el `Submit` método en un `FORM`. El <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> y <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> métodos permiten recuperar y modificar cualquier atributo o propiedad en un elemento específico, mientras que <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> proporciona acceso a los métodos no expuestos en administrado Document Object Model (DOM). Si la aplicación no administrada permiso de código, también puede tener acceso no expuestas propiedades y métodos con el <xref:System.Windows.Forms.HtmlElement.DomElement%2A> atributo.  
  
 Use el <xref:System.Windows.Forms.HtmlElement.TagName%2A> propiedad para comprobar si un elemento es de un tipo específico.  
  
 Cualquier documento HTML puede modificarse en tiempo de ejecución. Puede crear nuevos <xref:System.Windows.Forms.HtmlElement> los objetos que tienen el <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método de <xref:System.Windows.Forms.HtmlDocument>y agregarlos a otro elemento utilizando el <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> métodos. También puede crear los elementos como etiquetas HTML y asignarlos a un elemento existente <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo examinar un documento HTML arbitrario y derivar una cadena que describe los elementos HTML, con sangría y números de nivel para indicar cómo profundamente anidados de los elementos están en el documento. Este ejemplo de código requiere que los hosts de aplicación una <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104876">Interfaz IHTMLElement</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104877">Interfaz IHTMLElement2</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104878">Interfaz IHTMLElement3</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104879">Interfaz IHTMLElement4</related>
  </Docs>
  <Members>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de todos los elementos que se encuentran por debajo del elemento actual.</summary>
        <value>Colección de todos los elementos secundarios directos o indirectos del elemento actual. Si el elemento actual es un <c>tabla</c>, por ejemplo, <see cref="P:System.Windows.Forms.HtmlElement.All" /> devolverá cada <c>TH</c>, <c>TR</c>, y <c>TD</c> elemento dentro de la tabla así como cualquier otros elementos, tales como <c>DIV</c> y <c>intervalo</c> elementos, contenidos en las celdas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para acceder a sólo aquellos elementos que tienen el elemento actual como su elemento primario directo, use el <xref:System.Windows.Forms.HtmlElement.Children%2A> colección en su lugar.  
  
 Elementos de esta colección no se devolverán necesariamente en orden de origen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Children" />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement AppendChild(class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendChild (newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ AppendChild(System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.AppendChild : System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.AppendChild newElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="newElement"><see cref="T:System.Windows.Forms.HtmlElement" /> que se va a anexar a esta ubicación del árbol.</param>
        <summary>Agrega un elemento al subárbol de otro elemento.</summary>
        <returns>El elemento que le sigue se ha agregado al árbol.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Document Object Model (DOM) HTML le permite modificar su contenido en tiempo de ejecución de un archivo HTML de varias maneras. Use <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> para agregar nuevos elementos a un documento existente, o para mover un elemento en la página.  
  
 Si un elemento ya se han tienen elementos primarios, si se agrega un elemento a otro elemento quitará automáticamente ese elemento de su elemento primario anterior.  
  
 Las adiciones realizadas a un documento en tiempo de ejecución mediante <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> no se conservarán cuando se llama a la <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A> método en el <xref:System.Windows.Forms.WebBrowser> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un hipervínculo nuevo con el <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método y se agrega al final de una página mediante `AppendChild` en el `BODY` elemento. El ejemplo requiere que la aplicación contiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/Node/appendChild">Método appendChild</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea controlar.</param>
        <param name="eventHandler">Código administrado que controla el evento.</param>
        <summary>Agrega un controlador de eventos para un evento con nombre al Modelo de objetos de documento (DOM) HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El modelo de objetos de documento (DOM) administrado se expone solo un determinado número de eventos. La mayoría de los eventos no expuestos se define sólo para determinados tipos de elementos; como el `submit` evento, que solo es válido en `FORM` elementos. Use <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> para agregar un controlador de eventos a estos eventos no expuestos.  
  
 No debe adjuntar un evento en el documento o uno de sus objetos hasta que el documento ha completado la carga. Lo antes posible, debe llamar a este método está en el <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos de la <xref:System.Windows.Forms.WebBrowser> control.  
  
 Para obtener más información acerca de los eventos no administrados disponibles, vea [acceso a miembros no expuestos en el modelo de objeto de documento HTML administrado](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) y las interfaces IHTMLElement: [IHTMLElement](https://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](https://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](https://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](https://go.microsoft.com/fwlink/?LinkId=104879).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListenerx">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="CanHaveChildren">
      <MemberSignature Language="C#" Value="public bool CanHaveChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHaveChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanHaveChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHaveChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanHaveChildren : bool" Usage="System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este elemento puede tener elementos secundarios.</summary>
        <value>Es <see langword="true" /> si el elemento puede tener elementos secundarios; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algunos elementos, tales como `IMG` y `SCRIPT`, no puede tener elementos secundarios. Utilice esta propiedad antes de llamar a <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> en un elemento arbitrario.  
  
   
  
## Examples  
 El siguiente código de ejemplo controla el <xref:System.Windows.Forms.HtmlElement.Click> eventos en <xref:System.Windows.Forms.HtmlDocument>. Si un elemento no era anterior seleccionado mediante un clic del mouse, el código asigna el elemento a una variable de clase privada denominada `MoveElement`. Si se ha seleccionado un elemento, el código intenta anexarlo al elemento que se acaba de hacer clic. Este ejemplo de código requiere que los hosts de aplicación una <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`, y que ya ha agregan un controlador de eventos para el <xref:System.Windows.Forms.HtmlElement.Click> eventos en <xref:System.Windows.Forms.HtmlDocument>.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlElement#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Children { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de todos los elementos secundarios del elemento actual.</summary>
        <value>Colección de todos los objetos <see cref="T:System.Windows.Forms.HtmlElement" /> cuyo elemento primario es el elemento actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Muchos de los elementos dentro de un archivo HTML pueden tener otros elementos HTML por debajo de ellos. El <xref:System.Windows.Forms.HtmlElement.Children%2A> colección proporciona un mecanismo sencillo para explorar la estructura de árbol de un documento.  
  
 <xref:System.Windows.Forms.HtmlElement.Children%2A> sólo expone los elementos cuyo elemento primario directo es el elemento actual. Si tiene un <xref:System.Windows.Forms.HtmlElement> para un `TABLE` elemento, <xref:System.Windows.Forms.HtmlElement.Children%2A> proporcionará a todos los el `TR` elementos (fila) dentro de la `TABLE`. Para recuperar el `TD` elementos (celda) contenidos dentro de la `TR` elementos, deberá usar el <xref:System.Windows.Forms.HtmlElement.Children%2A> colección en cada elemento individual `TR` elemento, o use el <xref:System.Windows.Forms.HtmlElement.All%2A> colección en <xref:System.Windows.Forms.HtmlElement>.  
  
 No se garantiza que los elementos de esta colección en orden de origen.  
  
 Si <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> es `false`, `Children` siempre estará vacía.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se examina un documento HTML arbitrario y derivar una cadena que describe los elementos con sangría y números de nivel para indicar cómo profundamente anidados de los elementos están en el documento. Esto lo consigue buscando el `Children` colección de todos de forma recursiva de elementos, empezando por el elemento HTML en la parte superior del documento. Este ejemplo de código requiere que la aplicación tenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.All" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en el elemento con el botón primario del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.Click> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.Click> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Si el usuario hace clic en un elemento que no actualmente dispone el foco de entrada, el <xref:System.Windows.Forms.HtmlElement.Click> evento se producirá después de la <xref:System.Windows.Forms.HtmlElement.Focusing> eventos, pero antes la <xref:System.Windows.Forms.HtmlElement.LostFocus> eventos para dicho elemento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.Click> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.Click> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#432](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#432)]
 [!code-vb[System.Windows.Forms.EventExamples#432](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#432)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536913.aspx">OnClick (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los límites del área de cliente del elemento en el documento HTML.</summary>
        <value>Área cliente ocupada por el elemento, menos área ocupada por los bordes y las barras de desplazamiento. Para obtener la posición y las dimensiones del elemento, incluidos sus elementos gráficos, use en su lugar la propiedad <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A> Devuelve datos de posición solo para los elementos que se han asignado un ancho y el alto explícita o elementos que usar el posicionamiento absoluto. Un documento tiene una posición absoluta si su estilo de posición se establece en `absolute`, después de que se puede colocar en cualquier coordenada en la página HTML.  
  
   
  
## Examples  
 Supongamos que haya cargado la siguiente página HTML en una instancia hospedada de la <xref:System.Windows.Forms.WebBrowser> control.  
  
```  
<HTML>  
  
    <BODY>  
  
        <DIV id="div1" style="position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;">  
            Edit this text.  
        </DIV>  
  
    </BODY>  
  
</HTML>  
```  
  
 En el ejemplo de código siguiente se muestra cómo recuperar este elemento y expandir sus dimensiones si el área de cliente es inferior a 400 píxeles de ancho por 50 píxeles de alto y también establece la `DIV` a la `contentEditable` de estado para que el usuario puede escribir texto.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlElement#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533564.aspx">clientLeft (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533565.aspx">clientTop (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533566.aspx">ClientWidth (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533563.aspx">clientHeight (propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se desea controlar.</param>
        <param name="eventHandler">Código administrado que controla el evento.</param>
        <summary>Quita un controlador de eventos de un evento con nombre del Modelo de objetos de documento (DOM) HTML.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">Método detachEvent</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlElement.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el <see cref="T:System.Windows.Forms.HtmlDocument" /> al que pertenece este elemento.</summary>
        <value>Documento primario de este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algunas páginas HTML pueden hospedar marcos utilizando el `FRAMESET` etiquetas. En este caso, cada individuo `FRAME` elemento contendrá su propia instancia de <xref:System.Windows.Forms.HtmlDocument>. Esta propiedad es muy útil cuando ha recibido una referencia a un elemento en un controlador de eventos desde el <xref:System.Windows.Forms.HtmlElementEventArgs>y necesita realizar alguna acción en el documento en el que reside el elemento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.HtmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="DomElement">
      <MemberSignature Language="C#" Value="public object DomElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.DomElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomElement As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomElement { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomElement : obj" Usage="System.Windows.Forms.HtmlElement.DomElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un puntero de interfaz no administrada para este elemento.</summary>
        <value>COM <c>IUnknown</c> interfaces de puntero para el elemento, que puede convertirse en uno de lo elemento HTML, como <c>IHTMLElement</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> es un contenedor para el Internet Explorer Document Object Model (DOM), que se escribe utilizando el modelo de objetos componentes (COM). Si necesita obtener acceso a métodos en las interfaces de COM subyacentes, o propiedades no expuestas como `IHTMLElement`, puede usar este objeto de consulta para ellos.  
  
 Para poder usar las interfaces no administradas, deberá importar la biblioteca MSHTML (mshtml.dll) en la aplicación. Sin embargo, también puede ejecutar no expuestas propiedades y métodos mediante la `Invoke` método.  
  
   
  
## Examples  
 El siguiente ejemplo de código usa interfaces no administradas para tomar el texto seleccionado actualmente y convertirlo en un hipervínculo, con la dirección URL elegida por el usuario. Se ha escrito este código bajo el supuesto de que el formulario tiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`, y que se ha agregado la biblioteca MSHTML no administrada como una referencia al proyecto.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlElement#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.DomDocument" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104877">Interfaz IHTMLElement2</related>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic dos veces seguidas con el botón primario del mouse en un elemento, en una sucesión rápida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un doble clic viene determinada por la configuración del mouse del sistema operativo del usuario. El usuario puede establecer el tiempo entre los clics de un botón del mouse que debe considerarse como un doble clic y no como dos clics.  
  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.DoubleClick> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.DoubleClick> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.DoubleClick> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.DoubleClick> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#433](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#433)]
 [!code-vb[System.Windows.Forms.EventExamples#433](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#433)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536921.aspx">ondblclick (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Drag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Drag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drag As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Drag;" />
      <MemberSignature Language="F#" Value="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario arrastra el texto a varias ubicaciones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se produce cuando se arrastra el texto en las ubicaciones siguientes:  
  
-   Dentro de o entre páginas HTML alojadas en el <xref:System.Windows.Forms.WebBrowser> control o Internet Explorer  
  
-   A otra aplicación  
  
-   En el escritorio de Windows  
  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.Drag> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.Drag> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.Drag> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.Drag> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#434](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#434)]
 [!code-vb[System.Windows.Forms.EventExamples#434](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#434)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536923.aspx">Evento ondrag</related>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragEnd" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragEnd" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnd As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragEnd;" />
      <MemberSignature Language="F#" Value="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un usuario finaliza una operación de arrastrar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.DragEnd> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.DragEnd> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.DragEnd> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.DragEnd> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#435](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#435)]
 [!code-vb[System.Windows.Forms.EventExamples#435](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#435)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536924.aspx">Evento ondragend</related>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario deja de arrastrar un elemento sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.DragLeave> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.DragLeave> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#436](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#436)]
 [!code-vb[System.Windows.Forms.EventExamples#436](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#436)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario arrastra el texto sobre el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.DragOver> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.DragOver> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.DragOver> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.DragOver> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#437](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#437)]
 [!code-vb[System.Windows.Forms.EventExamples#437](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#437)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536927.aspx">Evento OnDragOver</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.HtmlElement.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si el usuario puede escribir datos en este elemento.</summary>
        <value>Es <see langword="true" /> si el elemento permite que el usuario escriba datos; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para `FORM` elementos como cuadros de texto y botones de radio, establecer <xref:System.Windows.Forms.HtmlElement.Enabled%2A> a `false` impedirá que el usuario usa estos campos de formulario. Para otros elementos, tales como `DIV` o `SPAN`, estableciendo <xref:System.Windows.Forms.HtmlElement.Enabled%2A> a `false` hará que todo el texto dentro del elemento que aparezcan sombreadas; sin embargo, el texto estará seleccionable. Para cancelar la selección, agregar un controlador de eventos para el no expuestos `onselectstart` eventos mediante el <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> método.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533734.aspx">Propiedad Disabled</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlElement.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto cuya igualdad se va a comprobar.</param>
        <summary>Prueba si el objeto proporcionado es igual al elemento actual.</summary>
        <returns>Es <see langword="true" /> si <paramref name="obj" /> es <see cref="T:System.Windows.Forms.HtmlElement" />; de lo contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstChild As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ FirstChild { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstChild : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el siguiente elemento situado debajo de este elemento en el árbol del documento.</summary>
        <value>Objeto <see cref="T:System.Windows.Forms.HtmlElement" /> que representa el primer elemento situado debajo del elemento actual, en el orden original.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> junto con <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> para recorrer el árbol de documento para un documento HTML.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533755.aspx">Propiedad firstChild</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlElement.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Coloca el foco de entrada del usuario en el elemento actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el foco en un elemento tanto da el foco de ese elemento y convertirlo en el elemento activo; Por ejemplo, se devolverá el elemento que tiene el foco mediante el <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> propiedad de <xref:System.Windows.Forms.HtmlDocument>.  
  
 Escrito por un usuario después de las pulsaciones de teclas <xref:System.Windows.Forms.HtmlElement.Focus%2A> se ha llamado a voluntad se envían a ese elemento.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">Focus (método)</related>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento recibe por primera vez el foco de entrada del usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento que tenía el foco antes de que el usuario cambiado a otra aplicación mediante la barra de tareas o las teclas ALT + TAB recibirá el <xref:System.Windows.Forms.HtmlElement.Focusing> y <xref:System.Windows.Forms.HtmlElement.GotFocus> eventos nuevo cuando el usuario vuelve a cambiar a la aplicación.  
  
 No se puede cancelar el comportamiento predeterminado de este evento. Para quitar el foco de un elemento, llame a <xref:System.Windows.Forms.HtmlElement.Focus%2A> en un elemento diferente desde el <xref:System.Windows.Forms.HtmlElement.GotFocus> eventos.  
  
 Un <xref:System.Windows.Forms.HtmlElement.Focusing> también se producirá un evento en un elemento en los elementos primarios de ese elemento y, en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.Focusing> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.Focusing> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#438](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#438)]
 [!code-vb[System.Windows.Forms.EventExamples#438](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#438)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536935.aspx">Evento onfocusin</related>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (attributeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="member this.GetAttribute : string -&gt; string" Usage="htmlElement.GetAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">El nombre del atributo. Este argumento no distingue mayúsculas de minúsculas.</param>
        <summary>Obtiene el valor del atributo con nombre del elemento.</summary>
        <returns>Valor de este atributo del elemento, en forma de valor <see cref="T:System.String" />. Si el atributo especificado no existe en este elemento, se devuelve una cadena vacía.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un atributo en HTML es cualquier par de nombre/valor válido para ese elemento. <xref:System.Windows.Forms.HtmlElement> sólo expone los atributos que son comunes a todos los elementos, omitiendo aquellos que solo se aplican a ciertos tipos de elementos; `SRC` es un atributo predefinido para el `IMG` etiquetar, por ejemplo, pero no para el `DIV` etiqueta. Use <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> y <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> para manipular los atributos que no se exponen en administrado Document Object Model (DOM).  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> y <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente recupera todos los `META` etiquetas dentro de un elemento HTML de documento, mediante <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> para encontrar el `META` etiqueta con el nombre `Description`. El ejemplo requiere que la aplicación tiene un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536429.aspx">GetAttribute (método)</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlElement.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Nombre de la etiqueta cuyos objetos <see cref="T:System.Windows.Forms.HtmlElement" /> se desean recuperar.</param>
        <summary>Recupera una colección de elementos que se representan en HTML mediante la etiqueta <c>HTML</c> especificada.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlElementCollection" /> que contiene todos los elementos cuyo nombre de etiqueta <c>HTML</c> es igual a <paramref name="tagName" />.</returns>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536439.aspx">Método getElementsByTagName</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlElement.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actúa como función hash para un tipo concreto.</summary>
        <returns>Código hash para el objeto <see cref="T:System.Object" /> actual.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento ha recibido el foco de entrada del usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No puede cancelar este comportamiento predeterminado de evento, ni impedir que se propague. Para quitar el foco de un elemento, llame a <xref:System.Windows.Forms.HtmlElement.Focus%2A> en un elemento diferente desde el <xref:System.Windows.Forms.HtmlElement.GotFocus> eventos.  
  
   
  
## Examples  
 Guarde el siguiente código HTML en un archivo y cargar el archivo en un <xref:System.Windows.Forms.WebBrowser> control en un proyecto de Windows Forms.  
  
```  
<HTML>  
    <BODY>  
        <FORM name="form1">  
            <INPUT type="text" size=20 name="text1">  
            <INPUT type="text" size=20 name="text2">  
            <INPUT type="text" size=20 name="text3">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 En el ejemplo de código siguiente, se impide que la próxima `INPUT` elemento en el orden de tabulación de recibir el foco de entrada del usuario si el elemento anterior contiene menos de cinco caracteres. El ejemplo requiere que el archivo HTML mencionado anteriormente se carga en una instancia de la <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlElement#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">Evento onblur</related>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Id : string with get, set" Usage="System.Windows.Forms.HtmlElement.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una etiqueta mediante la que identificar el elemento.</summary>
        <value>Identificador único del elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Id%2A> debe ser única; no puede tener dos elementos con el mismo <xref:System.Windows.Forms.HtmlElement.Id%2A> dentro del mismo documento. Use el <xref:System.Windows.Forms.HtmlElement.Name%2A> propiedad que se va a asignar el mismo identificador a un grupo de elementos relacionados lógicamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Name" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533880.aspx">ID (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534184.aspx">name (Propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el código HTML situado por debajo de este elemento.</summary>
        <value>Código HTML que define los elementos secundarios del elemento actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay varias maneras de agregar nuevos elementos a una página HTML existente, como el <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> y <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> métodos. Uso de <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> suele ser la manera más rápida de agregar nuevo contenido cuando es necesario establecer muchos atributos o estilos en los elementos nuevos.  
  
 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> difiere de <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> que <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> no incluirá el código HTML que representa el objeto que está llamando. Consulte <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> para obtener más información sobre la diferencia entre estas dos propiedades.  
  
 Establecer <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> destruye todos los elementos secundarios que anteriormente se anexa al elemento. Si recupera un elemento del DOM y, a continuación, asignar HTML nuevo a sus padres <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad, la referencia a ese elemento será inútil y su comportamiento cuando llama a sus propiedades y métodos es indefinido.  
  
 Algunos elementos de configuración <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> no es una operación válida. Algunas etiquetas HTML no tengan ninguna etiqueta de cierre, como la `IMG` etiqueta y, por lo tanto, no puede contener elementos anidados. Algunas etiquetas, como el `SCRIPT` etiquetar, solo puede contener texto contenido; establecer <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> se producirá un error. Para ambos tipos de etiquetas, la <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> propiedad devolverá `false`. Sin embargo, también se no se puede establecer <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> en `TABLE` y `TR` elementos, como la asignación a estos elementos de HTML con formato incorrecto podrían dañar la representación del documento. Use <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o `insertRow` y `insertCell` métodos en no administrado `IHTMLTable` interfaz para agregar filas y celdas en una `TABLE`.  
  
 Si sólo necesita asignar texto a un elemento y no código HTML, utilice el <xref:System.Windows.Forms.HtmlElement.InnerText%2A> propiedad en su lugar.  
  
 Asignar un valor a <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> destruirá los valores de texto asignados previamente mediante <xref:System.Windows.Forms.HtmlElement.InnerText%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">No se permite la creación de elementos secundarios de este elemento.</exception>
        <altmember cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
        <altmember cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533897.aspx">Propiedad innerHTML</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536452.aspx">insertAdjacentHTML (método)</related>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerText : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto asignado al elemento.</summary>
        <value>Texto del elemento, sin ningún código HTML. Si el elemento contiene elementos secundarios, solo se conservará el texto de los elementos secundarios.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se intenta asignar HTML a un elemento con <xref:System.Windows.Forms.HtmlElement.InnerText%2A>, el código HTML se mostrará como literales en el documento, como si estuviera viendo HTML dentro de un archivo de texto. Si asigna HTML a un elemento mediante el <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad <xref:System.Windows.Forms.HtmlElement.InnerText%2A> devolverá todo el texto en que quite el código HTML con el marcado.  
  
 Asignar un valor a <xref:System.Windows.Forms.HtmlElement.InnerText%2A> destruirá cualquier elemento secundario que pertenece al elemento.  
  
   
  
## Examples  
 El código siguiente crea un hipervínculo nuevo con <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>y se asigna el texto en el vínculo mediante el <xref:System.Windows.Forms.HtmlElement.InnerText%2A> propiedad.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El elemento especificado no puede contener texto (por ejemplo, un elemento <c>IMG</c>).</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533899.aspx">innerText, propiedad</related>
      </Docs>
    </Member>
    <Member MemberName="InsertAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement InsertAdjacentElement(valuetype System.Windows.Forms.HtmlElementInsertionOrientation orient, class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAdjacentElement (orient As HtmlElementInsertionOrientation, newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ InsertAdjacentElement(System::Windows::Forms::HtmlElementInsertionOrientation orient, System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.InsertAdjacentElement : System.Windows.Forms.HtmlElementInsertionOrientation * System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.InsertAdjacentElement (orient, newElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orient" Type="System.Windows.Forms.HtmlElementInsertionOrientation" />
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="orient">Posición en la que se va a insertar este elemento con respecto al elemento actual.</param>
        <param name="newElement">Nuevo elemento que se va a insertar.</param>
        <summary>Inserta un nuevo elemento en el Modelo de objetos de documento (DOM).</summary>
        <returns>Elemento <see cref="T:System.Windows.Forms.HtmlElement" /> que se acaba de insertar. Si se ha producido un error en la inserción, se devolverá <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No llame a este método hasta después de la <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos en el <xref:System.Windows.Forms.WebBrowser> control se ha producido. Llamar a este método antes, a continuación, puede producir una excepción, como el documento no habrá terminado de cargarse.  
  
 Si un valor de <xref:System.Windows.Forms.HtmlElementInsertionOrientation> válido dependerá del tipo del elemento. Por ejemplo, <xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin> es válido si el elemento es un `DIV`, pero sólo si es un `SCRIPT` o `IMG` elemento, ninguno de los cuales puede contener elementos secundarios.  
  
   
  
## Examples  
 El siguiente código de ejemplo se inserta un `DIV` elemento en la parte superior de cada página en que los usuarios ver fuera del servidor ADatum.com. El ejemplo requiere que el formulario contenga un <xref:System.Windows.Forms.WebBrowser> control denominado `WebBrowser1`. El ejemplo también debe importar el espacio de nombres <xref:System.Text.RegularExpressions>.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlElement#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536451.aspx">Método insertAdjacentElement</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ejecuta un método único del elemento actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string -&gt; obj" Usage="htmlElement.InvokeMember methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre de la propiedad o del método que se va a invocar.</param>
        <summary>Ejecuta un método no expuesto en el elemento DOM subyacente de este elemento.</summary>
        <returns>Elemento devuelto por este método, representado como un objeto <see cref="T:System.Object" />. Si este objeto <see cref="T:System.Object" /> es otro elemento HTML y se ha agregado al proyecto una referencia a la biblioteca MSHTML no administrada, podrá convertirlo en su interfaz no administrada correspondiente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método puede usarse para llamar a métodos de Document Object Model (DOM) que no tienen equivalentes en código administrado. Utilice esta versión de <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> para ejecutar métodos no expuestos que no toman ningún argumento. Para obtener un ejemplo, consulta <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName, params object[] parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName, object[] parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String, ParamArray parameter As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string * obj[] -&gt; obj" Usage="htmlElement.InvokeMember (methodName, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">Nombre de la propiedad o del método que se va a invocar.</param>
        <param name="parameter">Lista de parámetros que se van a pasar.</param>
        <summary>Ejecuta una función definida en la página HTML actual por un lenguaje de scripting.</summary>
        <returns>Elemento devuelto por esta función, representado como un objeto <see cref="T:System.Object" />. Si este objeto <see cref="T:System.Object" /> es otro elemento HTML y se ha agregado al proyecto una referencia a la biblioteca MSHTML no administrada, podrá convertirlo en su interfaz no administrada correspondiente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método puede usarse para llamar a métodos de Document Object Model (DOM) que no tienen equivalentes en código administrado. Todos los argumentos proporcionan a <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> se convertirá en Win32 `VARIANT` tipos de datos antes de pasarlos a la función de scripting con nombre.  
  
   
  
## Examples  
 El código siguiente en el ejemplo se obtiene un `TABLE` llamado `dataTable` y usa el no expuestos `moveRow` método para mover una fila desde el final de la tabla al principio.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlElement#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario presiona una tecla del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> se produce antes de <xref:System.Windows.Forms.HtmlElement.KeyPress>, lo que ocurre antes <xref:System.Windows.Forms.HtmlElement.KeyUp>.  
  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.KeyDown> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.KeyDown> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.KeyDown> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.KeyDown> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#442](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#442)]
 [!code-vb[System.Windows.Forms.EventExamples#442](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#442)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536938.aspx">Evento onkeydown</related>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario presiona y suelta una tecla del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> se produce después de <xref:System.Windows.Forms.HtmlElement.KeyDown> y antes de <xref:System.Windows.Forms.HtmlElement.KeyUp>.  
  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.KeyPress> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.KeyPress> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.KeyPress> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.KeyPress> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#443](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#443)]
 [!code-vb[System.Windows.Forms.EventExamples#443](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#443)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536939.aspx">onkeypress (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario suelta una tecla del teclado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> se produce después de <xref:System.Windows.Forms.HtmlElement.KeyPress>, que se produce después de <xref:System.Windows.Forms.HtmlElement.KeyDown>.  
  
 No se puede cancelar este evento.  
  
 Un <xref:System.Windows.Forms.HtmlElement.KeyUp> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.KeyUp> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.KeyUp> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#444](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#444)]
 [!code-vb[System.Windows.Forms.EventExamples#444](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#444)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536940.aspx">onkeyup (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento está perdiendo el foco de entrada del usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.LosingFocus> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.LosingFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#440](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#440)]
 [!code-vb[System.Windows.Forms.EventExamples#440](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#440)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el elemento ha perdido el foco de entrada del usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento dejará de recibir eventos de pulsación de tecla después <xref:System.Windows.Forms.HtmlElement.LostFocus> se produce hasta que se le asigna el foco de nuevo, bien por el usuario seleccione en la página de la aplicación que llama el <xref:System.Windows.Forms.HtmlElement.Focus%2A> método en ese elemento.  
  
 No se puede cancelar este evento.  
  
 Un <xref:System.Windows.Forms.HtmlElement.LostFocus> también se producirá un evento en un elemento en los elementos primarios de ese elemento y, en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.LostFocus> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.LostFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#441](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#441)]
 [!code-vb[System.Windows.Forms.EventExamples#441](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#441)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536936.aspx">Evento onfocusout</related>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario presiona un botón del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.MouseDown> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.MouseDown> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseDown> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseDown> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#446](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#446)]
 [!code-vb[System.Windows.Forms.EventExamples#446](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#446)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536944.aspx">OnMouseDown (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario mueve por primera vez el cursor del mouse sobre el elemento actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseEnter> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseEnter> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#449](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#449)]
 [!code-vb[System.Windows.Forms.EventExamples#449](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#449)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario mueve el cursor del mouse fuera del elemento actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseLeave> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseLeave> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#450](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#450)]
 [!code-vb[System.Windows.Forms.EventExamples#450](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#450)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario mueve el cursor del mouse sobre el elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede cancelar este evento.  
  
 Un <xref:System.Windows.Forms.HtmlElement.MouseMove> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseMove> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseMove> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#445](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#445)]
 [!code-vb[System.Windows.Forms.EventExamples#445](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#445)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536947.aspx">OnMouseMove (evento)</related>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el cursor del mouse entra en los límites del elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.MouseOver> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.MouseOver> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseOver> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseOver> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#447](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#447)]
 [!code-vb[System.Windows.Forms.EventExamples#447](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#447)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536949.aspx">Evento onmouseover</related>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario suelta un botón del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la acción predeterminada para un <xref:System.Windows.Forms.HtmlElement.MouseUp> eventos en un elemento estableciendo el <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
 Un <xref:System.Windows.Forms.HtmlElement.MouseUp> también se producirá un evento en un elemento en los elementos primarios de ese elemento y en el <xref:System.Windows.Forms.HtmlDocument> clase propia, a menos que establezca el <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> propiedad de la <xref:System.Windows.Forms.HtmlElementEventArgs> clase `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de este miembro. En el ejemplo, un controlador de eventos informa sobre la aparición de la <xref:System.Windows.Forms.HtmlElement.MouseUp> eventos. Este informe le ayuda a saber cuándo el evento se produce y puede ayudarle a depurar. Para informar sobre varios eventos o en eventos que se producen con frecuencia, considere reemplazar <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o agregar el mensaje a un multilínea <xref:System.Windows.Forms.TextBox>.  
  
 Para ejecutar el ejemplo de código, péguelo en un proyecto que contiene una instancia del tipo <xref:System.Windows.Forms.HtmlElement> denominado `HtmlElement1`. A continuación, asegúrese de que está asociado el controlador de eventos con el <xref:System.Windows.Forms.HtmlElement.MouseUp> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#448](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#448)]
 [!code-vb[System.Windows.Forms.EventExamples#448](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#448)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536950.aspx">Evento onmouseup</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del elemento.</summary>
        <value>Objeto <see cref="T:System.String" /> que representa el nombre del elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.HtmlElement.Name%2A> propiedad para recuperar elementos de un documento mediante el <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> método en el <xref:System.Windows.Forms.HtmlElement.All%2A> propiedad de <xref:System.Windows.Forms.HtmlDocument>.  
  
 Cuando se aplica a `INPUT` elementos, <xref:System.Windows.Forms.HtmlElement.Name%2A> define el nombre de variable para los datos de ese elemento cuando su formulario se envía al servidor.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534184.aspx">name (Propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement NextSibling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSibling As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ NextSibling { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSibling : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el siguiente elemento del mismo nivel que este elemento en el árbol del documento.</summary>
        <value>Objeto <see cref="T:System.Windows.Forms.HtmlElement" /> que representa el elemento situado a la derecha del elemento actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> junto con <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> para recorrer el árbol de documento para un elemento HTML.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534189.aspx">Propiedad nextSibling</related>
      </Docs>
    </Member>
    <Member MemberName="OffsetParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement OffsetParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement OffsetParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetParent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ OffsetParent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetParent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento a partir del cual se calcula <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />.</summary>
        <value>Elemento a partir del que se calculan los desplazamientos.  
  
Si el elemento primario de un elemento u otro elemento de la jerarquía de elementos usa una posición relativa o absoluta, <see langword="OffsetParent" /> será el primer elemento con una posición relativa o absoluta en el que se anide el elemento actual. Si ninguno de los elementos situados por encima del elemento actual se posición absoluta o relativa, <see langword="OffsetParent" /> será el <c>cuerpo</c> etiqueta del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los elementos se pueden colocar en una página HTML en una de estas tres maneras: posición de flujo; predeterminada posición relativa, en que el elemento se desplaza por una cantidad fija con respecto a su elemento primario; y posiciones absolutas en que el elemento tiene un fijo coordenadas de posición con respecto a la esquina superior izquierda del documento.  
  
 Cuando los elementos de un documento utilizan posición relativa o absoluta, puede usar `OffsetParent` para calcular la posición de la coordenada de un elemento en el área cliente.  
  
 Para obtener más información sobre el elemento posicionamiento en HTML, vea [acerca de posicionamiento de elementos](https://msdn.microsoft.com/library/ms533005.aspx).  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra cómo <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> y <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> difieren para `span1`, `span2` y `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534302.aspx">offsetParent (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms530302.aspx">Ubicación y la dimensión de elemento de medición</related>
      </Docs>
    </Member>
    <Member MemberName="OffsetRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle OffsetRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle OffsetRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle OffsetRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ubicación de un elemento con respecto a su elemento primario.</summary>
        <value>La posición de las coordenadas X e Y del elemento, y su ancho y su alto, con respecto a su elemento primario.  
  
Si el elemento primario de un elemento tiene una posición relativa o absoluta, <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> devolverá el desplazamiento del elemento primario. Si el propio elemento tiene una posición relativa con respecto a su elemento primario, <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> devolverá el desplazamiento con respecto a su elemento primario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los elementos se pueden colocar en una página HTML en una de estas tres maneras:  
  
-   Posición de flujo predeterminada.  
  
-   Posición relativa, en que el elemento se desplaza por una cantidad fija con respecto a su elemento primario.  
  
-   Posiciones absolutas en que el elemento tiene un fijo coordenadas de posición con respecto a la esquina superior izquierda del documento.  
  
 Para obtener más información sobre el elemento posicionamiento en HTML, vea [acerca de posicionamiento de elementos](https://msdn.microsoft.com/library/ms533005.aspx).  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra cómo <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> y <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> difieren para `span1`, `span2` y `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetParent" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534200.aspx">offsetLeft (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534303.aspx">offsetTop (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534304.aspx">offsetWidth (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534199.aspx">offsetHeight (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms530302.aspx">Ubicación y la dimensión de elemento de medición</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">Primer objeto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <summary>Compara dos elementos para determinar si son iguales.</summary>
        <returns>Es <see langword="true" /> si ambos parámetros son <see langword="null" /> o si ambos elementos tienen la misma interfaz COM subyacente; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las pruebas del operador de igualdad el `IUnknown` punteros de los objetos COM subyacentes ajustados por proporcionado <xref:System.Windows.Forms.HtmlElement> clases.  
  
 Es el método equivalente para este operador <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="System.Windows.Forms.HtmlElement.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">Primer objeto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <param name="right">Segundo objeto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <summary>Compara dos objetos <see cref="T:System.Windows.Forms.HtmlElement" /> para determinar si no son iguales.</summary>
        <returns>Es <see langword="true" /> si sólo un elemento es <see langword="null" /> o si los dos objetos no son iguales; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[El método equivalente para este operador es la negación del <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterHtml">
      <MemberSignature Language="C#" Value="public string OuterHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el código HTML del elemento actual.</summary>
        <value>Código HTML del elemento actual y de sus elementos secundarios.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mientras que <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> devolverá todo el código HTML incluido en el elemento actual, excepto las etiquetas del elemento actual que lo rodea, <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> incluye la etiqueta del elemento actual, así como el código HTML que contiene etiquetas, por ejemplo:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<DIV id="div1">`  
  
 `Hello`  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 En este ejemplo, una llamada a <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> en `div2` devolverá:  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 Una llamada a <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> devolverá:  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 Si asigna un nuevo valor a <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>, la referencia del elemento actual dejará de ser válida; no reflejará el nombre, propiedades y los secundarios contenido del archivo HTML recién asignado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534310.aspx">Propiedad outerHTML</related>
      </Docs>
    </Member>
    <Member MemberName="OuterText">
      <MemberSignature Language="C#" Value="public string OuterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterText" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterText : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto del elemento actual.</summary>
        <value>Texto del elemento actual y de los elementos secundarios de dicho elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se intenta asignar HTML a un elemento con <xref:System.Windows.Forms.HtmlElement.OuterText%2A>, el código HTML se mostrará como literales en el documento, como si estuviera viendo HTML dentro de un archivo de texto. Si asigna HTML a un elemento mediante el <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propiedad <xref:System.Windows.Forms.HtmlElement.OuterText%2A> devolverá todo el texto en que quite el código HTML con el marcado.  
  
 Asignar un valor a <xref:System.Windows.Forms.HtmlElement.OuterText%2A> destruirá cualquier elemento secundario que pertenece al elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">No se puede establecer texto fuera de este elemento.</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534311.aspx">outerText (propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Parent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento primario del elemento actual.</summary>
        <value>Elemento situado por encima del elemento actual en la jerarquía del documento HTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.HtmlElement.Parent%2A> propiedad permite la detección de contexto de un elemento. Es muy útil dentro de los controladores de eventos, como <xref:System.Windows.Forms.HtmlElement.Click>, que se puede activar para cualquier elemento en cualquier parte de la jerarquía de objetos del documento.  
  
 El <xref:System.Windows.Forms.HtmlElement.Parent%2A> propiedad del elemento HTML (la parte superior de un documento HTML) apunta a sí mismo. Si se llama a <xref:System.Windows.Forms.HtmlElement.Parent%2A> dentro de un bucle, compruebe que la condición del bucle salto compara el tipo del elemento actual y el tipo de la `Parent` propiedad, o bien el código se puede ejecutar un bucle infinito.  
  
   
  
## Examples  
 En el siguiente ejemplo busca todos los `IMG` etiquetas en un documento y usa el <xref:System.Windows.Forms.HtmlElement.Parent%2A> propiedad para probar si el `IMG` tiene un hipervínculo a otra página; si es así, el código asigna la dirección URL del `ALT` atributo de la `IMG`etiquetar, para que los usuarios mover el mouse sobre la imagen para ver adónde lleva.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534327.aspx">parentElement (propiedad)</related>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RaiseEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (eventName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseEvent(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="member this.RaiseEvent : string -&gt; unit" Usage="htmlElement.RaiseEvent eventName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">Nombre del evento que se va a generar.</param>
        <summary>Hace que el evento con nombre llame a todos los controladores de eventos registrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para tener acceso a los eventos de Document Object Model (DOM) HTML. Lo llama directamente el [IHTMLElement3:: FireEvent](https://go.microsoft.com/fwlink/?LinkId=103189) método. Para obtener más información sobre cómo usar el DOM a través de la <xref:System.Windows.Forms.HtmlElement> de clases, vea [acceso a miembros no expuestos en el modelo de objeto de documento HTML administrado](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlElement.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita el foco del elemento actual, en caso de que lo tenga.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método provoca la <xref:System.Windows.Forms.HtmlElement.LostFocus> eventos para el elemento.  
  
 Cuando se borra el foco de un elemento con este método, se le da al documento que contiene el elemento, no en el elemento siguiente en el orden de tabulación.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">blur (método)</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignWithTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignWithTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignWithTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignWithTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="htmlElement.ScrollIntoView alignWithTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignWithTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignWithTop">Si es <see langword="true" />, la parte superior del objeto se mostrará en la parte superior de la ventana. Si es <see langword="false" />, la parte inferior del objeto se mostrará en la parte inferior de la ventana.</param>
        <summary>Se desplaza por el documento donde está incluido este elemento hasta que el borde superior o inferior del elemento se alinee con la ventana del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se busca un elemento por su nombre y se desplaza a través de la página de modo que la parte superior del elemento se alinea con la parte superior de la página visible.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlElement#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536730.aspx">scrollIntoView (método)</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollLeft">
      <MemberSignature Language="C#" Value="public int ScrollLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLeft : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la distancia entre el borde del elemento y el borde izquierdo de su contenido.</summary>
        <value>Distancia (en píxeles) entre el borde izquierdo del elemento y el borde izquierdo de su contenido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las dimensiones del área de desplazamiento completas están disponibles con <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` y <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> se exponen de forma independiente, ya que estas son las dos únicas propiedades del área de desplazamiento que los desarrolladores pueden establecer.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534617.aspx">Propiedad scrollLeft</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ScrollRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ScrollRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ScrollRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las dimensiones de la región desplazable de un elemento.</summary>
        <value>Tamaño y coordenadas de posición del área desplazable de un elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento tendrá una región desplazable, si su contenido supera el tamaño de sus dimensiones, a menos que el estilo de desbordamiento en el elemento prohíba la representación barras de desplazamiento.  
  
 No se puede modificar el tamaño del área de desplazamiento directamente, pero puede modificar la distancia entre los bordes del área de desplazamiento y los bordes del elemento. Use la <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> y <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> propiedades para lograr esto.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534617.aspx">Propiedad scrollLeft</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534618.aspx">Propiedad scrollTop</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534615.aspx">scrollHeight (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534619.aspx">scrollWidth (propiedad)</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534312.aspx">Propiedad de desbordamiento</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTop">
      <MemberSignature Language="C#" Value="public int ScrollTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollTop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollTop : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la distancia entre el borde del elemento y el borde superior de su contenido.</summary>
        <value>Distancia (en píxeles) entre el borde superior del elemento y el borde superior de su contenido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las dimensiones del área de desplazamiento completas están disponibles con <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> y `ScrollTop` se exponen de forma independiente, ya que estas son las dos únicas propiedades del área de desplazamiento que los desarrolladores pueden establecer.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534618.aspx">Propiedad scrollTop</related>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string attributeName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(string attributeName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (attributeName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttribute(System::String ^ attributeName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetAttribute : string * string -&gt; unit" Usage="htmlElement.SetAttribute (attributeName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nombre del atributo que se va a establecer.</param>
        <param name="value">Nuevo valor de este atributo.</param>
        <summary>Establece el valor del atributo con nombre del elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un atributo en HTML es cualquier par de nombre y valor válido para ese elemento. <xref:System.Windows.Forms.HtmlElement> sólo expone los atributos que son comunes a todos los elementos, omitiendo aquellos que solo se aplican a ciertos tipos de elementos; `SRC` es un atributo predefinido para el `IMG` etiquetar, por ejemplo, pero no para el `DIV` etiqueta. Use <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> y <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> para manipular los atributos que no se exponen en administrado Document Object Model (DOM).  
  
 Si `attributeName` no es un atributo definido en un elemento, <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> definirá en el elemento como un nuevo atributo.  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> y <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> distinguen mayúsculas de minúsculas.  
  
 Para establecer el `class` atributo una <xref:System.Windows.Forms.HtmlElement> , debe hacer referencia al atributo como `className` al especificar el primer argumento <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>  
  
   
  
## Examples  
 En el ejemplo de código siguiente se agrega un nuevo `IMG` elemento actual de documentos, mediante <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> para establecer el `SRC` atributo para la imagen.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlElement#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536739.aspx">Método setAttribute</related>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public string Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Style { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : string with get, set" Usage="System.Windows.Forms.HtmlElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una lista de estilos delimitados por punto y coma del elemento actual.</summary>
        <value>Cadena que consta de todos los estilos del elemento</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Document Object Model (DOM) HTML utiliza estilos, tal como se define en la especificación de hojas de estilos en cascada de World Wide Web Consortium, para controlar la presentación de un elemento. Diseña el <xref:System.Windows.Forms.HtmlElement.Style%2A> propiedad adoptan la forma de pares nombre / valor delimitado por dos puntos, con cada par separados por punto y coma, como sigue:  
  
 `style-name1:value1;...;[style-nameN:valueN;]`  
  
 Para establecer la fuente para un `DIV` elemento 14 puntos Times New Roman negrita, por ejemplo, podría asignar la cadena siguiente:  
  
 `font-face:Times New Roman;font-size:14px;font-weight:bold;`  
  
 Para obtener una lista completa de todos los estilos disponibles en el DOM de HTML, consulte [atributo de estilo](https://msdn.microsoft.com/library/ms534651.aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short TabIndex { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int16 with get, set" Usage="System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ubicación de este elemento en el orden de tabulación.</summary>
        <value>Índice numérico del elemento en el orden de tabulación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> Determina qué elemento de un documento HTML siguiente recibirá el foco cuando el usuario presiona la tecla TAB. De forma predeterminada, son los únicos elementos que se incluyen en el orden de tabulación `INPUT` elementos, el `SELECT` control y cualquier elemento cuyo `contentEditable` propiedad está establecida en `true`. Puede incluir cualquier elemento HTML en el orden de tabulación, como un `DIV`, mediante la asignación explícita <xref:System.Windows.Forms.HtmlElement.TabIndex%2A>.  
  
 Los valores válidos para <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> intervalo comprendido entre-32767 y 32767.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534654.aspx">Propiedad tabIndex</related>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string" Usage="System.Windows.Forms.HtmlElement.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la etiqueta HTML.</summary>
        <value>Nombre utilizado para crear este elemento mediante código HTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Muchos elementos en el modelo de objetos de documento HTML tienen atributos, propiedades y métodos que son únicos para esos elementos; como el `HREF` atributo el `A` elemento, o la `Submit` método `FORM`. Use <xref:System.Windows.Forms.HtmlElement.TagName%2A> cuando tiene un elemento de un tipo potencialmente arbitrario y necesita realizar una operación específica del tipo.  
  
   
  
## Examples  
 En el siguiente ejemplo busca todos los `IMG` etiquetas en un documento y usa el `TagName` propiedad para probar si el `IMG` tiene un hipervínculo a otra página; si es así, el código asigna la dirección URL del `ALT` atributo de la `IMG`etiquetar, para que los usuarios mover el mouse sobre la imagen para ver adónde lleva.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534657.aspx">tagName (propiedad)</related>
      </Docs>
    </Member>
  </Members>
</Type>