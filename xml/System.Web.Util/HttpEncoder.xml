<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e35efb72622eb52376091974f022482dc3d28df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610069" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona lógica de codificación y descodificación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase contiene la codificación y descodificación lógica que se utiliza con métodos de clases como <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, y <xref:System.Net.HttpResponseHeader>.  
  
 Puede heredar de la <xref:System.Web.Util.HttpEncoder> clase e invalidar su comportamiento para personalizar el valor predeterminado de codificación y descodificación de comportamiento de ASP.NET. A continuación, establezca el <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> propiedad de la <xref:System.Web.Configuration.HttpRuntimeSection> clase para configurar la clase personalizada.  
  
 Una clase personalizada para la codificación y descodificación que deriva de <xref:System.Web.Util.HttpEncoder> puede invalidar ASP.NET integrados de codificación y descodificación comportamiento o cambiar solo seleccionadas aspectos del mismo.  
  
 Puede configurar el tipo de codificación personalizado de ASP.NET para reemplazar o complementar el comportamiento de codificación siguiente:  
  
-   Codificación HTML  
  
-   Codificación del atributo HTML  
  
-   Codificación de direcciones URL  
  
-   Codificación de ruta de acceso de dirección URL  
  
-   Nombre del encabezado HTTP y codificación de valores de encabezado  
  
 De forma predeterminada, las aplicaciones ASP.NET están configuradas para usar el <xref:System.Web.Security.AntiXss.AntiXssEncoder> escriba para toda la codificación de salida.  
  
 El siguiente ejemplo de una muestra de archivo Web.config de nivel de aplicación el <xref:System.Web.Security.AntiXss.AntiXssEncoder> tipo está establecido para una aplicación ASP.NET:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 La opción de configuración en el ejemplo se establece la <xref:System.Web.Security.AntiXss.AntiXssEncoder> clase para realizar todo salida codificación en la aplicación. Para obtener más información, consulte el <xref:System.Web.Security.AntiXss.AntiXssEncoder> general sobre la clase.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al crear una clase de codificador personalizado e invalide los métodos base de la clase base, el codificador derivado podría producir una excepción desde cualquiera de los métodos invalidados. Sin embargo, en los casos siguientes producir esta excepción podría provocar un comportamiento inesperado en ASP.NET:  
  
-   Si ASP.NET está representando una página de error que se produjo una excepción no controlada que se inició desde un codificador personalizado, ASP.NET no intenta codificar su salida de error mediante una llamada al codificador personalizado. Esto evita las condiciones de error de recursiva.  
  
-   Cuando ASP.NET está enviando los encabezados HTTP en IIS, ASP.NET no tiene medios para las excepciones no controladas. Por lo tanto, se representa la página de error estándar de ASP.NET (si los valores de configuración permite que se muestre esta página).</para>
    </block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Util.HttpEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de <see cref="T:System.Web.Util.HttpEncoder" /> que se usará en una aplicación.</summary>
        <value>Referencia al tipo de codificador/descodificador que se va a usar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un derivada <xref:System.Web.Util.HttpEncoder> tipo se especifica en el archivo de configuración, la <xref:System.Web.Util.HttpEncoder.Current%2A> propiedad devuelve una referencia al tipo personalizado. Sin embargo, si no se usa ningún codificador personalizado, la propiedad devuelve una referencia a la predeterminada ASP.NET <xref:System.Web.Util.HttpEncoder> instancia.  
  
 El <xref:System.Web.Util.HttpEncoder.Current%2A> propiedad no es segura para subprocesos. Establezca esta propiedad solo en la aplicación `Application_Start` método, porque `Application_Start` se ejecuta en un único subproceso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La instancia de codificador que se asigna a esta propiedad es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia al codificador predeterminado de ASP.NET.</summary>
        <value>Referencia al codificador predeterminado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un problema común de codificación que es el valor predeterminado ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> comportamiento convierte los espacios en el carácter "+". Históricamente, el carácter "+" ha sido una convención de Internet para la codificación de caracteres de espacio en una dirección URL en una forma más legible. Sin embargo, según los estándares, el carácter de espacio debe codificarse como "% 20" y en lugar de como el carácter "+". ASP.NET le permite implementar un algoritmo de codificación compatible con los estándares más.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Nombre del encabezado HTTP que se va a codificar.</param>
        <param name="headerValue">Valor de encabezado HTTP que se va a codificar.</param>
        <param name="encodedHeaderName">Cuando este método devuelve un valor, contiene el nombre codificado que se va a usar para un encabezado HTTP. Este parámetro se pasa sin inicializar.</param>
        <param name="encodedHeaderValue">Cuando este método devuelve un valor, contiene el valor codificado que se va a usar para un encabezado HTTP. Este parámetro se pasa sin inicializar.</param>
        <summary>Codifica el nombre y el valor de un encabezado en una cadena que se puede usar como encabezado HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> método toma las cadenas de entrada desde el `headerName` y `headerValue` parámetros y se codifica. Los valores codificados se devuelven como parámetros de salida.  
  
 El <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> método usa la lógica siguiente para codificar los nombres de encabezado y valores:  
  
-   Todos los caracteres cuyo valor Unicode es menor que el carácter ASCII 32, excepto el carácter ASCII 9, están codificados de dirección URL en un formato de `%NN` donde el `N` caracteres representan valores hexadecimales.  
  
-   Carácter ASCII 9 (el carácter de tabulación horizontal) no tiene codificación URL.  
  
-   El carácter ASCII 127 está codificado como `%7F`.  
  
-   Todos los demás caracteres no están codificados.  
  
    > [!NOTE]
    >  Aunque este método puede utilizarse para valores Unicode, normalmente se utiliza para los valores en el intervalo ASCII.  
  
 La implementación predeterminada de la <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> método devuelve el valor de `headerValue` en `encodedHeaderValue` si `headerValue` es `null` o es una cadena vacía. De forma similar, la implementación predeterminada devuelve el valor de `headerName` en `encodedHeaderName` si `headerName` es `null` o es una cadena vacía.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <param name="output">Escritor de texto en el que se va a escribir el valor codificado.</param>
        <summary>Codifica un valor de entrada en una cadena que se puede insertar en un atributo HTML delimitado con comillas simples o dobles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> método codifica caracteres mediante las entidades HTML estándares. Por ejemplo, el `<` (corchete angular de apertura) se codifica como `&lt;` y `\` (barra diagonal inversa) se codifica como `&#92;`.  
  
 Es seguro utilizar <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> dentro de los atributos entre comillas simples y entre comillas dobles. Los valores deben ir entre comillas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a descodificar.</param>
        <param name="output">Escritor de texto en el que se va a escribir el valor descodificado.</param>
        <summary>Descodifica un valor de una cadena con código HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se enumera las secuencias de caracteres que la lógica de descodificación de ASP.NET puede descodificar.  
  
|Secuencia de caracteres|Regla|  
|------------------------|----------|  
|`&#NNN;` (códigos decimales para los caracteres ASCII).|Descodifica como el carácter ASCII especificado. La secuencia de caracteres que comienza en el primer dígito después del carácter # y finaliza en el punto y coma.|  
|`&#xZZ;` (códigos hexadecimales para los caracteres ASCII).|Descodifica como el carácter ASCII especificado. El formulario codificado especifica el carácter mediante el uso de caracteres hexadecimales en lugar de un valor decimal. La secuencia de caracteres que comienza en el primer dígito después del carácter # y finaliza en el punto y coma.|  
|Entidades HTML con nombre.|Descodifica como el carácter equivalente de ASCII.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <param name="output">Escritor de texto en el que se va a escribir el valor codificado.</param>
        <summary>Codifica una cadena en una cadena HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se enumera las secuencias de caracteres que la lógica de codificación de ASP.NET puede descodificar.  
  
|Carácter|Codificado como|  
|---------------|----------------|  
|`<` (corchete angular de apertura)|`&lt;`|  
|`>` (corchete angular de cierre)|`&gt;`|  
|`"` (comillas dobles)|`&quot;`|  
|`&` (y comercial)|`&amp;`|  
|`\` (barra diagonal inversa)|`&#92;`|  
|Caracteres ASCII de 160 a 255|`&#NNN;`, donde `NNN` es el código de carácter decimal de tres dígitos|  
  
 Si invalida el <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> método, debe generar un resultado que también sea seguro para la ejecución dentro de los atributos HTML entre comillas dobles o entre comillas simples. Esto es útil para analizar el motor Razor, donde marcado y código se pueden combinar, como \<etiqueta attr = "@value" >. Además, el @ (operador) no es compatible con contexto cuando las procesa el motor Razor, por lo tanto, llama <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> en lugar de <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <summary>Codifica una cadena.</summary>
        <returns>Cadena codificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificación de direcciones URL, se asegura de que todos los exploradores transmitan correctamente el texto de las cadenas de dirección URL. Pueden truncar o dañados por algunos exploradores caracteres, como un signo de interrogación (?), "y" comercial (&), barra diagonal (/) y espacios. Por lo tanto, estos caracteres deben codificarse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Matriz de bytes que se va a codificar.</param>
        <param name="offset">Posición en la matriz <c>bytes</c> en la que se va a empezar a codificar.</param>
        <param name="count">Número de elementos de la matriz <c>bytes</c> que se van a codificar.</param>
        <summary>Codifica una matriz de caracteres no permitidos en las direcciones URL en un equivalente de la entidad de caracteres hexadecimales.</summary>
        <returns>Matriz de caracteres codificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> método llama a varios métodos de codificación de dirección URL de la <xref:System.Web.HttpUtility> clase.  
  
 El <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> método codifica como dirección URL de cualquier carácter que no está en el conjunto de ASCII de caracteres que se considera para tener seguridad de la dirección URL. Los espacios se codifican como ASCII "`+"` caracteres. Caracteres ASCII de seguridad de direcciones URL incluyen los caracteres ASCII (A Z y a z), números (0 a 9) y algunos signos de puntuación. En la tabla siguiente se enumera los signos de puntuación que se consideran caracteres ASCII de seguridad de direcciones URL.  
  
|Carácter|Descripción|  
|---------------|-----------------|  
|-|Guión|  
|_|Carácter de subrayado|  
|.|Período (punto)|  
|!|Marca de exclamación|  
|*|Asterisco (*)|  
|(|Paréntesis de apertura|  
|)|Un paréntesis de cierre|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> es menor que cero o mayor que la longitud de la matriz <paramref name="bytes" />.  
  
 O bien  
  
 <paramref name="count" /> es menor que cero o <paramref name="count" /> más <paramref name="offset" /> es mayor que la longitud de la matriz <paramref name="bytes" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Cadena que se va a codificar.</param>
        <summary>Codifica una subsección de una dirección URL.</summary>
        <returns>Cadena codificada como una dirección URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> llama al método <xref:System.Web.HttpUtility.UrlPathEncode%2A>. El <xref:System.Web.HttpUtility.UrlPathEncode%2A> método lleva a cabo los pasos siguientes:  
  
-   Se aplica la lógica de codificación de la <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> método solo la parte de ruta de acceso de la dirección URL (que excluye la cadena de consulta). El método supone que la dirección URL se codifica como una cadena UTF-8.  
  
-   Codifica no espacios para que solo un subconjunto de los primeros 128 caracteres ASCII se utiliza en la cadena codificada resultante. Todos los caracteres en el valor de Unicode 128 y mayor, o 32 y de menor, son codificados de dirección URL.  
  
-   Codifica espacios como % 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>