<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a1a02ab1b22e8e2744b95cd33f805989c51eedd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39813503" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define los métodos base para la validación de solicitudes personalizada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, ASP.NET no valida las solicitudes hasta que el código solicita explícitamente un valor de la solicitud. Por ejemplo, ASP.NET no valida los valores de cadena de consulta hasta que el código tiene acceso a la <xref:System.Web.HttpRequest.QueryString%2A> colección. De forma predeterminada, ASP.NET también no validar algunos tipos de datos de la solicitud, como valores de formulario, cookies, los nombres de archivos que se han cargado mediante HTTP y el valor de la <xref:System.Web.HttpRequest.RawUrl%2A> propiedad.  
  
 La <xref:System.Web.Util.RequestValidator> clase es una clase base que se puede implementar para proporcionar validación de solicitudes personalizada. Mediante la implementación de esta clase, puede determinar cuándo se produce la validación y qué tipo de datos de la solicitud para realizar la validación.  
  
 De forma predeterminada, ASP.NET proporciona comprobaciones de scripting entre sitios (XSS). Sin embargo, puede complementar o reemplazar la lógica de validación de solicitud que se proporciona en ASP.NET mediante la creación de una implementación personalizada del XSS. Por ejemplo, puede escribir una implementación de la validación de solicitudes personalizado busca ataques de inyección SQL además de comprobar los ataques XSS.  
  
 Para crear la validación de solicitudes personalizado, escribe una clase personalizada que deriva la <xref:System.Web.Util.RequestValidator> clase base. A continuación, configure ASP.NET para usar el control de validación de solicitudes personalizado en el archivo Web.config de nivel de aplicación. Puede colocar la clase personalizada en la carpeta App_Code, en una biblioteca de clases compilada en la carpeta Bin o en una biblioteca de clases compilada en la GAC.  
  
> [!NOTE]
>  Solo un tipo de validación de solicitudes personalizado puede configurarse para una aplicación. No es posible configurar un tipo de validación de solicitudes diferente para rutas de acceso virtuales individuales o páginas.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un validador de solicitud personalizado que permite solo una cadena específica que se usará para los valores de cadena de consulta.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 El ejemplo siguiente muestra cómo configurar ASP.NET para usar el validador personalizado en el archivo Web.config para una aplicación.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Util.RequestValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Util.RequestValidator> clase tiene un constructor predeterminado. Cuando se inicializa una nueva instancia de la clase, un método interno recupera detalles de validación personalizada de la información de configuración de la aplicación. Los detalles de configuración se encuentran en la <xref:System.Web.Configuration.HttpRuntimeSection> sección. Para obtener más información, consulte [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) y <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atributo.  
  
 Durante la inicialización, una única instancia de la <xref:System.Web.Util.RequestValidator> clase se crea y se mantiene una referencia a la instancia en el <xref:System.Web.Util.RequestValidator.Current%2A> propiedad. ASP.NET no crea una nueva instancia de validador de solicitud por solicitud. Por lo tanto, las implementaciones personalizadas de la <xref:System.Web.Util.RequestValidator> clase debe ser seguro para subprocesos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una referencia a la instancia <see cref="T:System.Web.Util.RequestValidator" /> actual que se usará en una aplicación.</summary>
        <value>Instancia de la clase <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.RequestValidator.Current%2A> propiedad mantiene una referencia a la instancia única de permitidos de la <xref:System.Web.Util.RequestValidator> clase. Si no existe ninguna instancia, se crea uno nuevo. Si ya existe una instancia, se devuelve la instancia actual.  
  
 Durante la inicialización, una única instancia de la <xref:System.Web.Util.RequestValidator> se crea la clase y una referencia a la instancia está disponible en el <xref:System.Web.Util.RequestValidator.Current%2A> propiedad. ASP.NET no crea una nueva instancia de validador de solicitud por solicitud. Por lo tanto, las implementaciones personalizadas de la <xref:System.Web.Util.RequestValidator> clase debe ser seguro para subprocesos.  
  
> [!NOTE]
>  El <xref:System.Web.Util.RequestValidator.Current%2A> propiedad no es segura para subprocesos mientras la propiedad establece una referencia a la actual <xref:System.Web.Util.RequestValidator> clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Contexto HTTP de la solicitud.</param>
        <param name="value">Datos de la solicitud HTTP que se van a validar.</param>
        <param name="requestValidationSource">Enumeración que representa el origen de los datos de la solicitud que se van a validar. A continuación, se muestran los valores posibles de la enumeración: 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Opcional) Clave de la colección de solicitudes del elemento que se va a validar. Este parámetro se usa si los datos que se va a validar se obtienen de una colección. Si los datos que se van a validar no son de una colección, este parámetro puede ser <see langword="null" />.</param>
        <param name="validationFailureIndex">Cuando este método finaliza, indica el punto inicial de base cero del texto problemático o no válido de la colección de solicitud. Este parámetro se pasa sin inicializar.</param>
        <summary>Proporciona un método público que llama al método protegido <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> para validar los datos de la solicitud HTTP.</summary>
        <returns>Es <see langword="true" /> si la cadena para validar no contiene caracteres sin codificar que podrían utilizarse en un ataque de scripts malintencionados; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> método proporciona acceso público a protegido <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método. Esto le permite crear una clase contenedora personalizada para el <xref:System.Web.Util.RequestValidator> clase y llamar a la <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método sin tener que heredan de la <xref:System.Web.Util.RequestValidator> clase.  
  
 Para obtener información acerca de la validación de solicitudes, consulte <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">El contexto de la solicitud actual.</param>
        <param name="value">Datos de la solicitud HTTP que se van a validar.</param>
        <param name="requestValidationSource">Enumeración que representa el origen de los datos de la solicitud que se van a validar. A continuación, se muestran los valores posibles de la enumeración: 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Clave de la colección de solicitudes del elemento que se va a validar. Este parámetro es opcional. Este parámetro se usa si los datos que se va a validar se obtienen de una colección. Si los datos que se van a validar no pertenecen a una colección, <c>collectionKey</c> puede ser <see langword="null" />.</param>
        <param name="validationFailureIndex">Cuando este método finaliza, indica el punto inicial de base cero del texto problemático o no válido de la colección de solicitud. Este parámetro se pasa sin inicializar.</param>
        <summary>Valida una cadena que contiene los datos de la solicitud HTTP.</summary>
        <returns>Es <see langword="true" /> si la cadena que se va a validar es válida; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para realizar la validación personalizada de los datos de la solicitud. El comportamiento de la base de la <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> método es como el comportamiento que ASP.NET implementa internamente para comprobar las cadenas peligrosas en la validación de scripting entre sitios. Para obtener más información, consulte [How To: evitar Cross-Site Scripting en ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Si la lógica de validación personalizada detecta un error, este método debe devolver `false` y proporcionar un valor en `validationFailureIndex` para indicar el punto inicial del texto que produjo el error. El valor de `validationFailureIndex` debe ser 0 o un entero positivo.  
  
 La lógica en una comprobación de validación de la solicitud procede como sigue:  
  
-   La <xref:System.Web.HttpRequest> clase realiza una comprobación de eliminación de carácter nulo en los datos entrantes.  
  
-   El <xref:System.Web.HttpRequest> clase llama a la <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método (la implementación predeterminada del método base) o llama a una versión derivada del método.  
  
-   Si <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> devuelve del método `false` para indicar un error de validación, ASP.NET construye una cadena de error (si es necesario) y produce una <xref:System.Web.HttpRequestValidationException> excepción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>