<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9af6ca1efee30c522e150ec0ff7b42684ff91ce" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36575000" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines base methods for custom request validation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, ASP.NET no valida las solicitudes hasta que el código solicita explícitamente un valor de la solicitud. Por ejemplo, ASP.NET no valida los valores de cadena de consulta hasta que el código tiene acceso a la <xref:System.Web.HttpRequest.QueryString%2A> colección. De forma predeterminada, ASP.NET tampoco valida algunos tipos de datos de la solicitud, como valores de formulario, cookies, los nombres de archivos que se han cargado utilizando HTTP y el valor de la <xref:System.Web.HttpRequest.RawUrl%2A> propiedad.  
  
 La <xref:System.Web.Util.RequestValidator> clase es una clase base que se puede implementar para proporcionar validación de solicitudes personalizada. Mediante la implementación de esta clase, puede determinar cuándo se produce la validación y qué tipo de datos de la solicitud para realizar la validación en.  
  
 De forma predeterminada, ASP.NET proporciona comprobaciones de scripting entre sitios (XSS). Sin embargo, puede complementar o reemplazar la lógica de validación de solicitud que se proporciona en ASP.NET mediante la creación de una implementación personalizada de la XSS. Por ejemplo, puede escribir una implementación de la validación de solicitudes personalizado que examina los ataques de inyección de SQL además de comprobar los ataques XSS.  
  
 Para crear la validación de solicitudes personalizado, escribir una clase personalizada que deriva de la <xref:System.Web.Util.RequestValidator> clase base. A continuación, configure ASP.NET para usar el control de validación de solicitudes personalizado en el archivo Web.config de nivel de aplicación. Puede colocar la clase personalizada en la carpeta App_Code, en una biblioteca de clases compilada en la carpeta Bin, o en una biblioteca de clases compilada en la GAC.  
  
> [!NOTE]
>  Solo un tipo de validación de solicitudes personalizado se puede configurar para una aplicación. No es posible configurar un tipo de validación de solicitudes diferente para las rutas de acceso virtuales individuales o páginas.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un validador de solicitud personalizado que permite solo una cadena específica que se usará para los valores de cadena de consulta.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 En el ejemplo siguiente se muestra cómo configurar ASP.NET para utilizar el validador personalizado en el archivo Web.config para una aplicación.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Util.RequestValidator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Util.RequestValidator> clase tiene un constructor predeterminado. Cuando se inicializa una nueva instancia de la clase, un método interno recupera detalles de validación personalizada de la información de configuración de la aplicación. Los detalles de configuración se encuentran en la <xref:System.Web.Configuration.HttpRuntimeSection> sección. Para obtener más información, consulte [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) y <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atributo.  
  
 Durante la inicialización, una única instancia de la <xref:System.Web.Util.RequestValidator> se crea la clase y una referencia a la instancia se mantiene en el <xref:System.Web.Util.RequestValidator.Current%2A> propiedad. ASP.NET no crea una nueva instancia del validador de solicitud por solicitud. Por lo tanto, las implementaciones personalizadas de la <xref:System.Web.Util.RequestValidator> clase debe ser seguro para subprocesos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a reference to the current <see cref="T:System.Web.Util.RequestValidator" /> instance that will be used in an application.</summary>
        <value>Instancia de la clase <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.RequestValidator.Current%2A> propiedad mantiene una referencia a la instancia permitida de la <xref:System.Web.Util.RequestValidator> clase. Si no existe ninguna instancia, se crea uno nuevo. Si ya existe una instancia, se devuelve la instancia actual.  
  
 Durante la inicialización, una única instancia de la <xref:System.Web.Util.RequestValidator> se crea la clase, y una referencia a la instancia está disponible en la <xref:System.Web.Util.RequestValidator.Current%2A> propiedad. ASP.NET no crea una nueva instancia del validador de solicitud por solicitud. Por lo tanto, las implementaciones personalizadas de la <xref:System.Web.Util.RequestValidator> clase debe ser seguro para subprocesos.  
  
> [!NOTE]
>  El <xref:System.Web.Util.RequestValidator.Current%2A> propiedad no es seguro para subprocesos, mientras que la propiedad es establecer una referencia a la actual <xref:System.Web.Util.RequestValidator> clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">The HTTP context of the request.</param>
        <param name="value">The HTTP request data to validate.</param>
        <param name="requestValidationSource">An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  -   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Optional) The key in the request collection of the item to validate. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, this parameter can be <see langword="null" />.</param>
        <param name="validationFailureIndex">When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.</param>
        <summary>Provides a public method that calls the protected <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> method in order to validate HTTP request data.</summary>
        <returns>
          <see langword="true" /> if the string to validate does not contain unencoded characters that could be used in a malicious scripting attack; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> método proporciona acceso público a la protegido <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método. Esto le permite crear una clase contenedora personalizada para la <xref:System.Web.Util.RequestValidator> clase y llame al método el <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método sin tener que heredan de la <xref:System.Web.Util.RequestValidator> clase.  
  
 Para obtener información acerca de la validación de solicitudes, consulte <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">The context of the current request.</param>
        <param name="value">The HTTP request data to validate.</param>
        <param name="requestValidationSource">An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  - <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">The key in the request collection of the item to validate. This parameter is optional. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, <c>collectionKey</c> can be <see langword="null" />.</param>
        <param name="validationFailureIndex">When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.</param>
        <summary>Validates a string that contains HTTP request data.</summary>
        <returns>
          <see langword="true" /> if the string to be validated is valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para realizar una validación personalizada de los datos de la solicitud. El comportamiento de la base de la <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> método es como el comportamiento que ASP.NET implementa internamente para comprobar las cadenas peligrosas en la validación de scripting entre sitios. Para obtener más información, consulte [How To: evitar Scripting entre sitios en ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Si la lógica de validación personalizada detecta un error, este método debe devolver `false` y proporcionar un valor en `validationFailureIndex` para indicar el punto inicial del texto que produjo el error. El valor de `validationFailureIndex` debe ser 0 o un entero positivo.  
  
 La lógica en una comprobación de validación de la solicitud procede como sigue:  
  
-   La <xref:System.Web.HttpRequest> clase realiza una comprobación de eliminación de carácter nulo en los datos entrantes.  
  
-   El <xref:System.Web.HttpRequest> clase llama a cualquiera la <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método (la implementación predeterminada del método base) o llama a una versión derivada del método.  
  
-   Si <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método `false` para indicar un error de validación, ASP.NET construye una cadena de error (si es necesario) y produce una <xref:System.Web.HttpRequestValidationException> excepción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>