<Type Name="Base64" FullName="System.Buffers.Text.Base64">
  <Metadata><Meta Name="ms.openlocfilehash" Value="934ffb8077ecd76978887fb39f085bdbfad0adff" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58455388" /></Metadata><TypeSignature Language="C#" Value="public static class Base64" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Base64 extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Base64" />
  <TypeSignature Language="VB.NET" Value="Public Class Base64" />
  <TypeSignature Language="C++ CLI" Value="public ref class Base64 abstract sealed" />
  <TypeSignature Language="F#" Value="type Base64 = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Convierte entre los datos binarios y texto codificado UTF-8 que se representa en base 64.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; utf8, Span&lt;byte&gt; bytes, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (utf8 As ReadOnlySpan(Of Byte), bytes As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  *  * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.DecodeFromUtf8 (utf8, bytes, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="utf8">El intervalo de entrada que contiene texto codificado UTF-8 en base 64 que tiene que descodificar.</param>
        <param name="bytes">El intervalo de salida que contiene el resultado de la operación, es decir, los datos binarios descodificados.</param>
        <param name="bytesConsumed">El número de bytes de entrada utilizados durante la operación. Esto puede usarse para segmentar la entrada en llamadas posteriores, si es necesario.</param>
        <param name="bytesWritten">El número de bytes escritos en el intervalo de salida. Esto puede usarse para segmentar la salida en llamadas posteriores, si es necesario.</param>
        <param name="isFinalBlock"><see langword="true" /> (predeterminado) si el intervalo de entrada contiene todos los datos para descodificar. <see langword="false" /> si el intervalo de entrada contiene datos parciales con más datos para seguir.</param>
        <summary>Descodifica el intervalo de texto codificado UTF-8 representado como base 64 en datos binarios. Si la entrada no es un múltiplo de 4, descodificará tanto como sea posible, al múltiplo más cercano de 4.</summary>
        <returns>Uno de los valores de enumeración que indica el estado de la operación de descodificación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

El valor devuelto puede ser como sigue:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Procesamiento de todo el intervalo de entrada se realizó correctamente.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: No hay suficiente espacio en el intervalo de salida para escribir la entrada descodificada.
- <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>: `isFinalBlock` es `false` y la entrada no es un múltiplo de 4. En caso contrario, se considera la entrada parcial <xref:System.Buffers.OperationStatus.InvalidData>.
- <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>: La entrada contiene los bytes fuera del intervalo esperado de base 64, tiene más de dos caracteres de relleno o no es válido o está incompleta (es decir, no es múltiplo de 4) y `isFinalBlock` es `true`.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8InPlace">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8InPlace (Span&lt;byte&gt; buffer, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8InPlace (buffer As Span(Of Byte), ByRef bytesWritten As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf8InPlace(Span&lt;System::Byte&gt; buffer, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8InPlace : Span&lt;byte&gt; *  -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.DecodeFromUtf8InPlace (buffer, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">El intervalo de entrada que contiene los datos de texto en base 64 que se deben descodificar.</param>
        <param name="bytesWritten">El número de bytes escritos en el búfer.</param>
        <summary>Descodifica el intervalo de texto codificado UTF-8 en base 64 (en contexto) en datos binarios. La salida binaria descodificada es menor que los datos de texto contenidos en la entrada (la operación comprime los datos). Si la entrada no es un múltiplo de 4, el método no descodificará los datos.</summary>
        <returns>Uno de los valores de enumeración que indica el estado de la operación de descodificación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

El valor devuelto puede ser como sigue:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Procesamiento de todo el intervalo de entrada se realizó correctamente.
- <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>: La entrada contiene los bytes fuera del intervalo esperado de base 64, tiene más de dos caracteres de relleno o no es válido o está incompleta (es decir, no es múltiplo de 4).

Este método no puede devolver el <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType> y <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType> valores.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToUtf8 (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;byte&gt; utf8, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;unsigned int8&gt; utf8, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8 (bytes As ReadOnlySpan(Of Byte), utf8 As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  *  * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.EncodeToUtf8 (bytes, utf8, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="utf8" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">El intervalo de entrada que contiene los datos binarios que se deben codificar.</param>
        <param name="utf8">El intervalo de salida que contiene el resultado de la operación, es decir, el texto codificado UTF-8 en base 64.</param>
        <param name="bytesConsumed">El número de bytes de entrada utilizados durante la operación. Esto puede usarse para segmentar la entrada en llamadas posteriores, si es necesario.</param>
        <param name="bytesWritten">El número de bytes escritos en el intervalo de salida. Esto puede usarse para segmentar la salida en llamadas posteriores, si es necesario.</param>
        <param name="isFinalBlock"><see langword="true" /> (predeterminado) si el intervalo de entrada contiene todos los datos para codificar. <see langword="false" /> si el intervalo de entrada contiene datos parciales con más datos para seguir.</param>
        <summary>Codifica el intervalo de datos binarios en texto codificado UTF-8 representado como base 64.</summary>
        <returns>Uno de los valores de enumeración que indica el estado de la operación de codificación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

El valor devuelto puede ser como sigue:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Procesamiento de todo el intervalo de entrada se realizó correctamente.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: No hay suficiente espacio en el intervalo de salida para ajustarse a la entrada codificada.
- <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>: `isFinalBlock` es `false`. De lo contrario, si `isFinalBlock` es `true`, la salida se rellena si la entrada no es un múltiplo de 3.

Este método no puede devolver <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType> ya que no es posible para la codificación base 64.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8InPlace">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToUtf8InPlace (Span&lt;byte&gt; buffer, int dataLength, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer, int32 dataLength, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8InPlace (buffer As Span(Of Byte), dataLength As Integer, ByRef bytesWritten As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus EncodeToUtf8InPlace(Span&lt;System::Byte&gt; buffer, int dataLength, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8InPlace : Span&lt;byte&gt; * int *  -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.EncodeToUtf8InPlace (buffer, dataLength, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="dataLength" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">El intervalo de entrada que contiene los datos binarios que se deben codificar. Dado que el método realiza una conversión en contexto, debe ser lo suficientemente grande como para almacenar el resultado de la operación.</param>
        <param name="dataLength">El número de bytes de datos binarios contenidos en el búfer que debe codificarse. Este valor debe ser menor que el tamaño del búfer.</param>
        <param name="bytesWritten">El número de bytes escritos en el búfer.</param>
        <summary>Codifica el intervalo de datos binarios (en contexto) en texto codificado UTF-8 representado como base 64. La salida de texto codificado es mayor que los datos binarios contenidos en la entrada (la operación expande los datos).</summary>
        <returns>Uno de los valores de enumeración que indica el estado de la operación de codificación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

El valor devuelto puede ser como sigue:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Procesamiento de todo el búfer se realizó correctamente.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: No hay suficiente espacio en el búfer más allá de `dataLength` para ajustar el resultado de la entrada de codificación.

Este método no puede devolver <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType> y <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxDecodedFromUtf8Length">
      <MemberSignature Language="C#" Value="public static int GetMaxDecodedFromUtf8Length (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxDecodedFromUtf8Length(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMaxDecodedFromUtf8Length (length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetMaxDecodedFromUtf8Length(int length);" />
      <MemberSignature Language="F#" Value="static member GetMaxDecodedFromUtf8Length : int -&gt; int" Usage="System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>Devuelve la longitud máxima (en bytes) del resultado si fuera a descodificar el texto codificado en base 64 en un intervalo de bytes de tamaño <paramref name="length" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> es menor que 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMaxEncodedToUtf8Length">
      <MemberSignature Language="C#" Value="public static int GetMaxEncodedToUtf8Length (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxEncodedToUtf8Length(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMaxEncodedToUtf8Length (length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetMaxEncodedToUtf8Length(int length);" />
      <MemberSignature Language="F#" Value="static member GetMaxEncodedToUtf8Length : int -&gt; int" Usage="System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>Devuelve la longitud máxima (en bytes) del resultado si fuera a codificar datos binarios en un intervalo de bytes de tamaño <paramref name="length" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> es menor que 0 o mayor que 1610612733 (ya que la codificación expande los datos en 4/3).</exception>
      </Docs>
    </Member>
  </Members>
</Type>