<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa el esquema de una columna en una <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn> es el bloque de creación fundamental para crear el esquema de un <xref:System.Data.DataTable>. Cree el esquema mediante la adición de uno o varios <xref:System.Data.DataColumn> objetos a la <xref:System.Data.DataColumnCollection>. Para obtener más información, consulte [agregar columnas a un objeto DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).  
  
 Cada <xref:System.Data.DataColumn> tiene un <xref:System.Data.DataColumn.DataType%2A> propiedad que determina el tipo de datos de la <xref:System.Data.DataColumn> contiene. Por ejemplo, puede restringir el tipo de datos a enteros, cadenas o decimales. Dado que los datos que contiene el <xref:System.Data.DataTable> normalmente se combina en su origen de datos original, debe coincidir con los tipos de datos con los del origen de datos. Para obtener más información, consulte [asignaciones de tipos de datos en ADO.NET](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  
  
 Propiedades como <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, y <xref:System.Data.DataColumn.ReadOnly%2A> colocar restricciones en la entrada y la actualización de datos, lo que contribuye a garantizar la integridad de los datos. También puede usar el <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, y <xref:System.Data.DataColumn.AutoIncrementStep%2A> propiedades para controlar la generación automática de los datos. Para obtener más información acerca de <xref:System.Data.DataColumn.AutoIncrement%2A> columnas, consulte [crear columnas de incremento automático](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md). Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 También puede asegurarse de que los valores de un <xref:System.Data.DataColumn> son únicos mediante la creación de un <xref:System.Data.UniqueConstraint> y agregarla a la <xref:System.Data.ConstraintCollection> de la <xref:System.Data.DataTable> a la que el <xref:System.Data.DataColumn> pertenece. Para obtener más información, consulte [restricciones de DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
 Para crear una relación entre <xref:System.Data.DataColumn> objetos, crear un <xref:System.Data.DataRelation> y agregarlo a la <xref:System.Data.DataRelationCollection> de un <xref:System.Data.DataSet>.  
  
 Puede usar el <xref:System.Data.DataColumn.Expression%2A> propiedad de la <xref:System.Data.DataColumn> del objeto para calcular los valores en una columna o crear una columna agregada. Para obtener más información, consulte [crear columnas de expresión](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.DataTable> con varios <xref:System.Data.DataColumn> objetos.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para operaciones de lectura multiproceso. Debe sincronizar operaciones de escritura.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" /> como cadena de tipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea, un <xref:System.Data.DataColumn> objeto no tiene ningún valor predeterminado <xref:System.Data.DataColumn.ColumnName%2A> o <xref:System.Data.DataColumn.Caption%2A>. Al agregarlo a un <xref:System.Data.DataColumnCollection>, se generará un nombre predeterminado ("Column1", "Columna2" y así sucesivamente) si no ha asignado un nombre para el <xref:System.Data.DataColumn.ColumnName%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataColumn>, Establece varias propiedades y lo agrega a un <xref:System.Data.DataColumnCollection> para el <xref:System.Data.DataTable> objeto.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Cadena que representa el nombre de la columna que se va a crear. Si se establece en <see langword="null" /> o en una cadena vacía (""), cuando se agregue a la colección de columnas se especificará un nombre predeterminado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" />, como cadena de tipo, utilizando el nombre de columna especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el nombre específico para una columna se convierte en la <xref:System.Data.DataColumn.Caption%2A> valor de propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataColumn> con un determinado <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">Cadena que representa el nombre de la columna que se va a crear. Si se establece en <see langword="null" /> o en una cadena vacía (""), cuando se agregue a la colección de columnas se especificará un nombre predeterminado.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> compatible.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" /> con el nombre de columna y el tipo de datos especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataColumn> con un determinado <xref:System.Data.DataColumn.ColumnName%2A> y <xref:System.Data.DataColumn.DataType%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado ningún <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Cadena que representa el nombre de la columna que se va a crear. Si se establece en <see langword="null" /> o en una cadena vacía (""), cuando se agregue a la colección de columnas se especificará un nombre predeterminado.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> compatible.</param>
        <param name="expr">Expresión utilizada para crear esta columna. Para obtener más información, vea la propiedad <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" /> con el nombre, el tipo de datos y la expresión especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea una columna calculada.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado ningún <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">Cadena que representa el nombre de la columna que se va a crear. Si se establece en <see langword="null" /> o en una cadena vacía (""), cuando se agregue a la colección de columnas se especificará un nombre predeterminado.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> compatible.</param>
        <param name="expr">Expresión utilizada para crear esta columna. Para obtener más información, vea la propiedad <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <param name="type">Uno de los valores de <see cref="T:System.Data.MappingType" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataColumn" /> con el nombre, el tipo de datos, la expresión y un valor que determina si la columna es un atributo; todos ellos especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `type` argumento establece la <xref:System.Data.DataColumn.ColumnMapping%2A> propiedad. La propiedad especifica cómo un <xref:System.Data.DataColumn> cuando se ha asignado un <xref:System.Data.DataSet> se transforma en un documento XML. Por ejemplo, si la columna se denomina "fName", y el valor que contiene es "Bob", y `type` se establece en `MappingType.Attribute`, el elemento XML sería como sigue:  
  
 \<Nombre fName = 'Bob' / >  
  
 Para obtener más información sobre cómo se asignan columnas a elementos o atributos, vea la <xref:System.Data.DataColumn.ColumnMapping%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una columna calculada.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado ningún <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si en esta columna se permiten valores null para las filas que pertenecen a la tabla.</summary>
        <value>
          <see langword="true" /> si se permiten valores nulos; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataColumn> y establece su <xref:System.Data.DataColumn.AllowDBNull%2A> propiedad `true`.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la columna incrementa automáticamente el valor de la columna para las nuevas filas que se agregan a la tabla.</summary>
        <value>
          <see langword="true" /> si el valor de la columna se incrementa automáticamente; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el tipo de esta columna no es Int16, Int32 o Int64 cuando se establece esta propiedad, el <xref:System.Data.DataColumn.DataType%2A> propiedad se convierte a Int32. Si se trata de una columna calculada, se genera una excepción. El <xref:System.Data.DataColumn.Expression%2A> se establece la propiedad. El valor incrementado se utiliza sólo si el valor de la fila para esta columna, cuando se agrega a la colección de columnas es igual al valor predeterminado.  
  
 Puede crear una nueva fila utilizando el <xref:System.Data.DataRow.ItemArray%2A> propiedad de la <xref:System.Data.DataRow> clase y pasar una matriz de valores. Se trata de un posible problema para una columna con su <xref:System.Data.DataColumn.AutoIncrement%2A> establecido en `true`, ya que su valor se genera automáticamente. Para usar el <xref:System.Data.DataRow.ItemArray%2A> propiedad, contexto `null` en la posición de la columna en la matriz. Para obtener más información, consulte el <xref:System.Data.DataRow.ItemArray%2A> propiedad de la <xref:System.Data.DataRow> clase.  
  
 Si el tipo de la columna es <xref:System.Data.SqlTypes.SqlInt16> o <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> no funcionará. Utilice Int16 o Int32 en su lugar.  
  
 Si el tipo de la columna es <xref:System.Data.SqlTypes.SqlInt64> o <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> funcionará solo parcialmente. Utilice Int64 o Decimal en su lugar.  
  
 Cuando el <xref:System.Data.DataColumn.AutoIncrementStep%2A> valor se agrega al valor actual, se suprime la comprobación de desbordamiento.  
  
   
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, y <xref:System.Data.DataColumn.AutoIncrementStep%2A> propiedades.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La columna es una columna calculada.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor inicial de una columna cuya propiedad <see cref="P:System.Data.DataColumn.AutoIncrement" /> está establecida en <see langword="true" />. El valor predeterminado es 0.</summary>
        <value>Valor inicial para la característica <see cref="P:System.Data.DataColumn.AutoIncrement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, y <xref:System.Data.DataColumn.AutoIncrementStep%2A> propiedades.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el incremento utilizado por una columna cuya propiedad <see cref="P:System.Data.DataColumn.AutoIncrement" /> está establecida en <see langword="true" />.</summary>
        <value>Número con el que se incrementa automáticamente el valor de la columna. El valor predeterminado es 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, y <xref:System.Data.DataColumn.AutoIncrementStep%2A> propiedades.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor está establecido en cero.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el título de la columna.</summary>
        <value>Título de la columna. Si no está establecido, devuelve el valor <see cref="P:System.Data.DataColumn.ColumnName" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Data.DataColumn.Caption%2A> propiedad que se va a mostrar un nombre descriptivo para un <xref:System.Data.DataColumn>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataTable>. A continuación, agrega tres <xref:System.Data.DataColumn> objetos a un <xref:System.Data.DataColumnCollection> y establece la <xref:System.Data.DataColumn.Caption%2A> propiedad para cada <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro admite la infraestructura de .NET Framework y no está prevista su utilización directa desde el código.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro admite la infraestructura de .NET Framework y no está prevista su utilización directa desde el código.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Data.MappingType" /> de la columna.</summary>
        <value>Uno de los valores de <see cref="T:System.Data.MappingType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn.ColumnMapping%2A> propiedad determina cómo un <xref:System.Data.DataColumn> se asigna cuando un <xref:System.Data.DataSet> se guarda como un documento XML utilizando el <xref:System.Data.DataSet.WriteXml%2A> método.  
  
 Por ejemplo, si un <xref:System.Data.DataColumn> se denomina "customerID" y su <xref:System.Data.DataColumn.ColumnMapping%2A> propiedad está establecida en `MappingType.Element`, el valor de columna producirá el siguiente código XML:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 Sin embargo, si la misma columna se asigna a `MappingType.Attribute`, se genera el siguiente código XML:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 Use la <xref:System.Data.DataColumn.%23ctor%2A> constructor que contiene el `type` argumento para especificar cómo el <xref:System.Data.DataColumn> se asigna cuando su <xref:System.Data.DataSet> se transforma en un documento XML.  
  
 El <xref:System.Data.DataColumn.ColumnMapping%2A> propiedad se corresponde con el argumento del constructor `type`.  
  
   
  
## Examples  
 El ejemplo siguiente se establece la <xref:System.Data.DataColumn.ColumnMapping%2A> type (propiedad) de nuevo <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de la columna en el <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>El nombre de la columna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Data.DataColumn> está creado, éste no tiene ningún <xref:System.Data.DataColumn.ColumnName%2A> valor. Sin embargo, cuando la <xref:System.Data.DataColumn> se agrega a un <xref:System.Data.DataColumnCollection> para un <xref:System.Data.DataTable> de objeto, se recibe un nombre predeterminado ("Column1", "Columna2" y así sucesivamente).  
  
 De forma predeterminada, el <xref:System.Data.DataColumn.Caption%2A> valor se establece en el <xref:System.Data.DataColumn.ColumnName%2A> valor.  
  
   
  
## Examples  
 El ejemplo siguiente se obtiene la <xref:System.Data.DataColumn.ColumnName%2A> para cada columna de cada tabla en un <xref:System.Data.DataSet>. El ejemplo también muestra cómo crear un <xref:System.Data.DataColumn> con un nuevo <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad se establece en <see langword="null" /> o es una cadena vacía y la columna pertenece a una colección.</exception>
        <exception cref="T:System.Data.DuplicateNameException">Ya existe una columna con el mismo nombre en la colección. La comparación de nombres no distingue entre mayúsculas y minúsculas.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de datos almacenados en la columna.</summary>
        <value>Objeto <see cref="T:System.Type" /> que representa el tipo de datos de la columna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Data.DataColumn.DataType%2A> valor es muy importante para garantizar la correcta creación y actualización de datos en un origen de datos.  
  
 El <xref:System.Data.DataColumn.DataType%2A> propiedad admite los siguientes tipos de datos base de .NET Framework:  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 así como el tipo de matriz siguientes:  
  
-   `Byte[]`  
  
 Al cambiar esta propiedad después de la columna haya empezado a almacenar datos, se genera una excepción.  
  
 Si <xref:System.Data.DataColumn.AutoIncrement%2A> está establecido en `true` antes de establecer el <xref:System.Data.DataColumn.DataType%2A> propiedad y se intenta establecer el tipo en cualquier valor excepto un tipo entero, se genera una excepción.  
  
> [!NOTE]
>  Una columna de tipo de datos `Byte[]` requiere un tratamiento especial en ciertos casos, ya que, a diferencia de los tipos base de datos de .NET Framework, es un tipo de datos de referencia. Si una columna de tipo de datos `Byte[]` se utiliza como un <xref:System.Data.DataTable.PrimaryKey%2A>, o como un <xref:System.Data.DataView.Sort%2A> o <xref:System.Data.DataView.RowFilter%2A> clave para un <xref:System.Data.DataView>, cualquier cambio en el valor de columna debe implicar asignar la `Byte[]` valor de la columna a una instancia por separado `Byte[]` objeto. Esta asignación es necesaria para desencadenar la actualización de los índices internos utilizados por ordenar, filtrar y operaciones de clave principales. Esto se muestra en el ejemplo siguiente:  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  Aunque es posible definir una columna como tipo de datos distinto de los tipos base de datos de .NET Framework y `Byte[]`, este tipo de columna se tratará como un tipo definido por el usuario, sujeto a las siguientes restricciones de uso. (Para obtener más información sobre tipos definidos por el usuario, consulte [Creating and Using User-Defined Types](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   La columna no puede formar parte de un <xref:System.Data.DataView.RowFilter%2A> o <xref:System.Data.DataTable.Select%2A> expresión.  
  
-   Si la columna se utiliza como un <xref:System.Data.DataTable.PrimaryKey%2A>, o como un <xref:System.Data.DataView.Sort%2A> o para un <xref:System.Data.DataView>, deben tratarse como un campo inmutable; no se debe cambiar la columna de datos una vez que se ha agregado a la tabla.  
  
-   Su <xref:System.Data.DataColumn.ColumnMapping%2A> sólo se puede establecer en `MappingType.Element`.  
  
-   La clase que implementa debe ser el tipo de datos de la columna se debe marcar con el <xref:System.SerializableAttribute>, y si es necesario implementa el <xref:System.Runtime.Serialization.ISerializable> o <xref:System.Xml.Serialization.IXmlSerializable> interfaz.  
  
-   Compatibilidad con seguimiento de cambios es limitada. Para utilizar el <xref:System.Data.DataTable> mecanismo de seguimiento de cambios de la clase, la clase que implementa el tipo de datos de la columna debe implementar la <xref:System.ComponentModel.IChangeTracking> interfaz o asumir la responsabilidad de informar a la <xref:System.Data.DataRow> cuando se ha modificado el valor de columna, ya sea mediante una llamada a <xref:System.Data.DataRow.SetModified%2A> en la fila o asignando el objeto de valor de columna a un objeto de valor de columna instancias por separado.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega columnas de varios tipos de datos a un <xref:System.Data.DataTable>y, a continuación, agrega una fila a la tabla.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La columna ya tiene datos almacenados.</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la propiedad <see langword="DateTimeMode" /> para la columna.</summary>
        <value>Enumeración <see cref="T:System.Data.DataSetDateTime" /> para la columna especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn.DateTimeMode%2A> no se puede modificar después de que se agregan filas a una <xref:System.Data.DataColumn>, salvo para cambiar de <xref:System.Data.DataSetDateTime.Unspecified> y <xref:System.Data.DataSetDateTime.UnspecifiedLocal> o viceversa. La modificación de `UnspecifiedLocal` a `Unspecified` y viceversa está permitida porque la diferencia entre estas dos opciones sólo durante la serialización y no afectan al almacenamiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor predeterminado para la columna al crear nuevas filas.</summary>
        <value>Valor correspondiente al <see cref="P:System.Data.DataColumn.DataType" /> de la columna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un valor predeterminado es el valor que se asigna automáticamente a la columna cuando una <xref:System.Data.DataRow> se crea (por ejemplo, la fecha y hora cuando el <xref:System.Data.DataRow> se creó.  
  
 Cuando <xref:System.Data.DataColumn.AutoIncrement%2A> se establece en true, no puede haber ningún valor predeterminado.  
  
 Puede crear una nueva fila utilizando el <xref:System.Data.DataRow.ItemArray%2A> propiedad de la <xref:System.Data.DataRow> clase y pasando al método una matriz de valores. Se trata de un problema potencial para una columna con un valor predeterminado porque su valor se genera automáticamente. Para usar el <xref:System.Data.DataRow.ItemArray%2A> propiedad con este tipo de columna, colocar `null` en la posición de la columna en la matriz. Para obtener más información, vea la propiedad <xref:System.Data.DataRow.ItemArray%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea varias <xref:System.Data.DataColumn> valores para cada columna predeterminados de los objetos que tienen tipos de datos diferentes y establece adecuado.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Cuando se agrega una fila, el valor predeterminado no es una instancia del tipo de datos de la columna.</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la expresión utilizada para filtrar filas, calcular los valores de una columna o crear una columna agregada.</summary>
        <value>Expresión para calcular el valor de una columna o para crear una columna agregada. El tipo de valor devuelto de una expresión está determinado por el <see cref="P:System.Data.DataColumn.DataType" /> de la columna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno de los usos de la <xref:System.Data.DataColumn.Expression%2A> propiedad consiste en crear columnas calculadas. Por ejemplo, para calcular un valor de impuesto, el precio unitario se multiplica por el tipo impositivo de una región específica. Dado que los tipos impositivos varían de una región a otra, sería imposible colocar un único tipo impositivo en una columna; en su lugar, el valor se calcula con la <xref:System.Data.DataColumn.Expression%2A> propiedad, como se muestra en el código de Visual Basic en la sección siguiente:  
  
 DataSet1.Tables("Products"). Columns("tax"). Expresión = "UnitPrice * 0,086"  
  
 Un segundo uso es crear una columna agregada. Similar a un valor calculado, un agregado realiza una operación basada en el conjunto completo de filas de la <xref:System.Data.DataTable>. Es un ejemplo sencillo contar el número de filas devueltas en el conjunto. Este es el método que se utilizaría para contar el número de transacciones realizadas por un vendedor determinado, como se muestra en este código de Visual Basic:  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>Sintaxis de expresión  
 Cuando cree una expresión, use el <xref:System.Data.DataColumn.ColumnName%2A> propiedad para hacer referencia a columnas. Por ejemplo, si la <xref:System.Data.DataColumn.ColumnName%2A> para una columna es "UnitPrice" y otro es "Quantity", la expresión sería como sigue:  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  Si una columna se utiliza en una expresión, se dice que la expresión tiene una dependencia en esa columna. Si se cambia el nombre o se elimina una columna dependiente, se inicia ninguna excepción. Se producirá una excepción cuando se tiene acceso a la columna de la expresión ahora interrumpida.  
  
 Cuando se crea una expresión para un filtro, incluya cadenas entre comillas simples:  
  
 "LastName = 'Jones'"  
  
 Si un nombre de columna contiene algún carácter no alfanumérico o empieza por un dígito o coincide con (distinga mayúsculas y minúsculas) cualquiera de las siguientes palabras reservadas, requiere un tratamiento especial, como se describe en los párrafos siguientes.  
  
 Y  
  
 Entre  
  
 Secundario  
  
 False  
  
 En  
  
 Es  
  
 Like  
  
 Not  
  
 Null  
  
 O bien  
  
 Elemento primario  
  
 True  
  
 Si un nombre de columna cumple una de las condiciones anteriores, se debe escribir entre corchetes o el "'" comillas (acento grave). Por ejemplo, para utilizar una columna denominada "Column #" en una expresión, se podría escribir cualquier "[Column #]":  
  
 Total * [Column #]  
  
 o "\`Column #'":  
  
 Total * \`Column #'  
  
 Si el nombre de columna se incluye entre corchetes, a continuación, cualquier ']' y '\\' caracteres (pero no de ningún otro carácter) en debe convertirse anteponiendo con la barra diagonal inversa ("\\") caracteres. Si se incluye el nombre de columna en caracteres de acento grave, a continuación, no debe contener ningún carácter de acento grave en ella. Por ejemplo, una columna denominada "Column []\\" se escribiría:  
  
 Total * [columna [\\]\\\\]  
  
 o  
  
 Total * \`Column]\\`  
  
## <a name="user-defined-values"></a>Valores definidos por el usuario  
 Valores definidos por el usuario pueden utilizarse dentro de las expresiones que se comparará con los valores de columna. Valores de cadena deben incluirse entre comillas simples (y cada carácter de comillas simples en un valor de cadena debe convertirse anteponiendo por otro carácter de comillas simples). Valores de fecha deben estar delimitados por signos de número (#) o comillas simples (') que se basa en el proveedor de datos. Decimales y notación científica están permitidas para los valores numéricos. Por ejemplo:  
  
 "FirstName = 'John'"  
  
 "Precio < = 50,00"  
  
 "Fecha de nacimiento < #1/31/&#82;"  
  
 Para las columnas que contienen valores de enumeración, convertir el valor al tipo de datos entero. Por ejemplo:  
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>Analizar las expresiones literales  
 Todas las expresiones literales se deben expresar en la configuración regional de la referencia cultural invariable. Cuando `DataSet` analiza y convierte las expresiones literales, siempre utiliza la referencia cultural invariable, no la referencia cultural actual.  
  
 Cuando hay comillas simples que rodea el valor, se identifican los literales de cadena. Por ejemplo:  
  
 'John'  
  
 `Boolean` los literales son true y false; no están entre comillas en expresiones.  
  
 `Integer` ¿literales [+-]? [0-9] + se tratan como `System.Int32`, `System.Int64` o `System.Double`. `System.Double` puede perder precisión dependiendo de lo grande que sea el número. Por ejemplo, si el número en el literal es 2147483650, `DataSet` primero intentará analizar el número como un `Int32`. Esto no se realizará correctamente porque el número es demasiado grande. En este caso `DataSet` analizará el número como un `Int64`, que se realizará correctamente. Si el literal es un número mayor que el valor máximo de un valor Int64, `DataSet` analizará el literal mediante `Double`.  
  
 Literales reales que usan la notación científica, como 4.42372E-30, se analizan mediante `System.Double`.  
  
 Los literales reales sin la notación científica, pero con un separador decimal, se tratan como `System.Decimal`. Si el número supera los valores máximo o mínimos admitidos por `System.Decimal`, a continuación, se analiza como un `System.Double`. Por ejemplo:  
  
 142526.144524 se convertirá en un `Decimal`.  
  
 345262.78036719560925667 se tratará como un `Double`.  
  
## <a name="operators"></a>Operadores  
 Se permite la concatenación mediante booleanos AND, OR, operadores y NOT. Puede usar paréntesis para agrupar cláusulas y forzar una precedencia. El operador AND tiene prioridad sobre otros operadores. Por ejemplo:  
  
 (LastName = 'Smith' OR LastName = 'Jones') Y FirstName = 'John'  
  
 Al crear expresiones de comparación, se permiten los siguientes operadores:  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 También se admiten los siguientes operadores aritméticos en expresiones:  
  
 \+ (suma)  
  
 \- (resta)  
  
 \* (multiplicación)  
  
 / (división)  
  
 % (módulo)  
  
## <a name="string-operators"></a>Operadores de cadena  
 Para concatenar una cadena, utilice el carácter +. El valor de la <xref:System.Data.DataSet.CaseSensitive%2A> propiedad de la <xref:System.Data.DataSet> clase determina si las comparaciones de cadenas distinguen mayúsculas de minúsculas. Sin embargo, puede reemplazar ese valor por el <xref:System.Data.DataTable.CaseSensitive%2A> propiedad de la <xref:System.Data.DataTable> clase.  
  
## <a name="wildcard-characters"></a>Caracteres comodín  
 Tanto el * y % se puede usar indistintamente para los caracteres comodín en una comparación LIKE. Si la cadena en una cláusula LIKE contiene un * o %, dichos caracteres deben escribirse entre corchetes ([]). Si es un corchete de cierre en la cláusula, cada carácter de corchete de cierre debe incluirse entre corchetes (por ejemplo, [[] o []]). Se permite un carácter comodín al principio y al final de un patrón, o al final de un patrón o al principio de un patrón. Por ejemplo:  
  
 "ItemName como ' * producto\*'"  
  
 "ItemName como ' * producto '"  
  
 "ItemName LIKE 'producto *'"  
  
 No se permiten caracteres comodín en el medio de una cadena. Por ejemplo, ' te * xt' no está permitido.  
  
## <a name="parentchild-relation-referencing"></a>Relación de elementos primarios/secundarios que hacen referencia a  
 Puede hacer referencia a una tabla primaria en una expresión anteponiendo al nombre de columna con `Parent`. Por ejemplo, el `Parent.Price` hace referencia a columnas de la tabla primaria denominada `Price`.  
  
 Cuando un elemento secundario tiene más de una fila primaria, use Parent (RelationName). ColumnName. Por ejemplo, el Parent (RelationName). Precio hace referencia a la columna de la tabla primaria denominada Price a través de la relación.  
  
 Puede hacer referencia a una columna en una tabla secundaria en una expresión anteponiendo al nombre de columna con `Child`. Sin embargo, dado que las relaciones secundarias pueden devolver varias filas, debe incluir la referencia a la columna secundaria en una función de agregado. Por ejemplo, `Sum(Child.Price)` devolvería la suma de la columna denominada `Price` en la tabla secundaria.  
  
 Si una tabla tiene más de un elemento secundario, la sintaxis es: `Child(RelationName)`. Por ejemplo, si una tabla tiene dos tablas secundarias denominadas `Customers` y `Orders`y el <xref:System.Data.DataRelation> se denomina objeto `Customers2Orders`, la referencia sería como sigue:  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>Agregados  
 Se admiten los siguientes tipos agregados:  
  
 SUM (suma)  
  
 Promedio (Media)  
  
 Min (mínimo)  
  
 Max (máximo)  
  
 Count (recuento)  
  
 StDev (desviación estándar estadística)  
  
 Var (varianza estadística).  
  
 Agregados se realizan normalmente a lo largo de las relaciones. Crear una expresión de agregado mediante una de las funciones enumeradas anteriormente y una columna de tabla secundaria como se detalla en el elemento primario/secundario relación hace referencia a que se ha analizado anteriormente. Por ejemplo:  
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 Un agregado también puede realizarse en una sola tabla. Por ejemplo crear un resumen de las cifras de una columna denominada "Price":  
  
 Sum(Precio)  
  
> [!NOTE]
>  Si usa una sola tabla para crear una función de agregado, no habría ninguna funcionalidad de agrupación. En su lugar, todas las filas muestren el mismo valor en la columna.  
  
 Si una tabla no tiene filas, las funciones de agregado devolverá `null`.  
  
 Tipos de datos siempre se pueden determinar mediante el examen del <xref:System.Data.DataColumn.DataType%2A> propiedad de una columna. También puede convertir a tipos de datos mediante la función Convert, que se muestra en la siguiente sección.  
  
 Un agregado solo puede aplicarse a una sola columna y otras expresiones no se pueden usar dentro del agregado.  
  
## <a name="functions"></a>Funciones  
 También se admiten las siguientes funciones:  
  
 `CONVERT`  
  
|||  
|-|-|  
|Descripción|Convierte una expresión concreta a tipos de .NET Framework especificado.|  
|Sintaxis|Convertir (`expression`, `type`)|  
|Argumentos|`expression` --La expresión para convertir.<br /><br /> `type` --El tipo de .NET Framework a la que se convertirá el valor.|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 Todas las conversiones son válidas con las siguientes excepciones: `Boolean` se puede convertir a y desde `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` y sí solo. `Char` se puede convertir a y desde `Int32`, `UInt32`, `String`y sí solo. `DateTime` se puede convertir a y desde `String` y sí solo. `TimeSpan` se puede convertir a y desde `String` y sí solo.  
  
 `LEN`  
  
|||  
|-|-|  
|Descripción|Obtiene la longitud de una cadena|  
|Sintaxis|LEN (`expression`)|  
|Argumentos|`expression` --La cadena que se debe evaluar.|  
  
 Example: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|Descripción|Comprueba una expresión y devuelve la expresión comprobada o un valor de reemplazo.|  
|Sintaxis|ISNULL (`expression`, `replacementvalue`)|  
|Argumentos|`expression` --La expresión para comprobar.<br /><br /> `replacementvalue` --Si la expresión es `null`, `replacementvalue` se devuelve.|  
  
 Ejemplo: myDataColumn (price, -1) "  
  
 `IIF`  
  
|||  
|-|-|  
|Descripción|Obtiene uno de dos valores según el resultado de una expresión lógica.|  
|Sintaxis|IIF(`expr`, `truepart`, `falsepart`)|  
|Argumentos|`expr` --La expresión para evaluar.<br /><br /> `truepart` : Valor que se devuelve si la expresión es verdadera.<br /><br /> `falsepart` : Valor que se devuelve si la expresión es falsa.|  
  
 Ejemplo: myDataColumn.Expression = "IIF (total > 1000, 'expensive', 'estimado')  
  
 `TRIM`  
  
|||  
|-|-|  
|Descripción|Quita todas las iniciales y finales en blanco caracteres como \r, \n, \t, ' '|  
|Sintaxis|TRIM (`expression`)|  
|Argumentos|`expression` --La expresión para recortar.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|Descripción|Obtiene una subcadena de una longitud especificada, empezando por un punto especificado en la cadena.|  
|Sintaxis|SUBSTRING (`expression`, `start`, `length`)|  
|Argumentos|`expression` --La cadena de origen para la subcadena.<br /><br /> `start` --Entero que especifica dónde comienza la subcadena.<br /><br /> `length` --Entero que especifica la longitud de la subcadena.|  
  
 Ejemplo: myDataColumn.Expression = "SUBSTRING (phone, 7, 8)"  
  
> [!NOTE]
>  Puede restablecer el <xref:System.Data.DataColumn.Expression%2A> propiedad asignando un valor null o una cadena vacía. Si se establece un valor predeterminado en la columna de expresión, todas las filas rellenadas previamente se asignan el valor predeterminado después de la <xref:System.Data.DataColumn.Expression%2A> se restablece la propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea tres columnas en un <xref:System.Data.DataTable>. La segunda y tercera columnas contienen expresiones; la segunda calcula impuestos mediante un tipo impositivo variable y la tercera agrega el resultado del cálculo en el valor de la primera columna. La tabla resultante se muestra en un <xref:System.Windows.Forms.DataGrid> control.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Las propiedades <see cref="P:System.Data.DataColumn.AutoIncrement" /> o <see cref="P:System.Data.DataColumn.Unique" /> están establecidas en <see langword="true" />.</exception>
        <exception cref="T:System.FormatException">Al utilizar la función CONVERT, la expresión se evalúa como cadena, pero la cadena no contiene una representación que se pueda convertir al parámetro de tipo.</exception>
        <exception cref="T:System.InvalidCastException">Al utilizar la función CONVERT, la conversión solicitada no es posible. Consulte la función de conversión de la siguiente sección para obtener información detallada sobre las posibles conversiones.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Al utilizar la función SUBSTRING, el argumento de inicio está fuera del intervalo.  
  
 O bien  
  
 Al utilizar la función SUBSTRING, el argumento de longitud está fuera del intervalo.</exception>
        <exception cref="T:System.Exception">Al utilizar la función LEN o TRIM, la expresión no se evalúa como cadena. Esto incluye expresiones que se evalúan como <see cref="T:System.Char" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de la información personalizada del usuario asociada a <see cref="T:System.Data.DataColumn" />.</summary>
        <value>
          <see cref="T:System.Data.PropertyCollection" /> de información personalizada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn.ExtendedProperties%2A> propiedad le permite almacenar información personalizada con el objeto. Por ejemplo, puede almacenar la hora cuando se deben actualizar los datos.  
  
 Las propiedades extendidas deben ser del tipo <xref:System.String>. Propiedades que no son de tipo <xref:System.String> no se conservan cuando el <xref:System.Data.DataColumn> se escribe como XML.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega una propiedad personalizada a la <xref:System.Data.PropertyCollection> devuelto por la <xref:System.Data.DataColumn.ExtendedProperties%2A> propiedad. El segundo ejemplo recupera la propiedad personalizada.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la longitud máxima de una columna de texto.</summary>
        <value>Longitud máxima de la columna en caracteres. Si la columna no tiene longitud máxima, el valor es –1 (valor predeterminado).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn.MaxLength%2A> propiedad se omite para las columnas no son de texto. A <xref:System.ArgumentException> excepción se produce si asigna <xref:System.Data.DataColumn.MaxLength%2A> a una columna no es una cadena.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio de nombres del objeto <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Espacio de nombres de <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataColumn.Namespace%2A> propiedad se utiliza al leer y escribir un documento XML en un <xref:System.Data.DataTable> en el <xref:System.Data.DataSet> mediante la <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, o <xref:System.Data.DataSet.WriteXmlSchema%2A> métodos.  
  
 El espacio de nombres de un documento XML se usa para especificar atributos XML y los elementos cuando se leen en un <xref:System.Data.DataSet>. Por ejemplo, un <xref:System.Data.DataSet> contiene un esquema leído de un documento que tiene el espacio de nombres "myCompany" y se realiza un intento para leer datos (con el <xref:System.Data.DataSet.ReadXml%2A> método) de un documento que tiene el espacio de nombres "theirCompany". Se omitirá cualquier dato que no se corresponde con el esquema existente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El espacio de nombres ya tiene datos.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Referencia de parámetro.</param>
        <summary>Este miembro admite la infraestructura de .NET Framework y no está prevista su utilización directa desde el código.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la posición de base cero de la columna en la colección <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Posición de la columna. Obtiene –1 si la columna no es un miembro de una colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se devuelve el tipo de datos, nombre y ordinal de columna de una columna.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un prefijo XML que crea alias para el espacio de nombres del objeto <see cref="T:System.Data.DataTable" />.</summary>
        <value>Prefijo XML para el espacio de nombres de <see cref="T:System.Data.DataTable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataTable.Prefix%2A> se usa en un documento XML para identificar los elementos que pertenecen al espacio de nombres para un <xref:System.Data.DataSet> objeto (tal como lo establece el <xref:System.Data.DataSet.Namespace%2A> propiedad).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Referencia de parámetro.</param>
        <summary>Este miembro admite la infraestructura de .NET Framework y no está prevista su utilización directa desde el código.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la columna permite cambios justo después de que se haya agregado una fila a la tabla.</summary>
        <value>
          <see langword="true" /> si la columna es de sólo lectura; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.DataColumn> y establece su <xref:System.Data.DataColumn.ReadOnly%2A> propiedad `true`.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad está establecida en <see langword="false" /> en una columna calculada.</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Ordinal especificado.</param>
        <summary>Cambia el ordinal o la posición del objeto <see cref="T:System.Data.DataColumn" /> al ordinal o posición especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cambia el ordinal o la posición del objeto <xref:System.Data.DataColumn> al ordinal o posición especificados. Si el ordinal es menor que 0 o mayor que el número de columnas: 1 (mayor que el ordinal de la última columna) existente, a continuación, no es válida <xref:System.ArgumentException> se produce.  
  
 Cuando se cambia el ordinal de una columna, la columna se mueve a la nueva posición en la colección de columnas. Las columnas entre el ordinal anterior y nuevo se volverán a numerar, para ajustar el ordinal de la columna nueva.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el <see cref="T:System.Data.DataTable" /> al que pertenece la columna.</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> al que pertenece el <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se devuelve la tabla primaria de un <xref:System.Data.DataColumn> a través de su <xref:System.Data.DataColumn.Table%2A> propiedad.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el <see cref="P:System.Data.DataColumn.Expression" /> de la columna, si existe alguno.</summary>
        <returns>Valor <see cref="P:System.Data.DataColumn.Expression" />, si la propiedad está establecida; en caso contrario, la propiedad <see cref="P:System.Data.DataColumn.ColumnName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Data.DataColumn.ToString%2A> propiedad para devolver la cadena predeterminada de cada miembro de una colección de <xref:System.Data.DataColumn> objetos.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los valores de cada fila de la columna deben ser únicos.</summary>
        <value>
          <see langword="true" /> si el valor debe ser único; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cuanto se cambie esta propiedad de false a true, se creará una restricción unique en esta columna para asegurarse de que los valores sean únicos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:System.Data.DataColumn>, establece sus propiedades y se agrega a la colección de columnas de una tabla.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La columna es una columna calculada.</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>