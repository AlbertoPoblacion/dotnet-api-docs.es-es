<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19bc999689e2cb5af52a69b1ab28024ad5ede488" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36678233" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Permite que un objeto implemente un DataAdapter. Representa un conjunto de métodos y propiedades relacionadas con acciones de asignación que se usan para rellenar y actualizar un <see cref="T:System.Data.DataSet" /> y actualizar un origen de datos.  
  
 Las instancias <see cref="T:System.Data.IDbDataAdapter" /> son para los orígenes de datos que son (o se asemejan a) bases de datos relacionales con comandos textuales (como Transact-SQL), mientras que las instancias <see cref="T:System.Data.IDataAdapter" /> pueden usar cualquier tipo de origen de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.IDataAdapter> interfaz permite que una clase heredera implemente una clase DataAdapter, que representa el puente entre un origen de datos y un <xref:System.Data.DataSet>. Para obtener más información sobre las clases DataAdapter, vea [llenar un DataSet desde un DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Una aplicación no crea una instancia de la <xref:System.Data.IDataAdapter> interfaz directamente, sino que implementa una instancia de una clase que herede <xref:System.Data.IDataAdapter>.  
  
 Las clases que heredan <xref:System.Data.IDataAdapter> debe implementar los miembros heredados y suelen definir miembros adicionales para agregar la funcionalidad específica del proveedor. Por ejemplo, el <xref:System.Data.IDataAdapter> interfaz define un <xref:System.Data.IDataAdapter.Fill%2A> método que toma un <xref:System.Data.DataSet> como un parámetro. A su vez, el <xref:System.Data.OleDb.OleDbDataAdapter> clase hereda el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método y también define dos sobrecargas adicionales de la <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> método que toma un objeto ADO Recordset como parámetro.  
  
   
  
## Examples  
 El ejemplo siguiente utiliza las clases derivadas, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, y <xref:System.Data.SqlClient.SqlConnection>, para seleccionar los registros de una base de datos. El relleno <xref:System.Data.DataSet> , a continuación, se devuelve. Para ello, se pasa al método un inicializado <xref:System.Data.DataSet>, una cadena de conexión y una cadena de consulta que es una instrucción SELECT de Transact-SQL.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Para promover la coherencia entre los proveedores de datos de .NET Framework, asigne el nombre de la clase de herencia en el formulario <paramref name="Prv" /> DataAdapter donde <paramref name="Prv" /> es el prefijo uniforme que se asigna a todas las clases en un espacio de nombres del proveedor de datos de .NET Framework específico. Por ejemplo, <paramref name="Sql" /> es el prefijo de la <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> clase en el <see langword="System.Data.SqlClient" /> espacio de nombres.  Al heredar de la <see cref="T:System.Data.IDataAdapter" /> interfaz, debe implementar los siguientes constructores: <list type="table"><listheader><term> elemento </term><description> descripción </description></listheader><item><term> PrvDataAdapter() </term><description> Inicializa una nueva instancia de la clase PrvDataAdapter.  </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) </term><description> Inicializa una nueva instancia de la clase PrvDataAdapter mediante la instrucción SELECT de SQL especificada.  </description></item><item><term> PrvDataAdapter (selectCommandText de cadena, cadena selectConnectionString) </term><description> Inicializa una nueva instancia de la clase PrvDataAdapter con una instrucción SELECT de SQL y una cadena de conexión.  </description></item><item><term> PrvDataAdapter (cadena selectCommandText, PrvConnection selectConnection) </term><description> Inicializa una nueva instancia de la clase PrvDataAdapter con una instrucción SELECT de SQL y un objeto PrvConnection.  </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <summary>Agrega filas a la clase <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las del origen de datos mediante el nombre de <see cref="T:System.Data.DataSet" /> y crea un objeto <see cref="T:System.Data.DataTable" /> denominado "Table".</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> recupera filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.IDataAdapter.Fill%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.IDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 El <xref:System.Data.IDataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando la <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, la <xref:System.Data.IDataAdapter.Fill%2A> operación normalmente crea únicamente los metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas sucesivas utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet>, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones deben tener cuidado al usar nombres de tabla y columna para asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 Cuando la instrucción SELECT que se usa para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como una instrucción SQL por lotes, si uno de los resultados contiene un error, todos los resultados sucesivos se omiten y no se agrega a la <xref:System.Data.DataSet>.  
  
 Puede usar el <xref:System.Data.IDataAdapter.Fill%2A> método varias veces en la misma <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.IDataAdapter.Fill%2A> y <xref:System.Data.IDataAdapter.FillSchema%2A> para datos de .NET Framework proveedor recupera información de esquema para sólo el primer resultado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con el esquema a partir del origen de datos.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Agrega un objeto <see cref="T:System.Data.DataTable" /> denominado "Table" a la interfaz <see cref="T:System.Data.DataSet" /> que se ha especificado y configura el esquema para que coincida con el del origen de datos en función de la <see cref="T:System.Data.SchemaType" /> especificada.</summary>
        <returns>Matriz de objetos <see cref="T:System.Data.DataTable" /> que contienen la información de esquema devuelta a partir del origen de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.IDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.IDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.IDataAdapter.FillSchema%2A> es llama, permanece abierta.  
  
 A <xref:System.Data.IDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable> y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el <xref:System.Data.DataTable>.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si todas las columnas son que no aceptan valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información sobre cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas sucesivas utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet>, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones deben tener cuidado al usar nombres de tabla y columna para asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> no devuelve ninguna fila. Use la <xref:System.Data.IDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene los parámetros establecidos por el usuario al ejecutar una instrucción SELECT de SQL.</summary>
        <returns>Matriz de objetos <see cref="T:System.Data.IDataParameter" /> que contienen los parámetros establecidos por el usuario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica o especifica si las tablas o columnas de origen no asignadas se pasan con sus nombres de origen, para que se filtren o para generar un error.</summary>
        <value>Uno de los valores de <see cref="T:System.Data.MissingMappingAction" />. El valor predeterminado es <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.IDataAdapter.TableMappings%2A> propiedad proporciona la asignación principal entre los registros devueltos y la <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor establecido no es ninguno de los valores de <see cref="T:System.Data.MissingMappingAction" />.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica o especifica si las tablas y columnas de origen y las relaciones entre ellas que faltan se agregan al esquema del conjunto de datos, se omiten o hacen que se genere un error.</summary>
        <value>Uno de los valores de <see cref="T:System.Data.MissingSchemaAction" />. El valor predeterminado es <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El valor establecido no es ninguno de los valores de <see cref="T:System.Data.MissingSchemaAction" />.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica cómo se asigna una tabla de origen a una tabla de conjuntos de datos.</summary>
        <value>Colección que proporciona la asignación maestra entre los registros devueltos y la clase <see cref="T:System.Data.DataSet" />. El valor predeterminado es una colección vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.IDataAdapter> sólo utiliza las asignaciones para la tabla de origen denominada "Table". All SELECT, las instrucciones INSERT, DELETE y UPDATE devolver datos, deben hacerlo utilizando una nomenclatura de columnas coherente. Los nombres de columna devueltos en los registros deben ser únicos, en caso contrario, las columnas con nombres duplicados sobrescriben los datos anteriores. En <xref:System.Data.IDataAdapter.Update%2A>, solo la tabla asignada a la tabla de origen con el nombre "Table" tendrá reconciliarán los cambios.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se utiliza para actualizar el origen de datos.</param>
        <summary>Llama a las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en la clase <see cref="T:System.Data.DataSet" /> especificada a partir de un objeto <see cref="T:System.Data.DataTable" /> denominado "Table".</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataSet" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.IDataAdapter.Update%2A> método, el <xref:System.Data.IDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.IDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método si se debe controlar la secuencia de tipos de instrucciones (por ejemplo, las instrucciones INSERT antes de las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no establecen CommandBuilder. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.IDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, la primera devuelve el resultado se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.IDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.IDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada se debe normalmente a un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la `Original`, `Current`, o `Proposed` versión del valor de columna. Esta capacidad se utiliza con frecuencia para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>a <xref:System.Data.Common.DataAdapter.Update%2A> el origen de datos. En este ejemplo se da por supuesto que ha creado un <xref:System.Data.OleDb.OleDbDataAdapter> y <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
      </Docs>
    </Member>
  </Members>
</Type>