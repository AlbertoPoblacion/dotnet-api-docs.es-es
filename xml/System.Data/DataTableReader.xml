<Type Name="DataTableReader" FullName="System.Data.DataTableReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8b05c6536b55f3b3e8b451bd60aecebed5db7c3e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400229" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DataTableReader : System.Data.Common.DbDataReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataTableReader extends System.Data.Common.DbDataReader" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataTableReader&#xA;Inherits DbDataReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableReader sealed : System::Data::Common::DbDataReader" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>El <see cref="T:System.Data.DataTableReader" /> obtiene el contenido de uno o más objetos <see cref="T:System.Data.DataTable" /> con formato de uno o más conjuntos de solo lectura y de solo avance.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataTableReader> funciona como cualquier otro lector de datos, como el <xref:System.Data.SqlClient.SqlDataReader>, salvo que la <xref:System.Data.DataTableReader> permite recorrer en iteración las filas de un <xref:System.Data.DataTable>. En otras palabras, proporciona para recorrer en iteración las filas en una memoria caché. Se pueden modificar los datos en caché mientras el <xref:System.Data.DataTableReader> está activo, y el lector mantiene automáticamente su posición.  
  
 Cuando se crea un <xref:System.Data.DataTableReader> desde una <xref:System.Data.DataTable>, resultante <xref:System.Data.DataTableReader> objeto contiene un conjunto de resultados con los mismos datos que la <xref:System.Data.DataTable> desde que se creó, excepto las filas que se han marcado como eliminada. Las columnas aparecen en el mismo orden que en la versión original <xref:System.Data.DataTable>. La estructura del resultado devuelto es idéntica en el esquema y los datos a la versión original <xref:System.Data.DataTable>. A <xref:System.Data.DataTableReader> que se creó mediante una llamada a la <xref:System.Data.DataSet.CreateDataReader*> método de un <xref:System.Data.DataSet> objeto contiene varios conjuntos de resultados si el <xref:System.Data.DataSet> contiene más de una tabla. Los resultados están en la misma secuencia que la <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataTableCollection> de la <xref:System.Data.DataSet> objeto.  
  
 El conjunto de resultados devuelto contiene únicamente la versión actual de cada <xref:System.Data.DataRow>; se omiten las filas que están marcadas para eliminación.  
  
 El `DataTableReader` proporciona un estable iterador; es decir, el contenido de la `DataTableReader` siguen siendo válidas si se modifica el tamaño de la colección subyacente durante la iteración. Por ejemplo, si uno o más filas de la <xref:System.Data.DataTable.Rows%2A> recopilación se haya eliminado o quitado durante la iteración, la posición actual dentro de la `DataTableReader` se mantiene correctamente y el iterador no se invalida.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataTableReader" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTableReader (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTableReader(System::Data::DataTable ^ dataTable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Objeto <see cref="T:System.Data.DataTable" /> del que va a obtener su conjunto de resultados el nuevo objeto <see cref="T:System.Data.DataTableReader" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataTableReader" /> utilizando los datos del objeto <see cref="T:System.Data.DataTable" /> proporcionado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTableReader (System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataTables As DataTable())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTableReader(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
      </Parameters>
      <Docs>
        <param name="dataTables">Matriz de objetos <see cref="T:System.Data.DataTable" /> que proporciona los resultados para el nuevo objeto <see cref="T:System.Data.DataTableReader" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.DataTableReader" /> utilizando la matriz proporcionada de objetos <see cref="T:System.Data.DataTable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tiene que crear un <xref:System.Data.DataTableReader> en función de todos los datos o un subconjunto de las tablas dentro de un determinado <xref:System.Data.DataSet>, llame a la `DataSet`del <xref:System.Data.DataSet.CreateDataReader*> método. Si desea crear un nuevo <xref:System.Data.DataTableReader> instancia a partir de un grupo de `DataTable` instancias que no están en caso contrario relacionados, utilice este constructor. También puede aprovechar las ventajas de este constructor para reorganizar el orden de la `DataTables` dentro de la `DataTableReader`, si su orden dentro de su origen `DataSet` no satisfacen sus necesidades.  
  
   
  
## Examples  
 En el ejemplo siguiente, el método TestConstructor crea dos <xref:System.Data.DataTable> instancias. Para mostrar este constructor para la <xref:System.Data.DataTableReader> (clase), el ejemplo se crea un nuevo `DataTableReader` basado en una matriz que contiene las dos `DataTables`y realiza una operación sencilla, imprime el contenido de las primeras columnas en la consola ventana. Para probar esta aplicación, cree una nueva aplicación de consola y pegue el código de ejemplo en el archivo recién creado.  
  
 [!code-csharp[DataWorks DataTableReader.ctor#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.ctor/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.ctor/VB/source.vb#1)]  
  
 La ventana de consola muestra el siguiente resultado:  
  
```  
1 Mary  
2 Andy  
3 Peter  
4 Russ  
1 Wireless Network Card  
2 Hard Drive  
3 Monitor  
4 CPU  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el objeto <see cref="T:System.Data.DataTableReader" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a `Close()` en un cerrado `DataTableReader` objeto no genera un error.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Profundidad del anidamiento para la fila actual del objeto <see cref="T:System.Data.DataTableReader" />.</summary>
        <value>Profundidad del anidamiento para la fila actual, siempre es cero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DataTableReader` no se admite el anidamiento. El `Depth` propiedad siempre devuelve cero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldCount">
      <MemberSignature Language="C#" Value="public override int FieldCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FieldCount" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.FieldCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FieldCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int FieldCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve el número de columnas de la fila actual.</summary>
        <value>0, si no está situado en un conjunto de resultados válido; en caso contrario, número de columnas de la fila actual.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado recuperar el recuento de campo en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public override bool GetBoolean (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetBoolean(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetBoolean(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBoolean (ordinal As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool GetBoolean(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como objeto <see cref="T:System.Boolean" />.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados preciso ya sea un valor booleano o convertirse a un valor booleano o se genera una excepción.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetBoolean#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetBoolean/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetBoolean/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un objeto <see langword="Boolean" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public override byte GetByte (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8 GetByte(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByte (ordinal As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Byte GetByte(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un byte.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un byte o convertibles en un byte.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetByte#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetByte/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetByte#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetByte/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un byte.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override long GetBytes (int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetBytes(int32 ordinal, int64 dataIndex, unsigned int8[] buffer, int32 bufferIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (ordinal As Integer, dataIndex As Long, buffer As Byte(), bufferIndex As Integer, length As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetBytes(int ordinal, long dataIndex, cli::array &lt;System::Byte&gt; ^ buffer, int bufferIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
        <Parameter Name="dataIndex" Type="System.Int64" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="bufferIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <param name="dataIndex">Índice del campo a partir del cual se va a comenzar la operación de lectura.</param>
        <param name="buffer">Búfer en el que se va a leer la secuencia de bytes.</param>
        <param name="bufferIndex">Índice en el búfer en el que se van a comenzar a colocar los datos.</param>
        <param name="length">Longitud máxima que se puede copiar en el búfer.</param>
        <summary>Lee una secuencia de bytes que comienza en la posición de desplazamiento de la columna especificada cargándola al búfer como una matriz, comenzando a cargar desde la posición de desplazamiento de búfer especificada.</summary>
        <returns>El número real de bytes que se leen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetBytes` Devuelve el número de bytes disponibles en el campo. Mayoría de las veces que se trata de la longitud exacta del campo. Sin embargo, el valor devuelto puede ser menor que la longitud real del campo si `GetBytes` ya se ha utilizado para obtener bytes del campo. Esto puede ser el caso, por ejemplo, cuando la <xref:System.Data.DataTableReader> está leyendo una estructura de datos de gran tamaño en un búfer  
  
 Si se pasa un búfer que está `null` (`Nothing` en Visual Basic), `GetBytes` devuelve la longitud de todo el campo en bytes, no el tamaño restante basado en el parámetro de desplazamiento de búfer.  
  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser una matriz de bytes o convertirse en una matriz de bytes.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.DataTableReader> basada en datos de la base de datos de ejemplo de AdventureWorks y guarda cada imagen recuperada en un archivo independiente en la carpeta C:\. Para probar esta aplicación, cree una nueva aplicación de consola, haga referencia al ensamblado System.Drawing.dll y pegue el código de ejemplo en el archivo recién creado.  
  
 [!code-csharp[DataWorks DataTableReader.GetBytes#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetBytes/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetBytes#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetBytes/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene una matriz de bytes.</exception>
        <altmember cref="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public override char GetChar (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetChar(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetChar(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChar (ordinal As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetChar(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un carácter.</summary>
        <returns>Valor de la columna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un carácter o convertirse en un carácter.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el objeto pasado DataTableReader. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetChar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetChar/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetChar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetChar/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">El campo especificado no contiene un carácter.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override long GetChars (int ordinal, long dataIndex, char[] buffer, int bufferIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetChars(int32 ordinal, int64 dataIndex, char[] buffer, int32 bufferIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (ordinal As Integer, dataIndex As Long, buffer As Char(), bufferIndex As Integer, length As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetChars(int ordinal, long dataIndex, cli::array &lt;char&gt; ^ buffer, int bufferIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
        <Parameter Name="dataIndex" Type="System.Int64" />
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="bufferIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <param name="dataIndex">Índice del campo a partir del cual se va a comenzar la operación de lectura.</param>
        <param name="buffer">Búfer en el que se va a leer la secuencia de caracteres.</param>
        <param name="bufferIndex">Índice en el búfer en el que se van a comenzar a colocar los datos.</param>
        <param name="length">Longitud máxima que se puede copiar en el búfer.</param>
        <summary>Devuelve el valor de la columna especificada como una matriz de caracteres.</summary>
        <returns>Número real de caracteres que se leen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetChars` Devuelve el número de caracteres disponibles en el campo. Mayoría de las veces que se trata de la longitud exacta del campo. Sin embargo, el valor devuelto puede ser menor que la longitud real del campo si `GetChars` ya se ha utilizado para obtener caracteres del campo.  
  
 El número real de caracteres leídos puede ser menor que la longitud solicitada si se alcanza el final del campo. Si se pasa un búfer que es null (`Nothing` en Visual Basic), `GetChars` devuelve la longitud de todo el campo en caracteres, no el tamaño restante basado en el parámetro de desplazamiento de búfer.  
  
 No se realizan conversiones; por lo tanto, los datos que se van a recuperar ya deben ser una matriz de caracteres o convertirse en una matriz de caracteres.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el `GetChars` método. El `TestGetChars` método espera que se pasará un `DataTableReader` rellena con dos columnas de datos: un nombre de archivo en la primera columna y una matriz de caracteres en el segundo. Además, `TestGetChars` le permite especificar el tamaño del búfer que se usará cuando lee los datos de la matriz de caracteres en el `DataTableReader`. `TestGetChars` crea un archivo correspondiente a cada fila de datos en el `DataTableReader`, utilizando los datos proporcionados en la primera columna de la `DataTableReader` como el nombre de archivo.  
  
 Este procedimiento muestra el uso de la `GetChars` método leer los datos que se almacenaron en el `DataTable` como una matriz de caracteres. Cualquier otro tipo de datos hace el `GetChars` método para producir una `InvalidCastException`.  
  
 [!code-csharp[DataWorks DataTableReader.GetChars#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetChars/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetChars/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene una matriz de caracteres.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataTypeName">
      <MemberSignature Language="C#" Value="public override string GetDataTypeName (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetDataTypeName(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDataTypeName (ordinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetDataTypeName(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene una cadena que representa el tipo de datos de la columna especificada.</summary>
        <returns>Cadena que representa el tipo de datos de la columna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.DataTableReader.GetDataTypeName%2A> método siempre devuelve el tipo de subyacente <xref:System.Data.DataColumn> en lugar de un tipo específico del proveedor.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra una lista de campos y sus nombres de tipo de un sencillo <xref:System.Data.DataTable>:  
  
 [!code-csharp[DataWorks DataTableReader.GetDataTypeName#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDataTypeName/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetDataTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDataTypeName/VB/source.vb#1)]  
  
 La ventana de consola muestra el siguiente resultado:  
  
```  
ID: Int32  
Name: String  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public override DateTime GetDateTime (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime GetDateTime(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetDateTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDateTime (ordinal As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime GetDateTime(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un objeto <see cref="T:System.DateTime" />.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.DateTime> o convertirse a un `DataTime`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetDateTime#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDateTime/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDateTime/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un valor de DateTime.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public override decimal GetDecimal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Decimal GetDecimal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetDecimal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecimal (ordinal As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Decimal GetDecimal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como objeto <see cref="T:System.Decimal" />.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.Decimal> o convertirse a un `Decimal`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetDecimal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDecimal/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDecimal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un valor <see langword="Decimal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public override double GetDouble (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float64 GetDouble(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetDouble(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDouble (ordinal As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override double GetDouble(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Ordinal basado en cero de la columna.</param>
        <summary>Obtiene el valor de la columna como un número de punto flotante de precisión doble.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un número de punto flotante de precisión doble o deben poder convertirse en un número de punto flotante de precisión doble.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetDouble#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDouble/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetDouble#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetDouble/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see langword="DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un número de punto flotante de precisión doble.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que puede utilizarse para recorrer una iteración en la colección de elementos.</summary>
        <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que representa la colección de elementos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los enumeradores sólo permiten la lectura de datos en el <xref:System.Data.DataTableReader>. Los enumeradores no pueden usarse para modificar la colección subyacente.  
  
 En primer lugar, el enumerador se coloca antes del primer elemento de la colección. En esta posición, al llamar a <xref:System.Collections.IEnumerator.Current%2A> produce una excepción. Por lo tanto, debe llamar a `MoveNext` para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de `Current`.  
  
 `Current` Devuelve un <xref:System.Data.Common.DbDataRecord>y devuelve el mismo objeto hasta que <xref:System.Collections.IEnumerator.MoveNext%2A> o <xref:System.Collections.IEnumerator.Reset%2A> se llama. `MoveNext` establece `Current` en el siguiente elemento.  
  
 Cuando se pasa el final de la colección, el enumerador se coloca detrás del último elemento de la colección y, a continuación, que realiza la llamada `MoveNext` devuelve false. Si la última llamada a `MoveNext` devuelve `false`, si se llama `Current` produce una excepción. Además, dado que la <xref:System.Data.DataTableReader> proporciona acceso de solo avance a sus datos, una llamada a la <xref:System.Collections.IEnumerator.Reset%2A> método de la interfaz IEnumerator produce una <xref:System.NotSupportedException>.  
  
 El <xref:System.Data.DataTableReader> proporciona un enumerador estable. Esto significa que incluso si se producen adiciones o eliminaciones de filas dentro de los datos subyacentes, el enumerador devuelto por una llamada a <xref:System.Data.DataTableReader.GetEnumerator%2A> sigue siendo válida.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra el uso del método <xref:System.Data.DataTableReader.GetEnumerator%2A>. Esto incluye el comportamiento del enumerador cuando se eliminan filas de subyacente <xref:System.Data.DataTable> mientras el enumerador está activo.  
  
 [!code-csharp[DataWorks DataTableReader.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetEnumerator/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetEnumerator/VB/source.vb#1)]  
  
 El procedimiento muestra el texto siguiente en la ventana de consola:  
  
```  
Peter  
Mary  
Russ  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFieldType">
      <MemberSignature Language="C#" Value="public override Type GetFieldType (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetFieldType(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetFieldType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFieldType (ordinal As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetFieldType(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el objeto <see cref="T:System.Type" /> que es el tipo de datos del objeto.</summary>
        <returns>
          <see cref="T:System.Type" />, que el tipo de datos del objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Llame al procedimiento siguiente, pasando una <xref:System.Data.DataTableReader> instancia para poder mostrar una lista de todos los campos y el nombre completo de cada tipo en la ventana de consola.  
  
 [!code-csharp[DataWorks DataTableReader.GetFieldType#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetFieldType/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetFieldType#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetFieldType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFloat">
      <MemberSignature Language="C#" Value="public override float GetFloat (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float32 GetFloat(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetFloat(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFloat (ordinal As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override float GetFloat(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un número de punto flotante de precisión sencilla.</summary>
        <returns>Valor de la columna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un número de punto flotante de precisión sencilla o deben poder convertirse en un número de punto flotante de precisión sencilla.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetFloat#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetFloat/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetFloat#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetFloat/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un número de punto flotante de precisión sencilla.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public override Guid GetGuid (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Guid GetGuid(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetGuid(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGuid (ordinal As Integer) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Guid GetGuid(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un identificador global único (GUID).</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.Guid> o convertirse a un `Guid`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el objeto pasado DataTableReader. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetGuid#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetGuid/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetGuid#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetGuid/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un identificador GUID.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public override short GetInt16 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int16 GetInt16(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt16 (ordinal As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override short GetInt16(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un entero de 16 bits con signo.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.Int16> o convertirse a un `Int16`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetInt16#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt16/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetInt16#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt16/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un entero de 16 bits con signo.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public override int GetInt32 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetInt32(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt32 (ordinal As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetInt32(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un entero con signo de 32 bits.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.Int32> o convertirse a un `Int32`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetInt32#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt32/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetInt32#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt32/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un valor de entero de 32 bits con signo.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public override long GetInt64 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetInt64(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt64 (ordinal As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetInt64(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como un entero de 64 bits con signo.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se realizan conversiones; por lo tanto, los datos recuperados ya deben ser un <xref:System.Int64> o convertirse a un `Int64`.  
  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna no son del tipo correcto, en el ejemplo se muestra un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetInt64#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt64/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetInt64#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetInt64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene un valor de entero con signo de 64 bits.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override string GetName (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetName(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (ordinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetName(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como objeto <see cref="T:System.String" />.</summary>
        <returns>El nombre de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `GetName` y <xref:System.Data.DataTableReader.GetOrdinal%2A> métodos proporcionan una funcionalidad inversa. Es decir, una llamada a `GetOrdinal` en el valor devuelto de la llamada a `GetName` debe devolver el parámetro original pasado a `GetName`; lo mismo se aplica a los procedimientos de llamada a la inversa.  
  
   
  
## Examples  
 Este sencillo ejemplo incluye un procedimiento que enumera los nombres de todas las columnas dentro de lo especificado `DataTableReader`y la posición ordinal de la columna, en la ventana de consola.  
  
 [!code-csharp[DataWorks DataTableReader.GetName#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetName/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetName#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetName/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrdinal">
      <MemberSignature Language="C#" Value="public override int GetOrdinal (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetOrdinal(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetOrdinal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOrdinal (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetOrdinal(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">El nombre de la columna.</param>
        <summary>Obtiene el índice de columna a partir del nombre de la columna determinado.</summary>
        <returns>Índice de la columna de base cero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la mayoría de los métodos proporcionados por el <xref:System.Data.DataTableReader> clase debe ser siempre con un número ordinal de la columna, puede usar el `GetOrdinal` método para recuperar el número de columna, dado el nombre de la columna.  
  
 `GetOrdinal` realiza una búsqueda de mayúsculas y minúsculas en primer lugar. Si se produce un error, se realiza una segunda búsqueda entre mayúsculas y minúsculas. Si el número de columna no se encuentra un `IndexOutOfRangeException` se produce.  
  
 `GetOrdinal` distingue kana y ancho de minúsculas.  
  
 Dado que las búsquedas basadas en ordinales son más eficaces que las búsquedas con nombre, resulta poco útil llamar a `GetOrdinal` dentro de un bucle. Ahorre tiempo llamando `GetOrdinal` una vez y asignando los resultados a una variable entera para su uso dentro del bucle  
  
   
  
## Examples  
 Si tiene sólo un nombre de columna, en cuyo caso el nombre de columna lo proporciona el usuario y debe recuperar la información de la columna, puede utilizar un procedimiento similar al siguiente para extraer la información necesaria. En este ejemplo, el procedimiento acepta un nombre de columna y devuelve los datos que está dentro de esa columna de la fila actual en el <xref:System.Data.DataTableReader> :  
  
 [!code-csharp[DataWorks DataTableReader.GetOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetOrdinal/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.ArgumentException">El nombre especificado no es un nombre de columna válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProviderSpecificFieldType">
      <MemberSignature Language="C#" Value="public override Type GetProviderSpecificFieldType (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetProviderSpecificFieldType(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProviderSpecificFieldType (ordinal As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetProviderSpecificFieldType(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el tipo de la columna especificada en el formato específico del proveedor.</summary>
        <returns>
          <see cref="T:System.Type" />, que el tipo de datos del objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la <xref:System.Data.DataTableReader> siempre devuelve el tipo almacenado en subyacente <xref:System.Data.DataColumn>, el valor devuelto por una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificFieldType%2A> método siempre devuelve el mismo tipo que el tipo almacenado en el <xref:System.Data.DataTable>. Cuando se trabaja con el <xref:System.Data.DataTableReader> de la clase, una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificFieldType%2A> método devuelve el mismo tipo que llamar al método el <xref:System.Type.GetType%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <altmember cref="M:System.Data.DataTableReader.GetFieldType(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetProviderSpecificValue">
      <MemberSignature Language="C#" Value="public override object GetProviderSpecificValue (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetProviderSpecificValue(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProviderSpecificValue (ordinal As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetProviderSpecificValue(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Número de base cero de la columna cuyo valor se va a recuperar.</param>
        <summary>Obtiene el valor de la columna especificada en el formato específico del proveedor.</summary>
        <returns>Valor de la columna especificada en el formato específico del proveedor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la <xref:System.Data.DataTableReader> siempre devuelve el tipo almacenado en subyacente <xref:System.Data.DataColumn>, el valor devuelto por una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificValue%2A> método siempre devuelve los datos del mismo tipo que los datos almacenados en el <xref:System.Data.DataTable>. Cuando se trabaja con el <xref:System.Data.DataTableReader> de la clase, una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificValue%2A> método devuelve el mismo valor y tipo que llamar al método el <xref:System.Data.DataTableReader.GetValue%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <altmember cref="M:System.Data.DataTableReader.GetValue(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetProviderSpecificValues">
      <MemberSignature Language="C#" Value="public override int GetProviderSpecificValues (object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetProviderSpecificValues(object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProviderSpecificValues (values As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetProviderSpecificValues(cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="values">Matriz de objetos que se va a rellenar con información de tipo para las columnas del objeto <see cref="T:System.Data.DataTableReader" />.</param>
        <summary>Rellena la matriz proporcionada de información de tipo específico del proveedor para todas las columnas del objeto <see cref="T:System.Data.DataTableReader" />.</summary>
        <returns>Número de valores de columna copiados en la matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porque el <xref:System.Data.DataTableReader> siempre devuelve los datos del tipo almacenados en subyacente <xref:System.Data.DataColumn>, los valores devueltos por una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificValues%2A> método siempre es de los mismos tipos que los datos almacenados dentro de la <xref:System.Data.DataTable>. Cuando se trabaja con el <xref:System.Data.DataTableReader> de la clase, una llamada a la <xref:System.Data.DataTableReader.GetProviderSpecificValues%2A> método devuelve los mismos valores y tipos que llamar al método el <xref:System.Data.DataTableReader.GetValues%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <altmember cref="M:System.Data.DataTableReader.GetValues(System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchemaTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchemaTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetSchemaTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchemaTable () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchemaTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un objeto <see cref="T:System.Data.DataTable" /> que describe los metadatos de columna del <see cref="T:System.Data.DataTableReader" />.</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> que describe los metadatos de columna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método GetSchemaTable devuelve los metadatos de cada columna en el orden siguiente:  
  
|Columna de DataReader|Descripción|  
|-----------------------|-----------------|  
|ColumName|El nombre de la columna tal y como aparece en el <xref:System.Data.DataTable>.|  
|ColumnOrdinal|El ordinal de la columna|  
|ColumnSize|-1 si la <xref:System.Data.Common.SchemaTableColumn.ColumnSize> (o <xref:System.Data.DataColumn.MaxLength%2A>) la propiedad de la <xref:System.Data.DataColumn> no se puede determinar o no es relevante; en caso contrario, 0 o un entero positivo que contiene el `MaxLength` valor.|  
|NumericPrecision|Si el tipo de columna es un tipo numérico, esta es la precisión máxima de la columna. Si el tipo de columna no es un tipo de datos numéricos, esto es un valor null.|  
|NumericScale|Si el tipo de datos de columna tiene un componente de escala, devuelve el número de dígitos a la derecha del separador decimal. En caso contrario, devuelve un valor null.|  
|DataType|El tipo subyacente de la columna.|  
|ProviderType|El indicador de tipo de datos de la columna. Si el tipo de datos de la columna varía de una fila a otra, este valor es <xref:System.Object>. Esta columna no puede contener un valor null.|  
|IsLong|`true` Si el tipo de datos de la columna es <xref:System.String> y su <xref:System.Data.DataColumn.MaxLength%2A> propiedad es -1. En caso contrario, es `false`.|  
|AllowDBNull|`true` Si la restricción AllowDbNull se establece en true para la columna; en caso contrario, `false`.|  
|IsReadOnly|`true` Si no se puede modificar la columna; en caso contrario, `false`.|  
|IsRowVersion|`false`, para cada columna.|  
|IsUnique|`true`: No hay dos filas en la <xref:System.Data.DataTable> puede tener el mismo valor en esta columna. `IsUnique` se garantiza que se establezca en true si la columna representa una clave por sí misma o si hay una restricción de tipo UNIQUE que solo se aplica a esta columna. `false`: La columna puede contener valores duplicados en el `DataTable`. El valor predeterminado de esta columna es `false`.|  
|IsKey|`true`: La columna forma parte de un conjunto de columnas que, juntas, identifican de forma exclusiva la fila en la <xref:System.Data.DataTable>. El conjunto de columnas con `IsKey` establecido en `true` debe identificar de forma única una fila en la `DataTable`. No es necesario que este conjunto de columnas es un conjunto mínimo de columnas. Este conjunto de columnas puede generarse a partir un `DataTable` primary key, una restricción unique o un índice único. `false`: La columna no tiene que identificar de forma exclusiva la fila. Este valor es `true` si la columna participa en una clave principal única o compuesta. En caso contrario, su valor es `false`.|  
|Disautoincrement|`true`: La columna asigna valores a las filas nuevas en incrementos fijos. `false`: La columna no asigna valores a las filas nuevas en incrementos fijos. El valor predeterminado de esta columna es `false`.|  
|BaseCatalogName|El nombre del catálogo en el almacén de datos que contiene la columna. `Null` Si no se puede determinar el nombre del catálogo base. El valor predeterminado para esta columna es un `null` valor.|  
|BaseSchemaName|Este valor es siempre `Null`.|  
|BaseTableName|Nombre del objeto <xref:System.Data.DataTable>.|  
|BaseColumnName|El nombre de la columna en la <xref:System.Data.DataTable>.|  
|AutoIncrementSeed|El valor de la <xref:System.Data.DataTable>del <xref:System.Data.DataColumn.AutoIncrementSeed%2A> propiedad.|  
|AutoIncrementStep|El valor de la <xref:System.Data.DataTable>del <xref:System.Data.DataColumn.AutoIncrementStep%2A> propiedad.|  
|DefaultValue|El valor de la <xref:System.Data.DataColumn>del <xref:System.Data.DataColumn.DefaultValue%2A> propiedad.|  
|Expresión|La cadena de expresión, si la columna actual es una columna de expresión y todas las columnas utilizadas en la expresión pertenecen al mismo `T:System.Data.DataTable` que contiene la columna de expresión; en caso contrario `null`.|  
|ColumnMapping|El <xref:System.Data.MappingType> valor asociado a la <xref:System.Data.DataColumn>. El tipo puede ser uno de `Attribute`, `Element`, `Hidden`, o `SimpleContent`. El valor predeterminado es `Element`.|  
|BaseTableNamespace|El valor de la <xref:System.Data.DataTable>del <xref:System.Data.DataTable.Namespace%2A> propiedad.|  
|BaseColumnNamespace|El valor de la <xref:System.Data.DataColumn>del <xref:System.Data.DataColumn.Namespace%2A> propiedad.|  
  
   
  
## Examples  
 El siguiente ejemplo de aplicación de consola recupera información de esquema de la columna especificada. Pasar el `DisplaySchemaTableInfo` procedimiento un <xref:System.Data.DataTableReader> y un entero que representa la posición ordinal de una columna dentro de la `DataTableReader`, y el procedimiento genera información de esquema a la ventana de consola.  
  
 [!code-csharp[DataWorks DataTableReader.GetSchemaTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetSchemaTable/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetSchemaTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetSchemaTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La clase <see cref="T:System.Data.DataTableReader" /> está cerrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (ordinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada como una cadena.</summary>
        <returns>El valor de la columna especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna del tipo correcto, en el ejemplo muestran un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.GetString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <exception cref="T:System.InvalidCastException">La columna especificada no contiene una cadena.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public override object GetValue (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetValue(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetValue (ordinal As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetValue(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada en su formato nativo.</summary>
        <returns>El valor de la columna especificada. Este método devuelve <see langword="DBNull" /> para las columnas null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque se puede llamar a <xref:System.Data.DataTableReader.IsDBNull%2A> para ver si hay valores null antes de llamar a este método, no tiene que hacer esto.  
  
   
  
## Examples  
 En el ejemplo siguiente se recorre en iteración todas las columnas dentro de la fila actual en un <xref:System.Data.DataTableReader>, mostrar el contenido de cada columna y el nombre de columna. Por lo general, si su intención es trabajar con todas las columnas dentro de una fila que ha recuperado por una <xref:System.Data.DataTableReader>, considere el uso de la <xref:System.Data.DataTableReader.GetValues%2A> método en su lugar, porque es más eficaz.  
  
 [!code-csharp[DataWorks DataTableReader.GetValue#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetValue/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetValue/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a columnas en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public override int GetValues (object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetValues(object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.GetValues(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetValues (values As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetValues(cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="values">Matriz de <see cref="T:System.Object" /> en la que se copian los valores de las columnas del objeto <see cref="T:System.Data.DataTableReader" />.</param>
        <summary>Rellena una matriz de objetos con los valores de columna de la fila actual.</summary>
        <returns>Número de valores de columna copiados en la matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para la mayoría de las aplicaciones, este método proporciona un medio eficaz para recuperar todas las columnas, en lugar de recuperar cada columna individualmente. Si su intención es recuperar todos los valores de columna de una fila dentro de la <xref:System.Data.DataTableReader>, el `GetValues` método proporciona la solución más eficaz.  
  
 Puede pasar un <xref:System.Object> matriz que contenga un menor que el número de columnas que se encuentran en la fila resultante. Únicamente la cantidad de datos el `Object` matriz puede contener se copia en la matriz. También puede pasar un `Object` matriz cuya longitud sea mayor que el número de columnas que se incluyen en la fila resultante, en el que caso de los elementos de matriz adicional permanece sin modifica por la llamada al método.  
  
 Este método coloca `DBNull` en la matriz de salida para las columnas null.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar una matriz que es el tamaño correcto para leer todos los valores de la fila actual en el proporcionado <xref:System.Data.DataTableReader>. Además, el ejemplo muestra cómo utilizar una matriz de tamaño fijo que puede ser menor o mayor que el número de columnas disponibles.  
  
 [!code-csharp[DataWorks DataTableReader.GetValueObject#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetValueObject/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.GetValueObject#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.GetValueObject/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasRows">
      <MemberSignature Language="C#" Value="public override bool HasRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRows" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.HasRows" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasRows { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si <see cref="T:System.Data.DataTableReader" /> contiene una o varias filas.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Data.DataTableReader" /> contiene una o varias filas; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `HasRows` propiedad devuelve información sobre el conjunto de resultados actual. Si el <xref:System.Data.DataTableReader> contiene resultados múltiples conjuntos, puede examinar el valor de la `HasRows` propiedad inmediatamente después de llamar a la <xref:System.Data.DataTableReader.NextResult%2A> método con el fin de determinar si el nuevo conjunto de resultados contiene filas.  
  
 Use la `HasRows` propiedad para evitar la necesidad de llamar a la <xref:System.Data.DataTableReader.Read%2A> método de la <xref:System.Data.DataTableReader> si no hay ninguna fila en el conjunto de resultados actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se rellena dos <xref:System.Data.DataTable> instancias con datos. La primera <xref:System.Data.DataTable> contiene una fila, y el segundo no contiene ninguna fila. El ejemplo crea un <xref:System.Data.DataTableReader> que contiene las <xref:System.Data.DataTable> objetos y llama al método PrintData para mostrar el contenido de cada uno de ellos, comprobando el valor de la <xref:System.Data.DataTableReader.HasRows%2A> propiedad de cada uno de ellos antes de efectuar la llamada a PrintData.  
  
 [!code-csharp[DataWorks DataTableReader.HasRows#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.HasRows/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.HasRows#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.HasRows/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado recuperar información sobre un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
        <altmember cref="M:System.Data.DataTableReader.NextResult" />
        <altmember cref="M:System.Data.DataTableReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public override bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Data.DataTableReader" /> está cerrado.</summary>
        <value>
          <see langword="true" /> si el objeto <see cref="T:System.Data.DataTableReader" /> está cerrado; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTableReader.Close%2A> es el único método y `IsClosed` y <xref:System.Data.DataTableReader.RecordsAffected%2A> son las únicas propiedades que pueden obtenerse tras la <xref:System.Data.DataTableReader> se ha cerrado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public override bool IsDBNull (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDBNull(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.IsDBNull(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDBNull (ordinal As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDBNull(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene un valor que indica si la columna contiene valores no existentes o que faltan.</summary>
        <returns>
          <see langword="true" /> si el valor de la columna especificada equivale a <see cref="T:System.DBNull" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método para ver si hay valores de columna null antes de llamar a los métodos get con tipo (por ejemplo, <xref:System.Data.DataTableReader.GetByte%2A>, <xref:System.Data.DataTableReader.GetChar%2A>, etc.) para evitar que se genere un error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de la columna numerados de 2 en el pasado <xref:System.Data.DataTableReader>. Si el valor de la columna dentro de una fila determinada es null, el código muestra el texto \<NULL >. Si los datos dentro de la columna del tipo correcto, en el ejemplo muestran un mensaje de error para cada fila.  
  
 [!code-csharp[DataWorks DataTableReader.IsDbNull#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.IsDbNull/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.IsDbNull#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.IsDbNull/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el valor de la columna especificada en su formato nativo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[int ordinal] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(ordinal As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int ordinal); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Índice de la columna de base cero.</param>
        <summary>Obtiene el valor de la columna especificada en su formato nativo si se da el índice de columna.</summary>
        <value>Valor de la columna especificada en su formato nativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga para <xref:System.Data.DataTableReader.Item%2A> se comporta igual que el <xref:System.Data.DataTableReader.GetValue%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el contenido de todas las columnas, en todas las filas desde suministrado <xref:System.Data.DataTableReader>. El código usa el <xref:System.Data.DataTableReader.Item%2A> método (el indizador en Microsoft C#) para recuperar el valor que se encuentra en cada columna.  
  
 [!code-csharp[DataWorks DataTableReader.Item#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.Item/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.Item#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.Item/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">El índice que se ha pasado se encontraba fuera del intervalo entre 0 y <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1.</exception>
        <altmember cref="M:System.Data.DataTableReader.GetValue(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">El nombre de la columna.</param>
        <summary>Obtiene el valor de la columna especificada en su formato nativo si se da el nombre de la columna.</summary>
        <value>Valor de la columna especificada en su formato nativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Primero se realiza una búsqueda de mayúsculas y minúsculas. Si se produce un error, se realiza una segunda búsqueda entre mayúsculas y minúsculas.  
  
 Este método no distingue el kana y ancho.  
  
 Esta versión sobrecargada de <xref:System.Data.DataTableReader.Item%2A> corresponde a una llamada a la <xref:System.Data.DataTableReader.GetOrdinal%2A> método y, a continuación, llamar en consecuencia el <xref:System.Data.DataTableReader.GetValue%2A> método.  
  
   
  
## Examples  
 Dado un <xref:System.Data.DataTableReader> y un nombre de columna, el procedimiento GetValueByName devuelve el valor de la columna especificada. Antes de llamar a este procedimiento, debe crear un nuevo <xref:System.Data.DataTableReader> instancia y llamar a su método Read al menos una vez para colocar el puntero de fila en una fila de datos.  
  
 [!code-csharp[DataWorks DataTableReader.ItemName#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.ItemName/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.ItemName#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.ItemName/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El nombre especificado no es un nombre de columna válido.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Se ha intentado recuperar los datos de una fila eliminada.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="NextResult">
      <MemberSignature Language="C#" Value="public override bool NextResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool NextResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.NextResult" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function NextResult () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool NextResult();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avanza el objeto <see cref="T:System.Data.DataTableReader" /> al conjunto de resultados siguiente, si hay alguno.</summary>
        <returns>
          <see langword="true" /> si hay otro conjunto de resultados; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utiliza para procesar varios resultados que se pueden generar mediante la creación de un <xref:System.Data.DataTableReader> sobre un <xref:System.Data.DataSet> que contiene dos o más tablas, o una matriz que contiene dos o más <xref:System.Data.DataTable> instancias.  
  
 Un nuevo <xref:System.Data.DataTableReader> se coloca en el primer resultado.  
  
   
  
## Examples  
 En el ejemplo siguiente, el método TestConstructor crea dos <xref:System.Data.DataTable> instancias. Para mostrar este constructor para la <xref:System.Data.DataTableReader> (clase), el ejemplo se crea un nuevo `DataTableReader` basado en una matriz que contiene las dos `DataTables`y realiza una operación sencilla, imprime el contenido de las primeras columnas en la consola ventana. Para probar esta aplicación, cree una nueva aplicación de consola y pegue el código de ejemplo en el archivo recién creado.  
  
 [!code-csharp[DataWorks DataTableReader.NextResult#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.NextResult/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.NextResult#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.NextResult/VB/source.vb#1)]  
  
 La ventana de consola muestra el siguiente resultado:  
  
```  
1 Mary  
2 Andy  
3 Peter  
4 Russ  
1 Wireless Network Card  
2 Hard Drive  
3 Monitor  
4 CPU  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado navegar en un objeto <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desplaza <see cref="T:System.Data.DataTableReader" /> al siguiente registro.</summary>
        <returns>
          <see langword="true" /> si hay alguna otra fila que leer; de lo contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La posición predeterminada de la <xref:System.Data.DataTableReader> es delante del primer registro. Por lo tanto, debe llamar a `Read` para iniciar el acceso a los datos.  
  
   
  
## Examples  
 El procedimiento PrintColumns recorre en bucle todas las filas de la <xref:System.Data.DataTableReader>, mostrar el contenido de cada columna en la ventana de consola.  
  
 [!code-csharp[DataWorks DataTableReader.Read#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableReader.Read/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableReader.Read#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableReader.Read/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha intentado la lectura o el acceso a una columna en un elemento <see cref="T:System.Data.DataTableReader" /> cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="RecordsAffected">
      <MemberSignature Language="C#" Value="public override int RecordsAffected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecordsAffected" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTableReader.RecordsAffected" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property RecordsAffected As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int RecordsAffected { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de filas insertadas, modificadas o eliminadas al ejecutar la instrucción SQL.</summary>
        <value>Siempre 0 porque el objeto <see cref="T:System.Data.DataTableReader" /> no admite esta propiedad.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>