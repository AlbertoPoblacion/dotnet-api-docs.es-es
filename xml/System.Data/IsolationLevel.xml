<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fcf9de84f8217ebb2ca027402a2cd2578d3bcafc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="bc6c2-101">Especifica el comportamiento de bloqueo de transacción para la conexión.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bc6c2-101">Specifies the transaction locking behavior for the connection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc6c2-102">El <xref:System.Data.IsolationLevel> valores se utilizan en un proveedor de datos de .NET Framework al realizar una transacción.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-102">The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.</span></span>  
  
 <span data-ttu-id="bc6c2-103">El <xref:System.Data.IsolationLevel> cambiado permanece en vigor hasta que explícitamente, pero se puede cambiar en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-103">The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="bc6c2-104">El nuevo valor se utiliza en tiempo de ejecución, no en tiempo de análisis.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="bc6c2-105">Si ha cambiado durante una transacción, el comportamiento esperado del servidor es el nuevo nivel de bloqueo se aplican a todas las instrucciones restantes.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bc6c2-106">Esta aplicación muestra cómo usar <xref:System.Data.IsolationLevel> en <xref:System.Data.Common.DbTransaction>.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-106">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="bc6c2-107">El ejemplo demuestra cuál de los siguientes comportamientos se permiten en los distintos niveles de aislamiento:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-107">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="bc6c2-108">Las lecturas no actualizadas.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-108">Dirty reads.</span></span>  
  
-   <span data-ttu-id="bc6c2-109">Lecturas no repetibles.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-109">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="bc6c2-110">Fantasmas.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-110">Phantoms.</span></span>  
  
 <span data-ttu-id="bc6c2-111">Esta aplicación se ejecutará en los siguientes niveles de aislamiento:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-111">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="bc6c2-112">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="bc6c2-112">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="bc6c2-113">ReadCommitted</span><span class="sxs-lookup"><span data-stu-id="bc6c2-113">ReadCommitted</span></span>  
  
-   <span data-ttu-id="bc6c2-114">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="bc6c2-114">RepeatableRead</span></span>  
  
-   <span data-ttu-id="bc6c2-115">Serializable</span><span class="sxs-lookup"><span data-stu-id="bc6c2-115">Serializable</span></span>  
  
-   <span data-ttu-id="bc6c2-116">Depurador de</span><span class="sxs-lookup"><span data-stu-id="bc6c2-116">Snapshot</span></span>  
  
 <span data-ttu-id="bc6c2-117">La clase PhantomReadThreads muestra si la transacción concreta permite que el comportamiento de lectura fantasma.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-117">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="bc6c2-118">Si la transacción permite el comportamiento, los subprocesos funcionará en el orden siguiente:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-118">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="bc6c2-119">En el primer subproceso, seleccione la products(All).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-119">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="bc6c2-120">En el segundo subproceso, inserte un nuevo producto.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-120">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="bc6c2-121">Confirme la transacción en el segundo subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-121">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="bc6c2-122">Vuelva a seleccionar los productos.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-122">Select the products again.</span></span>  
  
-   <span data-ttu-id="bc6c2-123">Confirme la transacción en el primer subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-123">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="bc6c2-124">Si la transacción permite el comportamiento, las dos operaciones Select obtendrá los resultados diferentes.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-124">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="bc6c2-125">La clase NonrepeatableReadThreads muestra si la transacción concreta permite que el comportamiento de lectura irrepetible.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-125">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="bc6c2-126">Si la transacción permite el comportamiento, los subprocesos funcionará en el orden siguiente:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-126">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="bc6c2-127">En el primer subproceso, seleccione la product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-127">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="bc6c2-128">En el segundo subproceso, actualice la cantidad value(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-128">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="bc6c2-129">Confirme la transacción en el segundo subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-129">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="bc6c2-130">Vuelva a activar el producto.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-130">Select the product again.</span></span>  
  
-   <span data-ttu-id="bc6c2-131">Confirme la transacción en el primer subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-131">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="bc6c2-132">Si la transacción permite el comportamiento, las dos operaciones Select obtendrá los resultados diferentes.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-132">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="bc6c2-133">La clase ExchangeValuesThreads demuestra la diferencia entre la transacción Serializable y la instantánea.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-133">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="bc6c2-134">Para la transacción Serializable, los subprocesos se aplicarán en el orden siguiente:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-134">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="bc6c2-135">En el primer subproceso, obtener el precio de product(ProductId=2) y almacén en la variable.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-135">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="bc6c2-136">En el primer subproceso, actualice el precio de product(ProductId=1) con el precio de product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-136">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="bc6c2-137">Confirme la transacción en el primer subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-137">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="bc6c2-138">En el segundo subproceso, obtener el precio de product(ProductId=1) y almacén en la variable.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-138">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="bc6c2-139">En el segundo subproceso, actualice el precio de product(ProductId=2) con el precio de product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-139">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="bc6c2-140">Confirme la transacción en el segundo subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-140">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="bc6c2-141">Ahora los valores del precio de (ProductId = 1 y ProductId = 2) son el mismo que el precio de Product(ProductId=2) original.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-141">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="bc6c2-142">Para la transacción de instantánea, los subprocesos se aplicarán en el orden siguiente:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-142">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="bc6c2-143">En el primer subproceso, obtener el precio de product(ProductId=2) y almacén en la variable;</span><span class="sxs-lookup"><span data-stu-id="bc6c2-143">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="bc6c2-144">En el primer subproceso, actualice el precio de product(ProductId=1) con el precio de product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-144">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="bc6c2-145">En el segundo subproceso, obtener el precio de product(ProductId=1) desde la instantánea y almacenar en la variable.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-145">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="bc6c2-146">En el segundo subproceso, actualice el precio de product(ProductId=2) con el precio de product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-146">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="bc6c2-147">Confirme la transacción en el segundo subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-147">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="bc6c2-148">Confirme la transacción en el primer subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-148">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="bc6c2-149">Ahora el precio de productos de exchange (ProductId = 1 y ProductId = 2).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-149">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="bc6c2-150">La clase DirtyReadThreads muestra si la transacción concreta permite que el comportamiento de lectura de datos sucios.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-150">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="bc6c2-151">Si la transacción permite el comportamiento, los subprocesos funcionará en el orden siguiente:</span><span class="sxs-lookup"><span data-stu-id="bc6c2-151">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="bc6c2-152">En el primer subproceso, iniciar una transacción y agregue el value(ProductId=1) Quantity.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-152">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="bc6c2-153">En el segundo subproceso, leer el valor de cantidad y agregar el valor nuevo.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-153">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="bc6c2-154">Confirme la transacción en el segundo subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-154">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="bc6c2-155">Revertir la transacción en el primer subproceso.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-155">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="bc6c2-156">Si la transacción permite el comportamiento, el valor de cantidad se agregará dos veces.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-156">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="bc6c2-157">Proyectos de C# y Visual Basic con este ejemplo de código se pueden encontrar en [muestras para desarrolladores de código](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span><span class="sxs-lookup"><span data-stu-id="bc6c2-157">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-158">Los cambios pendientes de las transacciones más aisladas no se pueden sobrescribir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-158">The pending changes from more highly isolated transactions cannot be overwritten.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-159">Los bloqueos compartidos se mantienen mientras se están leyendo los datos para evitar lecturas erróneas. Sin embargo, es posible cambiar los datos antes del fin de la transacción, lo que provoca lecturas no repetibles o datos fantasma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-159">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-160">Se pueden producir lecturas erróneas, lo que implica que no se emitan bloqueos compartidos y que no se cumplan los bloqueos exclusivos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-160">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-161">Los bloqueos se realizan sobre todos los datos usados en una consulta para evitar que otros usuarios actualicen dichos datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-161">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span>
          </span>
          <span data-ttu-id="bc6c2-162">Esto evita las lecturas no repetibles pero sigue existiendo la posibilidad de que se produzcan filas fantasma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-162">Prevents non-repeatable reads but phantom rows are still possible.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-163">Se realiza un bloqueo de intervalo en <see cref="T:System.Data.DataSet" />, lo que impide que otros usuarios actualicen o inserten filas en el conjunto de datos hasta que la transacción haya terminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-163">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-164">Reduce el bloqueo almacenando una versión de los datos que una aplicación puede leer mientras otra los está modificando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-164">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span>
          </span>
          <span data-ttu-id="bc6c2-165">Indica que de una transacción no se pueden ver los cambios realizados en otras transacciones, aunque se vuelva a realizar una consulta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-165">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="bc6c2-166">Se utiliza un nivel de aislamiento distinto al especificado, pero no se puede determinar el nivel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc6c2-166">A different isolation level than the one specified is being used, but the level cannot be determined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc6c2-167">Cuando se usa <xref:System.Data.Odbc.OdbcTransaction>, si no establece <xref:System.Data.IsolationLevel> o establecer <xref:System.Data.IsolationLevel> a `Unspecified`, la transacción se ejecuta según el nivel de aislamiento que viene determinado por el controlador que se está usando.</span><span class="sxs-lookup"><span data-stu-id="bc6c2-167">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>