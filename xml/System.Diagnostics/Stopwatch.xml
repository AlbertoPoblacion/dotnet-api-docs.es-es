<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7eed23eed830d885974c2c49ca7497e4f2db1423" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39885003" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un conjunto de métodos y propiedades que puede usar para medir el tiempo transcurrido con precisión.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instancia puede medir el tiempo transcurrido para un intervalo o el total de tiempo transcurrido entre varios intervalos. En una típica <xref:System.Diagnostics.Stopwatch> escenario, se llama a la <xref:System.Diagnostics.Stopwatch.Start%2A> método, a continuación, finalmente, llamar el <xref:System.Diagnostics.Stopwatch.Stop%2A> método y, a continuación, compruebe el tiempo transcurrido mediante el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propiedad.  
  
 Un <xref:System.Diagnostics.Stopwatch> instancia está en ejecución o detenido; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> para determinar el estado actual de un <xref:System.Diagnostics.Stopwatch>. Usar <xref:System.Diagnostics.Stopwatch.Start%2A> para empezar a medir el tiempo transcurrido; use <xref:System.Diagnostics.Stopwatch.Stop%2A> para detener la medición de tiempo transcurrido. Consultar el valor de tiempo transcurrido mediante las propiedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, o <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Puede consultar las propiedades de tiempo transcurrido mientras la instancia está en ejecución o detenido. Mientras que el tiempo transcurrido propiedades debiera aumentar paulatinamente el <xref:System.Diagnostics.Stopwatch> está ejecutando; permanecen constantes cuando se detiene la instancia.  
  
 De forma predeterminada, el valor de tiempo transcurrido de una <xref:System.Diagnostics.Stopwatch> instancia es igual que el total de todos los intervalos de tiempo medido. Cada llamada a <xref:System.Diagnostics.Stopwatch.Start%2A> empieza el recuento en el tiempo transcurrido acumulado; cada llamada a <xref:System.Diagnostics.Stopwatch.Stop%2A> finaliza la medición del intervalo actual y se bloquea el valor de tiempo transcurrido acumulado. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método para borrar el tiempo transcurrido acumulado en una existente <xref:System.Diagnostics.Stopwatch> instancia.  
  
 El <xref:System.Diagnostics.Stopwatch> mide el tiempo transcurrido por el recuento de tics de temporizador en el mecanismo de temporización subyacente. Si el sistema operativo y hardware instalado admiten un contador de rendimiento de alta resolución, el <xref:System.Diagnostics.Stopwatch> clase utiliza ese contador para medir el tiempo transcurrido. En caso contrario, el <xref:System.Diagnostics.Stopwatch> clase usa el temporizador del sistema para medir el tiempo transcurrido. Use la <xref:System.Diagnostics.Stopwatch.Frequency> y <xref:System.Diagnostics.Stopwatch.IsHighResolution> campos para determinar la precisión y la resolución de la <xref:System.Diagnostics.Stopwatch> implementación del control de tiempo.  
  
 La <xref:System.Diagnostics.Stopwatch> clase ayuda a la manipulación de los contadores de rendimiento relacionados con el control de tiempo dentro del código administrado. En concreto, el <xref:System.Diagnostics.Stopwatch.Frequency> campo y <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> método puede usarse en lugar de las API de Win32 no administrada `QueryPerformanceFrequency` y `QueryPerformanceCounter`.  
  
> [!NOTE]
>  En un equipo con varios procesadores, no importa qué procesador se ejecuta el subproceso en. Sin embargo, debido a errores en el BIOS o la capa de abstracción de Hardware (HAL), puede obtener resultados diferentes de control de tiempo en procesadores diferentes. Para especificar la afinidad del procesador para un subproceso, use el <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.Diagnostics.Stopwatch> clase para determinar el tiempo de ejecución para una aplicación.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 En el ejemplo siguiente se muestra el uso de la <xref:System.Diagnostics.Stopwatch> clase para calcular los datos de rendimiento.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto <xref:System.Diagnostics.Stopwatch> se detiene la instancia y la propiedad de tiempo transcurrido de la instancia es cero.  
  
 Use la <xref:System.Diagnostics.Stopwatch.Start%2A> que comience a medir el tiempo transcurrido con el nuevo método <xref:System.Diagnostics.Stopwatch> instancia. Use la <xref:System.Diagnostics.Stopwatch.StartNew%2A> método para inicializar un nuevo <xref:System.Diagnostics.Stopwatch> instancia e inícielo inmediatamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa un <xref:System.Diagnostics.Stopwatch> instancia mediante un constructor de clase simple.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tiempo total transcurrido medido por la instancia actual.</summary>
        <value>
          <see cref="T:System.TimeSpan" /> de solo lectura que representa el tiempo total transcurrido medido por la instancia actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una típica <xref:System.Diagnostics.Stopwatch> escenario, se llama a la <xref:System.Diagnostics.Stopwatch.Start%2A> método, a continuación, finalmente, llamar el <xref:System.Diagnostics.Stopwatch.Stop%2A> método y, a continuación, compruebe el tiempo transcurrido mediante el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propiedad.  
  
 Use la <xref:System.Diagnostics.Stopwatch.Elapsed%2A> utilizando el valor de propiedad para recuperar el tiempo transcurrido <xref:System.TimeSpan> métodos y propiedades. Por ejemplo, puede dar formato devuelto <xref:System.TimeSpan> de instancia en una representación de texto, o se pasa a otra clase que requiera un <xref:System.TimeSpan> parámetro.  
  
 Puede consultar las propiedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, y <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> mientras el <xref:System.Diagnostics.Stopwatch> instancia está en ejecución o detenido. Mientras que el tiempo transcurrido propiedades debiera aumentar paulatinamente el <xref:System.Diagnostics.Stopwatch> está ejecutando; permanecen constantes cuando se detiene la instancia.  
  
 De forma predeterminada, el valor de tiempo transcurrido de una <xref:System.Diagnostics.Stopwatch> instancia es igual que el total de todos los intervalos de tiempo medido. Cada llamada a <xref:System.Diagnostics.Stopwatch.Start%2A> empieza el recuento en el tiempo transcurrido acumulado; cada llamada a <xref:System.Diagnostics.Stopwatch.Stop%2A> finaliza la medición del intervalo actual y se bloquea el valor de tiempo transcurrido acumulado. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método para borrar el tiempo transcurrido acumulado en una existente <xref:System.Diagnostics.Stopwatch> instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propiedad para determinar el tiempo de ejecución para una aplicación.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en milisegundos.</summary>
        <value>Entero largo de solo lectura que representa el número total de milisegundos medido por la instancia actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad representa el tiempo transcurrido redondeado hacia abajo hasta el valor de milisegundo entero más cercano. Para medir la precisión mayor, utilice el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> o <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> propiedades.  
  
 Puede consultar las propiedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, y <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> mientras el <xref:System.Diagnostics.Stopwatch> instancia está en ejecución o detenido. Mientras que el tiempo transcurrido propiedades debiera aumentar paulatinamente el <xref:System.Diagnostics.Stopwatch> está ejecutando; permanecen constantes cuando se detiene la instancia.  
  
 De forma predeterminada, el valor de tiempo transcurrido de una <xref:System.Diagnostics.Stopwatch> instancia es igual que el total de todos los intervalos de tiempo medido. Cada llamada a <xref:System.Diagnostics.Stopwatch.Start%2A> empieza el recuento en el tiempo transcurrido acumulado; cada llamada a <xref:System.Diagnostics.Stopwatch.Stop%2A> finaliza la medición del intervalo actual y se bloquea el valor de tiempo transcurrido acumulado. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método para borrar el tiempo transcurrido acumulado en una existente <xref:System.Diagnostics.Stopwatch> instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Diagnostics.Stopwatch> clase para medir el rendimiento de cuatro implementaciones diferentes para analizar un entero de una cadena. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.Stopwatch> clase.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en tics de temporizador.</summary>
        <value>Un entero largo de solo lectura que representa el número total de tics de temporizador medido por la instancia actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad representa el número de pasos transcurridos en el mecanismo de temporización subyacente. Un TIC es la unidad más pequeña de tiempo que el <xref:System.Diagnostics.Stopwatch> temporizador puede medir. Use la <xref:System.Diagnostics.Stopwatch.Frequency> campo para convertir el <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valor en un número de segundos.  
  
 Puede consultar las propiedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, y <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> mientras el <xref:System.Diagnostics.Stopwatch> instancia está en ejecución o detenido. Mientras que el tiempo transcurrido propiedades debiera aumentar paulatinamente el <xref:System.Diagnostics.Stopwatch> está ejecutando; permanecen constantes cuando se detiene la instancia.  
  
 De forma predeterminada, el valor de tiempo transcurrido de una <xref:System.Diagnostics.Stopwatch> instancia es igual que el total de todos los intervalos de tiempo medido. Cada llamada a <xref:System.Diagnostics.Stopwatch.Start%2A> empieza el recuento en el tiempo transcurrido acumulado; cada llamada a <xref:System.Diagnostics.Stopwatch.Stop%2A> finaliza la medición del intervalo actual y se bloquea el valor de tiempo transcurrido acumulado. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método para borrar el tiempo transcurrido acumulado en una existente <xref:System.Diagnostics.Stopwatch> instancia.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> pasos son diferentes de <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Cada paso en el <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> valor representa un intervalo de 100 nanosegundos. Cada paso en el <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valor representa el intervalo de tiempo igual a 1 segundo dividido por el <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Diagnostics.Stopwatch> clase para medir el rendimiento de cuatro implementaciones diferentes para analizar un entero de una cadena. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.Stopwatch> clase.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la frecuencia del temporizador en forma de número de tics por segundo. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La frecuencia del temporizador indica la precisión del temporizador y la resolución. Por ejemplo, una frecuencia del temporizador de 2 millones de tics por segundo es igual a una resolución de temporizador de 500 nanosegundos por paso. En otras palabras, dado un segundo es igual a 1 millones de nanosegundos, una frecuencia del temporizador de 2 millones de ciclos por segundo es equivalente a los pasos de 2 millones por 1 millones de nanosegundos, que se pueden simplificar aún más 1 TIC por 500 nanosegundos.  
  
 El <xref:System.Diagnostics.Stopwatch.Frequency> valor depende de la resolución del mecanismo de temporización subyacente. Si el sistema operativo y hardware instalado admiten un contador de rendimiento de alta resolución, el <xref:System.Diagnostics.Stopwatch.Frequency> valor refleja la frecuencia de ese contador. En caso contrario, el <xref:System.Diagnostics.Stopwatch.Frequency> valor se basa en la frecuencia del temporizador del sistema.  
  
 Dado que el <xref:System.Diagnostics.Stopwatch> frecuencia depende del hardware instalado y el sistema operativo, la <xref:System.Diagnostics.Stopwatch.Frequency> valor permanece constante mientras se está ejecutando el sistema.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la frecuencia y la resolución de un <xref:System.Diagnostics.Stopwatch> temporizador. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.Stopwatch> clase.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el número actual de tics del mecanismo de temporización.</summary>
        <returns>Entero largo que representa el valor del contador de tics del mecanismo de temporización subyacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Diagnostics.Stopwatch> clase utiliza un contador de rendimiento de alta resolución, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> devuelve el valor actual de ese contador. Si el <xref:System.Diagnostics.Stopwatch> clase usa el temporizador del sistema, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> devuelve el valor actual <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> propiedad de la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> instancia.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de la <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> método para actualizar un contador de rendimiento.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si el temporizador se basa en un contador de rendimiento de alta resolución. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El temporizador usado por el <xref:System.Diagnostics.Stopwatch> clase depende del hardware del sistema y el sistema operativo. <xref:System.Diagnostics.Stopwatch.IsHighResolution> es `true` si el <xref:System.Diagnostics.Stopwatch> temporizador se basa en un contador de rendimiento de alta resolución. En caso contrario, <xref:System.Diagnostics.Stopwatch.IsHighResolution> es `false`, lo que indica que el <xref:System.Diagnostics.Stopwatch> temporizador se basa en el temporizador del sistema.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la frecuencia y la resolución de un <xref:System.Diagnostics.Stopwatch> temporizador. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.Stopwatch> clase.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el temporizador <see cref="T:System.Diagnostics.Stopwatch" /> está en funcionamiento.</summary>
        <value>Es <see langword="true" /> si la instancia de <see cref="T:System.Diagnostics.Stopwatch" /> se está ejecutando actualmente y está midiendo el tiempo transcurrido para un intervalo; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instancia empieza a ejecutarse con una llamada a <xref:System.Diagnostics.Stopwatch.Start%2A> o <xref:System.Diagnostics.Stopwatch.StartNew%2A>. Los delimitadores de la instancia se ejecuta con una llamada a <xref:System.Diagnostics.Stopwatch.Stop%2A> o <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detiene la medición del intervalo de tiempo y restablece el tiempo transcurrido en cero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instancia calcula y conserva el tiempo transcurrido acumulado entre varios intervalos de tiempo, hasta que se restablezca la instancia. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> para detener la medición del intervalo actual y conservar el valor de tiempo transcurrido acumulado. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> detener cualquier medición del intervalo en curso y borrar el valor de tiempo transcurrido.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detiene la medición del intervalo de tiempo, restablece el tiempo transcurrido en cero y comienza a medir el tiempo transcurrido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instancia calcula y conserva el tiempo transcurrido acumulado entre varios intervalos de tiempo, hasta que se restablezca o se reinicie la instancia. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> para detener la medición del intervalo actual y conservar el valor de tiempo transcurrido acumulado. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> detener cualquier medición del intervalo en curso y borrar el valor de tiempo transcurrido. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> para detener la medición del intervalo actual e iniciar una nueva medición del intervalo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia o reanuda la medición del tiempo transcurrido para un intervalo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una típica <xref:System.Diagnostics.Stopwatch> escenario, se llama a la <xref:System.Diagnostics.Stopwatch.Start%2A> método, a continuación, finalmente, llamar el <xref:System.Diagnostics.Stopwatch.Stop%2A> método y, a continuación, compruebe el tiempo transcurrido mediante el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propiedad.  
  
 Una vez iniciado, un <xref:System.Diagnostics.Stopwatch> temporizador mide el intervalo actual, en tics de temporizador transcurrido, hasta que se detenga o se restablezca la instancia. A partir un <xref:System.Diagnostics.Stopwatch> que es ya está ejecutando no cambia el estado del temporizador ni restablecer las propiedades de tiempo transcurrido.  
  
 Cuando un <xref:System.Diagnostics.Stopwatch> instancia mide más de un intervalo, el <xref:System.Diagnostics.Stopwatch.Start%2A> método reanuda la medición de tiempo a partir del valor de tiempo transcurrido actual. Un <xref:System.Diagnostics.Stopwatch> instancia calcula y conserva el tiempo transcurrido acumulado entre varios intervalos de tiempo, hasta que se restablezca la instancia. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método antes de llamar a <xref:System.Diagnostics.Stopwatch.Start%2A> para borrar el tiempo transcurrido acumulado en un <xref:System.Diagnostics.Stopwatch> instancia. Use la <xref:System.Diagnostics.Stopwatch.Restart%2A> método <xref:System.Diagnostics.Stopwatch.Reset%2A> y <xref:System.Diagnostics.Stopwatch.Start%2A> el <xref:System.Diagnostics.Stopwatch> con un solo comando.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.Diagnostics.Stopwatch.Start%2A> método para iniciar un temporizador que mide el tiempo de ejecución de una aplicación.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de <see cref="T:System.Diagnostics.Stopwatch" />, establece la propiedad de tiempo transcurrido en cero e inicia la medición de tiempo transcurrido.</summary>
        <returns>
          <see cref="T:System.Diagnostics.Stopwatch" /> que acaba de iniciar la medición de tiempo transcurrido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es equivalente a llamar a la <xref:System.Diagnostics.Stopwatch> constructor y, a continuación, llamar a <xref:System.Diagnostics.Stopwatch.Start%2A> en la nueva instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Diagnostics.Stopwatch> clase para medir el rendimiento de cuatro implementaciones diferentes para analizar un entero de una cadena. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.Stopwatch> clase.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detiene la medición del tiempo transcurrido para un intervalo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una típica <xref:System.Diagnostics.Stopwatch> escenario, se llama a la <xref:System.Diagnostics.Stopwatch.Start%2A> método, a continuación, finalmente, llamar el <xref:System.Diagnostics.Stopwatch.Stop%2A> método y, a continuación, compruebe el tiempo transcurrido mediante el <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propiedad.  
  
 El <xref:System.Diagnostics.Stopwatch.Stop%2A> método termina la medición del intervalo de tiempo actual. Detener un <xref:System.Diagnostics.Stopwatch> decir no se está ejecutando no cambia el estado del temporizador ni restablecer las propiedades de tiempo transcurrido.  
  
 Cuando un <xref:System.Diagnostics.Stopwatch> instancia mide más de un intervalo, el <xref:System.Diagnostics.Stopwatch.Stop%2A> método es equivalente a poner en pausa la medición de tiempo transcurrido. Una llamada subsiguiente a <xref:System.Diagnostics.Stopwatch.Start%2A> reanuda la medición de tiempo desde el valor de tiempo transcurrido actual. Use la <xref:System.Diagnostics.Stopwatch.Reset%2A> método para borrar el tiempo transcurrido acumulado en un <xref:System.Diagnostics.Stopwatch> instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.Diagnostics.Stopwatch.Stop%2A> método para detener un temporizador que mide el tiempo de ejecución de una aplicación.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>