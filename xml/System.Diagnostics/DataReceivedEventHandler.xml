<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9aec193d2b0b192d148a96593d5203aef2cf07f3" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37664387" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Origen del evento.</param>
    <param name="e">Objeto <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> que contiene los datos del evento.</param>
    <summary>Representa el método que controlará los eventos <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> o <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> de un <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea un delegado <xref:System.Diagnostics.DataReceivedEventHandler>, se identifica el método que controlará el evento. Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento. Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado. Para obtener más información sobre los delegados de controlador de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 Para recopilar de forma asincrónica el redirigida <xref:System.Diagnostics.Process.StandardOutput%2A> o <xref:System.Diagnostics.Process.StandardError%2A> flujo de salida de un proceso, agregue el controlador de eventos para el <xref:System.Diagnostics.Process.OutputDataReceived> o <xref:System.Diagnostics.Process.ErrorDataReceived> eventos. Estos eventos se generan cada vez que el proceso escribe una línea en la secuencia redirigida correspondiente. Cuando se cierra la secuencia redirigida, se envía una línea null al controlador de eventos. Asegúrese de que el controlador de eventos comprueba esta condición antes de acceder a la <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propiedad. Por ejemplo, puede usar el `static` método <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> para validar el <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propiedad en el controlador de eventos.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo realizar operaciones de lectura asincrónicas en la redirigida <xref:System.Diagnostics.Process.StandardOutput%2A> secuencia de la **ordenación** comando. El **ordenación** comando es una aplicación de consola que lee y ordena la entrada de texto.  
  
 El ejemplo se crea un <xref:System.Diagnostics.DataReceivedEventHandler> delegar para el `SortOutputHandler` controlador de eventos y asocia el delegado con el <xref:System.Diagnostics.Process.OutputDataReceived> eventos. El controlador de eventos recibe líneas de texto de la redirigida <xref:System.Diagnostics.Process.StandardOutput%2A> stream, da formato al texto y escribe el texto en la pantalla.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>