<Type Name="DelimitedListTraceListener" FullName="System.Diagnostics.DelimitedListTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17e2db2c18e9e7baecb3ec26501858e26dfe8999" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061636" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DelimitedListTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DelimitedListTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DelimitedListTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DelimitedListTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DelimitedListTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige los resultados de traza o de depuración a un escritor de texto, como un escritor de secuencias, o a una secuencia, como una secuencia de archivo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El resultado del seguimiento está en un formato de texto delimitado que utiliza el delimitador especificado por la propiedad <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A>. El delimitador se usa para finalizar cada campo en una línea de salida. Por ejemplo, para mostrar lo resultados de seguimiento en una hoja de cálculo de Microsoft Excel, puede especificar una coma (",") como delimitador y cree un archivo de valores separados por comas (CSV).  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un`try` / `catch` bloque. Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 Puede habilitar o deshabilitar un <xref:System.Diagnostics.DelimitedListTraceListener> a través del archivo de configuración de aplicación y, a continuación, utilice el <xref:System.Diagnostics.DelimitedListTraceListener> en la aplicación. Como alternativa, puede crear un <xref:System.Diagnostics.DelimitedListTraceListener> en el código.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.DelimitedListTraceListener> delimita sólo el texto que se genera mediante el uso de los métodos que tienen nombres que comienzan con la palabra `Trace`, como <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Trace.TraceWarning%2A?displayProperty=nameWithType>. Seguimiento de los datos que se genera mediante el uso de la <xref:System.Diagnostics.Debug.Write%2A?displayProperty=nameWithType> y <xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A?displayProperty=nameWithType> no se delimitan los métodos.  
  
 Para configurar un <xref:System.Diagnostics.DelimitedListTraceListener>, edite el archivo de configuración que se corresponde con el nombre de la aplicación. En este archivo, puede agregar un agente de escucha, establecer las propiedades de un agente de escucha o quitar un agente de escucha. El archivo de configuración debe tener el formato tal como se muestra en el ejemplo siguiente:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=","   
          initializeData="delimitedOutput.csv"   
          traceOutputOptions="ProcessId, DateTime" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
> [!NOTE]
>  Si se intenta escribir en un archivo que está en uso o no está disponible, el nombre de archivo se antepone automáticamente un GUID.  
  
> [!NOTE]
>  Los agentes de escucha están diseñados para usarse con métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir información de seguimiento. Métodos de agente de escucha, excepto constructores, no deben llamarse directamente desde el código de la aplicación.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> que va a recibir el resultado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el flujo de salida especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> que va a recibir el resultado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el escritor de texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nombre del archivo que va a recibir el resultado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el archivo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> que va a recibir el resultado.</param>
        <param name="name">Nombre de la nueva instancia del agente de escucha de seguimiento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el flujo de salida especificado y tiene el nombre especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> en el valor de la `name` parámetro, o en una cadena vacía ("") si el `name` parámetro es `null`.  El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se puede utilizar como un índice en la `Listeners` colección para cambiar las propiedades mediante programación para el agente de escucha. Por ejemplo, el código siguiente establece el <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad para la instancia de <xref:System.Diagnostics.DelimitedListTraceListener> que tiene el nombre "delimListener":  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> que va a recibir el resultado.</param>
        <param name="name">Nombre de la nueva instancia del agente de escucha de seguimiento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el escritor de texto especificado y tiene el nombre especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> en el valor de la `name` parámetro, o en una cadena vacía ("") si el `name` parámetro es `null`. El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se puede utilizar como un índice en la `Listeners` colección para cambiar las propiedades mediante programación para el agente de escucha. Por ejemplo, el siguiente código establece la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad para la instancia de <xref:System.Diagnostics.DelimitedListTraceListener> que tiene el nombre "delimListener":  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nombre del archivo que va a recibir el resultado.</param>
        <param name="name">Nombre de la nueva instancia del agente de escucha de seguimiento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> que escribe en el archivo especificado y tiene el nombre especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa una nueva instancia de la <xref:System.IO.StreamWriter> clase para el archivo especificado en la ruta de acceso especificada, con <xref:System.Text.Encoding.UTF8%2A> codificación. Si el archivo existe, se anexa al. Si el archivo no existe, se crea un nuevo archivo.  
  
> [!NOTE]
>  Para reducir la posibilidad de una excepción, cualquier carácter que pueda invalidar el resultado se reemplaza con un "?" caracteres.  
  
 El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad está establecida en el valor de la `name` parámetro, o en una cadena vacía ("") si el `name` parámetro es `null`. El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se puede utilizar como un índice en la `Listeners` colección para cambiar las propiedades mediante programación para el agente de escucha. Por ejemplo, el código siguiente establece el <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad para la instancia de <xref:System.Diagnostics.DelimitedListTraceListener> que tiene el nombre "delimListener":  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el delimitador de la lista delimitada.</summary>
        <value>El delimitador de la lista delimitada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El delimitador predeterminado es ";" (punto y coma). El siguiente ejemplo de archivo de configuración muestra el valor de la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad mediante el `delimiter` atributo en un archivo de configuración:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=":"   
          initializeData="delimitedOutput.txt"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          El valor de <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> está establecido en <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          El valor de <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> se establece en una cadena vacía ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected internal override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el atributo de archivo de configuración personalizado que admite el agente de escucha de seguimiento delimitado.</summary>
        <returns>Una matriz de cadena que contiene como único valor "delimiter".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un atributo personalizado es un atributo que no se hereda de la clase base que puede usarse para establecer una propiedad para la clase. El atributo personalizado para <xref:System.Diagnostics.DelimitedListTraceListener> se usa para establecer el <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad. El siguiente ejemplo de archivo de configuración muestra el uso de la `delimiter` atributo para establecer el <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propiedad:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=":"   
          initializeData="delimitedOutput.txt"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe los datos de seguimiento en el archivo de salida o el flujo de salida.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre usado para identificar el resultado; normalmente es el nombre de la aplicación que generó el evento de seguimiento.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" /> que indican el tipo de evento que provocó el seguimiento.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Objeto de datos que se va a escribir en el archivo de salida o el flujo de salida.</param>
        <summary>Escribe la información de seguimiento, un objeto de datos y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores de la `source`, `eventType`, y `id` parámetros se escriben como un encabezado. El objeto de datos se convierte en una cadena mediante el `ToString` método del objeto. El `eventCache` los datos se escriben como un pie de página cuyo contenido depende del valor de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A> método no está pensado para ser llamado por código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre usado para identificar el resultado; normalmente es el nombre de la aplicación que generó el evento de seguimiento.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" /> que indican el tipo de evento que provocó el seguimiento.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Matriz de objetos de datos que se van a escribir en el archivo de salida o el flujo de salida.</param>
        <summary>Escribe la información de seguimiento, una matriz de objetos de datos y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores de la `source`, `eventType`, y `id` parámetros se escriben como un encabezado. Los objetos de datos se convierten en cadenas mediante el `ToString` método de cada objeto. El `eventCache` los datos se escriben como un pie de página cuyo contenido depende del valor de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A> método no está pensado para ser llamado por código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe la información de seguimiento de eventos en el archivo de salida o el flujo de salida.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre usado para identificar el resultado; normalmente es el nombre de la aplicación que generó el evento de seguimiento.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" /> que indican el tipo de evento que provocó el seguimiento.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje de seguimiento que se va a escribir en el archivo de salida o el flujo de salida.</param>
        <summary>Escribe la información de seguimiento, un mensaje y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores de la `source`, `eventType`, y `id` parámetros se escriben como un encabezado, seguido por el `message` datos. El `eventCache` los datos se escriben como un pie de página cuyo contenido depende del valor de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A> método no está pensado para ser llamado por código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre usado para identificar el resultado; normalmente es el nombre de la aplicación que generó el evento de seguimiento.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" /> que indican el tipo de evento que provocó el seguimiento.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="format">Cadena de formato que contiene cero o más elementos de formato que corresponden a los objetos de la matriz <c>args</c>.</param>
        <param name="args">Matriz que contiene cero o más objetos a los que se va a aplicar formato.</param>
        <summary>Escribe la información de seguimiento, una matriz de objetos con formato y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores de la `source`, `eventType`, y `id` parámetros se escriben como un encabezado. El `args` matriz de objetos se convierte en una cadena mediante el <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método, pasando el `format` cadena y `args` matriz para dar formato a la cadena como la parte de mensaje del seguimiento. El `eventCache` los datos se escriben como un pie de página cuyo contenido depende del valor de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A> método no está pensado para ser llamado por código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>