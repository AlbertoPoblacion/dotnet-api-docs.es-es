<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eff2b277f96e7292c08fb68ca474ab719ff71131" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39776830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa los valores de configuración utilizados para crear un origen de registro de eventos en el equipo local o un equipo remoto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.EventSourceCreationData> clase para configurar un nuevo origen para escribir entradas adaptadas en un registro de eventos. No es necesario usar esta clase para leer desde un registro de eventos.  
  
 Esta clase define las opciones de configuración para un nuevo origen de eventos y su registro de eventos asociado. El registro de eventos asociado puede estar en el equipo local o en un equipo remoto. Para crear un nuevo origen para un registro de eventos nuevo o existente en el equipo local, establezca el <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> y <xref:System.Diagnostics.EventSourceCreationData.Source%2A> las propiedades de un <xref:System.Diagnostics.EventSourceCreationData> y llamar a la <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> método. Este método crea el origen de eventos especificado en el <xref:System.Diagnostics.EventSourceCreationData.Source%2A> propiedad y se registra para el registro de eventos especificado en <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. Este comportamiento es similar a usar el <xref:System.Diagnostics.EventLogInstaller> clase para registrar un origen de eventos para un registro de eventos.  
  
 Use la <xref:System.Diagnostics.EventLog.WriteEvent%2A> y <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos para escribir eventos en un registro de eventos. Debe especificar un origen de eventos para escribir eventos; debe crear y configurar el origen del evento antes de escribir la primera entrada con el origen.  
  
 Crear el nuevo origen de eventos durante la instalación de la aplicación. Esto permite que el tiempo para el sistema operativo actualizar la lista de orígenes de eventos registrados y sus configuraciones. Si el sistema operativo no ha actualizado su lista de orígenes de eventos e intenta escribir un evento con el nuevo origen, que se producirá un error en la operación de escritura. Puede configurar un nuevo origen utilizando un <xref:System.Diagnostics.EventLogInstaller>, o mediante el <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método. Debe tener derechos administrativos en el equipo para crear un nuevo origen de eventos.  
  
 Puede crear un origen de eventos para un registro de eventos existente o un registro de eventos. Cuando se crea un nuevo origen para un registro de eventos, el sistema registra el origen para este registro, pero no se crea el registro hasta que la primera entrada se escriba en él.  
  
 Cada origen solo puede escribir en un registro de eventos a la vez; Sin embargo, la aplicación puede utilizar varios orígenes para escribir en varios registros de eventos. Por ejemplo, la aplicación podría necesitar configuración para los diferentes registros de eventos o archivos de recursos de varios orígenes.  
  
 Para cambiar los detalles de configuración de un origen existente, debe eliminar el origen y, a continuación, vuelva a crearla con la nueva configuración. Si otras aplicaciones o componentes utilizan el origen existente, cree un nuevo origen con la configuración actualizada en lugar de eliminar el origen existente.  
  
 Puede registrar el origen de eventos con los recursos localizados para las cadenas de categoría y el mensaje de evento. La aplicación puede escribir entradas del registro de eventos con identificadores de recursos, en lugar de especificar la cadena real. El Visor de eventos usa el identificador de recursos para buscar y mostrar la cadena correspondiente desde el archivo de recursos localizado en función de la configuración de idioma actual. Puede registrar un archivo independiente para las categorías de eventos, mensajes y las cadenas de inserción de parámetro, o puede registrar el mismo archivo de recursos para los tres tipos de cadenas. Use la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, y <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propiedades para configurar el origen para escribir entradas adaptadas en el registro de eventos. Si su aplicación escribe los valores de cadena directamente en el registro de eventos, no es necesario establecer estas propiedades.  
  
 El origen debe configurarse para escribir entradas adaptadas o cadenas directas. El <xref:System.Diagnostics.EventLog.WriteEntry%2A> método escribe la cadena especificada directamente en el registro de eventos; no utiliza un archivo de recursos de mensaje localizable. Use el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir los eventos mediante un archivo de recursos de mensaje localizado.  
  
 Si su aplicación escribe las entradas mediante identificadores de recursos y los valores de cadena, debe registrar dos orígenes diferentes. Por ejemplo, configure un origen con archivos de recursos y, a continuación, usar ese origen en el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas mediante identificadores de recursos en el registro de eventos. A continuación, cree un origen diferente sin archivos de recursos y usarlo en el <xref:System.Diagnostics.EventLog.WriteEntry%2A> método para escribir cadenas directamente en el registro de eventos con ese origen.  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de configuración para un origen de eventos de los argumentos de línea de comandos. Los argumentos de entrada especifican el nombre del origen de evento, nombre de registro de eventos, nombre de equipo y archivo de recursos de mensaje de evento. El ejemplo de código comprueba que el origen no entra en conflicto con un origen de eventos existente y, a continuación, crea el nuevo origen de eventos para el registro de eventos especificado.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nombre que se va a registrar con el registro de eventos como origen de entradas.</param>
        <param name="logName">El nombre del registro en el que se escriben las entradas del origen.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSourceCreationData" /> con un origen de eventos y un nombre de registro de eventos especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para escribir entradas en un registro de eventos, primero debe crear un origen de eventos para el registro de eventos. Para registrar un nuevo origen, inicialice una <xref:System.Diagnostics.EventSourceCreationData> de la instancia, configurar las propiedades de instancia de la aplicación y la llamada la <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> método. Una vez registrado el origen, puede escribir entradas desde el origen mediante el <xref:System.Diagnostics.EventLog.WriteEvent%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos.  
  
 Puede registrar el origen de eventos con los recursos localizados para las cadenas de categoría y el mensaje de evento. La aplicación puede escribir entradas del registro de eventos con identificadores de recursos, en lugar de especificar la cadena real. El Visor de eventos usa el identificador de recursos para buscar y mostrar la cadena correspondiente desde el archivo de recursos localizado en función de la configuración de idioma actual. Puede registrar un archivo independiente para las categorías de eventos, mensajes y las cadenas de inserción de parámetro, o puede registrar el mismo archivo de recursos para los tres tipos de cadenas. Use la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, y <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propiedades para configurar el origen para escribir entradas adaptadas en el registro de eventos. Si su aplicación escribe los valores de cadena directamente en el registro de eventos, no es necesario establecer estas propiedades.  
  
 El origen debe configurarse para escribir entradas adaptadas o cadenas directas. Si su aplicación escribe las entradas mediante identificadores de recursos y los valores de cadena, debe registrar dos orígenes diferentes. Por ejemplo, configure un origen con archivos de recursos y, a continuación, usar ese origen en el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas mediante identificadores de recursos en el registro de eventos. A continuación, cree un origen diferente sin archivos de recursos y usarlo en el <xref:System.Diagnostics.EventLog.WriteEntry%2A> método para escribir cadenas directamente en el registro de eventos.  
  
 La siguiente tabla muestra los valores de propiedad iniciales para un <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|Parámetro `source`.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|Parámetro `logName`.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|El equipo local (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Cero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si el origen de eventos denominado `SampleApplicationSource` está registrado en el equipo local. Si el origen del evento no existe, el ejemplo establece el archivo de recursos de mensaje para el origen y crea el nuevo origen de eventos. Por último, el ejemplo de código establece el nombre para mostrar localizado para el registro de eventos mediante el valor de identificador de recurso en `DisplayNameMsgId` y la ruta de acceso del archivo de recursos en `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de categorías en el archivo de recursos de categoría.</summary>
        <value>El número de categorías del archivo de recursos de categoría. El valor predeterminado es cero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> y <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> localizados de las propiedades para escribir eventos con las cadenas de categoría. El Visor de eventos muestra la categoría de una entrada de eventos si se proporciona una categoría al escribir el evento. Categorías de registro de eventos son cadenas definidas por la aplicación que ayudan a filtrar eventos o proporcionan información adicional sobre el evento. Por ejemplo, la aplicación puede definir categorías independientes para distintos componentes u operaciones diferentes.  
  
 Categorías de eventos son opcionales; Si la aplicación no utiliza categorías, no establezca la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> y <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propiedades.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si el origen de eventos denominado `SampleApplicationSource` está registrado en el equipo local. Si el origen del evento no existe, el ejemplo establece el archivo de recursos de mensaje para el origen y crea el nuevo origen de eventos. Por último, el ejemplo de código establece el nombre para mostrar localizado para el registro de eventos mediante el valor de identificador de recurso en `DisplayNameMsgId` y la ruta de acceso del archivo de recursos en `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad está establecida en un valor negativo o un valor mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso del archivo de recursos que contiene las cadenas de categoría para el origen.</summary>
        <value>Ruta de acceso al archivo de recursos de categoría. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> y <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> localizados de las propiedades para escribir eventos con las cadenas de categoría. El Visor de eventos muestra la categoría de una entrada de eventos si se proporciona una categoría al escribir el evento. Categorías de registro de eventos son cadenas definidas por la aplicación que ayudan a filtrar eventos o proporcionan información adicional sobre el evento. Por ejemplo, la aplicación puede definir categorías independientes para distintos componentes u operaciones diferentes.  
  
 Categorías de eventos son opcionales; Si la aplicación no utiliza categorías, no establezca la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> y <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propiedades.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si el origen de eventos denominado `SampleApplicationSource` está registrado en el equipo local. Si el origen del evento no existe, el ejemplo establece el archivo de recursos de mensaje para el origen y crea el nuevo origen de eventos. Por último, el ejemplo de código establece el nombre para mostrar localizado para el registro de eventos mediante el valor de identificador de recurso en `DisplayNameMsgId` y la ruta de acceso del archivo de recursos en `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del registro de eventos en el que el origen escribe las entradas.</summary>
        <value>Nombre del registro de eventos. Puede ser Application, System o el nombre de un registro personalizado. El valor predeterminado es "Application".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propiedad para identificar el registro de eventos que su aplicación escribe entradas en utilizando el nuevo origen. El registro de eventos puede ser un nuevo registro o un registro existente. Aplicaciones y servicios deben escribir en el registro de aplicación o un registro personalizado. Deben escribir controladores de dispositivo en el registro del sistema. Si no establece explícitamente el <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propiedad, el registro de eventos como el valor predeterminado para el registro de aplicación.  
  
> [!NOTE]
>  El registro de seguridad es de solo lectura.  
  
 Para un registro existente para el nuevo origen de destino, establezca el <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propiedad por el nombre de registro de eventos existente. Para crear un nuevo registro de eventos para el origen, debe establecer el <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propiedad. Los nombres de los registros de eventos deben estar compuestos por caracteres imprimibles, excluidos "*", "?" o "\\". Los 8 primeros caracteres del nombre del registro de eventos deben ser diferentes de los 8 primeros caracteres de nombres existentes de los registros de eventos en el equipo especificado.  
  
 El sistema operativo almacena los registros de eventos como archivos. Cuando usas <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método para crear un nuevo registro de eventos, el archivo asociado se almacena en el directorio %SystemRoot%\System32\Config del equipo especificado. Se establece el nombre de archivo anexando los 8 primeros caracteres de la <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propiedad con la extensión de nombre de archivo "evt".  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de configuración para un origen de eventos de los argumentos de línea de comandos. Los argumentos de entrada especifican el nombre del origen de evento, nombre de registro de eventos, nombre de equipo y archivo de recursos de mensaje de evento. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.EventSourceCreationData> clase.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del equipo en el que se va a registrar el origen de eventos.</summary>
        <value>El nombre del sistema en el que se va a registrar el origen de eventos. El valor predeterminado es el equipo local (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> valor no puede ser una cadena vacía. Si no se establece explícitamente el nombre del equipo, el valor predeterminado es el equipo local (".").  
  
 Al registrar un origen en un equipo remoto, debe tener derechos administrativos en ese equipo para escribir los valores del registro con permisos suficientes.  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de configuración para un origen de eventos de los argumentos de línea de comandos. Los argumentos de entrada especifican el nombre del origen de evento, nombre de registro de eventos, nombre de equipo y archivo de recursos de mensaje de evento. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.EventSourceCreationData> clase.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El nombre de equipo no es válido.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso al archivo de recursos de mensaje que contiene las cadenas de formato de mensajes del origen.</summary>
        <value>Ruta de acceso al archivo de recursos de mensaje. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad para configurar un origen de registro de eventos para escribir mensajes de eventos adaptados. Los mensajes de eventos son cadenas definidas por la aplicación que describen el evento al usuario.  
  
 La aplicación puede escribir entradas del registro de eventos con identificadores de recursos. Un identificador de recursos indiza un mensaje que se encuentra en la <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. El Visor de eventos usa el identificador de recursos para buscar y mostrar la cadena correspondiente del mensaje localizado en el archivo de recursos según la configuración de idioma actual.  
  
 El origen del evento debe configurarse para escribir entradas adaptadas o cadenas directas. Use el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas adaptadas para un origen configurado con un archivo de recursos de mensaje.  
  
 Si su aplicación escribe cadenas de mensajes de eventos directamente, en lugar de usar un identificador de recursos en un archivo de recursos localizado, no establezca la <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si el origen de eventos denominado `SampleApplicationSource` está registrado en el equipo local. Si el origen del evento no existe, el ejemplo establece el archivo de recursos de mensaje para el origen y crea el nuevo origen de eventos. Por último, el ejemplo de código establece el nombre para mostrar localizado para el registro de eventos mediante el valor de identificador de recurso en `DisplayNameMsgId` y la ruta de acceso del archivo de recursos en `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso del archivo de recursos que contiene las cadenas de parámetros de mensaje para el origen.</summary>
        <value>Ruta de acceso al archivo de recursos de parámetros. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> insertado de propiedad para configurar un origen de registro de eventos para escribir mensajes de eventos adaptados con cadenas del parámetro. Cada mensaje de evento localizado especificado en el <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad puede contener marcadores de posición para las cadenas de inserción. Estos marcadores de posición se usan para especificar la posición y el identificador de recurso para una cadena independiente del lenguaje dentro del mensaje de evento. El Visor de eventos rellena los marcadores de posición con las cadenas correspondientes de la <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> y da formato al mensaje de registro de eventos para la entrada de evento localizado.  
  
 Por ejemplo, la siguiente sección de un archivo de texto de mensaje define una cadena con un marcador de posición de parámetro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 En el archivo de recursos de parámetro, la cadena de inserción debe definirse con el identificador de recurso que se corresponde con el marcador de posición, como se muestra a continuación:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 El origen del evento debe configurarse para escribir entradas adaptadas o cadenas directas. Use el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas adaptadas para un origen configurado con un archivo de recursos de mensaje.  
  
 Si su aplicación escribe cadenas de mensajes de eventos directamente en el registro de eventos, o si su <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad no contiene mensajes con marcadores de posición de inserción de parámetro, no establezca la <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propiedad.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente determina si el origen de eventos denominado `SampleApplicationSource` está registrado en el equipo local. Si el origen del evento no existe, el ejemplo establece el archivo de recursos de mensaje para el origen y crea el nuevo origen de eventos. Por último, el ejemplo de código establece el nombre para mostrar localizado para el registro de eventos mediante el valor de identificador de recurso en `DisplayNameMsgId` y la ruta de acceso del archivo de recursos en `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro. En concreto, el mensaje definido para el identificador de recursos 1004 utiliza un marcador de posición para una cadena de parámetro definida para el identificador de recursos 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre que se va a registrar con el registro de eventos como origen de eventos.</summary>
        <value>Nombre que se va a registrar con el registro de eventos como origen de entradas. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de origen suele ser el nombre de la aplicación o el nombre de un componente dentro de una aplicación grande. El <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> método usa la <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, y <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> propiedades para crear valores del registro en el equipo de destino para el nuevo origen y su registro de eventos asociado. Un nuevo nombre de origen no puede coincidir con un nombre de origen existente o un nombre de registro de eventos existente en el equipo de destino.  
  
 Después de que se crean los valores del registro para el origen, la aplicación puede usar el origen para escribir entradas en el registro de eventos configurado.  
  
 Cada origen solo puede escribir en un registro de eventos a la vez; Sin embargo, la aplicación puede utilizar varios orígenes para escribir en varios registros de eventos. Por ejemplo, su aplicación puede requerir configurados para los diferentes registros de eventos o archivos de recursos de varios orígenes.  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de configuración para un origen de eventos de los argumentos de línea de comandos. Los argumentos de entrada especifican el nombre del origen de evento, nombre de registro de eventos, nombre de equipo y archivo de recursos de mensaje de evento. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.EventSourceCreationData> clase.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a cualquier miembro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con plena confianza. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>