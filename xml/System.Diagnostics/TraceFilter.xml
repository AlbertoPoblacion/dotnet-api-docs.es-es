<Type Name="TraceFilter" FullName="System.Diagnostics.TraceFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a85ce6746df275187269ff2c648a78241426979c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58737784" /></Metadata><TypeSignature Language="C#" Value="public abstract class TraceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TraceFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TraceFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceFilter abstract" />
  <TypeSignature Language="F#" Value="type TraceFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la clase base para las implementaciones de los filtros de seguimiento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los filtros de seguimiento pueden usarse por los agentes de escucha de seguimiento para proporcionar una capa adicional de filtrado que ofrecen los modificadores de seguimiento. El filtro de seguimiento para un agente de escucha de seguimiento puede encontrarse en el agente de escucha <xref:System.Diagnostics.TraceListener.Filter%2A> propiedad. Modificadores de seguimiento determinan si un seguimiento se va a enviarse a los agentes de escucha de seguimiento. Los filtros de seguimiento permiten a los agentes de escucha de seguimiento individuales determinar si el seguimiento se va a escribir en el medio de salida asociado. Por ejemplo, según lo determinado por cada filtro de seguimiento, un seguimiento puede escribirse en la consola mediante un <xref:System.Diagnostics.ConsoleTraceListener>, pero no en el registro de eventos por una <xref:System.Diagnostics.EventLogTraceListener>.  
  
 Los filtros que heredan de la <xref:System.Diagnostics.TraceFilter> clase puede ser usada por los agentes de escucha de seguimiento que heredan de la <xref:System.Diagnostics.TraceListener> clase para realizar el filtrado de eventos que se va a realizar un seguimiento. <xref:System.Diagnostics.TraceFilter> contiene un único método, <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>, que toma datos del evento y devuelve una marca que indica si el evento debe realizarse un seguimiento.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TraceFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TraceFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.TraceFilter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldTrace">
      <MemberSignature Language="C#" Value="public abstract bool ShouldTrace (System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldTrace(class System.Diagnostics.TraceEventCache cache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ShouldTrace (cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ShouldTrace(System::Diagnostics::TraceEventCache ^ cache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ formatOrMessage, cli::array &lt;System::Object ^&gt; ^ args, System::Object ^ data1, cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member ShouldTrace : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] * obj * obj[] -&gt; bool" Usage="traceFilter.ShouldTrace (cache, source, eventType, id, formatOrMessage, args, data1, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="formatOrMessage" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="data1" Type="System.Object" />
        <Parameter Name="data" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="cache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene información para el evento de seguimiento.</param>
        <param name="source">Nombre del origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" /> que indican el tipo de evento que provocó el seguimiento.</param>
        <param name="id">Número del identificador de seguimiento.</param>
        <param name="formatOrMessage">Formato que se va a utilizar para escribir una matriz de argumentos especificada por el parámetro <paramref name="args" /> o un mensaje que se va a escribir.</param>
        <param name="args">Matriz de objetos de argumento.</param>
        <param name="data1">Objeto de datos de seguimiento.</param>
        <param name="data">Matriz de objetos de datos de seguimiento.</param>
        <summary>Cuando se reemplaza en una clase derivada, determina si el agente de escucha de seguimiento debe realizar un seguimiento del evento.</summary>
        <returns>Es <see langword="true" /> para realizar un seguimiento del evento especificado; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> método para indicar el seguimiento debe ocurrir cuando el tipo de evento de seguimiento del evento es igual a <xref:System.Diagnostics.TraceEventType.Error?displayProperty=nameWithType>.  
  
 [!code-cpp[System.Diagnostics.TraceFilter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cpp/source.cpp#2)]
 [!code-csharp[System.Diagnostics.TraceFilter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cs/source.cs#2)]
 [!code-vb[System.Diagnostics.TraceFilter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.tracefilter/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Las implementaciones de este método deben devolver <see langword="true" /> si debe realizarse un seguimiento del evento especificado por los parámetros pasados. En caso contrario, el método debe devolver <see langword="false" />. Por ejemplo, debe inspeccionar un filtro que permite solo eventos de error que pasen al agente de escucha el <paramref name="eventType" /> devueltos y parámetro <see langword="true" /> si se establece el nivel de tipo de evento de seguimiento en <see cref="F:System.Diagnostics.TraceEventType.Error" /> o superior; en caso contrario, debe devolver <see langword="false" />.  
  
Las implementaciones del método deben estar preparadas para controlar <see langword="null" /> en los siguientes parámetros: <paramref name="args" />, <paramref name="data1" />, <paramref name="data" />, <paramref name="formatOrMessage" />, y <paramref name="cache" />. Si el valor del parámetro es <see langword="null" />, el parámetro no forma parte del evento. Por ejemplo, si la <paramref name="args" /> parámetro es <see langword="null" />, significa que el evento no tiene ningún argumento. Si el <paramref name="data" /> parámetro es <see langword="null" />, a continuación, hay objetos de datos de una o ninguna. Si hay un objeto de datos, se encuentra en la <paramref name="data1" /> parámetro. Es el motivo de la distinción entre un objeto de datos único y una matriz de objetos de datos de rendimiento. No hay ninguna razón para crear una matriz de objetos si solo se realiza un seguimiento de un objeto, como suele ser el caso. Si el <paramref name="data" /> parámetro no es <see langword="null" />, <paramref name="data1" /> parámetro no debe ser también <see langword="null" />.  
  
Se garantiza que el <paramref name="source" /> parámetro no es <see langword="null" /> y no una cadena vacía ("").  
  
Las implementaciones del método, opcionalmente, pueden iniciar las excepciones siguientes: 
-   <see cref="T:System.ArgumentNullException" /> Si <paramref name="source" /> es <see langword="null" />.  
  
-   <see cref="T:System.ArgumentException" /> Si <paramref name="eventType" /> no es uno de los <see cref="T:System.Diagnostics.TraceEventType" /> valores.  
  
-Excepciones no relacionadas con la implementación del método. Por ejemplo, un <see cref="T:System.Threading.ThreadAbortException" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>