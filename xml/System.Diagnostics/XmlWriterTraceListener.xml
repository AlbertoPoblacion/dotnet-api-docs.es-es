<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="194d8ffda1f6fb135d950ca01b7f52bb32b719c7" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56389802" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige los resultados de traza o de depuración como datos en código XML a un <see cref="T:System.IO.TextWriter" /> o a una <see cref="T:System.IO.Stream" />, como una <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Debe tener permiso no administrado código para crear una instancia de la <xref:System.Diagnostics.XmlWriterTraceListener> clase.  
  
 La <xref:System.Diagnostics.XmlWriterTraceListener> clase convierte de seguimiento y depuración de la información en una secuencia de texto codificados en XML. La descripción de la salida XML se muestra en las siguientes tablas. Puede usar el [herramienta Service Trace Viewer (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) mostrar el código XML de salida.  
  
 Puede habilitar o deshabilitar un <xref:System.Diagnostics.XmlWriterTraceListener> a través del archivo de configuración de aplicación y, después, use el <xref:System.Diagnostics.XmlWriterTraceListener> en la aplicación. Como alternativa, puede crear un <xref:System.Diagnostics.XmlWriterTraceListener> en el código.  
  
 Para configurar un <xref:System.Diagnostics.XmlWriterTraceListener>, edite el archivo de configuración que se corresponde con el nombre de la aplicación. En este archivo, puede agregar o quitar un agente de escucha, establecer las propiedades de un agente de escucha o quitar agentes de escucha. El archivo de configuración se debe dar formato similar al ejemplo siguiente.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 El <xref:System.Diagnostics.XmlWriterTraceListener> clase hereda la <xref:System.Diagnostics.TraceListener.Filter%2A> propiedad de la clase base <xref:System.Diagnostics.TraceListener>.  El <xref:System.Diagnostics.TraceListener.Filter%2A> propiedad permite un nivel adicional de filtrado en el agente de escucha de seguimiento los resultados.  Si hay un filtro está presente, el `Trace` métodos de la llamada del agente de escucha de seguimiento el <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> método del filtro para determinar si va a emitir el seguimiento.  
  
> [!NOTE]
>  Si se intenta escribir en un archivo que está en uso o no está disponible, el nombre de archivo automáticamente viene precedido por un GUID.  
  
> [!NOTE]
>  Los métodos de agente de escucha están pensados para ser llamado por los métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases.  Los métodos de agente de escucha no están diseñados para llamarlo directamente desde el código de la aplicación. El <xref:System.Diagnostics.XmlWriterTraceListener> escucha sirve principalmente para su uso por la <xref:System.Diagnostics.TraceSource> clase. El <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> y <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> métodos pueden llamarse mediante el <xref:System.Diagnostics.Trace> y <xref:System.Diagnostics.Debug> se proporcionan clases y los valores predeterminados para los elementos XML que <xref:System.Diagnostics.Trace> y <xref:System.Diagnostics.Debug> no proporcione valores para.  
  
 La tabla siguiente describen los elementos y atributos de la salida XML.  
  
|Elemento|Atributos|Salida|Notas|  
|-------------|----------------|------------|-----------|  
|`CallStack`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.Callstack> marca en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Caracteres especiales como > o < se reemplazan por las secuencias de escape. Consulte la tabla de traducción de caracteres de escape que sigue.|  
|`Computer`|None|Siempre está presente.|Valor de propiedad <xref:System.Environment.MachineName%2A>.|  
|`Correlation`|`ActivityID`|Siempre presente|Si no se especifica, el valor predeterminado es un GUID vacío.|  
||`RelatedActivityID`|Depende de la presencia de la `relatedActivityId` parámetro en la llamada al método de seguimiento.|El parámetro `relatedActivityId` del método <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>.|  
|`DataItem`|None|Depende de la `data` parámetro de la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método.|Este elemento puede contener una matriz de elementos o un elemento, por lo que los valores se escriben como un conjunto de `DataItem` los nodos bajo el `TraceData` elemento.<br /><br /> Los datos de salida usa el `ToString` método de los objetos de datos pasado.|  
|`EventID`|None|Siempre está presente.|Entrada de parámetros (`id`).|  
|`Execution`|`ProcessName`|Siempre está presente.|Desde el <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Siempre está presente.|Desde el <xref:System.Diagnostics.TraceEventCache>. En Windows 98 y Windows Me los sistemas operativos, si `ProcessID` es mayor que 2.147.483.647 es una representación de un número negativo positiva y debe convertirse para obtener el identificador de proceso correcto.|  
||`ThreadID`|Siempre está presente.|Desde el <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|None|Siempre está presente.|Entrada de parámetros (el valor numérico de `eventType`). Los valores de parámetro mayores que 255 salen como 255.|  
|`LogicalOperationStack`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> marca en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Puede haber más de una operación lógica, por lo que se escriben los valores como `LogicalOperation` los nodos bajo el `LogicalOperationStack` elemento.|  
|`Message`|None|Depende de la presencia de un mensaje en la llamada al método de seguimiento.|Este elemento es un mensaje con formato si se proporcionan argumentos de formato.|  
|`Source`|`Name`|Siempre está presente.|Parámetro de entrada.|  
|`SubType`|`Name`|Siempre está presente.|Parámetro de entrada.|  
|`TimeCreated`|`SystemTime`|Siempre está presente.|Si no está presente en el <xref:System.Diagnostics.TraceEventCache>, el valor predeterminado es la hora actual.|  
|`TimeStamp`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.Timestamp> marca en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Desde el <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|None|Siempre está presente.|Siempre es el valor 3.|  
  
 La siguiente tabla muestra los caracteres de escape en los resultados XML. Secuencias de escape se produce en todos los elementos y atributos con la excepción de la `DataItem` elemento, que no se puede salir si el objeto pasado a la `data` parámetro de la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método es un <xref:System.Xml.XPath.XPathNavigator> objeto. Si un <xref:System.Xml.XPath.XPathNavigator> se usa para el objeto de datos, el <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> se llama al método y el nodo raíz todo se realiza un seguimiento como datos sin escape.  
  
|Carácter de escape|Valor|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.XmlWriterTraceListener> clase para escribir datos con escape y sin escape en los registros de archivos.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> que representa la secuencia en la que escribe el agente de escucha de seguimiento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> utilizando la secuencia especificada como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se inicializa en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> que recibe los resultados del agente de escucha de seguimiento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> utilizando el sistema de escritura especificado como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se inicializa en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nombre del archivo en el que se va a escribir.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> utilizando el archivo especificado como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa una nueva instancia de la <xref:System.IO.StreamWriter> clase para el archivo especificado en la ruta de acceso especificada, utilizando <xref:System.Text.Encoding.UTF8%2A> codificación. Si el archivo existe, se anexa a. Si el archivo no existe, se crea un nuevo archivo.  
  
> [!NOTE]
>  Para reducir la posibilidad de una excepción, se reemplaza cualquier carácter que podría invalidar la salida con un "?" caracteres.  
  
 El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se inicializa en una cadena vacía ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> que representa la secuencia en la que escribe el agente de escucha de seguimiento.</param>
        <param name="name">Nombre de la nueva instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con el nombre especificado, utilizando la secuencia especificada como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad a la `name` el valor del parámetro o en una cadena vacía ("") si el `name` parámetro es `null`. El nombre se puede utilizar como índice en la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección para cambiar mediante programación las propiedades del agente de escucha. Por ejemplo, el código siguiente establece la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad para una instancia de <xref:System.Diagnostics.XmlWriterTraceListener> cuyo <xref:System.Diagnostics.TraceListener.Name%2A> propiedad es "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> que recibe los resultados del agente de escucha de seguimiento.</param>
        <param name="name">Nombre de la nueva instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con el nombre especificado, utilizando el sistema de escritura especificado como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad a la `name` el valor del parámetro o en una cadena vacía ("") si el `name` parámetro es `null`. El nombre se puede utilizar como índice en la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección para cambiar mediante programación las propiedades del agente de escucha. Por ejemplo, el código siguiente establece la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad para una instancia de <xref:System.Diagnostics.XmlWriterTraceListener> cuyo <xref:System.Diagnostics.TraceListener.Name%2A> propiedad es "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nombre del archivo en el que se va a escribir.</param>
        <param name="name">Nombre de la nueva instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con el nombre especificado, utilizando el archivo especificado como destinatario de los resultados de traza y de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa una nueva instancia de la <xref:System.IO.StreamWriter> clase para el archivo especificado en la ruta de acceso especificada, utilizando <xref:System.Text.Encoding.UTF8%2A> codificación. Si el archivo existe, se anexa a. Si el archivo no existe, se crea un nuevo archivo.  
  
> [!NOTE]
>  Para reducir la posibilidad de una excepción, se reemplaza cualquier carácter que podría invalidar la salida con un "?" caracteres.  
  
 El <xref:System.Diagnostics.TraceListener.Name%2A> propiedad está establecida en el `name` el valor del parámetro o en una cadena vacía ("") si el `name` parámetro es `null`. El nombre se puede utilizar como índice en la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección para cambiar mediante programación las propiedades del agente de escucha. Por ejemplo, el código siguiente establece la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad para una instancia de <xref:System.Diagnostics.XmlWriterTraceListener> cuyo <xref:System.Diagnostics.TraceListener.Name%2A> propiedad es "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> para este agente de escucha, de modo que ya no recibe ningún resultado de la traza o la depuración.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que se va a escribir.</param>
        <param name="detailMessage">Mensaje de error detallado que se va a anexar al mensaje de error.</param>
        <summary>Escribe la información de seguimiento que incluye un mensaje de error y un mensaje de error detallado en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado consiste en Mostrar el mensaje y el mensaje detallado en un cuadro de mensaje cuando la aplicación se está ejecutando en modo de interfaz de usuario y el <xref:System.Diagnostics.TraceListener> instancias en el <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección. De forma predeterminada, la colección contiene una instancia de <xref:System.Diagnostics.DefaultTraceListener>. Puede personalizar este comportamiento agregando o quitando un <xref:System.Diagnostics.TraceListener> de la colección.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe los datos de seguimiento en el archivo de salida o el flujo de salida.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Objeto de datos que se va a emitir.</param>
        <summary>Escribe la información de seguimiento, los objetos de datos y la información de evento en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` se usan parámetros en el encabezado y pie de página del seguimiento. El `id` parámetro se convierte en un entero sin signo antes de la escritura, por lo que un valor negativo `id` valor se escribe como un gran número entero positivo. El `data` parámetro se escribe como un `DataItem` nodo en el `TraceData` elemento. El `ToString` método del objeto de datos se utiliza para convertir el objeto en una cadena.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de aplicación.  Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Matriz de los objetos de datos que se van a emitir.</param>
        <summary>Escribe la información de seguimiento, los objetos de datos y la información de evento en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` se usan parámetros en el encabezado y pie de página del seguimiento. El `id` parámetro se convierte en un entero sin signo antes de la escritura, por lo que un valor negativo `id` valor se escribe como un gran número entero positivo. Los objetos en el `data` matriz de parámetros se escriben como `DataItem` nodos en el `TraceData` elemento. El `ToString` método de cada objeto de datos se utiliza para convertir el objeto en una cadena.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de aplicación.  Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe la información de seguimiento de eventos en el archivo de salida o el flujo de salida.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe la información de seguimiento, los mensajes y la información de evento en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` se usan parámetros en el encabezado y pie de página del seguimiento. El `id` parámetro se convierte en un entero sin signo antes de la escritura, por lo que un valor negativo `id` valor se escribe como un gran número entero positivo. El `message` parámetro se escribe como el `Message` elemento.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de aplicación.  Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="format">Cadena de formato que contiene cero o más elementos de formato que corresponden a los objetos de la matriz <paramref name="args" />.</param>
        <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato.</param>
        <summary>Escribe la información de seguimiento, los mensajes con formato y la información de evento en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` se usan parámetros en el encabezado y pie de página del seguimiento. El `id` parámetro se convierte en un entero sin signo antes de la escritura, por lo que un valor negativo `id` valor se escribe como un gran número entero positivo. El <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> se llama el método, pasando el `format` cadena y `args` matriz como parámetros, para dar formato a la `args` matriz de objetos como el `Message` elemento.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de aplicación.  Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje de seguimiento que se va a escribir.</param>
        <param name="relatedActivityId">Estructura <see cref="T:System.Guid" /> que identifica una actividad relacionada.</param>
        <summary>Escribe la información de seguimiento, incluida la identidad de una actividad relacionada, un mensaje e información de evento en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> método se utiliza para la correlación de seguimientos relacionados. El `eventCache`, `source`, `id`, y `relatedActivityId` se usan parámetros en el encabezado y pie de página del seguimiento. El `id` parámetro se convierte en un entero sin signo antes de la escritura, por lo que un valor negativo `id` valor se escribe como un gran número entero positivo. El `message` parámetro se escribe como el `Message` elemento. El <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> método se llama para convertir el `relatedActivityId`valor a una "B" formato de cadena, que aparece en el encabezado. El `SubTypeName` elemento en el pie de página identifica el tipo de evento de seguimiento como un <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> método no está pensado para ser llamado por el código de la aplicación.  Se está diseñado para ser llamado por un <xref:System.Diagnostics.TraceSource> objeto que se va a emitir la información de seguimiento para su <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> método.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe un mensaje textual sin información de contexto adicional en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método para incluir información de contexto en la salida del registro.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe un mensaje textual sin información de contexto adicional, seguido del actual terminador de línea, en el archivo o el flujo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método para incluir información de contexto en la salida del registro.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>