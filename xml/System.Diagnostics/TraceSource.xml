<Type Name="TraceSource" FullName="System.Diagnostics.TraceSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fab066643666c5a5bea1336ceae217a86b35cc34" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36674239" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TraceSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TraceSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceSource" />
  <TypeSignature Language="VB.NET" Value="Public Class TraceSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceSource" />
  <TypeSignature Language="F#" Value="type TraceSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones utilizan la clase <xref:System.Diagnostics.TraceSource> para generar seguimientos que pueden asociarse con la aplicación. <xref:System.Diagnostics.TraceSource> proporciona métodos de traza que permiten rastrear fácilmente eventos y datos, así como emitir seguimientos de información. Resultado del seguimiento de <xref:System.Diagnostics.TraceSource> puede controlarse mediante el archivo de configuración. El archivo de configuración se encuentra en la carpeta con el ejecutable de la aplicación y tiene el nombre de la aplicación con la extensión de nombre de archivo .config agregada. Por ejemplo, el nombre del archivo de configuración para TraceSourceSample.exe es TraceSourceSample.exe.config. El archivo de configuración se puede utilizar para determinar donde es la información de seguimiento que se envíe y cuáles son los niveles de actividad para realizar un seguimiento. En el ejemplo siguiente se muestra el contenido de un archivo de configuración de la aplicación de ejemplo.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <sources>  
      <source name="TraceTest" switchName="SourceSwitch"   
        switchType="System.Diagnostics.SourceSwitch" >  
        <listeners>  
          <add name="console" />  
          <remove name ="Default" />  
        </listeners>  
      </source>  
    </sources>  
    <switches>  
      <!-- You can set the level at which tracing is to occur -->  
      <add name="SourceSwitch" value="Warning" />  
        <!-- You can turn tracing off -->  
        <!--add name="SourceSwitch" value="Off" -->  
    </switches>  
    <sharedListeners>  
      <add name="console"   
        type="System.Diagnostics.ConsoleTraceListener"   
        initializeData="false"/>  
    </sharedListeners>  
    <trace autoflush="true" indentsize="4">  
      <listeners>  
        <add name="console" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 La <xref:System.Diagnostics.TraceSource> clase identificada por el nombre de un origen, normalmente es el nombre de la aplicación.  Los mensajes de seguimiento procedentes de un componente determinado pueden ser iniciados por un origen de seguimiento específico, lo que permite todos los mensajes procedentes de ese componente identificarlos fácilmente.  
  
 <xref:System.Diagnostics.TraceSource> define los métodos de traza pero realmente no proporciona ningún mecanismo concreto para generar y almacenar datos de seguimiento. Los datos de seguimiento generados por los agentes de escucha de seguimiento, que son complementos que pueden cargar los orígenes de seguimiento.  
  
> [!NOTE]
>  No debería llamar a los métodos de traza durante la finalización. Si lo hace, puede producir un <xref:System.ObjectDisposedException> que se producen.  
  
 Puede personalizar el destino de los resultados de la traza agregando o quitando <xref:System.Diagnostics.TraceListener> instancias a o desde la colección almacenada en la <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=nameWithType> propiedad. De forma predeterminada, los resultados de seguimiento se generan mediante una instancia de la <xref:System.Diagnostics.DefaultTraceListener> clase. El ejemplo de archivo de configuración anterior muestra cómo quitar el <xref:System.Diagnostics.DefaultTraceListener> y agregando un <xref:System.Diagnostics.ConsoleTraceListener> para generar el resultado del seguimiento para el origen de seguimiento. Para obtener más información, consulte [ &lt;los agentes de escucha&gt; ](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-source.md) y [ &lt;sharedListeners&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/sharedlisteners-element.md).  
  
> [!NOTE]
>  Agregar un agente de escucha de seguimiento para el <xref:System.Diagnostics.TraceSource.Listeners%2A> colección puede provocar una excepción que se produzca durante la traza, si un recurso utilizado por el agente de escucha de seguimiento no está disponible. Las condiciones y la excepción producida dependen el agente de escucha de seguimiento y no se pueden enumerar en este tema. Puede ser útil realizar llamadas a la <xref:System.Diagnostics.TraceSource> métodos en `try` / `catch` bloques para detectar y controlar las excepciones de los agentes de escucha de seguimiento.  
  
 La <xref:System.Diagnostics.SourceSwitch> clase proporciona los medios para controlar de forma dinámica los resultados del seguimiento. El ejemplo de archivo de configuración anterior muestra cómo se puede desactivar el seguimiento de un origen de seguimiento y controlar el nivel en que el seguimiento se produce.  Puede modificar el valor del modificador de origen sin volver a compilar la aplicación. Para obtener información sobre cómo utilizar el archivo de configuración para establecer un modificador, vea <xref:System.Diagnostics.Switch> y [Cómo: crear, inicializar y configurar modificadores de seguimiento](~/docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md).  
  
> [!NOTE]
>  Si modifica un archivo de configuración mientras se está ejecutando una aplicación, debe detener y reiniciar la aplicación o el <xref:System.Diagnostics.Trace.Refresh%2A> debe llamarse al método para que la nueva configuración surta efecto.  
  
 El <xref:System.Diagnostics.TraceEventType> enumeración se utiliza para definir el tipo de evento de mensaje de seguimiento. Uso de filtros de seguimiento el <xref:System.Diagnostics.TraceEventType> para determinar si un agente de escucha de seguimiento debe generar el mensaje de seguimiento.  
  
 Los agentes de escucha de seguimiento, opcionalmente, pueden tener un nivel adicional de filtrado a través de un filtro de seguimiento.  Si un agente de escucha de seguimiento tiene un filtro asociado, el agente de escucha llama el <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> método en ese filtro para determinar si se debe o no generar la información de seguimiento.  
  
 Los agentes de escucha de seguimiento utilizan los valores de la <xref:System.Diagnostics.Trace> propiedades de la clase <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, y <xref:System.Diagnostics.Trace.AutoFlush%2A> a la salida de seguimiento de formato. Puede utilizar atributos de archivo de configuración para establecer el <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, y <xref:System.Diagnostics.Trace.AutoFlush%2A> propiedades. El ejemplo siguiente se establece la <xref:System.Diagnostics.Trace.AutoFlush%2A> propiedad `false` y <xref:System.Diagnostics.Trace.IndentSize%2A> propiedad a 3.  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource> clase para enviar seguimientos a los agentes de escucha.  El ejemplo también muestra el uso del conmutador y filtro.  
  
 [!code-cpp[System.Diagnostics.TraceSource2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CPP/tracesource2.cpp#1)]
 [!code-csharp[System.Diagnostics.TraceSource2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.TraceSource2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSource (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSource(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.TraceSource : string -&gt; System.Diagnostics.TraceSource" Usage="new System.Diagnostics.TraceSource name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the source (typically, the name of the application).</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class, using the specified name for the source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de origen se utiliza para identificar los seguimientos. Lo está usando un <xref:System.Diagnostics.SourceFilter> para determinar si un agente de escucha de seguimiento debe producir el seguimiento. La práctica recomendada es utilizar el nombre de la aplicación para el nombre de origen.  
  
> [!NOTE]
>  No es necesario crear un nuevo <xref:System.Diagnostics.TraceSource> instancia para cada solicitud de seguimiento. Crear una <xref:System.Diagnostics.TraceSource> instancia y usarla para todas las solicitudes de seguimiento de la aplicación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource.%23ctor%2A> constructor para crear un nuevo <xref:System.Diagnostics.TraceSource> objeto. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#9)]
 [!code-vb[System.Diagnostics.TraceSource2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSource (string name, System.Diagnostics.SourceLevels defaultLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Diagnostics.SourceLevels defaultLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, defaultLevel As SourceLevels)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSource(System::String ^ name, System::Diagnostics::SourceLevels defaultLevel);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.TraceSource : string * System.Diagnostics.SourceLevels -&gt; System.Diagnostics.TraceSource" Usage="new System.Diagnostics.TraceSource (name, defaultLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="defaultLevel" Type="System.Diagnostics.SourceLevels" />
      </Parameters>
      <Docs>
        <param name="name">The name of the source, typically the name of the application.</param>
        <param name="defaultLevel">A bitwise combination of the enumeration values that specifies the default source level at which to trace.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class, using the specified name for the source and the default source level at which tracing is to occur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de origen se utiliza para identificar los seguimientos. Lo puede usar un <xref:System.Diagnostics.SourceSwitch> para determinar si el seguimiento es que se produzca y un <xref:System.Diagnostics.SourceFilter> para determinar si se debe producir el seguimiento. El nivel de origen predeterminado es usar un <xref:System.Diagnostics.EventTypeFilter> determinar si el seguimiento es que se produzca según el nivel de origen del mensaje para realizar un seguimiento.  
  
> [!NOTE]
>  No es necesario crear un nuevo <xref:System.Diagnostics.TraceSource> instancia para cada solicitud de seguimiento. Crear una <xref:System.Diagnostics.TraceSource> instancia y usarla para todas las solicitudes de seguimiento de la aplicación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Attributes { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Collections.Specialized.StringDictionary" Usage="System.Diagnostics.TraceSource.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom switch attributes defined in the application configuration file.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> que contiene los atributos personalizados para el modificador de seguimiento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.Attributes%2A> propiedad identifica los atributos personalizados que se hace referenciados en el archivo de configuración de la aplicación. No se enumeran los atributos personalizados. Las clases que heredan de la <xref:System.Diagnostics.TraceSource> clase puede agregar atributos personalizados reemplazando el <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=nameWithType> método y devuelve una matriz de cadenas de nombres de atributo personalizado.  
  
 El siguiente es un ejemplo de un elemento de origen de seguimiento que especifica el atributo personalizado `SecondTraceSourceAttribute`:  
  
```  
<sources>  
  <source name="TraceTest" switchName="TestSourceSwitch"   
    switchType="Testing.MySourceSwitch, TraceSample"   
    SecondTraceSourceAttribute="two">  
  </source>  
</sources>  
```  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo mostrar los atributos personalizados para un <xref:System.Diagnostics.TraceSource>.  Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#14)]
 [!code-vb[System.Diagnostics.TraceSource2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="traceSource.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes all the trace listeners in the trace listener collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.Close%2A> llamadas al método el <xref:System.Diagnostics.TraceListener.Close%2A> método de cada agente de escucha de seguimiento en el <xref:System.Diagnostics.TraceSource.Listeners%2A> colección.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo se puede utilizar el <xref:System.Diagnostics.TraceSource.Close%2A> método para cerrar todos los agentes de escucha de la colección. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource2#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Valor de la petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="traceSource.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flushes all the trace listeners in the trace listener collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.Flush%2A> llamadas al método el <xref:System.Diagnostics.TraceListener.Flush%2A> método de cada agente de escucha de seguimiento en el <xref:System.Diagnostics.TraceSource.Listeners%2A> colección.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo se puede utilizar el <xref:System.Diagnostics.TraceSource.Flush%2A> método para vaciar todos los agentes de escucha de la colección. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource2#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected internal virtual string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="traceSource.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the custom attributes supported by the trace source.</summary>
        <returns>A string array naming the custom attributes supported by the trace source, or <see langword="null" /> if there are no custom attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada de <xref:System.Diagnostics.TraceSource.GetSupportedAttributes%2A> devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una invalidación de la <xref:System.Diagnostics.TraceSource.GetSupportedAttributes%2A> método para identificar los atributos personalizados para el `MyTraceSource` clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al heredar de la <see cref="T:System.Diagnostics.TraceSource" /> clase o una clase derivada, se puede invalidar el <see cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" /> método para proporcionar atributos personalizados para la clase.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.TraceSource.Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of trace listeners for the trace source.</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceListenerCollection" /> que contiene los agentes de escucha de seguimiento activos asociados al origen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta propiedad para obtener acceso y realizar operaciones en los agentes de escucha de seguimiento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Valor de la petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Diagnostics.TraceSource.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the trace source.</summary>
        <value>Nombre del origen de seguimiento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establece el nombre de la `name` parámetro se pasa al constructor. Hacer referencia al origen de seguimiento mediante la `name` atributo en el archivo de configuración.  
  
 El elemento XML siguiente muestra que hace referencia a un origen de seguimiento en el archivo de configuración.  
  
```  
<configuration>  
  <system.diagnostics>  
    <sources>  
      <source name="TraceTest">  
      </source>  
    </sources>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo denominar un origen de seguimiento en la llamada al constructor.  Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#9)]
 [!code-vb[System.Diagnostics.TraceSource2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SourceSwitch Switch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.SourceSwitch Switch" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Property Switch As SourceSwitch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::SourceSwitch ^ Switch { System::Diagnostics::SourceSwitch ^ get(); void set(System::Diagnostics::SourceSwitch ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Switch : System.Diagnostics.SourceSwitch with get, set" Usage="System.Diagnostics.TraceSource.Switch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SourceSwitch</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source switch value.</summary>
        <value>Objeto <see cref="T:System.Diagnostics.SourceSwitch" /> que representa el valor del modificador de origen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad permite filtrar los mensajes antes de que el origen de seguimiento llama a los agentes de escucha.  
  
 El conmutador se utiliza para comprobar si las llamadas de seguimiento deben generarse o pasa por alto. Cada método de seguimiento llama el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> método de la <xref:System.Diagnostics.SourceSwitch> para determinar si debe continuar con el seguimiento. Si la llamada devuelve `true`, se llaman a los agentes de escucha.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Diagnostics.TraceSource.Switch" /> is set to <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para trabajar con código no administrado. Valor de la petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public void TraceData (System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceData(valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceData (eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceData(System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="member this.TraceData : System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="traceSource.TraceData (eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="data">The trace data.</param>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and trace data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceData%2A> método, como el <xref:System.Diagnostics.TraceSource.TraceEvent%2A> método, está pensado para herramientas automatizadas, pero también permite la conexión de un objeto adicional, como una instancia de excepción para el seguimiento.  
  
 El <xref:System.Diagnostics.TraceSource.TraceData%2A> llamadas al método el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=nameWithType> método de la <xref:System.Diagnostics.SourceSwitch> objeto devuelto por la <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> devuelve `true`, <xref:System.Diagnostics.TraceSource.TraceData%2A> llama correspondiente <xref:System.Diagnostics.TraceListener.TraceData%2A> método en todos los agentes de escucha. En caso contrario, <xref:System.Diagnostics.TraceSource.TraceData%2A> devuelve sin llamar a métodos de los agentes de escucha.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.EventLogTraceListener> objeto está limitado a un máximo `id` valor de 65.535. Si el `id` valor especificado es mayor que 65.535, la <xref:System.Diagnostics.EventLogTraceListener> de objeto usa 65.535.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource.TraceData%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.Object%29> método para filtrar y reenviar un mensaje de seguimiento a los agentes de escucha. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#28)]
 [!code-vb[System.Diagnostics.TraceSource2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public void TraceData (System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceData(valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceData (eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceData(System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.TraceData : System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="traceSource.TraceData (eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="data">An object array containing the trace data.</param>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and trace data array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceData%2A> método, como el <xref:System.Diagnostics.TraceSource.TraceEvent%2A> método, está pensado para herramientas automatizadas, pero también permite la conexión de los objetos adicionales, como una instancia de excepción y un seguimiento de pila para el seguimiento.  
  
 El <xref:System.Diagnostics.TraceSource.TraceData%2A> llamadas al método el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> método de la <xref:System.Diagnostics.SourceSwitch> objeto devuelto por la <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> devuelve `true`, <xref:System.Diagnostics.TraceSource.TraceData%2A> llama correspondiente <xref:System.Diagnostics.TraceListener.TraceData%2A> método en todos los agentes de escucha. En caso contrario, <xref:System.Diagnostics.TraceSource.TraceData%2A> devuelve sin llamar a métodos de los agentes de escucha.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.EventLogTraceListener> objeto está limitado a un máximo `id` valor de 65.535. Si el `id` valor especificado es mayor que 65.535, la <xref:System.Diagnostics.EventLogTraceListener> de objeto usa 65.535.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int -&gt; unit" Usage="traceSource.TraceEvent (eventType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type and event identifier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> método está pensado para eventos de seguimiento que pueden ser procesados automáticamente por herramientas. Por ejemplo, una herramienta de supervisión puede notificar a un administrador si se realiza un seguimiento de un evento específico por un origen específico.  
  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llamadas al método el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> método de la <xref:System.Diagnostics.SourceSwitch> objeto devuelto por la <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> devuelve `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llama correspondiente <xref:System.Diagnostics.TraceListener.TraceEvent%2A> método de cada agente de escucha. En caso contrario, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> devuelve sin llamar a métodos de los agentes de escucha.  
  
 El contenido de seguimiento es específico de agente de escucha. Si el método no se reemplaza por la implementación de agente de escucha, la salida predeterminada es el nombre del origen de seguimiento, su identidad numérica y el tipo de evento.  Contenido de seguimiento adicional depende de si el agente de escucha <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> valor de propiedad.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.EventLogTraceListener> objeto está limitado a un máximo `id` valor de 65.535. Si el `id` valor especificado es mayor que 65.535, la <xref:System.Diagnostics.EventLogTraceListener> usa 65.535.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> método para pasar un evento de seguimiento a los agentes de escucha. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#17)]
 [!code-vb[System.Diagnostics.TraceSource2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="traceSource.TraceEvent (eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="message">The trace message to write.</param>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> método está pensado para eventos de seguimiento que pueden ser procesados automáticamente por herramientas. Por ejemplo, una herramienta de supervisión puede notificar a un administrador si se realiza un seguimiento de un evento específico por un origen específico.  
  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llamadas al método el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> método de la <xref:System.Diagnostics.SourceSwitch> objeto devuelto por la <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> devuelve `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llama correspondiente <xref:System.Diagnostics.TraceListener.TraceEvent%2A> método de cada agente de escucha. En caso contrario, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> devuelve sin llamar a métodos de los agentes de escucha.  
  
 El contenido de seguimiento es específico de agente de escucha. Si el método no se reemplaza por la implementación de agente de escucha, la salida predeterminada es el nombre del origen de seguimiento, su identidad numérica, el tipo de evento y el mensaje.  Contenido de seguimiento adicional depende de si el agente de escucha <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> valor de propiedad.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.EventLogTraceListener> objeto está limitado a un máximo `id` valor de 65.535. Si el `id` valor especificado es mayor que 65.535, la <xref:System.Diagnostics.EventLogTraceListener> de objeto usa 65.535.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> método para pasar un evento de seguimiento a los agentes de escucha. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#18)]
 [!code-vb[System.Diagnostics.TraceSource2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="traceSource.TraceEvent (eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</param>
        <param name="args">An <see langword="object" /> array containing zero or more objects to format.</param>
        <summary>Writes a trace event to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and argument array and format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la `format` parámetro, consulte [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> método está pensado para eventos de seguimiento que pueden ser procesados automáticamente por herramientas. Por ejemplo, una herramienta de supervisión puede notificar a un administrador si se realiza un seguimiento de un evento específico por un origen específico.  
  
 El <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llamadas al método el <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> método de la <xref:System.Diagnostics.SourceSwitch> objeto devuelto por la <xref:System.Diagnostics.TraceSource.Switch%2A> propiedad. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> devuelve `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> llama correspondiente <xref:System.Diagnostics.TraceListener.TraceEvent%2A> método de cada agente de escucha. En caso contrario, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> devuelve sin llamar a métodos de los agentes de escucha.  
  
 El contenido de seguimiento es específico de agente de escucha. El valor predeterminado <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> método escribe el nombre de origen, el tipo de evento y la identidad numérica en el encabezado de seguimiento, a continuación, llama el <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método, pasando el `format` cadena y `args` matriz y el uso del <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> propiedad para dar formato a la cadena como la salida del mensaje.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.EventLogTraceListener> objeto está limitado a un máximo `id` valor de 65.535. Si el `id` valor especificado es mayor que 65.535, la <xref:System.Diagnostics.EventLogTraceListener> de objeto usa 65.535.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> método para pasar un evento de seguimiento a los agentes de escucha. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.TraceSource> clase.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#24)]
 [!code-vb[System.Diagnostics.TraceSource2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.  -or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceInformation">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public void TraceInformation (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceInformation(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceInformation (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceInformation(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.TraceInformation : string -&gt; unit" Usage="traceSource.TraceInformation message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The informative message to write.</param>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceInformation%2A> método proporciona un mensaje informativo pensado para ser leídos por los usuarios y no a las herramientas.  
  
 <xref:System.Diagnostics.TraceSource.TraceInformation%28System.String%29> llamadas a la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> método el valor de `eventType` a <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType> y pasando el mensaje informativo como cadena de mensaje. El <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> método llama a su vez el <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> método de cada agente de escucha de seguimiento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public void TraceInformation (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceInformation(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceInformation (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceInformation(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.TraceInformation : string * obj[] -&gt; unit" Usage="traceSource.TraceInformation (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</param>
        <param name="args">An array containing zero or more objects to format.</param>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified object array and formatting information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la `format` parámetro, consulte [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
 El <xref:System.Diagnostics.TraceSource.TraceInformation%2A> método proporciona un mensaje informativo pensado para ser leídos por los usuarios y no a las herramientas.  
  
 <xref:System.Diagnostics.TraceSource.TraceInformation%28System.String%2CSystem.Object%5B%5D%29> llamadas a la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> método el valor de `eventType` a <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType> y pasar el contenido del mensaje como una matriz de objetos con información de formato. El <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> método llama a su vez el <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> método de cada agente de escucha de seguimiento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.  -or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public void TraceTransfer (int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceTransfer(int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceTransfer (id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceTransfer(int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="member this.TraceTransfer : int * string * Guid -&gt; unit" Usage="traceSource.TraceTransfer (id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">A numeric identifier for the event.</param>
        <param name="message">The trace message to write.</param>
        <param name="relatedActivityId">A structure that identifies the related activity.</param>
        <summary>Writes a trace transfer message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified numeric identifier, message, and related activity identifier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> llamadas al método el <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> método de cada agente de escucha de seguimiento en el <xref:System.Diagnostics.TraceSource.Listeners%2A> propiedad que se va a escribir la información de seguimiento. El valor predeterminado <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> método en la base de <xref:System.Diagnostics.TraceListener> clase llamadas el <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=nameWithType> método para procesar la llamada, establecer `eventType` a <xref:System.Diagnostics.TraceEventType.Transfer?displayProperty=nameWithType> y anexar una representación de cadena de la `relatedActivityId` GUID a `message`.  
  
 <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> está pensado para usarse con las operaciones lógicas de una <xref:System.Diagnostics.CorrelationManager>. El `relatedActivityId` parámetro está relacionado con la <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> propiedad de un <xref:System.Diagnostics.CorrelationManager> objeto. Si una operación lógica comienza en una actividad y se transfiere a otra, la segunda actividad registra la transferencia mediante una llamada a la <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> método. El <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> llamada está relacionada con la nueva identidad de actividad a la identidad anterior. El consumidor más probable de esta funcionalidad es un visor de seguimiento que puede notificar operaciones lógicas que abarcan varias actividades.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.XmlWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.EventSchemaTraceListener" />
        <altmember cref="T:System.Diagnostics.DelimitedListTraceListener" />
      </Docs>
    </Member>
  </Members>
</Type>