<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fb887e69cbce0df3845c3eef1e79b919a3ee40b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37664972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige el resultado de la traza o la depuración a la salida estándar o a la secuencia de error estándar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.ConsoleTraceListener> clase para escribir el seguimiento y depuración de mensajes en la consola. Se puede inicializar un <xref:System.Diagnostics.ConsoleTraceListener> objeto para escribir mensajes de seguimiento en el <xref:System.Console.Out%2A?displayProperty=nameWithType> stream o a la <xref:System.Console.Error%2A?displayProperty=nameWithType> stream.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar el tipo, debe deshacerse de él directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un`try` / `catch` bloque. Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 Cuando se traza y salida de depuración está habilitada, el <xref:System.Diagnostics.ConsoleTraceListener> los mensajes se escriben a los especificados <xref:System.Console?displayProperty=nameWithType> secuencia, que es similar a la forma en que los mensajes se escriben con el <xref:System.Console.Write%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> métodos. En una aplicación de consola, el <xref:System.Console?displayProperty=nameWithType> flujos de salida y error escriben mensajes en la ventana de consola existente, o puede redirigir las secuencias para escribir en un <xref:System.IO.TextWriter?displayProperty=nameWithType> instancia.  
  
> [!NOTE]
>  Si la consola no existe, como se muestra en una aplicación basada en Windows, no se muestran los mensajes escritos en la consola.  
  
 Agregar un <xref:System.Diagnostics.ConsoleTraceListener> objeto correspondientes <xref:System.Diagnostics.Trace.Listeners%2A> colección si desea que los mensajes escritos a través de <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, o <xref:System.Diagnostics.Debug> se escriban en la consola. Además, puede escribir los mensajes directamente a la consola utilizando la <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> métodos.  
  
> [!NOTE]
>  El <xref:System.Diagnostics.Debug> y <xref:System.Diagnostics.Trace> clases comparten el mismo <xref:System.Diagnostics.TraceListenerCollection> colección, tiene acceso a través de sus respectivas `Listeners` propiedades. Si agrega un <xref:System.Diagnostics.ConsoleTraceListener> objeto a la colección utilizando una de estas clases, la otra clase utiliza automáticamente la misma escucha.  
  
 La mayoría de los compiladores habilitar el seguimiento de resultados y de depuración a través de marcadores de compilación condicional. Si no habilita la traza o la depuración, los mensajes escritos a través de la <xref:System.Diagnostics.Debug?displayProperty=nameWithType> y <xref:System.Diagnostics.Trace?displayProperty=nameWithType> clases se omiten. La sintaxis para habilitar el seguimiento y la salida de depuración es compilador específico; Si usa los compiladores que no sean de C# o Visual Basic, consulte la documentación del compilador.  
  
-   Para habilitar la depuración en C#, agregue el **/d: Debug**marca a la línea de comandos del compilador al compilar el código, o puede agregar **#define DEBUG** a la parte superior del archivo. En Visual Basic, agregue el **/d: DEBUG = True** marca a la línea de comandos del compilador.  
  
-   Para habilitar el seguimiento en C#, agregue el **/d: Trace** marca a la línea de comandos del compilador al compilar el código o agregar **#define TRACE** a la parte superior del archivo. En Visual Basic, agregue el **/d: TRACE = True** marca a la línea de comandos del compilador.  
  
 Puede agregar un <xref:System.Diagnostics.ConsoleTraceListener> de objeto para el <xref:System.Diagnostics.Trace.Listeners%2A> colección en el código, o bien puede agregar un <xref:System.Diagnostics.ConsoleTraceListener> de objeto para el <xref:System.Diagnostics.Trace.Listeners%2A> colección a través del archivo de configuración de aplicación. Agregar la <xref:System.Diagnostics.ConsoleTraceListener> objeto en el código para escribir mensajes de una ruta de acceso de sección o la ejecución de código específico. Agregar la <xref:System.Diagnostics.ConsoleTraceListener> objeto en el archivo de configuración de aplicación para dirigir todas trace y debug mensajes a la consola mientras se ejecuta la aplicación.  
  
 Para escribir el seguimiento y depurar mensajes en la consola para una sección concreta del código, inicialice un <xref:System.Diagnostics.ConsoleTraceListener> y agregarlo a la <xref:System.Diagnostics.Trace.Listeners%2A> colección. Instrumente la sección de código que contiene mensajes mediante la <xref:System.Diagnostics.Trace> o <xref:System.Diagnostics.Debug> clases. Al final de la sección de código, quite el <xref:System.Diagnostics.ConsoleTraceListener> objeto desde el <xref:System.Diagnostics.Trace.Listeners%2A> colección y llamar a la <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> método en el <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 Para dirigir todo el seguimiento y depurar los mensajes en la consola mientras se ejecuta la aplicación, agregue un <xref:System.Diagnostics.ConsoleTraceListener> objeto en el archivo de configuración de la aplicación. Editar el archivo de configuración que se corresponde con el nombre de la aplicación o el archivo app.config en un [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] proyecto. En este archivo, inserte un elemento para un <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 En el ejemplo siguiente se agrega un <xref:System.Diagnostics.ConsoleTraceListener> objeto denominado `configConsoleListener` a la <xref:System.Diagnostics.Trace.Listeners%2A> colección.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Para obtener más información acerca de cómo agregar los agentes de escucha de seguimiento en el archivo de configuración, consulte [ &lt;los agentes de escucha&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se implementa una aplicación de consola que consta de una clase con dos métodos públicos.  
  
 El `Main` método examina los argumentos de línea de comandos y determina si se debe dirigir el resultado del seguimiento a la secuencia de error estándar o el flujo de salida estándar. `Main` crea e inicializa un <xref:System.Diagnostics.ConsoleTraceListener> objeto para el elemento especificado <xref:System.Console> flujo de salida y este objeto se agrega a la colección de agente de escucha de seguimiento. A continuación, llama el `WriteEnvironmentInfoToTrace` método, que escribe los detalles sobre el entorno de ejecución y la configuración de agente de escucha de seguimiento a la salida de seguimiento.  
  
 Cuando se ejecuta la aplicación de ejemplo, los detalles de configuración de entorno y de seguimiento se escriben en el flujo de salida de consola especificada a través de la <xref:System.Diagnostics.ConsoleTraceListener> objeto.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.ConsoleTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.ConsoleTraceListener" /> con los resultados de seguimiento escritos en el flujo de salida estándar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa un <xref:System.Diagnostics.ConsoleTraceListener> objeto para escribir mensajes en el <xref:System.Console.Out%2A?displayProperty=nameWithType> stream. Su <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se inicializa en una cadena vacía ("").  
  
   
  
## Examples  
 El siguiente código en el ejemplo se inicializa un <xref:System.Diagnostics.ConsoleTraceListener> objeto para el elemento especificado <xref:System.Console> flujo de salida y lo agrega a la colección de agente de escucha de seguimiento. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.ConsoleTraceListener> clase.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">Es <see langword="true" /> para escribir los resultados de traza y de depuración en la secuencia de error estándar; es <see langword="false" /> para escribir los resultados de traza y de depuración en el flujo de salida estándar.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.ConsoleTraceListener" /> con una opción para escribir el resultado de seguimiento en el flujo de salida estándar o en el flujo de error estándar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa un <xref:System.Diagnostics.ConsoleTraceListener> objeto para escribir mensajes en uno el <xref:System.Console.Out%2A?displayProperty=nameWithType> o el <xref:System.Console.Error%2A?displayProperty=nameWithType> stream. Su <xref:System.Diagnostics.TraceListener.Name%2A> propiedad se inicializa en una cadena vacía ("").  
  
   
  
## Examples  
 El siguiente código en el ejemplo se inicializa un <xref:System.Diagnostics.ConsoleTraceListener> objeto para el elemento especificado <xref:System.Console> flujo de salida y lo agrega a la colección de agente de escucha de seguimiento. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Diagnostics.ConsoleTraceListener> clase.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la salida a la secuencia especificada para este agente de escucha de seguimiento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La secuencia especificada para este <xref:System.Diagnostics.ConsoleTraceListener> instancia (ya sea el <xref:System.Console.Out%2A?displayProperty=nameWithType> secuencia o el <xref:System.Console.Error%2A?displayProperty=nameWithType> secuencia) está cerrado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>