<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88596074c0bd24dd3f2dd67de13860ad50ec959d" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51902870" /></Metadata><TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite instalar y configurar un registro de eventos en el que la aplicación lee o escribe cuando se ejecuta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventLogInstaller> está usando el [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md) al instalar un registro de eventos. La <xref:System.Diagnostics.EventLogInstaller> clase sólo puede instalar los registros de eventos en el equipo local.  
  
 Utilice la <xref:System.Diagnostics.EventLogInstaller> clase cuando la aplicación se escribe en un registro de eventos; no es necesario usar un instalador de registro de eventos para la aplicación para leer de un registro de eventos. Aplicaciones y servicios deben escribir en el registro de aplicación o un registro personalizado. Deben escribir controladores de dispositivo en el registro del sistema.  
  
> [!NOTE]
>  El registro de seguridad es de solo lectura.  
  
 El instalador crea el origen del evento que se especifica en el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad y se registra para el registro de eventos especificado en <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad. Este comportamiento es similar a llamar a <xref:System.Diagnostics.EventLog.CreateEventSource%2A> en el <xref:System.Diagnostics.EventLog> componente.  
  
 Use la <xref:System.Diagnostics.EventLog.WriteEvent%2A> y <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos para escribir eventos en un registro de eventos. Debe especificar un origen de eventos para escribir eventos; debe crear y configurar el origen del evento antes de escribir la primera entrada con el origen.  
  
 Crear el nuevo origen de eventos durante la instalación de la aplicación. Esto permite que el tiempo para el sistema operativo actualizar la lista de orígenes de eventos registrados y sus configuraciones. Si el sistema operativo no ha actualizado su lista de orígenes de eventos e intenta escribir un evento con el nuevo origen, que se producirá un error en la operación de escritura. Puede configurar un nuevo origen utilizando un <xref:System.Diagnostics.EventLogInstaller>, o mediante el <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método. Debe tener derechos administrativos en el equipo para crear un nuevo origen de eventos.  
  
 Puede crear un origen de eventos para un registro de eventos existente o un registro de eventos. Cuando se crea un nuevo origen para un registro de eventos, el sistema registra el origen para este registro, pero no se crea el registro hasta que la primera entrada se escriba en él.  
  
 Para instalar un registro de eventos, cree una clase de instalador de proyecto que herede de <xref:System.Configuration.Install.Installer>y establezca el <xref:System.ComponentModel.RunInstallerAttribute> para que la clase `true`. Dentro del proyecto, cree un <xref:System.Diagnostics.EventLogInstaller> para cada registro de eventos que escribirá en la aplicación y agregue la instancia a la clase de instalador del proyecto.  
  
 Cuando el [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md) es llamado, examina el <xref:System.ComponentModel.RunInstallerAttribute>. Si es `true`, la herramienta instala todos los elementos de la <xref:System.Configuration.Install.Installer.Installers%2A> colección que están asociados con el instalador del proyecto. Si <xref:System.ComponentModel.RunInstallerAttribute> es `false`, la herramienta omite el instalador del proyecto.  
  
 Modificar otras propiedades de un <xref:System.Diagnostics.EventLogInstaller> ya sea antes o después de agregar la instancia a la <xref:System.Configuration.Install.Installer.Installers%2A> colección del instalador del proyecto, pero antes de ejecuta la herramienta de instalación. Debe establecer el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad si la aplicación va a escribir en el registro de eventos.  
  
 Usar <xref:System.Diagnostics.EventLogInstaller> para registrar un nuevo origen para un registro de eventos nuevo o existente; no use <xref:System.Diagnostics.EventLogInstaller> para cambiar un origen existente. La <xref:System.Diagnostics.EventLogInstaller> clase no modifica las propiedades de configuración de un origen existente para que coincida con las propiedades de instalación especificado. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método produce una excepción si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen que está registrado para otro registro de eventos en el equipo. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método no registra el origen si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen ya está registrado para el mismo registro de eventos especificado en el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad.  
  
 Puede registrar el origen del evento con archivos de recursos localizados para las cadenas de categoría y el mensaje de evento. La aplicación puede escribir entradas del registro de eventos con identificadores de recursos, en lugar de especificar la cadena real. El Visor de eventos usa el identificador de recursos para buscar y mostrar la cadena correspondiente desde el archivo de recursos localizado en función de la configuración de idioma actual. Puede registrar un archivo independiente para las categorías de eventos, mensajes y las cadenas de inserción de parámetro, o puede registrar el mismo archivo de recursos para los tres tipos de cadenas. Use la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, y <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propiedades para configurar el origen para escribir entradas adaptadas en el registro de eventos. Si su aplicación escribe los valores de cadenas directamente en el registro de eventos, no es necesario establecer estas propiedades.  
  
 El origen debe configurarse para escribir entradas adaptadas o cadenas directas. Si su aplicación escribe las entradas mediante identificadores de recursos y los valores de cadena, debe registrar dos orígenes diferentes. Por ejemplo, configure un origen con archivos de recursos y, a continuación, usar ese origen en el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas mediante identificadores de recursos en el registro de eventos. Crear un origen diferente sin archivos de recursos y, a continuación, usar ese origen de la <xref:System.Diagnostics.EventLog.WriteEntry%2A> método para escribir cadenas directamente en el registro de eventos con ese origen.  
  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> clase desde dentro del código; se suelen llamar sólo por Installutil.exe. La herramienta llama automáticamente a la <xref:System.Diagnostics.EventLogInstaller.Install%2A> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a la <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método para el objeto que generó la excepción.  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación de un nuevo origen de eventos. El ejemplo de código establece el nombre de origen y el nombre de registro de eventos y agrega el <xref:System.Diagnostics.EventLogInstaller> a la <xref:System.Configuration.Install.Installer.Installers%2A> colección.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
    <related type="Article" href="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Herramienta Installer)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventLogInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de categorías en el archivo de recursos de categoría.</summary>
        <value>El número de categorías del archivo de recursos de categoría. El valor predeterminado es cero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> y <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> localizados de las propiedades para escribir eventos con las cadenas de categoría. El Visor de eventos muestra la categoría de una entrada de evento, si se proporciona una categoría al escribir el evento. Categorías de registro de eventos son cadenas definidas por la aplicación que ayudan a filtrar eventos o proporcionan información sobre un evento. Por ejemplo, la aplicación puede definir categorías independientes para distintos componentes u operaciones diferentes.  
  
 Categorías de eventos son opcionales; Si la aplicación no utiliza categorías, no establezca la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> y <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propiedades.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación de un nuevo origen de eventos. El ejemplo de código establece el nombre del origen de evento, nombre de registro de eventos y archivo de recursos para el texto del evento localizado.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso del archivo de recursos que contiene las cadenas de categoría para el origen.</summary>
        <value>Ruta de acceso al archivo de recursos de categoría. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> y <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> localizados de las propiedades para escribir eventos con las cadenas de categoría. El Visor de eventos muestra la categoría de una entrada de eventos si se proporciona una categoría al escribir el evento. Categorías de registro de eventos son cadenas definidas por la aplicación que ayudan a filtrar eventos o proporcionan información sobre un evento. Por ejemplo, la aplicación podría tener distintas categorías para componentes diferentes o distintas operaciones.  
  
 Categorías de eventos son opcionales; Si la aplicación no utiliza categorías, no establezca la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> y <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propiedades.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación de un nuevo origen de eventos. El ejemplo de código establece el nombre del origen de evento, nombre de registro de eventos y archivo de recursos para el texto del evento localizado.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><see cref="T:System.ComponentModel.IComponent" /> que se utiliza como plantilla para <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copia los valores de propiedad de un componente <see cref="T:System.Diagnostics.EventLog" /> que se necesitan durante la instalación para un registro de eventos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El componente especificado por el `component` parámetro debe ser un <xref:System.Diagnostics.EventLog>; en caso contrario, se produce una excepción.  
  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> desde dentro del código; se suele llamar únicamente por la [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> Installutil.exe se usa para establecer los valores de propiedad para el <xref:System.Diagnostics.EventLogInstaller> a los valores de una existente <xref:System.Diagnostics.EventLog>.  
  
 Si el <xref:System.Diagnostics.EventLog.Log%2A> de la <xref:System.Diagnostics.EventLog> que es pasado es una cadena vacía (""), debe establecer el <xref:System.Diagnostics.EventLog.Log%2A> propiedad en un valor válido antes de que se ejecute el instalador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El componente especificado no es un <see cref="T:System.Diagnostics.EventLog" />.  
  
O bien 
Las propiedades <see cref="P:System.Diagnostics.EventLog.Log" /> o <see cref="P:System.Diagnostics.EventLog.Source" /> del componente especificado son <see langword="null" /> o están vacías.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" /> que se utiliza para guardar la información necesaria para realizar una operación de deshacer o desinstalar.</param>
        <summary>Realiza la instalación y escribe la información del registro de eventos en el Registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método escribe información de registro de eventos en el registro y asocia el registro de eventos a un registro especificado por el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad. Si no existe el registro (y se especifica un origen), <xref:System.Diagnostics.EventLogInstaller.Install%2A> crea un registro y asocia el nuevo origen.  
  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> desde dentro del código; se suele llamar únicamente por la [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md). La herramienta llama automáticamente a la <xref:System.Diagnostics.EventLogInstaller.Install%2A> método durante el proceso de instalación para escribir la información del registro que está asociado con el registro de eventos que se va a instalar. La instalación es transaccional, por lo que si se produce un error de cualquier componente de proyecto de instalación durante la instalación, se revierten a su estado previo de instalación a todos los componentes instalados anteriormente. Esto se logra mediante una llamada a cada componente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método.  
  
 Usar <xref:System.Diagnostics.EventLogInstaller> para registrar un nuevo origen para un registro de eventos nuevo o existente; no use <xref:System.Diagnostics.EventLogInstaller> para cambiar un origen existente. La <xref:System.Diagnostics.EventLogInstaller> clase no modifica las propiedades de configuración de un origen existente para que coincida con las propiedades de instalación especificado. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método produce una excepción si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen que está registrado para otro registro de eventos en el equipo. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método omite el registro del origen si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen ya está registrado para el mismo registro de eventos especificado en el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad.  
  
 La rutina de instalación de la aplicación utiliza el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propiedad para mantener automáticamente la información sobre los componentes que ya se han instalado. Esta información de estado, que se pasa a <xref:System.Diagnostics.EventLogInstaller.Install%2A> como el `stateSaver` parámetro, se actualiza continuamente como la herramienta instala cada <xref:System.Diagnostics.EventLogInstaller>. Por lo general, no es necesario para el código explícitamente se modifique esta información de estado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">La plataforma que el instalador está intentando usar no es Windows NT 4.0 o posterior.</exception>
        <exception cref="T:System.ArgumentException">El nombre especificado en la propiedad <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> ya está registrado para un registro de eventos diferente.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Instalador que se va a comparar.</param>
        <summary>Determina si un instalador y otro instalador especificado hacen referencia al mismo origen.</summary>
        <returns>Es <see langword="true" /> si este instalador y el instalador especificado por el parámetro <paramref name="otherInstaller" /> instalarán o desinstalarán el mismo origen; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> desde dentro del código; se suele llamar solo por la herramienta de instalación (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del registro en el que hay que establecer el origen.</summary>
        <value>Nombre del registro. Puede ser Application, System o el nombre de un registro personalizado. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad para asociar el origen especificado en el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad con un registro existente o un nuevo registro en el equipo local. El [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md) usa esta información para asignar el origen en el registro en el registro del equipo. Aplicaciones y servicios deben escribir en el registro de aplicación o un registro personalizado. Deben escribir controladores de dispositivo en el registro del sistema.  
  
 Para escribir entradas en un registro de eventos, debe crear un origen y registrarlo en un registro de eventos. Un origen de eventos sólo puede escribir en un registro a la vez. El instalador usa el valor de la <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad que se va a registrar la aplicación con el registro de eventos como un origen válido de entradas. Si no especifica un nombre de registro antes de ejecutar el instalador, el programa de instalación registra el origen en el registro de aplicación. Si especifica un nuevo origen y un registro existente, el instalador crea un nuevo origen de eventos y lo asocia con el registro que se especifique. Si especifica un nuevo origen y un nuevo registro, el instalador asocia el nuevo origen con el nuevo registro en el registro, pero no se crea el registro hasta que la primera entrada se escriba en él.  
  
 El sistema operativo almacena los registros de eventos como archivos. Cuando usas <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método para crear un nuevo registro de eventos, el archivo asociado se almacena en el directorio %SystemRoot%\System32\Config del equipo especificado. Se establece el nombre de archivo anexando los 8 primeros caracteres de la <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad con la extensión de nombre de archivo "evt".  
  
 Usar <xref:System.Diagnostics.EventLogInstaller> para registrar un nuevo origen para un registro de eventos nuevo o existente; no use <xref:System.Diagnostics.EventLogInstaller> para cambiar un origen existente. La <xref:System.Diagnostics.EventLogInstaller> clase no modifica las propiedades de configuración de un origen existente para que coincida con las propiedades de instalación especificado. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método produce una excepción si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen que está registrado para otro registro de eventos en el equipo. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método no registra el origen si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen ya está registrado para el mismo registro de eventos especificado en el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad.  
  
 Para obtener más información sobre los comportamientos de los registros de eventos y orígenes, vea el <xref:System.Diagnostics.EventLog> documentación para la clase el <xref:System.Diagnostics.EventLog.Log%2A> y <xref:System.Diagnostics.EventLog.Source%2A> propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso del archivo de recursos que contiene las cadenas de formato de mensaje para el origen.</summary>
        <value>Ruta de acceso al archivo de recursos de mensaje. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propiedad para configurar un origen de registro de eventos para escribir mensajes de eventos adaptados. Los mensajes de eventos son cadenas definidas por la aplicación que describen el evento al usuario.  
  
 La aplicación puede escribir entradas del registro de eventos con identificadores de recursos. Un identificador de recursos indiza un mensaje que se encuentra en la <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. El Visor de eventos usa el identificador de recursos para buscar y mostrar la cadena correspondiente desde el archivo de recursos localizado en función de la configuración de idioma actual.  
  
 El origen del evento debe configurarse para escribir entradas adaptadas o cadenas directas. Use el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas adaptadas para un origen configurado con un archivo de recursos de mensaje.  
  
 Si su aplicación escribe cadenas de mensajes de eventos directamente, en lugar de usar un identificador de recursos en un archivo de recursos localizado, no establezca la <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propiedad.  
  
 Si el <xref:System.Diagnostics.EventLog.MachineName%2A> propiedad no es el identificador del equipo local ("."), .NET Framework se da por supuesto que es el archivo de recursos en un equipo remoto. Si el <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> valor de propiedad contiene una letra de unidad, se supone que el archivo de recursos en el \\ \\< machinename\>\\< unidad\>$ compartido (por ejemplo, \\\server \c$). Si el valor contiene la cadena % systemroot %, se supone que el archivo de recursos en el \\ \\< machinename\>\admin$ compartir (por ejemplo, \\\server\admin$).  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación de un nuevo origen de eventos. El ejemplo de código establece el nombre del origen de evento, nombre de registro de eventos y archivo de recursos para el texto del evento localizado.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso del archivo de recursos que contiene las cadenas de parámetros de mensaje para el origen.</summary>
        <value>La ruta de acceso del archivo de recursos de parámetros de mensaje. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> insertado de propiedad para configurar un origen de registro de eventos para escribir mensajes de eventos adaptados con cadenas del parámetro. Cada mensaje de evento localizado especificado en el <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propiedad puede contener marcadores de posición para las cadenas de inserción. Estos marcadores de posición se usan para especificar la posición y el identificador de recurso para una cadena independiente del lenguaje dentro del mensaje de evento. El Visor de eventos reemplaza los marcadores de posición con las cadenas correspondientes de la <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> y da formato al mensaje de registro de eventos para la entrada de evento localizado.  
  
 Por ejemplo, la siguiente sección de un archivo de texto de mensaje define una cadena con un marcador de posición de parámetro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 En el archivo de recursos de parámetro, la cadena de inserción debe definirse con el identificador de recurso que se corresponde con el marcador de posición, como se muestra a continuación:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 El origen del evento debe configurarse para escribir entradas adaptadas o cadenas directas. Use el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para escribir entradas adaptadas para un origen configurado con un archivo de recursos de mensaje.  
  
 Si su aplicación escribe cadenas de mensajes de eventos directamente en el registro de eventos, o si su <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> no contiene mensajes con marcadores de posición de inserción de parámetro, no establezca la <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propiedad.  
  
 Para obtener detalles sobre cómo definir los mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación de un nuevo origen de eventos. El ejemplo de código establece el nombre del origen de evento, nombre de registro de eventos y archivo de recursos para el texto del evento localizado.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto del mensaje es el origen desde el que se crea el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto para la categoría, mensaje de evento y las cadenas de inserción de parámetro. En concreto, el mensaje definido para el identificador de recursos 1004 utiliza un marcador de posición para una cadena de parámetro definida para el identificador de recursos 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> que contiene el estado del equipo previo a la instalación.</param>
        <summary>Restaura el equipo al estado que tenía antes de la instalación, deshaciendo la información del registro de eventos que el procedimiento de instalación escribió en el Registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método deshace los efectos de la <xref:System.Diagnostics.EventLogInstaller.Install%2A> método. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> se llama si se produce un error en la instalación de cualquier componente en el proyecto de instalación. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método crea o establece las propiedades de un registro de eventos y el origen del evento. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Elimina el registro de eventos y el origen o restablece las propiedades de un origen existente a sus valores previos a la instalación.  
  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> desde dentro del código; se suele llamar únicamente por la [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md). Las llamadas de la herramienta la <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método, cuando ocurre un error en este u otro componente instalado, para deshacer los cambios que ya ha realizado el proceso de instalación.  
  
 La rutina de instalación de la aplicación utiliza el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propiedad para mantener automáticamente la información sobre los componentes que ya se han instalado. Esta información de estado, que se pasa a <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> como el `savedState` parámetro, se actualiza continuamente como la herramienta pone cada <xref:System.Diagnostics.EventLogInstaller>. Por lo general, no es necesario para el código explícitamente se modifique esta información de estado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del origen que se va a registrar con el registro.</summary>
        <value>Nombre que se va a registrar con el registro de eventos como origen de entradas. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El origen de eventos indica qué registra el evento. A menudo es el nombre de la aplicación o el nombre de un componente dentro de una aplicación grande.  
  
 El instalador usa el valor de la <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad que se va a registrar la aplicación con el registro de eventos como un origen válido de entradas. Un nuevo nombre de origen no puede coincidir con un nombre de origen existente o un nombre de registro de eventos existente. Cada origen solo puede escribir en un registro de eventos a la vez; Sin embargo, la aplicación puede utilizar varios orígenes para escribir en varios registros de eventos. Por ejemplo, su aplicación puede requerir configurados para los diferentes registros de eventos o archivos de recursos de varios orígenes.  
  
 Aplicaciones y servicios deben escribir en el registro de aplicación o un registro personalizado. Deben escribir controladores de dispositivo en el registro del sistema. Si no especifica un nombre de registro antes de ejecutar el instalador, el programa de instalación registra el origen en el registro de aplicación. Si especifica el nombre de un registro que no existe, el sistema registra la <xref:System.Diagnostics.EventLogInstaller.Source%2A> en el registro, pero no se crea el registro hasta que la primera entrada se escriba en él.  
  
 Usar <xref:System.Diagnostics.EventLogInstaller> para registrar un nuevo origen para un registro de eventos nuevo o existente; no use <xref:System.Diagnostics.EventLogInstaller> para cambiar un origen existente. La <xref:System.Diagnostics.EventLogInstaller> clase no modifica las propiedades de configuración de un origen existente para que coincida con las propiedades de instalación especificado. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método produce una excepción si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen que está registrado para otro registro de eventos en el equipo. El <xref:System.Diagnostics.EventLogInstaller.Install%2A> método no registra el origen si el <xref:System.Diagnostics.EventLogInstaller.Source%2A> propiedad coincide con un nombre de origen ya está registrado para el mismo registro de eventos especificado en el <xref:System.Diagnostics.EventLogInstaller.Log%2A> propiedad.  
  
 Para obtener más información sobre los comportamientos de los registros de eventos y orígenes, vea el <xref:System.Diagnostics.EventLog> documentación para la clase el <xref:System.Diagnostics.EventLog.Log%2A> y <xref:System.Diagnostics.EventLog.Source%2A> propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> que contiene el estado del equipo previo a la instalación.</param>
        <summary>Quita una instalación suprimiendo la información del registro de eventos del Registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> es el valor de propiedad `Remove`, el <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> método elimina el origen y el registro asociado que el instalador crea si el <xref:System.Diagnostics.EventLogInstaller.Log%2A> y <xref:System.Diagnostics.EventLogInstaller.Source%2A> la creación de un nuevo registro de eventos y el origen especificado de propiedades.  
  
 Normalmente, no se llama los métodos de la <xref:System.Diagnostics.EventLogInstaller> desde dentro del código; se suele llamar únicamente por la [Installutil.exe (herramienta Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md) en modo de desinstalación. La herramienta llama automáticamente a la <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> método para restaurar las partes del sistema que resultaron afectadas por la instalación a su estado previo de instalación. Esto incluye la eliminación de información del registro que está asociado con el registro de eventos que se va a desinstalar.  
  
 Una aplicación de la rutina de desinstalación utiliza el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propiedad para mantener automáticamente la información sobre los componentes que ya se ha desinstalado. Esta información de estado, que se pasa a <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> como el `savedState` parámetro, se actualiza continuamente como la herramienta desinstala cada <xref:System.Diagnostics.EventLogInstaller>. Por lo general, no es necesario para el código explícitamente se modifique esta información de estado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la <see href="https://docs.microsoft.com/dotnet/framework/tools/installutil-exe-installer-tool">herramienta de instalación Installutil.exe</see> debe quitar el registro de eventos o dejarlo en su estado instalado, en el momento de la desinstalación.</summary>
        <value>Uno de los valores <see cref="T:System.Configuration.Install.UninstallAction" /> que indica el estado en el que permanecerá el registro de eventos cuando se desinstale <see cref="T:System.Diagnostics.EventLog" />. El valor predeterminado es <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se instala un registro de eventos, opcionalmente, puede conectarse a un registro existente. Si lo hace, debe decidir si el registro debe volver a su estado antes de la instalación o permanecen en su estado actual después de la instalación. Si elige devolver el registro de eventos a su estado antes de la instalación, no se restauran los cambios realizados en las entradas de registro de eventos durante la instalación. Puede restablecer solo las propiedades de registro de eventos que están asociadas con el <xref:System.Diagnostics.EventLogInstaller> a sus valores previos a la instalación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contiene un valor no válido. Los únicos valores válidos para esta propiedad son <see langword="Remove" /> y <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>