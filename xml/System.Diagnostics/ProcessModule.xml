<Type Name="ProcessModule" FullName="System.Diagnostics.ProcessModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="540f92fd7392575a34bdd5a677cd8de9167884f7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399079" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProcessModule : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessModule extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessModule" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessModule&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessModule : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa a un archivo .dll o .exe que se carga en un proceso determinado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un módulo es un archivo ejecutable o una biblioteca de vínculos dinámicos (DLL). Cada proceso consta de uno o varios módulos. Puede utilizar esta clase para obtener información acerca del módulo.  
  
> [!IMPORTANT]
>  Este tipo implementa la <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque. Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo utilizar la <xref:System.Diagnostics.ProcessModule> clase para obtener y mostrar información acerca de todos los módulos que se usan por la aplicación Notepad.exe.  
  
 [!code-cpp[ProcessModule#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule/CPP/processmodule.cpp#1)]
 [!code-csharp[ProcessModule#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule/CS/processmodule.cs#1)]
 [!code-vb[ProcessModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule/VB/processmodule.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">De plena confianza para el llamador inmediato. Esta clase no puede ser usada por código de confianza parcial.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">de plena confianza para los herederos. Esta clase no puede heredarse mediante código de confianza parcial.</permission>
  </Docs>
  <Members>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public IntPtr BaseAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr BaseAddress { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve la dirección de memoria en la que se cargó el módulo.</summary>
        <value>Dirección de carga del módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> y <xref:System.Diagnostics.ProcessModule.BaseAddress%2A> propiedades se utilizan para mostrar el nombre del módulo y la dirección de memoria donde cada módulo se cargó.  
  
 [!code-cpp[ProcessModule_BaseAddress#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_BaseAddress/CPP/processmodule_baseaddress.cpp#1)]
 [!code-csharp[ProcessModule_BaseAddress#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_BaseAddress/CS/processmodule_baseaddress.cs#1)]
 [!code-vb[ProcessModule_BaseAddress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_BaseAddress/VB/processmodule_baseaddress.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryPointAddress">
      <MemberSignature Language="C#" Value="public IntPtr EntryPointAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int EntryPointAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.EntryPointAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryPointAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr EntryPointAddress { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of the entry point of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección de memoria de la función que se ejecuta cuando el sistema carga y ejecuta el módulo.</summary>
        <value>Punto de entrada del módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punto de entrada del módulo es la ubicación de la función que se llama durante el inicio del proceso, inicio del subproceso, proceso de cierre y el cierre de subprocesos. Mientras que el punto de entrada no es la dirección de la función DllMain, debe ser lo suficientemente cerca para la mayoría de los casos.  
  
> [!NOTE]
>  Debido a cambios en la forma en que Windows carga los ensamblados, <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> siempre devolverá 0 en [!INCLUDE[win8](~/includes/win8-md.md)] o [!INCLUDE[win81](~/includes/win81-md.md)] y no debe usarse para esas plataformas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> y <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> propiedades se utilizan para mostrar el nombre y la dirección de punto de entrada para cada módulo.  
  
 [!code-cpp[ProcessModule_EntryPoint#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_EntryPoint/CPP/processmodule_entrypoint.cpp#1)]
 [!code-csharp[ProcessModule_EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_EntryPoint/CS/processmodule_entrypoint.cs#1)]
 [!code-vb[ProcessModule_EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_EntryPoint/VB/processmodule_entrypoint.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The file name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ruta de acceso completa al módulo.</summary>
        <value>Ruta de acceso completa que define la ubicación del módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el nombre de archivo es mayor que el número máximo de caracteres permitido, se trunca el nombre de archivo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> y <xref:System.Diagnostics.ProcessModule.FileName%2A> propiedades se utilizan para mostrar el nombre del módulo y la información de ruta de acceso completa de cada módulo.  
  
 [!code-cpp[ProcessModule_FileName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileName/CPP/processmodule_filename.cpp#1)]
 [!code-csharp[ProcessModule_FileName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileName/CS/processmodule_filename.cs#1)]
 [!code-vb[ProcessModule_FileName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileName/VB/processmodule_filename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileVersionInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.FileVersionInfo FileVersionInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileVersionInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileVersionInfo As FileVersionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::FileVersionInfo ^ FileVersionInfo { System::Diagnostics::FileVersionInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.FileVersionInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la información de versión del módulo.</summary>
        <value>Un objeto <see cref="T:System.Diagnostics.FileVersionInfo" /> que contiene la información de versión del módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> y <xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A> propiedades se utilizan para mostrar el nombre del módulo y la información de versión de archivo para cada módulo.  
  
 [!code-cpp[ProcessModule_FileVersionInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CPP/processmodule_fileversioninfo.cpp#1)]
 [!code-csharp[ProcessModule_FileVersionInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CS/processmodule_fileversioninfo.cs#1)]
 [!code-vb[ProcessModule_FileVersionInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileVersionInfo/VB/processmodule_fileversioninfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleMemorySize">
      <MemberSignature Language="C#" Value="public int ModuleMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ModuleMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ModuleMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The memory needed by this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la cantidad de memoria necesaria para cargar el módulo.</summary>
        <value>Tamaño, en bytes, de la memoria que ocupa el módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> no incluye las asignaciones de memoria adicionales que realiza el módulo cuando se está ejecutando; incluye únicamente el tamaño del código estático y los datos en el archivo de módulo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> y <xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> propiedades se utilizan para mostrar el nombre del módulo y la cantidad de memoria necesaria para cada módulo.  
  
 [!code-cpp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CPP/processmodule_modulememorysize.cpp#1)]
 [!code-csharp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CS/processmodule_modulememorysize.cs#1)]
 [!code-vb[ProcessModule_ModuleMemorySize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/VB/processmodule_modulememorysize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleName">
      <MemberSignature Language="C#" Value="public string ModuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ModuleName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ModuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del módulo del proceso.</summary>
        <value>El nombre del módulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el nombre es mayor que el número máximo de caracteres permitido, se trunca.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ModuleName%2A> propiedad se utiliza para mostrar el nombre de cada módulo.  
  
 [!code-cpp[ProcessModule_ModuleName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleName/CPP/processmodule_modulename.cpp#1)]
 [!code-csharp[ProcessModule_ModuleName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleName/CS/processmodule_modulename.cs#1)]
 [!code-vb[ProcessModule_ModuleName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleName/VB/processmodule_modulename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessModule.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el nombre del módulo en una cadena.</summary>
        <returns>Valor de propiedad <see cref="P:System.Diagnostics.ProcessModule.ModuleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo proceso para la aplicación de Notepad.exe. El código recorre en iteración la <xref:System.Diagnostics.ProcessModuleCollection> clase para obtener un <xref:System.Diagnostics.ProcessModule> objeto para cada módulo en la colección. El <xref:System.Diagnostics.ProcessModule.ToString%2A> método se usa para mostrar el nombre de cada módulo.  
  
 [!code-cpp[ProcessModule_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ToString/CPP/processmodule_tostring.cpp#1)]
 [!code-csharp[ProcessModule_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ToString/CS/processmodule_tostring.cs#1)]
 [!code-vb[ProcessModule_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ToString/VB/processmodule_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>