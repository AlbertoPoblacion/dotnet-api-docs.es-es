<Type Name="EventSchemaTraceListener" FullName="System.Diagnostics.EventSchemaTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebc2f93999298ef50555146af155a8da345f35ff" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36343210" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSchemaTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSchemaTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSchemaTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSchemaTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type EventSchemaTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige los resultados de seguimiento o de depuración de eventos de un extremo a otro a un archivo de registro con codificación XML conforme al esquema.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Diagnostics.EventSchemaTraceListener> clase proporciona la traza de eventos conformes al esquema-to-end. Puede utilizar el seguimiento de extremo a extremo para un sistema que tiene componentes heterogéneos que atraviesan el subproceso, <xref:System.AppDomain>, proceso y los límites del equipo. Un esquema de eventos normalizado (vea [representación en forma de evento para los consumidores de eventos](http://go.microsoft.com/fwlink/?LinkId=78955)) se ha definido para habilitar el seguimiento a través de estos límites. El esquema permite la adición de elementos personalizados, conforme al esquema. Puede usar el [herramienta Service Trace Viewer (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) para mostrar los datos del evento.  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> se optimiza para el registro de rendimiento con compatibilidad implícita con el seguimiento de sin bloqueo.  
  
 La <xref:System.Diagnostics.EventSchemaTraceListener> clase convierte la información en un flujo de texto XML codificado de depuración y seguimiento. La descripción de la salida XML se muestra en las tablas más adelante en esta sección.  
  
 Puede habilitar o deshabilitar un <xref:System.Diagnostics.EventSchemaTraceListener> objeto a través del archivo de configuración de aplicación y, a continuación, usar el configurado <xref:System.Diagnostics.EventSchemaTraceListener> objeto en la aplicación. Como alternativa, puede crear un <xref:System.Diagnostics.EventSchemaTraceListener> objeto en el código. Se recomienda que habilite los agentes de escucha de seguimiento a través del archivo de configuración de aplicación. Para obtener información sobre el uso de archivos de configuración para el seguimiento y depuración, consulte [Trace y Debug Settings Schema](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).  
  
 Para configurar una <xref:System.Diagnostics.EventSchemaTraceListener> de objetos, modifique el archivo de configuración que se corresponde con el nombre de la aplicación. En este archivo, puede agregar, quitar o establecer las propiedades de un agente de escucha. El archivo de configuración debe tener el formato siguiente:  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sources>  
            <source name="TestSource" >  
                <listeners>  
                    <!--Remove the default trace listener for better performance.-->  
                    <remove name="Default"/>  
                    <!--Note: Removing the default trace listener prevents the dialog box   
                    from being displayed for Debug.Fail or Debug.Assert commands that are   
                    executed in user mode.-->  
                    <add name="eventListener"   
                      type="System.Diagnostics.EventSchemaTraceListener,  system.core"  
                      initializeData="TraceOutput.xml"   
                      traceOutputOptions="ProcessId, DateTime, Timestamp"   
                      bufferSize="65536"  
                      maximumFileSize="20480000"  
                      logRetentionOption="LimitedCircularFiles"  
                      maximumNumberOfFiles="2"/>  
                </listeners>  
            </source>  
        </sources>  
    </system.diagnostics>  
```  
  
 El <xref:System.Diagnostics.EventSchemaTraceListener> clase hereda el <xref:System.Diagnostics.TraceListener.Filter%2A> propiedad de la clase base <xref:System.Diagnostics.TraceListener>. El <xref:System.Diagnostics.TraceListener.Filter%2A> propiedad permite un nivel adicional de filtrado en el agente de escucha de traza los resultados. Si un filtro está presente, el `Trace` métodos de la llamada de agente de escucha de seguimiento el <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> método del filtro para determinar si se debe emitir el seguimiento.  
  
 Si se realiza un intento para escribir en un archivo que se está usando o no está disponible, se agrega automáticamente un sufijo GUID para el nombre de archivo.  
  
> [!NOTE]
>  Métodos de agente de escucha están diseñados para ser llamado por métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases. No llame a los métodos de agente de escucha directamente desde el código de la aplicación. El <xref:System.Diagnostics.EventSchemaTraceListener> agente de escucha está diseñado principalmente para su uso por el <xref:System.Diagnostics.TraceSource> clase.  
  
 La tabla siguiente describen los elementos y atributos de la salida XML.  
  
|Elemento|Atributos|Salida|Notas|  
|-------------|----------------|------------|-----------|  
|`CallStack`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.Callstack> se marcan en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Caracteres especiales como > o < se reemplazan por las secuencias de escape. Vea la tabla de traducción de carácter de escape en la tabla siguiente.|  
|`Computer`|None|Siempre está presente.|Este elemento representa el valor de la <xref:System.Environment.MachineName%2A> propiedad.|  
|`Correlation`|`ActivityID`|Siempre está presente.|Si `ActivityID` no se especifica, el valor predeterminado es un GUID vacío.|  
||`RelatedActivityID`|Depende de la presencia de la `relatedActivityId` parámetro en el `Trace` llamada al método.|El `RelatedActivityID` atributo corresponde a la `relatedActivityId` parámetro de la <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> método.|  
|`Data`|None|Siempre está presente.|Este elemento representa la entrada del parámetro (`data`). Se proporciona un elemento para cada objeto de datos. En el caso de los registros de eventos, el `Data` elemento contiene datos XML de escape. En el caso de los registros de datos, la `Data` elemento contiene datos sin escape. Los datos de registros se utiliza de salida el `ToString` método de los objetos de datos en el pasado.|  
|`Event`|None|Siempre está presente.|Este elemento contiene un evento de seguimiento.|  
|`EventData`|None|Presente para los registros de eventos.|Este elemento representa la entrada del parámetro (`message`, `args`). Contiene `Data` elementos con datos XML de escape que se crean mediante una llamada a la <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> método.|  
|`EventID`|None|Siempre está presente.|Este elemento representa la entrada del parámetro (`id`).|  
|`Execution`|`ProcessID`|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.ProcessId> se marcan en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El `ProcessID` atributo se especifica en el <xref:System.Diagnostics.TraceEventCache>. En el Microsoft Windows 98 y Windows Millennium Edition los sistemas operativos, si `ProcessID` es mayor que 2.147.483.647, es una representación positiva de un número negativo y debe convertirse para obtener el identificador de proceso correcto.|  
||`ThreadID`|Presentar cuando `ProcessID` está presente.|El `ThreadID` atributo se especifica en el <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|None|Siempre está presente.|Este elemento representa la entrada del parámetro (el valor numérico de `eventType`). Los valores de parámetro mayores que 255 son salida como un nivel 8, que representa <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType>. Tipos de evento de seguimiento <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, y <xref:System.Diagnostics.TraceEventType.Verbose> son salida como niveles 1, 2, 4, 8 y 10, respectivamente.|  
|`LogicalOperationStack`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> se marcan en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Puede haber solo una operación lógica. Por lo tanto, los valores se escriben como `LogicalOperation` nodos que hay bajo la `LogicalOperationStack` elemento.|  
|`OpCode`|None|Presentar cuando `Level` es mayor que 255.|Este elemento representa tipos de evento de seguimiento que tienen valores numéricos mayores que 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, o <xref:System.Diagnostics.TraceEventType.Transfer> son salida como niveles 1, 2, 4, 8 y 10, respectivamente.|  
|`Provider`|`GUID`|Siempre está presente.|Siempre está vacía.|  
|`RenderingInfo`|`Culture`|Siempre está presente.|Este atributo representa una cadena de recurso para el tipo de evento. Siempre es "en-EN\\".|  
|`System`|`Name`|Siempre está presente.||  
|`TimeCreated`|`SystemTime`|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.DateTime> se marcan en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La hora es el valor de la <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=nameWithType> propiedad. Esta propiedad se expresa como hora Universal coordinada|  
|`TimeStamp`|None|Depende de la presencia de la <xref:System.Diagnostics.TraceOptions.Timestamp> se marcan en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|Este elemento se especifica en el <xref:System.Diagnostics.TraceEventCache>.|  
|`UserData`|None|Presente para los registros de datos.|Este elemento contiene `Data` elementos con los datos sin escape, proporcionado por el usuario desde un <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> método.|  
  
 La siguiente tabla muestra los caracteres de escape en los resultados XML. Secuencia de escape se produce en todos los elementos y atributos excepto el `UserData` elemento, que contiene proporcionado por el usuario, datos sin caracteres de escape. El `UserData` elemento es el resultado de las llamadas a la <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> método.  
  
|Carácter de escape|Valor|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-cpp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> y usa el archivo especificado como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, se registra un archivo sin restricción de tamaño.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=nameWithType> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <param name="name">Nombre del agente de escucha.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> con el nombre especificado y usa el archivo especificado como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <param name="name">Nombre del agente de escucha.</param>
        <param name="bufferSize">Tamaño del búfer de salida, en bytes.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> con el nombre especificado y el tamaño de búfer especificado, y usa el archivo especificado como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por motivos de rendimiento, `bufferSize` debe ser un múltiplo de 1024 bytes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <param name="name">Nombre del agente de escucha.</param>
        <param name="bufferSize">Tamaño del búfer de salida, en bytes.</param>
        <param name="logRetentionOption">Uno de los valores de <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> con el nombre especificado y el tamaño de búfer especificado, y usa el archivo especificado, con la directiva de retención de registro especificada, como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por motivos de rendimiento, `bufferSize` debe ser un múltiplo de 1024 bytes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=nameWithType> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <param name="name">Nombre del agente de escucha.</param>
        <param name="bufferSize">Tamaño del búfer de salida, en bytes.</param>
        <param name="logRetentionOption">Uno de los valores de <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.</param>
        <param name="maximumFileSize">Tamaño máximo de archivo, en bytes.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> con el nombre especificado y el tamaño de búfer especificado, y usa el archivo especificado, con la directiva de retención de registro especificada y el tamaño máximo, como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por motivos de rendimiento, `bufferSize` y `maximumFileSize` deben ser múltiplos de 1024 bytes. `maximumFileSize` no es un valor absoluto, es un umbral que se puede superar hasta el tamaño del último mensaje.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=nameWithType> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumFileSize" /> es un número negativo.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long, maximumNumberOfFiles As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize, maximumNumberOfFiles)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ruta de acceso del archivo de registro.</param>
        <param name="name">Nombre del agente de escucha.</param>
        <param name="bufferSize">Tamaño del búfer de salida, en bytes.</param>
        <param name="logRetentionOption">Uno de los valores de <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.</param>
        <param name="maximumFileSize">Tamaño máximo de archivo, en bytes.</param>
        <param name="maximumNumberOfFiles">Número máximo de archivos de registro de resultados.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> con el nombre especificado y el tamaño de búfer especificado, y usa el archivo especificado, con la directiva de retención de registro especificada, el tamaño máximo y el recuento de archivos, como destinatario de los resultados de seguimiento o de depuración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por motivos de rendimiento, `bufferSize` y `maximumFileSize` deben ser múltiplos de 1024 bytes. `maximumFileSize` no es un valor absoluto; es un umbral que se puede superar hasta el tamaño del último mensaje.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A> constructor. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumNumberOfFiles" /> es menor que 2 y <paramref name="logRetentionOption" /> es <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int" Usage="System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño del búfer de salida.</summary>
        <value>Tamaño del búfer de salida, en bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de propiedad se establece el `bufferSize` parámetro en el constructor. Por motivos de rendimiento, el tamaño del búfer debe establecerse en un múltiplo de 1024 bytes. Se recomienda el tamaño predeterminado de 32 * 1024 bytes o 64\*1024 bytes para un rendimiento óptimo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el valor de la <xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="eventSchemaTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el archivo de registro para este agente de escucha, de modo que ya no recibe ningún resultado de seguimiento o de depuración.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="abstract member Fail : string * string -&gt; unit&#xA;override this.Fail : string * string -&gt; unit" Usage="eventSchemaTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error básico que se debe escribir.</param>
        <param name="detailMessage">Mensaje de error detallado que se va a anexar al mensaje de error básico.</param>
        <summary>Escribe la información de error, que incluye un mensaje de error básico y un mensaje de error detallado, en el archivo de registro.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="eventSchemaTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hace que los datos almacenados en el búfer se escriban en el registro para este agente de escucha.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="eventSchemaTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene los atributos de configuración XML personalizados que admite el agente de escucha de seguimiento.</summary>
        <returns>Matriz <see cref="T:System.String" /> que contiene los atributos de configuración XML reconocidos por el agente de escucha.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los atributos personalizados que se devuelven este método pueden utilizarse en el archivo de configuración XML para controlar el comportamiento de una instancia de la <xref:System.Diagnostics.EventSchemaTraceListener> clase. Utilizando cualquier otro atributo, produce una excepción de configuración. El <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> método para el <xref:System.Diagnostics.EventSchemaTraceListener> devuelve valores de la matriz de la cadena siguiente: "bufferSize", "logRetentionOption", "maximumFileSize" y "maximumNumberOfFiles".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsThreadSafe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsThreadSafe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadSafe : bool" Usage="System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el agente de escucha de seguimiento es seguro para la ejecución de subprocesos.</summary>
        <value>Siempre devuelve <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el valor de la <xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumFileSize">
      <MemberSignature Language="C#" Value="public long MaximumFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumFileSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumFileSize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumFileSize : int64" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño máximo del archivo de registro.</summary>
        <value>Tamaño máximo de archivo, en bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de propiedad se establece el `maximumFileSize` parámetro en el constructor o el `maximumFileSize` atributo en el archivo de configuración. Por motivos de rendimiento, debe establecer el tamaño máximo de archivo a un múltiplo de 1024 bytes. La <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> valor de propiedad no es absoluta; es un umbral que se puede superar hasta el tamaño del último mensaje.  
  
 En la tabla siguiente se muestra los valores posibles y predeterminados para el tamaño de archivo que están asociados a cada opción de retención de registro de seguimiento. Los valores marcados como N/D indican que la <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> para que no se comprueba la propiedad <xref:System.Diagnostics.TraceLogRetentionOption> valor.  
  
|TraceLogRetentionOption|Tamaño máximo de archivo|Tamaño de archivo predeterminado|  
|-----------------------------|-----------------------|-----------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/D|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el valor de la <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfFiles">
      <MemberSignature Language="C#" Value="public int MaximumNumberOfFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumNumberOfFiles" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumNumberOfFiles As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumNumberOfFiles { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumNumberOfFiles : int" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número máximo de archivos de registro.</summary>
        <value>Número máximo de archivos de registro, determinado por el valor de la propiedad <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> para el archivo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de propiedad se establece el `maximumNumberOfFiles` parámetro en el constructor o el `maximumNumberOfFiles` atributo en el archivo de configuración.  
  
 En la tabla siguiente se muestra los valores posibles y predeterminados para el tamaño de archivo y número de archivos que están asociados a cada opción de retención de registro de seguimiento. Los valores marcados como N/D indican que la <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> para que no se comprueba la propiedad <xref:System.Diagnostics.TraceLogRetentionOption> valor.  
  
|TraceLogRetentionOption|Número máximo de archivos|Número predeterminado de archivos|  
|-----------------------------|-----------------------------|-----------------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/D|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|N/D|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|N/D|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el valor de la <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe la información de seguimiento en el archivo de registro.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Objeto de datos que se va a emitir.</param>
        <summary>Escribe la información de seguimiento, un solo objeto de datos y la información de los eventos en el archivo de registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` parámetros se usan en el encabezado y pie de página de la traza. El `id` parámetro se convierte en un entero sin signo antes de que se escriba. Por lo tanto, negativo `id` valor se escribe como un número entero positivo grande. El `data` parámetro se escribe como un `Data` nodo en el `UserData` elemento. El `ToString` método del objeto de datos se utiliza para convertir el objeto en una cadena.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Matriz de los objetos de datos que se van a emitir.</param>
        <summary>Escribe la información de seguimiento, varios objetos de datos y la información de los eventos en el archivo de registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` parámetros se usan en el encabezado y pie de página de la traza. El `id` parámetro se convierte en un entero sin signo antes de que se escriba. Por lo tanto, negativo `id` valor se escribe como un número entero positivo grande. Los objetos de la `data` matriz de parámetros se escriben como `Data` nodos en el `UserData` elemento. El `ToString` método de cada objeto de datos se utiliza para convertir el objeto en una cadena.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe la información de seguimiento de los eventos en el archivo de registro.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe la información de seguimiento, un mensaje y la información de los eventos en el archivo de registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` parámetros se usan en el encabezado y pie de página de la traza. El `id` parámetro se convierte en un entero sin signo antes de que se escriba. Por lo tanto, negativo `id` valor se escribe como un número entero positivo grande. El `message` parámetro se escribe como un `Data` nodo en el `EventData` elemento.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="eventType">Uno de los valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="format">Cadena de formato que contiene cero o más elementos de formato que corresponden a los objetos de la matriz <c>args</c>.</param>
        <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato.</param>
        <summary>Escribe la información del seguimiento, un mensaje con formato y la información de los eventos en el archivo de registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `eventCache`, `source`, `eventType`, y `id` parámetros se usan en el encabezado y pie de página de la traza. El `id` parámetro se convierte en un entero sin signo antes de que se escriba. Por lo tanto, negativo `id` valor se escribe como un número entero positivo grande. El <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> se llama al método y el `format` cadena y `args` matriz se pasan como parámetros. Este método da formato a la `args` matriz de objetos y escribe la matriz con formato como el `Data` nodo en el `EventData` elemento.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceLogRetentionOption">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceLogRetentionOption As TraceLogRetentionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceLogRetentionOption TraceLogRetentionOption { System::Diagnostics::TraceLogRetentionOption get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceLogRetentionOption : System.Diagnostics.TraceLogRetentionOption" Usage="System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLogRetentionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la opción de retención de registro del seguimiento para el archivo.</summary>
        <value>Uno de los valores de <see cref="T:System.Diagnostics.TraceLogRetentionOption" />. El valor predeterminado es <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar el valor de la <xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Diagnostics.EventSchemaTraceListener> clase.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="abstract member TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit&#xA;override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="eventSchemaTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre de origen.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje de seguimiento que se va a escribir.</param>
        <param name="relatedActivityId">Estructura <see cref="T:System.Guid" /> que identifica una actividad relacionada.</param>
        <summary>Escribe la información de seguimiento (incluida la identidad de una actividad relacionada), un mensaje y la información de eventos en el archivo de registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> método se utiliza para poner en correlación los seguimientos relacionados. El `eventCache`, `source`, `id`, y `relatedActivityId` parámetros se usan en el encabezado y pie de página de la traza. El `id` parámetro se convierte en un entero sin signo antes de que se escriba. Por lo tanto, negativo `id` valor se escribe como un número entero positivo grande. El `message` parámetro se escribe como el `Data` elemento. El <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> método se llama para convertir el `relatedActivityId` valor a un "B" con formato de cadena, que aparece en el encabezado. El `Opcode` elemento en el pie de página identifica el tipo de evento de seguimiento como un <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  El <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> método no debe llamarse mediante código de aplicación. Está diseñado para utilizarse con un <xref:System.Diagnostics.TraceSource> objeto que se va a emitir la información de seguimiento para su <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="eventSchemaTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe un mensaje en el archivo de registro sin proporcionar ninguna información de contexto adicional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> método se llama para registrar el mensaje como una <xref:System.Diagnostics.TraceEventType.Information> eventos.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="eventSchemaTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe un mensaje seguido del terminador de línea actual del archivo de registro sin proporcionar información de contexto adicional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> método se llama para registrar el mensaje como una <xref:System.Diagnostics.TraceEventType.Information> eventos.  
  
> [!IMPORTANT]
>  Este método no está pensado para ser llamado directamente por el código de la aplicación. Se llama a métodos de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir los datos de seguimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberSignature Language="VB.NET" Value="Public Property Writer As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Writer { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Writer : System.IO.TextWriter with get, set" Usage="System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el escritor de texto subyacente que escribe en el archivo de registro.</summary>
        <value>Un objeto <see cref="T:System.IO.TextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un intento de usar el descriptor de acceso para la <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> propiedad genera una <xref:System.NotSupportedException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se ha intentado asignar un valor a la propiedad <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>