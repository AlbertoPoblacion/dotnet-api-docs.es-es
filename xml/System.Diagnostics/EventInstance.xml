<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d5923ea6f0adb7e9a29cff95c32d8b297910978" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399329" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa la información independiente del idioma de una entrada del registro de eventos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Diagnostics.EventInstance> para escribir una entrada de registro de eventos con un identificador de recursos en lugar de un valor de cadena. Para escribir una entrada de registro de eventos, inicialice la <xref:System.Diagnostics.EventInstance.InstanceId%2A> propiedad y pasar la instancia a la <xref:System.Diagnostics.EventLog.WriteEvent%2A> método. El Visor de eventos usa el identificador de instancia para buscar y mostrar la cadena correspondiente del archivo de recursos localizado en función de la configuración de idioma actual. Debe registrar el origen de eventos con el archivo de recursos correspondiente antes de escribir eventos con identificadores de recursos.  
  
 Al escribir eventos, puede establecer el <xref:System.Diagnostics.EventInstance.EntryType%2A> propiedad para especificar el icono que muestra el Visor de eventos para la entrada. También puede especificar un <xref:System.Diagnostics.EventInstance.CategoryId%2A> propiedad para especificar la categoría que muestra el Visor de eventos para la entrada.  
  
 El Visor de eventos usa la categoría para filtrar los eventos escritos por un origen de eventos. El Visor de eventos puede mostrar la categoría como un valor numérico, o puede utilizar la categoría como un identificador de recursos para mostrar una cadena de categoría adaptada.  
  
 Para mostrar cadenas de categoría adaptadas en el Visor de eventos, debe utilizar un origen de eventos configurado con un archivo de recursos de categoría y establezca el <xref:System.Diagnostics.EventInstance.CategoryId%2A> a un identificador de recurso en el archivo de recursos de categoría. Si el origen del evento no tiene un archivo de recursos de categoría configurado o especificado <xref:System.Diagnostics.EventInstance.CategoryId%2A> no indexar una cadena en el archivo de recursos de categoría y, a continuación, en el Visor de eventos muestra el valor numérico de categoría para esa entrada. Configurar el archivo de recursos de categoría, junto con el número de cadenas de categoría en el archivo de recursos, mediante el <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> clase.  
  
 Debe registrar un origen para un registro de eventos antes de usar <xref:System.Diagnostics.EventInstance> para escribir un evento con el <xref:System.Diagnostics.EventLog.WriteEvent%2A> método. El origen debe configurarse para escribir entradas adaptadas en el registro y el origen debe definir al menos un archivo de recursos de mensaje.  
  
 Crear el nuevo origen de eventos durante la instalación de la aplicación. Esto permite que el sistema operativo actualizar la lista de orígenes de eventos registrados y sus configuraciones. Si el sistema operativo no ha actualizado su lista de orígenes de eventos y se intenta escribir un evento con el nuevo origen, que se producirá un error en la operación de escritura. Puede configurar un nuevo origen mediante un <xref:System.Diagnostics.EventLogInstaller>, o mediante el <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método. Debe tener derechos administrativos en el equipo para crear un nuevo origen de eventos.  
  
 Para obtener más información sobre cómo definir mensajes de eventos y la generación de archivos de recursos de registro de eventos, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe una entrada de evento informativo y, a continuación, vuelve a utilizar el <xref:System.Diagnostics.EventInstance> para escribir una entrada para un evento de advertencia en un registro de eventos existente. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos de mensaje. El ejemplo de código se supone que el archivo de recursos de mensaje correspondiente se ha registrado para el origen.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventInstance" /> utilizando información independiente del idioma para definir una entrada del registro de eventos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identificador de recursos correspondiente a una cadena definida en el archivo de recursos de mensajes del origen de eventos.</param>
        <param name="categoryId">Identificador de recursos correspondiente a una cadena definida en el archivo de recursos de categorías del origen de eventos, o cero para no especificar ninguna categoría para el evento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventInstance" /> utilizando los identificadores de recursos especificados para el mensaje adaptado y el texto de categoría de la entrada de evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para escribir una entrada informativa en un registro de eventos, inicialice una <xref:System.Diagnostics.EventInstance> y lo pasa a la <xref:System.Diagnostics.EventLog.WriteEvent%2A> método. Establecer el `instanceId` para el identificador de recurso del mensaje de evento en la correspondiente <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad para el origen. Establecer el `categoryId` a un valor de categoría numérica, o el identificador de recursos de la categoría de eventos en el <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propiedad para el origen; se establece la `categoryId` a cero para ninguna categoría de eventos. El <xref:System.Diagnostics.EventInstance.EntryType%2A> propiedad de la nueva instancia se establece en <xref:System.Diagnostics.EventLogEntryType.Information> de forma predeterminada.  
  
 El Visor de eventos usa los identificadores de recursos para mostrar las cadenas correspondientes de los archivos de recursos localizados para el origen. Debe registrar el origen con los archivos de recursos correspondiente antes de poder escribir eventos con identificadores de recursos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe una entrada de evento informativo y, a continuación, vuelve a utilizar el <xref:System.Diagnostics.EventInstance> para escribir una entrada para un evento de advertencia en un registro de eventos existente. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos de mensaje. El ejemplo de código se supone que el archivo de recursos de mensaje correspondiente se ha registrado para el origen.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="instanceId" /> es un valor negativo o un valor mayor que <see cref="F:System.UInt32.MaxValue" />.  
  
 O bien  
  
 El parámetro <paramref name="categoryId" /> es un valor negativo o un valor mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identificador de recursos correspondiente a una cadena definida en el archivo de recursos de mensajes del origen de eventos.</param>
        <param name="categoryId">Identificador de recursos correspondiente a una cadena definida en el archivo de recursos de categorías del origen de eventos, o cero para no especificar ninguna categoría para el evento.</param>
        <param name="entryType">Valor de <see cref="T:System.Diagnostics.EventLogEntryType" /> que indica el tipo del evento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.EventInstance" /> utilizando los identificadores de recursos especificados para el mensaje adaptado y el texto de categoría de la entrada de evento y el tipo de entrada del registro de eventos especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para escribir una entrada en un registro de eventos, inicialice una <xref:System.Diagnostics.EventInstance> y lo pasa a la <xref:System.Diagnostics.EventLog.WriteEvent%2A> método. Establecer el `instanceId` para el identificador de recurso del mensaje de evento en la correspondiente <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propiedad para el origen. Establecer el `categoryId` a un valor de categoría numérica, o el identificador de recursos de la categoría de eventos en el <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propiedad para el origen; se establece la `categoryId` a cero para ninguna categoría de eventos.  
  
 El Visor de eventos usa los identificadores de recursos para mostrar las cadenas correspondientes de los archivos de recursos localizados para el origen. Debe registrar el origen con los archivos de recursos correspondiente antes de poder escribir eventos con identificadores de recursos.  
  
 Establecer el `entryType` a uno de los tipos de entrada predefinidos. El Visor de eventos usa el tipo de evento para determinar qué icono se mostrará en la vista de lista del registro de eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe dos entradas de eventos en el registro de eventos de auditoría `myNewLog`. El ejemplo de código crea un nuevo origen de eventos y un registro de eventos si no existen en el equipo local. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="entryType" /> no es un valor válido de <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="instanceId" /> es un valor negativo o un valor mayor que <see cref="F:System.UInt32.MaxValue" />.  
  
 O bien  
  
 <paramref name="categoryId" /> es un valor negativo o un valor mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el identificador de recursos que especifica la categoría definida por la aplicación de la entrada de evento.</summary>
        <value>Valor de categoría numérico o identificador de recursos correspondiente a una cadena definida en el archivo de recursos de categoría del origen de eventos. El valor predeterminado es cero, lo que significa que no se mostrará ninguna categoría para la entrada de evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Categorías de registro de eventos son valores definidos por la aplicación que ayudan a filtrar eventos o proporcionan información adicional acerca del evento. Por ejemplo, la aplicación puede definir categorías distintas para componentes diferentes o distintas operaciones.  
  
 Establecer el <xref:System.Diagnostics.EventInstance.CategoryId%2A> propiedad para especificar la categoría que muestra el Visor de eventos para la entrada. El Visor de eventos puede mostrar la categoría como un valor numérico, o puede usar el <xref:System.Diagnostics.EventInstance.CategoryId%2A> como un recurso de identificador para mostrar una cadena de categoría adaptada en función de la configuración de idioma actual.  
  
 Para mostrar cadenas de categoría adaptadas en el Visor de eventos, debe utilizar un origen de eventos configurado con un archivo de recursos de categoría y establezca el <xref:System.Diagnostics.EventInstance.CategoryId%2A> a un identificador de recurso en el archivo de recursos de categoría. Si el origen del evento no tiene un archivo de recursos de categoría configurado o especificado <xref:System.Diagnostics.EventInstance.CategoryId%2A> no indexar una cadena en el archivo de recursos de categoría y, a continuación, en el Visor de eventos muestra el valor numérico de categoría para esa entrada.  
  
 Debe registrar el origen con el archivo de recursos correspondiente antes de escribir categorías de eventos con identificadores de recursos. Configurar el archivo de recursos de categoría, junto con el número de cadenas de categoría en el archivo de recursos, mediante el <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> clase. Al definir las cadenas de categoría en un archivo de recursos, los identificadores de recursos de categoría deben estar numerados consecutivamente comenzando en 1, hasta el <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> valor de propiedad.  
  
 Categorías de eventos son opcionales. Si la aplicación no utiliza categorías, no establezca la <xref:System.Diagnostics.EventInstance.CategoryId%2A> para la entrada de registro de eventos.  
  
 Para obtener más información sobre cómo definir mensajes de eventos y generación de archivos de recursos de evento, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/). Para obtener más información acerca de cómo definir categorías de eventos en archivos de recursos, vea el tema "Categorías de eventos" en el SDK de plataforma  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe una entrada de evento informativo y, a continuación, vuelve a utilizar el <xref:System.Diagnostics.EventInstance> para escribir una entrada para un evento de advertencia en un registro de eventos existente. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos de mensaje. El ejemplo de código se supone que el archivo de recursos de mensaje correspondiente se ha registrado para el origen.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad está establecida en un valor negativo o un valor mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de evento de la entrada del registro de eventos.</summary>
        <value>Valor de <see cref="T:System.Diagnostics.EventLogEntryType" /> que indica el tipo de entrada del evento. El valor predeterminado es <see cref="F:System.Diagnostics.EventLogEntryType.Information" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada evento es de un tipo único, que la aplicación cuando informa del evento. El Visor de eventos usa el tipo de evento para determinar qué icono se mostrará en la vista de lista del registro de eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe una entrada de evento informativo y, a continuación, vuelve a utilizar el <xref:System.Diagnostics.EventInstance> para escribir una entrada para un evento de advertencia en un registro de eventos existente. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos de mensaje. El ejemplo de código se supone que el archivo de recursos de mensaje correspondiente se ha registrado para el origen.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propiedad no tiene establecido un valor válido de <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el identificador de recursos que designa el texto del mensaje de la entrada de eventos.</summary>
        <value>Identificador de recursos correspondiente a una cadena definida en el archivo de recursos de mensajes del origen de eventos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Diagnostics.EventInstance.InstanceId%2A> propiedad identifica de forma única una entrada de eventos para un origen de eventos configurado. Para los eventos definidos en archivos de recursos de mensaje, el <xref:System.Diagnostics.EventInstance.InstanceId%2A> corresponde al identificador de recursos compilado a partir de los campos de definición de mensaje en el archivo de texto de mensaje. La aplicación puede escribir entradas del registro de eventos adaptadas estableciendo la <xref:System.Diagnostics.EventInstance.InstanceId%2A> a un identificador de recurso. El Visor de eventos usa el <xref:System.Diagnostics.EventInstance.InstanceId%2A> identificador de recursos para buscar y mostrar la cadena correspondiente del archivo de recursos localizado en función de la configuración de idioma actual. Debe registrar el origen con el archivo de recursos correspondiente antes de escribir eventos con identificadores de recursos.  
  
 Para obtener más información sobre cómo definir mensajes de eventos y la generación de archivos de recursos de registro de eventos, vea el tema "Compilador de mensajes" en la documentación de Platform SDK en [ http://msdn.microsoft.com ](http://msdn.microsoft.com/). Para obtener más información acerca de los identificadores de registro de eventos, vea el tema "Identificadores de eventos" en Platform SDK.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe una entrada de evento informativo y, a continuación, vuelve a utilizar el <xref:System.Diagnostics.EventInstance> para escribir una entrada para un evento de advertencia en un registro de eventos existente. El texto del mensaje de evento se especifica utilizando un identificador de recursos en un archivo de recursos de mensaje. El ejemplo de código se supone que el archivo de recursos de mensaje correspondiente se ha registrado para el origen.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 El ejemplo de código usa el siguiente archivo de texto de mensaje, integrado en la biblioteca de recursos EventLogMsgs.dll. Un archivo de texto de mensaje es el origen desde el que se creó el archivo de recursos de mensaje. El archivo de texto de mensaje define los identificadores de recursos y el texto de categoría, mensaje de evento y las cadenas de inserción de parámetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad está establecida en un valor negativo o un valor mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>