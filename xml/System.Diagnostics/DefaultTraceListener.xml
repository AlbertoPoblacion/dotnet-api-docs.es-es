<Type Name="DefaultTraceListener" FullName="System.Diagnostics.DefaultTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2fecfb03cfd81074ed7c6c40ebe2934781ef8a57" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34060727" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DefaultTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DefaultTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultTraceListener : System::Diagnostics::TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona los métodos de salida predeterminados y el comportamiento para el seguimiento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de esta clase se agrega automáticamente a la <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> y <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colecciones. Agregar explícitamente un segundo <xref:System.Diagnostics.DefaultTraceListener> causas duplicar mensajes en la ventana de salida del depurador y los cuadros de mensajes duplicados para las aserciones.  
  
 De forma predeterminada, el <xref:System.Diagnostics.DefaultTraceListener.Write%2A> y <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> métodos envían el mensaje a Win32 `OutputDebugString` función y a la <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType> método. Para obtener información sobre la `OutputDebugString` función, vea Platform SDK o en MSDN.  
  
 El <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> método, de forma predeterminada, muestra un cuadro de mensaje cuando la aplicación se ejecuta en un modo de interfaz de usuario; también envía el mensaje mediante <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  
  
> [!NOTE]
>  La presentación del cuadro de mensaje para <xref:System.Diagnostics.Debug.Assert%2A> y <xref:System.Diagnostics.Debug.Fail%2A> llamadas al método depende de la presencia de la <xref:System.Diagnostics.DefaultTraceListener>. Si el <xref:System.Diagnostics.DefaultTraceListener> no está en el <xref:System.Diagnostics.Trace.Listeners%2A> no se muestra la colección, el cuadro de mensaje. El <xref:System.Diagnostics.DefaultTraceListener> se puede quitar el [ \<borrar > elemento](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), por el [ \<quitar > elemento](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), o mediante una llamada a la <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> método en el <xref:System.Diagnostics.Trace.Listeners%2A> propiedad (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Debe habilitar el seguimiento o la depuración para utilizar un agente de escucha de seguimiento. La sintaxis siguiente es específica del compilador. Si utiliza compiladores que no sean de C# o Visual Basic, consulte la documentación del compilador.  
  
-   Para habilitar la depuración en C#, agregue el `/d:DEBUG` marca a la línea de comandos del compilador al compilar el código, o agregue `#define DEBUG` a la parte superior del archivo. En Visual Basic, agregue el `/d:DEBUG=True` marca a la línea de comandos del compilador.  
  
-   Para habilitar el seguimiento en C#, agregue el `/d:TRACE` marca a la línea de comandos del compilador al compilar el código, o agregue `#define TRACE` a la parte superior del archivo. En Visual Basic, agregue el `/d:TRACE=True` marca a la línea de comandos del compilador.  
  
 Para agregar un agente de escucha de seguimiento, edite el archivo de configuración que se corresponde con el nombre de la aplicación. Dentro de este archivo, puede agregar un agente de escucha, establezca su tipo y establecer sus parámetros, quitar un agente de escucha o borrar todos los agentes de escucha previamente establecidos por la aplicación. El archivo de configuración debe tener el formato similar al ejemplo siguiente:  
  
```xml  
<configuration>  
<system.diagnostics>  
  <trace autoflush="false" indentsize="4">  
    <listeners>  
      <remove name="Default" />  
      <add name="myListener"  type="System.Diagnostics.TextWriterTraceListener"    initializeData="c:\myListener.log" />  
    </listeners>  
  </trace>  
</system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se calcula binomial coeficientes, que son los valores utilizados en probabilidad y estadísticas. Este ejemplo se utiliza un <xref:System.Diagnostics.DefaultTraceListener> resultados de seguimiento y registro de errores. Crea un nuevo <xref:System.Diagnostics.DefaultTraceListener>, lo agrega a la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección y establece el <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> propiedad al archivo de registro especificado en los argumentos de línea de comandos.  
  
 Si se detecta un error al procesar el parámetro de entrada, o si la `CalcBinomial` función produce una excepción, el <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> método registra y muestra un mensaje de error. Si el <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> propiedad es `false`, el mensaje de error también se escribe en la consola. Cuando el resultado se calcula correctamente, el <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> y <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> métodos escriben los resultados en el archivo de registro.  
  
 El <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, y <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> métodos producen información de seguimiento que se escribirá únicamente a la <xref:System.Diagnostics.DefaultTraceListener>. Para escribir información de seguimiento en todos los agentes de escucha de la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección, utilice el <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, y <xref:System.Diagnostics.Trace.WriteLine%2A> métodos de la <xref:System.Diagnostics.Trace> clase.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#11)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#11)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Esta clase es segura para subprocesos.</threadsafe>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Diagnostics.DefaultTraceListener" /> con la propiedad <see cref="P:System.Diagnostics.TraceListener.Name" /> establecida en el valor predeterminado ("Default").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente código en el ejemplo se quita el <xref:System.Diagnostics.DefaultTraceListener> proporcionada por la aplicación desde el <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección y, a continuación, crea un nuevo <xref:System.Diagnostics.DefaultTraceListener> y lo agrega a la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#3)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="AssertUiEnabled">
      <MemberSignature Language="C#" Value="public bool AssertUiEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssertUiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AssertUiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AssertUiEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("AssertUiEnabled defaults to False; should follow Environment.UserInteractive.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la aplicación está funcionando en modo de interfaz de usuario.</summary>
        <value>
          <see langword="true" /> si se ha habilitado el modo de interfaz de usuario; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se llama a una función que llama el <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> método para registrar un mensaje de error si la función produce una excepción. Si el <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> propiedad es `false`, el método también escribe el mensaje de error en la consola.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Emite o muestra un mensaje y un seguimiento de pila para una aserción que produce siempre un error.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se emite o que se muestra.</param>
        <summary>Emite o muestra un mensaje y un seguimiento de pila para una aserción que produce siempre un error.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método envía el `message` parámetro y un seguimiento de pila a un cuadro de mensaje (cuando la aplicación se ejecuta en modo de interfaz de usuario) y a la <xref:System.Diagnostics.DefaultTraceListener> instancia.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se escribe un mensaje de error para un <xref:System.Diagnostics.DefaultTraceListener> mediante el <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29> método. El método también escribe el mensaje en la consola si una interfaz de usuario no está disponible.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#6)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se emite o que se muestra.</param>
        <param name="detailMessage">Mensaje detallado que se emite o muestra.</param>
        <summary>Emite o muestra mensajes detallados y un rastro de pila para una aserción que produce siempre un error.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método envía el `message` parámetro, el `detailMessage` parámetro y un seguimiento de pila a un cuadro de mensaje (cuando la aplicación se ejecuta en modo de interfaz de usuario) y a la <xref:System.Diagnostics.DefaultTraceListener> instancia.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se llama a una función que llama el <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> método para registrar un mensaje de error detallado si la función produce una excepción. El método escribe el mensaje en la consola si una interfaz de usuario no está disponible.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="LogFileName">
      <MemberSignature Language="C#" Value="public string LogFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogFileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de un archivo de registro que contiene mensajes de seguimiento o de depuración.</summary>
        <value>Nombre del archivo de registro que contiene mensajes de seguimiento o de depuración.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo <xref:System.Diagnostics.DefaultTraceListener>, lo agrega a la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colección y establece el <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> propiedad al archivo de registro especificado en los argumentos de línea de comandos.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se debe escribir en <see langword="OutputDebugString" /> y <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Escribe el resultado en la función <see langword="OutputDebugString" /> y en el método <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de Win32 `OutputDebugString` depuración de función, vea "OutputDebugString" en Platform SDK o en MSDN.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se da formato al resultado de una función y utiliza el <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> método para escribir la primera parte del mensaje para un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que se debe escribir en <see langword="OutputDebugString" /> y <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Escribe el resultado en la función <see langword="OutputDebugString" /> y en el método <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />, seguido de un retorno de carro y un salto de línea (\r\n).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea predeterminado corresponde a un retorno de carro seguido de un avance de línea (\r\n).  
  
 Para obtener información acerca de Win32 `OutputDebugString` depuración de función, vea Platform SDK o en MSDN.  
  
 Este método establece la <xref:System.Diagnostics.TraceListener.NeedIndent%2A> propiedad `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se da formato al resultado de una función y utiliza el <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> método para escribir la última parte del mensaje para un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
  </Members>
</Type>