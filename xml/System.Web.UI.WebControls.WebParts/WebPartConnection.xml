<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d33323212fbf6275393a23d262fe4884aeb7fc1a" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59354466" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona un objeto que permite que dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> establezcan una conexión. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el conjunto de controles de elementos Web, una conexión es un vínculo o una asociación entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> (u otros servidor o usuario) los controles que les permite compartir datos. Esta capacidad de compartir datos permite que los controles conectados que se usará de maneras que superan la funcionalidad proporcionada por los controles aislados. Por ejemplo, si un control proporciona datos de código postal y otro control puede leer los datos y proporcionar información meteorológica local basándose en el código postal, la capacidad de la conexión de los dos controles proporciona más valor a los usuarios. Para ampliar este ejemplo, se podrían crear otros controles que también mostrar información basada en un código postal, como un control con vínculos a noticias locales, y todos estos controles pueden trabajar con datos de código postal podrían compartir datos con el único control que proporciona un código postal. Los usuarios finales de las aplicaciones de elementos Web se puede crear y administrar las conexiones entre todos estos controles compatibles directamente desde un explorador Web, mediante la interfaz de usuario de las conexiones estándar (IU) proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, o mediante una interfaz de usuario personalizada proporcionada por un para desarrolladores.  
  
 Esto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> información general de clases es una instrucción general de los detalles básicos para crear una conexión. Para obtener más información sobre los requisitos necesarios para crear las conexiones y componentes específicos, consulte [Introducción a las conexiones de elementos Web](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)), o vea las clases de referencia y se ha mencionado en la siguiente sección de ejemplos de código. Hay varios aspectos fundamentales de una conexión de elementos Web:  
  
-   Dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Cada conexión de elementos Web se compone de dos controles. Es posible que un control participe en más de una conexión al mismo tiempo, pero todas las conexiones solo consta de exactamente dos controles. Los controles pueden derivarse directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPart> clase base, o pueden ser otros controles de servidor, incluidos los controles ASP.NET, controles de servidor personalizados y controles de usuario. Los controles que no se derivan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase, si se coloca en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, automáticamente se encapsulan con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto en tiempo de ejecución, lo que permite que hereden de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase y función como tiempo de ejecución <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Controles que residen en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas. Ambos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y cualquier otro tipo de control de servidor deben residir en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona para poder participar en conexiones de elementos Web (y la mayoría de las otra características de elementos Web).  
  
-   Los consumidores y proveedores. En cada conexión de elementos Web, hay dos controles: un proveedor de datos y un consumidor de datos. El proveedor proporciona los datos al consumidor a través de un método de devolución de llamada especificadas que devuelve datos en forma de una interfaz. (Para obtener un ejemplo de cómo crear y especificar el método de devolución de llamada, consulte la sección ejemplo de este tema). Este método de devolución de llamada se conoce como un punto de conexión del proveedor. Los detalles de este punto de conexión (el nombre "descriptivo", un identificador y el tipo de la interfaz devuelta) se encuentran en un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto asociado con el control proveedor. El consumidor recibe los datos a través de un método especificado que puede aceptar una instancia de la interfaz. Este método se conoce como un punto de conexión del consumidor, y los detalles del punto de conexión (nombre, identificador y tipo de interfaz) se encuentran en un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto asociado con el control consumidor.  
  
-   Controles compatibles o un transformador válido. Para que una conexión funcione, el consumidor y el proveedor deben ser compatible con (lo que significa que sus métodos de punto de conexión especificada pueden trabajar con el mismo tipo de interfaz), o debe haber un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto capaz de traducir el tipo proporcionado por el proveedor en un tipo que entiende el consumidor.  
  
-   Objeto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Para que una conexión a existe, debe haber una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase que contiene referencias a los controles proveedor y consumidor, junto con los detalles de sus puntos de conexión. Si el proveedor y el consumidor no son compatibles y en su lugar, use un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que se va a conectar, la conexión hace referencia el transformador.  
  
-   Una forma de establecer la conexión. Tras han diseñado con métodos de punto de conexión correctamente los controles consumidor y proveedor compatibles y coloca en una zona y un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto está disponible, el último paso básico necesario es iniciar la conexión. Una manera que esto puede ocurrir es para que los usuarios crear la conexión a través de la interfaz de usuario. Si coloca un `<asp:connectionszone>` elemento en la página y el otro requiere componentes de una conexión están en su lugar, en tiempo de ejecución que un usuario puede cambiar la página al modo de conexión, haga clic en un verbo de connect en el menú de verbos del proveedor o del consumidor y una conexión de la interfaz de usuario (según la <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control) se mostrarán. A través de esta interfaz de usuario, el usuario puede iniciar la conexión. Otra manera de iniciar la conexión es hacerlo mediante programación. En cualquier caso, si a través de la interfaz de usuario o mediante programación, el método subyacente que inicia la conexión es el mismo. La aplicación llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método (o el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método si usa un transformador) en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el proveedor, el consumidor y sus objetos de punto de conexión respectivos, y el método devuelve un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase define un objeto que encapsula los detalles esenciales de una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La clase consiste en casi por completo de propiedades relacionadas con los detalles de una conexión determinada. El control consumidor en una conexión refieren a varias propiedades. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad hace referencia al control de consumidor y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad hace referencia el identificador. del consumidor El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> se hace referencia a objeto, que contiene los detalles del punto de conexión del consumidor, el consumidor <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad hace referencia al identificador de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Todas estas propiedades de conexión relacionados con el consumidor deben tener un valor asignado a ellos para crear una conexión.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase también tiene varias propiedades que se relacionan con el control proveedor de una conexión, y estos se corresponden con las propiedades de un consumidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad hace referencia al control de proveedor, mientras que el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad hace referencia a su identificador. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> referencias de propiedad el <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad hace referencia al identificador de punto de conexión del proveedor.  
  
 El estado de la conexión refieren a varias propiedades. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad indica si la conexión está activo (actualmente el intercambio de datos) o inactivos (aún conectados pero no activamente para compartir datos). El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad indica si la conexión es compartida (disponible para todos los usuarios de una página) o una conexión específica del usuario y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad indica si el control es estático (declarado en el marcado de página y, por tanto, permanente) o dinámico (creado mediante programación, lo que significa que TI puede eliminarse).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una conexión simple entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. El ejemplo muestra tres maneras de establecer una conexión: de forma declarativa, mediante la colocación de etiquetas para la conexión en el marcado de la página Web; mediante programación, mediante la creación de la conexión en el código. y a través de la interfaz de usuario, colocando una <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control en la página, lo que permite a los usuarios establecer una conexión.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles. El archivo de código fuente contiene una interfaz sencilla denominada `IZipCode`. También hay un <xref:System.Web.UI.WebControls.WebParts.WebPart> clase denominada `ZipCodeWebPart` que implementa la interfaz y actúa como el control proveedor. Su `ProvideIZipCode` es el método de devolución de llamada que implementa el único miembro de la interfaz. El método simplemente devuelve una instancia de la interfaz. Tenga en cuenta que el método se marca con un `ConnectionProvider` atributo en sus metadatos. Este es el mecanismo para identificar el método como método de devolución de llamada para el punto de conexión del proveedor. El otro <xref:System.Web.UI.WebControls.WebParts.WebPart> clase se denomina `WeatherWebPart`, y actúa como consumidor de la conexión. Esta clase tiene un método denominado `GetZipCode` que obtiene una instancia de la `IZipCode` interfaz desde el control proveedor. Tenga en cuenta que este método está marcado como método de punto de conexión del consumidor con un `ConnectionConsumer` atributo en sus metadatos.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. En la parte superior son la `Register` directivas para el control de usuario y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Dado que el ejemplo supone que la compilación dinámica de los controles, debe ser el código fuente para los controles en una subcarpeta App_Code; el `Register` etiqueta en la página hace referencia a solo un prefijo de etiqueta arbitrario y el espacio de nombres de los controles. Personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (el proveedor y consumidor) se declaran dentro de la página Web `<asp:webpartzone>` elemento, dentro un `<zonetemplate>` elemento.  
  
 La página proporciona tres maneras de establecer una conexión entre los controles personalizados. El primer método es declarativo. En el marcado de la página, un <`StaticConnections>` elemento se declara y, dentro de ese es un `<asp:WebPartConnections>` elemento, con los diversos detalles de consumidor y proveedor de la conexión especificada como atributos. Se trata de una forma de crear una conexión, declarándola directamente en la página Web, específicamente dentro el `<asp:WebPartManager>` elemento. Debido a esta conexión es estática, una conexión entre los dos controles personalizados se crea inmediatamente la primera vez que carga la página.  
  
 Proporciona un segundo método para formar una conexión entre los controles del `<asp:connectionszone>` elemento en la página. Si un usuario cambia una página en modo de conexión en tiempo de ejecución y hace clic en un verbo de connect en uno de los controles personalizados, el `<asp:connectionszone>` elemento representa la interfaz de usuario para crear una conexión de forma automática.  
  
 La página también muestra otra forma de crear una conexión, que consiste en hacerlo mediante programación. En el `Button1_Click` método, el código crea un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto para el control proveedor y recupera los detalles de su punto de conexión mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método. Lleva a cabo una tarea similar para el control consumidor, una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método. Por último, crea el nuevo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página Web en un explorador, la primera conexión ya existe porque está declarado dentro de la `<StaticConnections>` elemento. Escriba algún texto en el **proveedor de código postal** control y se mostrará en el control consumidor. A continuación, desconecte los dos controles. Mediante el **modo de presentación** desplegable lista de control, cambiar la página para conectarse en modo de presentación. Haga clic en el menú de verbos (representado por una flecha hacia abajo en la barra de título) para cada uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y tenga en cuenta que cada uno tiene un **Connect** opción. Se trata de un verbo de conexión que aparece en el menú de verbos solo cuando la página está en modo de conexión. Haga clic en el verbo conectar en uno de los controles y la conexión de la interfaz de usuario proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> aparezca el control. Haga clic en el **desconexión** botón para finalizar la conexión entre los controles estática. Use la **modo de presentación** control para devolver la página al modo de exploración. Intente escribir algún texto nuevo en el proveedor de nuevo y tenga en cuenta que dado que los controles están desconectados, el texto no puede actualizar en el control consumidor.  
  
 A continuación, use el mismo método anterior para cambiar la página al modo de conexión nuevo. Haga clic en un verbo de connect en uno de los controles. Haga clic en el **crear una conexión** vincular y utilizar la interfaz de usuario proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control para crear una conexión entre los controles. Este es el segundo método para crear una conexión. Tenga en cuenta que tan pronto como se establece la conexión, la última cadena especificado en el control proveedor (que no aparecen porque los controles se han desconectado), de repente, aparece en el consumidor, porque se ha vuelto a crear la conexión. Haga clic en el **desconexión** botón para finalizar la conexión que acaba de crear. Devolver la página al modo de exploración. Escriba algún texto nuevo en el proveedor para demostrar que el texto no está actualizado y que los controles están desconectados de nuevo.  
  
 Devolver la página para conectarse en modo de presentación. En lugar de hacer clic en un verbo de conexión, haga clic en el **conectar controles WebPart** botón, que muestra el tercer método de creación de una conexión. Este enfoque conecta a los controles mediante programación en un solo paso sin tener que usar el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Tenga en cuenta que al crear la conexión, la última cadena que escribió en el proveedor, de repente, aparece en el control consumidor.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Introducción a las conexiones de elementos Web</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructor es público para que el analizador de ASP.NET puede crear una instancia cuando se declara una conexión en el marcado de una página Web; este constructor no está pensado para usarse en el código del desarrollador.  
  
 Cuando desee crear un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto mediante programación, debe usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> método proporcionado en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Estos métodos controlan los numerosos detalles de la creación de una conexión y devuelven un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructor para la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase establece los valores de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedades a `true`. Por lo tanto, el estado predeterminado de una nueva conexión va a ser estática (es decir, que se declara en el marcado de la página Web contenedora) y compartido (visible para todos los usuarios de la página). Este es el caso cuando se agrega una conexión en un escenario típico, declarando la conexión en el marcado de la página con un `<asp:webpartconnection>` elemento. Sin embargo, en otras circunstancias, una conexión tendrá valores diferentes para estas propiedades. Por ejemplo, cuando se agrega una conexión mediante programación al crear el objeto de conexión en el código y el usuario está viendo la página en el ámbito de personalización de usuario de forma predeterminada, la conexión se crea como un user(visible only to the specific user) por dinámico, conexión.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedades son de solo lectura y se establecen estas propiedades que determinan la naturaleza de una conexión de internamente por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control dependiendo de cómo se crea una conexión (mediante declaración en el marcado de página, o mediante programación a través de la interfaz de usuario o el código).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como control consumidor en una conexión.</summary>
        <value>Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que representa el control de elementos Web que actúa como consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada conexión de elementos Web se compone de dos controles que comparten datos. Un control actúa como proveedor de datos y el otro control actúa como consumidor, recibir y procesar los datos del proveedor. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad obtiene una referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPart> control que actúa como consumidor en una relación de conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad. En la parte superior de la página son el `Register` directivas para el control de usuario y los controles personalizados. Dado que este ejemplo utiliza la compilación dinámica, el `Register` directiva para el archivo de origen no es necesario hacer referencia a un nombre de ensamblado; incluye sólo un prefijo de etiqueta arbitrario y el espacio de nombres de los controles. En el `Button2_Click` método, el código tiene acceso al objeto de conexión a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar y obtiene una referencia al control consumidor.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use el **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles WebPart** botón o la interfaz de usuario (IU), de conexión proporcionada para crear una conexión entre los dos controles. Haga clic en el **mostrar información de consumidor** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longitud de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> es cero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto que funciona como punto de conexión de un control que actúa como consumidor en una conexión.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> asociado al control consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno de los pasos necesarios para crear una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles consiste en crear puntos de conexión para cada control. El punto de conexión del consumidor es un objeto que contiene la información sobre cómo conectar con el control que actúa como consumidor. En el código fuente del consumidor, uno de los métodos debe identificarse con el `ConnectionConsumer` atributo. La <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto que está asociado con un control consumidor contiene detalles sobre el método y el atributo, incluido un identificador para el método, un nombre para mostrar para su uso en la interfaz de usuario (IU), y el tipo de interfaz que el método puede recuperar. El conjunto de información sobre el consumidor, el método para establecer conexiones y el tipo de interfaz que lo entiende, constituye un punto de conexión del consumidor.  
  
 De forma predeterminada, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto puede conectarse a solo uno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto a la vez. Un consumidor puede tener varios métodos identificados como puntos de conexión del consumidor posibles, pero solo puede participar en una conexión como un consumidor de un consumidor (por lo tanto, solo uno de sus puntos de conexión del consumidor pueden activarse) a la vez. En cambio, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> puede conectarse a cualquier número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos. Este comportamiento predeterminado puede cambiarse mediante la invalidación de la <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> propiedad en el <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad. En el `Button1_Click` método, todos los objetos necesarios para formar una conexión se crean, incluido un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Estos objetos se pasan a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear la conexión. En el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad y se muestran algunos detalles de la conexión de punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use el **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles WebPart** botón o la interfaz de usuario, para crear una conexión entre los dos controles de conexión proporcionada. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del objeto que actúa como punto de conexión del consumidor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del punto de conexión del consumidor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para una conexión estática declarada en el marcado de una página Web, los desarrolladores pueden especificar a qué punto de conexión del consumidor que se usará para la conexión asignando un valor para el `ConsumerConnectionPointID` atributo el `<asp:webpartconnection>` elemento. Si no se asigna un valor para el atributo, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se usa el valor de propiedad.  
  
 Al crear conexiones dinámicas (mediante programación), normalmente no debe establecer el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad. Simplemente puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el consumidor y la conexión del consumidor elija los objetos (junto con los parámetros necesarios) y ese método determina el identificador correcto que se usará para la conexión del consumidor punto. De forma similar, cuando se desconecta, puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método sin necesidad de especificar el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valor de propiedad.  
  
> [!NOTE]
>  Se puede determinar el identificador del punto de conexión del consumidor cuando se designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor como un consumidor. Debe identificar un método en el consumidor que recupera una instancia de una interfaz proporcionada por un control proveedor o un transformador. Para identificar el método, márquelo con el `ConnectionConsumer` atributo de código. Cuando se agrega este atributo, puede agregar un parámetro de valor de cadena opcional que actúa como un identificador para el consumidor <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Si proporciona un valor para el parámetro opcional del identificador, ese valor se convierte en el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad para la conexión. Si no proporciona un valor de identificador, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se usa el valor de propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de página mediante el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el requiere `ConsumerConnectionPointID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión con el punto de conexión definido en el control consumidor. A continuación, en el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable lista de control, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles WebPart** botón para volver a crear una conexión entre los dos controles. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valor de propiedad. El valor se escribe en una etiqueta debajo de los controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como consumidor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del control que actúa como consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valor de propiedad es necesaria cuando se crea una conexión entre <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si no se asigna un valor a la propiedad, se produce una excepción cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de página mediante el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el requiere `ConsumerID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión con el punto de conexión definido en el control consumidor. A continuación, en el `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable lista de control, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles WebPart** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles del consumidor** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el identificador de un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Cadena que contiene el identificador de un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto tiene un valor único asignado a su <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad. Esto es para asegurarse de que hay una manera de distinguir entre varias conexiones.  
  
 Si crea una conexión estática declarando un `<asp:webpartconnection>` los elementos de una página Web y no asigne un valor para el `ID` atributo para la conexión, una excepción se produce cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control crea una nueva conexión dinámica, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> método para generar un identificador único para la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de página mediante el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el requiere `ID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión con el punto de conexión definido en el control consumidor. En este caso, la propiedad ID no es necesaria, dado que la conexión es dinámica y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control asigna un identificador a la conexión. En el `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable lista de control, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles WebPart** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles de conexión** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si en la actualidad hay un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> establecido y disponible para intercambiar datos entre sus controles proveedor y consumidor.</summary>
        <value><see langword="true" /> Si la conexión está activa; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad indica un estado de un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto. Cuando la conexión está en este estado, los controles proveedor y consumidor de la conexión son la comunicación y capaz de intercambiar datos mediante una interfaz común o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Cuando un usuario ve una página representada que incluye una conexión establecida en modo de exploración normal, la conexión es suelen estar activa (a menos que no se pudo activar debido a algún conflicto u otro problema al carga la página). En las primeras fases del ciclo de vida de página y control, el valor de propiedad es `false`. La conexión se activa justo después del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> eventos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> se genera el control. En concreto, se activa la conexión después de que el consumidor haya recuperado una instancia de la interfaz especificada del proveedor o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Resulta útil saber si una conexión está activa en situaciones donde puede haber conflictos o problemas de sincronización debido a varias conexiones en una página. Por ejemplo, si hay algún tipo de conflicto entre las dos conexiones, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene la opción de no activación de una de las conexiones para evitar el conflicto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad.  
  
 El ejemplo tiene tres partes:  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento en la página. Dentro de la `<script>` elemento son cuatro controladores de eventos. Cada controlador de eventos comprueba el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad en la conexión estática y escribe un mensaje en el <xref:System.Web.UI.WebControls.Label> control que indica si la conexión está activa o inactiva en ese estado del ciclo de vida de página y control. Esto muestra en qué punto la conexión se vuelve activa y que permanece activo después de la página se representa.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Cargue la página en un explorador. Ya se ha creado la conexión estática y ya se han escrito los mensajes a las etiquetas que se muestra si la conexión estuvo activa en varios puntos en el ciclo de vida de página y control. Haga clic en el **detalles de conexión** botón y tenga en cuenta que la conexión no está activa en ese momento, pero que la conexión se reactiva después de cada vez que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> eventos y que todavía está activa (y permanecerá así) después de la <xref:System.Web.UI.Control.PreRender> eventos de la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> está visible para todos los usuarios o sólo para el usuario actual.</summary>
        <value><see langword="true" /> Si la conexión es compartida; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Igual que con la persona <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto puede ser compartida o una instancia por usuario. Una instancia compartida significa que la conexión está visible para todos los usuarios de una página Web, y una instancia por usuario significa que la conexión solo es visible para un usuario específico.  
  
 En general, la manera en que se agrega una conexión a una página determina si se comparte la conexión. Si la conexión se declara en el marcado de una página Web, a continuación, se comparte la conexión y la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> es el valor de propiedad `true`. Además, si la página Web está en ámbito de personalización compartida cuando se agrega una conexión, también se comparte la conexión. Normalmente, cuando un usuario usa el `<asp:connectionszone>` la interfaz de usuario (UI) para agregar una conexión, la página está en ámbito de personalización de usuario, por lo que no se comparte la conexión y la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> es el valor de propiedad `false`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad.  
  
 El ejemplo de código tiene cinco partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Una entrada en el archivo Web.config que se requiere para ejecutar el ejemplo.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. En el `Button2_Click` método, comprueba el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad de la conexión existente y muestra el resultado en la página.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 La cuarta parte del ejemplo de código es una entrada en el archivo Web.config que se requiere para la cuenta de usuario que se ejecutará el ejemplo para poder editar la página en el ámbito de personalización compartida. Para habilitar esta opción, debe tener una entrada en el archivo Web.config en el `<system.web>` sección que es similar al ejemplo siguiente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Después de cargar la página en un explorador, use el **modo de presentación** control de lista desplegable para cambiar la página para conectarse en modo de presentación. Haga clic en el **conectar controles WebPart** botón para formar una conexión. A continuación, haga clic en el **detalles de conexión** botón para mostrar si se comparte la conexión. Si ha creado la conexión con la página en el ámbito de personalización de usuario de forma predeterminada, el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> debe ser el valor de propiedad `false` para la conexión.  
  
 En el menú de verbos de uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (indicados por la flecha hacia abajo en la barra de título), haga clic en el verbo conectar. Cuando aparezca la interfaz de usuario de conexión, haga clic en el **desconexión** botón para terminar la conexión. Use la **modo de presentación** control para devolver la página al modo de exploración.  
  
 En el **modo de presentación** control, seleccione el **Shared** compartida de opción para cambiar la página en el ámbito de personalización. Siga los mismos pasos que los anteriores para crear una conexión y vuelva a haga clic en el **detalles de conexión** botón para mostrar si se comparte la conexión. En este caso, el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad debe ser `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> se ha declarado en el marcado de una página Web o se ha creado mediante programación.</summary>
        <value><see langword="true" /> Si la conexión es estática; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las conexiones entre controles de elementos Web pueden ser estática o dinámica. Una conexión estática se declara en el marcado de una página Web, utilizando un `<asp:WebPartConnection>` elemento. Las conexiones dinámicas se crean mediante programación o cuando un usuario crea una conexión a través de la interfaz de usuario (UI) definida por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  
  
 Conexiones estáticas son objetos compartidos, lo que significa que están disponibles para todos los usuarios de la página Web. Además, son esencialmente permanentes porque, como estático <xref:System.Web.UI.WebControls.WebParts.WebPart> control, no se puede eliminar de forma permanente.  
  
> [!NOTE]
>  Mientras no se puede eliminar permanentemente un objeto de conexión estática, puede desconectarse permanentemente. En este caso, el objeto desconectado existiría en el servidor, pero un usuario final nunca será consciente de la existencia del objeto en una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad.  
  
 El ejemplo de código consta de tres partes:  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento en la página. El `Button1_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad para comprobar si la conexión es estática.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Cargue la página en un explorador. Ya se crea la conexión estática. Escriba algún texto en el control proveedor y tenga en cuenta que el texto se muestra en el control consumidor. Haga clic en el **detalles de conexión** botón para mostrar el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor en una conexión de elementos Web.</summary>
        <value>Un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada conexión de elementos Web consta de dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles: un consumidor y un proveedor y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad devuelve una referencia al control proveedor de una conexión.  
  
 Al igual que su homólogo en una conexión (el control consumidor), el control de proveedor es necesario establecer una conexión. Si crea la conexión mediante programación o mediante declaración en formato de persistencia de página, debe especificar un control para que actúe como el proveedor para una conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad.  
  
 El ejemplo de código consta de tres partes:  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento en la página. Tenga en cuenta que en el `<asp:webpartconnection>` elemento, el `ProviderID` atributo tiene el identificador del control proveedor asignado a él. Esto es necesario para identificar el proveedor para la conexión estática. El `Button1_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad y se escriben algunos de sus detalles en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Cargue la página en un explorador. Ya se crea la conexión estática. Escriba algún texto en el control proveedor y tenga en cuenta que el texto se muestra en el control consumidor. Haga clic en el **detalles del proveedor** botón para mostrar algunos de los valores de propiedad tiene acceso a través del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longitud del valor de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> es cero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto que funciona como punto de conexión de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor de una conexión.</summary>
        <value>Un objeto <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> asociado al control proveedor de una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno de los pasos necesarios para crear una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles consiste en crear puntos de conexión para cada control. El punto de conexión del proveedor es un objeto que contiene la información sobre cómo conectar con el control que actúa como un proveedor. En el código fuente del proveedor, uno de los métodos debe identificarse con el `ConnectionProvider` atributo. El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> decir asociado con un proveedor de control contiene detalles sobre el método y el atributo, incluido un identificador para el método, un nombre para mostrar para su uso en la interfaz de usuario (IU), y el tipo de instancia de la interfaz que el método puede devolver a un consumidor control. El conjunto de información acerca del proveedor, el método para establecer conexiones y el tipo de interfaz que proporciona, constituye un punto de conexión del proveedor.  
  
 De forma predeterminada, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> puede conectarse a solo uno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto a la vez. Un consumidor puede tener varios métodos identificados como puntos de conexión del consumidor posibles, pero solo puede participar en una conexión como un consumidor de un consumidor (por lo tanto, solo uno de sus puntos de conexión del consumidor pueden activarse) a la vez. En cambio, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> puede conectarse a cualquier número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos de forma predeterminada. Por ejemplo, un control proveedor que proporciona un código postal podría estar conectado a varios controles de consumidor que usar un código postal para crear distintos tipos de datos según un código postal, como los datos meteorológicos, noticias y así sucesivamente. Este comportamiento predeterminado puede cambiarse mediante la invalidación de la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> propiedad en el <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad. En el `Button1_Click` método, todos los objetos necesarios para formar una conexión se crean, incluido un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Tenga en cuenta la llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Los distintos objetos creados se pasan a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear la conexión. En el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad y se muestran algunos detalles de la conexión de punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use el **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles WebPart** botón o la interfaz de usuario, para crear una conexión entre los dos controles de conexión proporcionada. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del objeto que actúa como punto de conexión del proveedor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador de un objeto de punto de conexión del proveedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para una conexión estática declarada en el marcado de una página Web, los desarrolladores pueden especificar a qué punto de conexión del proveedor que se usará para la conexión asignando un valor para el `ProviderConnectionPointID` atributo el `<asp:webpartconnection>` elemento. Si no se asigna un valor para el atributo, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se usa el valor de propiedad.  
  
 Al crear conexiones dinámicas (mediante programación), normalmente no debe establecer el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad. Simplemente puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el proveedor y la conexión del proveedor de objetos (junto con los parámetros necesarios) de punto y ese método determina el identificador correcto que se usará para la conexión del proveedor punto. De forma similar, cuando se desconecta, puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método sin necesidad de especificar el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valor de propiedad.  
  
> [!NOTE]
>  Se puede determinar el identificador del punto de conexión del proveedor cuando se designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor como un proveedor. Debe identificar un método de devolución de llamada en el proveedor que proporcione una instancia de una interfaz que contiene los datos a un consumidor. Para identificar el método, márquelo con el `ConnectionProvider` atributo de código. Cuando se agrega este atributo, puede agregar un parámetro de valor de cadena opcional que actúa como un identificador para el proveedor <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Si proporciona un valor para el parámetro opcional del identificador, ese valor se convierte en el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad para la conexión. Si no proporciona un valor de identificador, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control asigna un identificador predeterminado cuando se crea el objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de página mediante el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el requiere `ProviderConnectionPointID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión, utilizando el punto de conexión (y el Id.) definido en el control proveedor. A continuación, en el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable lista de control, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles WebPart** botón para volver a crear una conexión entre los dos controles. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valor de propiedad. El valor se escribe en una etiqueta debajo de los controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del control proveedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valor de propiedad es necesaria cuando se crea una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si no se asigna un valor a la propiedad, se produce una excepción cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de página mediante el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el requiere `ProviderID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión con el punto de conexión definido en el control consumidor. A continuación, en el `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Para ello, utilice el **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón y los controles están desconectados. A continuación, use el **conectar controles WebPart** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles del consumidor** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reemplaza el método <see cref="M:System.Object.ToString" /> heredado y devuelve un nombre de tipo abreviado para el objeto de conexión.</summary>
        <returns>Una cadena que contiene el nombre de tipo abreviado (incompleto) de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se usa principalmente para su comodidad, los diseñadores de controles. Mejora cómo aparecen los objetos de conexión en la vista Diseño con el nombre de tipo más corto, en lugar de un nombre de tipo completo. Sin embargo, el método puede llamarse en cualquier momento en el código donde desea saber el nombre de tipo de un objeto de conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método para devolver el nombre de tipo corto de un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El ejemplo de código consta de tres partes:  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento en la página. El `Button1_Click` llamadas al método el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método para escribir el nombre de tipo de la conexión a una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Cargue la página en un explorador. Ya se crea la conexión estática. Escriba algún texto en el control proveedor y tenga en cuenta que el texto se muestra en el control consumidor. Haga clic en el **detalles de conexión** botón para ejecutar el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que se utiliza para transformar datos entre dos puntos de conexión que de otra forma serían incompatibles en una conexión de elementos Web.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una conexión de elementos Web, hay dos maneras en que pueden conectar los controles proveedor y consumidor de la conexión. Puede conectar directamente, a través de sus respectivas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objetos y un tipo de interfaz que se entiende por ambos controles. O bien, si no son compatibles, puede conectarse de forma indirecta, mediante un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que transforma una instancia de la interfaz de un proveedor en un tipo de consumidor comprendido.  
  
 Cuando se necesita un transformador como parte de una conexión, el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propiedad proporciona una referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto. Puede agregar un transformador de una conexión mediante declaración en el marcado de una página Web, mediante la adición de una etiqueta para un transformador personalizado (o uno de los transformadores proporcionados con el conjunto de controles de elementos Web) en el `<asp:WebPartConnection>` elemento. También puede agregar un transformador mediante programación, creación de una instancia de ella en el código y llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para crear la conexión, pasándole el objeto de transformador junto con los otros parámetros necesarios.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que el conjunto de controles de elementos Web utiliza internamente.</summary>
        <value>Una colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> que contiene objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propiedad no está pensada para su uso por los desarrolladores. Para tener acceso el transformador asociado a una conexión, los desarrolladores deben usar siempre el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propiedad.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propiedad se utiliza internamente por el control de elementos Web para habilitar los desarrolladores de páginas declarar elementos del transformador en la `<asp:webpartconnection>` elemento en el marcado de una página Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>