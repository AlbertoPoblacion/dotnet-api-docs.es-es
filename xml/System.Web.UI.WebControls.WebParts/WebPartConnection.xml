<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9876a0ff584b9342112f635529e62289ab52c444" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30591679" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona un objeto que permite que dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> establezcan una conexión. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el conjunto de controles de elementos Web, una conexión es un vínculo o una asociación entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> (u otros servidor o usuario) controles que les permite compartir datos. Esta capacidad de compartir datos permite que los controles conectados que se usará de maneras que superan la funcionalidad proporcionada por los controles aislados. Por ejemplo, si un control proporciona datos de código postal y otro control puede leer esos datos y proporcionar información meteorológica local según el código postal, la capacidad de la conexión de los dos controles proporciona más valor a los usuarios. Para ampliar este ejemplo, se podrían crear otros controles que también información de visualización se basa en un código postal, como un control con vínculos a las noticias locales, y todos estos controles pueden trabajar con datos de código postal pudieron compartir datos con el único control que proporciona un código postal. Los usuarios finales de las aplicaciones de elementos Web puede crear y administrar las conexiones entre todos estos controles compatibles directamente desde un explorador Web, mediante la interfaz de usuario (UI) de las conexiones estándar proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, o mediante una interfaz de usuario personalizada proporcionada por un programador.  
  
 Esto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> información general de la clase es una instrucción general de los detalles básicos para crear una conexión. Para obtener más información sobre los requisitos relacionados con la creación de conexiones y componentes específicos, consulte [Web Parts Connections Overview](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), o ver las clases de referencia y ejemplos que se mencionan en el siguiente análisis de código. Hay varios aspectos fundamentales de una conexión de elementos Web:  
  
-   Dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Cada conexión de elementos Web se compone de dos controles. Es posible que un control participar en más de una conexión al mismo tiempo, pero cada conexión única consta de exactamente dos controles. Los controles pueden derivar directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPart> clase base o pueden ser otros controles de servidor, incluidos los controles ASP.NET, controles de servidor personalizados y controles de usuario. Controles que no se derivan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> (clase), si se coloca en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> de la zona, se ajustan automáticamente con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto en tiempo de ejecución, lo que permite que se heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase y función como tiempo de ejecución <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Controles que residen en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas. Ambos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y cualquier otro tipo de control de servidor deben residir en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona para poder participar en conexiones de elementos Web (y la mayoría de las otra características de elementos Web).  
  
-   Consumidores y proveedores. En cada conexión de elementos Web hay dos controles: un proveedor de datos y un consumidor de datos. El proveedor proporciona los datos al consumidor a través de un método de devolución de llamada especificado que devuelve los datos en forma de una interfaz. (Para obtener un ejemplo de cómo crear y especificar el método de devolución de llamada, vea la sección ejemplo de este tema.) Este método de devolución de llamada se conoce como un punto de conexión del proveedor. Los detalles de este punto de conexión (su nombre "descriptivo", un identificador y el tipo de la interfaz devuelta) se encuentran en un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto asociado con el control de proveedor. El consumidor recibe los datos a través de un método especificado que puede aceptar una instancia de la interfaz. Este método se conoce como un punto de conexión del consumidor, y los detalles del punto de conexión (nombre, identificador y tipo de interfaz) están incluidos en un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto asociado con el control de consumidor.  
  
-   Controles compatibles o un transformador válido. Para que una conexión funcione, el consumidor y el proveedor deben ser compatibles (lo que significa que sus métodos de punto de conexión especificados pueden trabajar con el mismo tipo de interfaz) o debe haber un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto capaz de traducir el tipo proporcionado por el proveedor en un tipo que se entiende por el consumidor.  
  
-   Un objeto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Para que una conexión existe, debe haber una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase que contiene referencias a los controles de proveedor y el consumidor, junto con los detalles de sus puntos de conexión. Si el proveedor y el consumidor son incompatibles y en su lugar, use un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que se va a conectar, la conexión hace referencia a la clase transformer.  
  
-   Una forma de establecer la conexión. Después de que se han diseñado con métodos de punto de conexión y coloca en una zona, correctamente los controles de consumidor y proveedor compatibles y un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> el objeto está disponible, el último paso básico necesario es iniciar la conexión. Una manera de que esto puede ocurrir es para que los usuarios crear la conexión a través de la interfaz de usuario. Si coloca un `<asp:connectionszone>` elemento en la página y el otro requiere componentes de una conexión están en su lugar, en tiempo de ejecución que un usuario puede cambiar la página al modo de conexión, haga clic en un verbo conectar en el menú de verbos del proveedor o consumidor y una interfaz de usuario de conexión (en función de la <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control) se mostrarán. Mediante esta interfaz de usuario, el usuario puede iniciar la conexión. Otra manera de iniciar la conexión es hacerlo mediante programación. En cualquier caso, si a través de la interfaz de usuario o mediante programación, el método subyacente que inicia la conexión es el mismo. La aplicación llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método (o la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método si utiliza un transformador) en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el proveedor, el consumidor y sus objetos de punto de conexión respectivos, y el método devuelve un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase define un objeto que encapsula los detalles esenciales de una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La clase consiste en casi por completo de propiedades relacionadas con los detalles de una conexión determinada. El control consumidor de una conexión refieren a varias propiedades. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad hace referencia al control de consumidor y la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad hace referencia el identificador. del consumidor El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> se hace referencia a objeto, que contiene los detalles del punto de conexión del consumidor, el consumidor <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad hace referencia al identificador de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Todas estas propiedades de conexión relacionadas con el consumidor deben tener un valor asignado al crear una conexión.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase también tiene varias propiedades que se relacionan con el control de proveedor en una conexión y corresponden a las propiedades de un consumidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad hace referencia al control de proveedor, mientras que la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad hace referencia a su identificador. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> referencias de propiedad el <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad hace referencia al identificador de punto de conexión del proveedor.  
  
 El estado de la conexión refieren a varias propiedades. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad indica si la conexión está activa (actualmente el intercambio de datos) o inactivos (aún conectados pero no activamente para compartir datos). El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad indica si la conexión es compartida (disponible para todos los usuarios de una página) o una conexión específica del usuario y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad indica si el control es estático (declarado en el marcado de la página y, por tanto, permanente) o dinámico (creado mediante programación, lo que significa que se puede eliminar).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una conexión simple entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. El ejemplo muestra tres maneras de establecer una conexión: mediante declaración, colocando etiquetas para la conexión en el marcado de la página Web; mediante programación, mediante la creación de la conexión en el código. y a través de la interfaz de usuario, mediante la colocación de un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control en la página, lo que permite a los usuarios establecer una conexión.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles. El archivo de código fuente contiene una interfaz simple denominada `IZipCode`. También hay un <xref:System.Web.UI.WebControls.WebParts.WebPart> clase denominada `ZipCodeWebPart` que implementa la interfaz y actúa como el control de proveedor. Su `ProvideIZipCode` es el método de devolución de llamada que implementa el único miembro de la interfaz. El método simplemente devuelve una instancia de la interfaz. Tenga en cuenta que el método se marca con un `ConnectionProvider` atributo en sus metadatos. Este es el mecanismo para identificar el método como método de devolución de llamada para el punto de conexión del proveedor. El otro <xref:System.Web.UI.WebControls.WebParts.WebPart> clase se denomina `WeatherWebPart`, y actúa como el consumidor de la conexión. Esta clase tiene un método denominado `GetZipCode` que obtiene una instancia de la `IZipCode` interfaz desde el control de proveedor. Tenga en cuenta que este método está marcado como método de punto de conexión del consumidor con un `ConnectionConsumer` atributo en sus metadatos.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. En la parte superior son el `Register` directivas para el control de usuario y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Dado que el ejemplo supone la compilación dinámica de los controles, debe ser el código fuente de los controles en una subcarpeta App_Code; la `Register` etiqueta de la página hace referencia a solo un prefijo de etiqueta arbitrario y el espacio de nombres de los controles. Personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (el proveedor y el consumidor) se declaran dentro de la página Web `<asp:webpartzone>` elemento, dentro un `<zonetemplate>` elemento.  
  
 La página ofrece tres maneras de establecer una conexión entre los controles personalizados. El primer método es declarativo. En el marcado de la página, un <`StaticConnections>` elemento se declara y en el que un `<asp:WebPartConnections>` elemento, con los detalles consumidor y proveedor de la conexión especificada como atributos. Se trata de una manera de crear una conexión, declarándola directamente en la página Web, específicamente en el `<asp:WebPartManager>` elemento. Debido a esta conexión es estática, se crea inmediatamente la primera vez que la página se cargue en una conexión entre los dos controles personalizados.  
  
 Se proporciona un segundo método para formar una conexión entre los controles mediante el `<asp:connectionszone>` elemento en la página. Si un usuario cambia una página al modo de presentación de conexión en tiempo de ejecución y hace clic en un verbo conectar en uno de los controles personalizados, el `<asp:connectionszone>` elemento representa automáticamente la interfaz de usuario para crear una conexión.  
  
 La página también muestra un tercer modo de crear una conexión, que consiste en hacerlo mediante programación. En el `Button1_Click` método, el código crea un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto para el control proveedor y recupera su punto de conexión de detalles mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método. Lleva a cabo una tarea similar para el control de consumidor, una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método. Por último, crea el nuevo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página Web en un explorador, la primera conexión ya existe porque se declara dentro de la `<StaticConnections>` elemento. Escriba algún texto en el **ZIP Code Provider** control y se mostrará en el control de consumidor. A continuación, desconecte los dos controles. Mediante el **modo de presentación** lista desplegable lista de control, cambie la página para conectar un modo de presentación. Haga clic en el menú de verbos (representado por una flecha hacia abajo en la barra de título) de cada uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y tenga en cuenta que cada uno tiene un **conectar** opción. Se trata de un verbo de conexión que aparece en el menú de verbos solo cuando la página está en modo de conexión. Haga clic en el verbo conectar de uno de los controles y la conexión de la interfaz de usuario proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> que aparezca el control. Haga clic en el **desconexión** botón para finalizar la conexión estática entre los controles. Use la **modo de presentación** control para devolver la página al modo de exploración. Intente escriba algún texto nuevo en el proveedor de nuevo y tenga en cuenta que dado que los controles se desconectarán, el texto no puede actualizar en el control de consumidor.  
  
 A continuación, utilice el mismo método anterior para cambiar la página en modo de presentación de conectar de nuevo. Haga clic en el verbo conectar de uno de los controles. Haga clic en el **crear una conexión** vincular y utilizar la interfaz de usuario proporcionada por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control para crear una conexión entre los controles. Este es el segundo método para crear una conexión. Tenga en cuenta que tan pronto como se establece la conexión, la última cadena introduce en el control de proveedor (que no se pudieron aparecen debido a que los controles se han desconectado) aparece repentinamente en el consumidor, porque se ha vuelto a crear la conexión. Haga clic en el **desconexión** botón para terminar la conexión actual que acaba de crear. Devolver la página al modo de exploración. Escriba algún texto nuevo en el proveedor para demostrar que el texto no está actualizado y que los controles se desconectan de nuevo.  
  
 Devolver la página para conectar un modo de presentación. En lugar de hacer clic en un verbo de conexión, haga clic en el **conectar controles de elemento Web** botón, que muestra el tercer modo de establecer una conexión. Este enfoque conecta a los controles mediante programación en un solo paso sin tener que utilizar el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Tenga en cuenta que al crear la conexión, la última cadena que escribió en el proveedor de repente aparece en el control de consumidor.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructor es público para que el analizador ASP.NET puede crear una instancia cuando una conexión se declara en el marcado de una página Web; de este constructor no está pensado para usarse en código del desarrollador.  
  
 Cuando desee crear un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto mediante programación, debe utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> método proporcionado en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Estos métodos controlan los numerosos detalles de creación de una conexión y devuelven un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructor para la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> clase establece los valores de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedades para `true`. Por lo tanto, el estado predeterminado de una conexión nueva es que sea estática (es decir, que se declara en el marcado de la página Web que lo contiene) y compartido (visible para todos los usuarios de la página). Este es el caso cuando se agrega una conexión en un escenario típico, declarando la conexión en el marcado de la página con un `<asp:webpartconnection>` elemento. Sin embargo, en otras circunstancias, una conexión tendrá valores diferentes para estas propiedades. Por ejemplo, cuando se agrega una conexión mediante programación creando el objeto de conexión en el código y el usuario está viendo la página en el ámbito de personalización de usuario de manera predeterminada, la conexión se crea como una conexión por user(visible only to the specific user) dinámica.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedades son de solo lectura y se establecen estas propiedades que determinan la naturaleza de una conexión de forma interna el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, dependiendo de cómo se crea una conexión (mediante declaración en el marcado de la página, o mediante programación a través del código o la interfaz de usuario).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como control consumidor en una conexión.</summary>
        <value>Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que representa el control de elementos Web que actúa como consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada conexión de elementos Web se compone de dos controles que comparten datos. Un control actúa como proveedor de datos y el otro control actúa como un consumidor, recibir y procesar los datos del proveedor. El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad obtiene una referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPart> actúa como un consumidor en una relación de conexión de control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad. En la parte superior de la página son el `Register` directivas para el control de usuario y los controles personalizados. Dado que este ejemplo utiliza la compilación dinámica, la `Register` directiva del archivo de origen no es necesario hacer referencia a un nombre de ensamblado; incluye sólo un prefijo de etiqueta arbitrario y el espacio de nombres de los controles. En el `Button2_Click` método, el código tiene acceso al objeto de conexión a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar y obtiene una referencia al control consumidor.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use la **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles de elemento Web** botón o la interfaz de usuario (UI) de conexión proporcionada para crear una conexión entre los dos controles. Haga clic en el **mostrar información de consumidor** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longitud de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> es cero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto que funciona como punto de conexión de un control que actúa como consumidor en una conexión.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> asociado al control consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno de los pasos necesarios para crear una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles consiste en crear puntos de conexión para cada control. El punto de conexión del consumidor es un objeto que contiene la información sobre cómo conectar con el control que actúa como un consumidor. En el código de origen del consumidor, uno de los métodos debe identificarse con el `ConnectionConsumer` atributo. La <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto que está asociado a un control consumidor contiene detalles sobre el método y el atributo, incluido un identificador para el método, un nombre para mostrar para su uso en la interfaz de usuario (UI), y el tipo de interfaz que el método puede recuperar. Conjunto de información sobre el consumidor, el método para establecer conexiones y el tipo de interfaz que entiende, constituye un punto de conexión del consumidor.  
  
 De forma predeterminada, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto puede conectarse a solo uno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto a la vez. Un consumidor puede tener varios métodos identificados como puntos de conexión del consumidor posibles, pero un consumidor sólo puede participar en una conexión como un consumidor (por lo tanto, solo uno de sus puntos de conexión de consumidor puede estar activo) a la vez. En cambio, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> puede conectarse a cualquier número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos. Este comportamiento predeterminado puede cambiarse mediante el reemplazo de la <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> propiedad en el <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad. En el `Button1_Click` método, todos los objetos necesarios para formar una conexión se crean, incluso un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Estos objetos se pasan a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear la conexión. En el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad y se muestran algunos detalles de la conexión de punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use la **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles de elemento Web** botón o la interfaz de usuario, para crear una conexión entre los dos controles de conexión proporcionada. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del objeto que actúa como punto de conexión del consumidor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del punto de conexión del consumidor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para una conexión estática declarada en el marcado de una página Web, los desarrolladores pueden especificar qué punto de conexión del consumidor que se usará para la conexión asignando un valor a la `ConsumerConnectionPointID` del atributo en el `<asp:webpartconnection>` elemento. Si no se asigna un valor para el atributo, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se utiliza el valor de propiedad.  
  
 Cuando crea conexiones dinámicas (mediante programación), normalmente no debería establecerse el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad. Simplemente puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el consumidor y conexión del consumidor señalen objetos (junto con los parámetros necesarios) y ese método determina el identificador correcto que se utilizará para el punto de conexión del consumidor. De forma similar, cuando se desconecta, puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método sin necesidad de especificar el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valor de propiedad.  
  
> [!NOTE]
>  Se puede determinar el identificador del punto de conexión del consumidor cuando se designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor como un consumidor. Debe identificar un método en el consumidor que recupera una instancia de una interfaz proporcionada por un control de proveedor o un transformador. Para identificar el método, márquelo con el `ConnectionConsumer` atributo de código. Al agregar este atributo, puede agregar un parámetro de valor de cadena opcional que actúa como un identificador para el consumidor <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Si proporciona un valor para el parámetro opcional del identificador, ese valor se convierte en el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad para la conexión. Si no proporciona un valor de identificador, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se utiliza el valor de propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de la página, con el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el necesario `ConsumerConnectionPointID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión, utilizando el punto de conexión definido en el control de consumidor. A continuación, en la `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control de proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable control de lista, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles de elemento Web** botón para volver a crear una conexión entre los dos controles. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valor de propiedad. El valor se escribe en una etiqueta debajo de los controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como consumidor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del control que actúa como consumidor en una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valor de propiedad es necesaria cuando se crea una conexión entre <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si no se asigna un valor a la propiedad, se produce una excepción cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de la página, con el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el necesario `ConsumerID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión, utilizando el punto de conexión definido en el control de consumidor. A continuación, en la `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control de proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable control de lista, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles de elemento Web** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles del consumidor** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el identificador de un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Cadena que contiene el identificador de un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto tiene un valor único asignado a su <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad. Esto sirve para asegurarse de que hay una manera de distinguir entre varias conexiones.  
  
 Si crea una conexión estática declarando un `<asp:webpartconnection>` elemento de una página Web y no asigna un valor a la `ID` atributo para la conexión, una excepción se produce cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control crea una nueva conexión dinámica, llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> método para generar un identificador único para la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de la página, con el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el necesario `ID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión, utilizando el punto de conexión definido en el control de consumidor. En este caso, la propiedad de identificador no es necesaria, porque la conexión es dinámica y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control asigna un identificador a la conexión. En el `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control de proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable control de lista, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles de elemento Web** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles de la conexión** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si en la actualidad hay un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> establecido y disponible para intercambiar datos entre sus controles proveedor y consumidor.</summary>
        <value>
          Es <see langword="true" /> si la conexión está activa; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad indica un estado de un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto. Cuando la conexión está en este estado, los controles de proveedor y el consumidor de la conexión son comunican y pueden intercambiar datos a través de una interfaz común o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Cuando un usuario ve una página representada que incluye una conexión establecida en modo de exploración normal, la conexión es suelen estar activa (a menos que no se pudo activar debido a algún conflicto u otro problema al cargar la página). En las primeras fases del ciclo de vida de página y de control, el valor de propiedad es `false`. La conexión se activa justo después del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> se genera el control. En concreto, la conexión se activa después de que el consumidor haya recuperado una instancia de la interfaz especificada del proveedor o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Resulta útil saber si una conexión está activa en situaciones donde puede haber conflictos o problemas de sincronización debido a varias conexiones en una página. Por ejemplo, si hay algún tipo de conflicto entre dos conexiones, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene la opción de no activar una de las conexiones para evitar el conflicto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad.  
  
 El ejemplo consta de tres partes:  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento de la página. En el `<script>` elemento son cuatro controladores de eventos. Cada controlador de eventos comprueba el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propiedad en la conexión estática y escribe un mensaje a la <xref:System.Web.UI.WebControls.Label> control que indica si la conexión está activa o inactiva en ese estado del ciclo de vida de página y de control. Esto muestra en qué punto la conexión, se convierte en activa y que permanece activo después de la página se representa.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Cargar la página en un explorador. Ya se ha creado la conexión estática y mensajes ya se han escrito en las etiquetas que indican si la conexión estaba activa en varios puntos en el ciclo de vida de la página y el control. Haga clic en el **detalles de la conexión** botón y tenga en cuenta que la conexión no está activa en ese momento, pero que la conexión se reactiva cada vez después de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento y que todavía está activa (y permanecerá así) después de la <xref:System.Web.UI.Control.PreRender> eventos de la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> está visible para todos los usuarios o sólo para el usuario actual.</summary>
        <value>
          Es <see langword="true" /> si la conexión es compartida; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al igual que con individuales <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto puede ser compartida o una instancia por usuario. Una instancia compartida significa que la conexión está visible para todos los usuarios de una página Web, y una instancia por usuario significa que la conexión se ve únicamente a un usuario específico.  
  
 En general, la manera en que se agrega una conexión a una página determina si se comparte la conexión. Si la conexión se declara en el marcado de una página Web, se comparte la conexión y la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> es el valor de la propiedad `true`. Además, si la página Web está en ámbito de personalización compartido cuando se agrega una conexión, también se comparte la conexión. Normalmente, cuando un usuario utiliza el `<asp:connectionszone>` la interfaz de usuario (UI) para agregar una conexión, la página está en ámbito de personalización de usuario, por lo que no se comparte la conexión y la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> es el valor de la propiedad `false`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad.  
  
 El ejemplo de código tiene cinco partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Una entrada en el archivo Web.config que se requiere para ejecutar el ejemplo.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. En el `Button2_Click` método, comprueba el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad de la conexión existente y se muestra el resultado en la página.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 La cuarta parte del ejemplo de código es una entrada en el archivo Web.config que se requiere para la cuenta de usuario que vaya a ejecutar el ejemplo para que pueda editar la página en el ámbito de personalización compartido. Para habilitar esta opción, debe tener una entrada en el archivo Web.config en la `<system.web>` sección que es similar al ejemplo siguiente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Después de cargar la página en un explorador, use la **modo de presentación** control de lista desplegable para cambiar la página para conectar un modo de presentación. Haga clic en el **conectar controles de elemento Web** botón para formar una conexión. A continuación, haga clic en el **detalles de la conexión** botón para mostrar si se comparte la conexión. Si ha creado la conexión con la página en el ámbito de personalización de usuario de forma predeterminada, el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> debe ser el valor de la propiedad `false` para la conexión.  
  
 En el menú de verbos de uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (indicados por la flecha hacia abajo en la barra de título), haga clic en el verbo conectar. Cuando aparezca la interfaz de usuario de conexión, haga clic en el **desconexión** botón para terminar la conexión. Use la **modo de presentación** control para devolver la página al modo de exploración.  
  
 En el **modo de presentación** control, seleccione la **Shared** compartido de opción para cambiar la página en el ámbito de personalización. Siga los mismos pasos que los mencionados anteriormente para crear una conexión y vuelva a haga clic en el **detalles de la conexión** botón para mostrar si se comparte la conexión. En este caso, el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propiedad debe ser `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> se ha declarado en el marcado de una página Web o se ha creado mediante programación.</summary>
        <value>
          Es <see langword="true" /> si la conexión es estática; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las conexiones entre los controles de elementos Web pueden ser estática o dinámica. Una conexión estática se declara en el marcado de una página Web, utilizando un `<asp:WebPartConnection>` elemento. Las conexiones dinámicas se crean mediante programación o cuando un usuario crea una conexión a través de la interfaz de usuario (UI) definida por el <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  
  
 Las conexiones estáticas son objetos compartidos, lo que significa que están disponibles para todos los usuarios de la página Web. Además, son esencialmente permanentes porque, al igual que una variable static <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), no se puede eliminar de forma permanente.  
  
> [!NOTE]
>  Mientras no se puede eliminar permanentemente un objeto de conexión estática, puede desconectarse permanentemente. En este caso, el objeto desconectado existiría en el servidor, pero un usuario final nunca debería tener en cuenta la existencia del objeto en una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad.  
  
 El ejemplo de código consta de tres partes:  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento de la página. El `Button1_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad para comprobar si la conexión es estática.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Cargar la página en un explorador. La conexión estática ya está creada. Escriba algún texto en el control de proveedor y tenga en cuenta que el texto se muestra en el control de consumidor. Haga clic en el **detalles de la conexión** botón para mostrar el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor en una conexión de elementos Web.</summary>
        <value>Un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada conexión de elementos Web se compone de dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles--un consumidor y un proveedor y el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad devuelve una referencia al control proveedor de una conexión.  
  
 Al igual que su equivalente en una conexión (el control consumidor), el control de proveedor es necesario para establecer una conexión. Si se puede crear la conexión mediante programación o mediante la declaración en formato de persistencia de página, debe especificar un control para que actúe como el proveedor para una conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad.  
  
 El ejemplo de código consta de tres partes:  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento de la página. Tenga en cuenta que en el `<asp:webpartconnection>` elemento, el `ProviderID` atributo tiene el identificador del control proveedor asignado a él. Esto es necesario para identificar al proveedor para la conexión estática. El `Button1_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad y escribe algunos de sus detalles en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Cargar la página en un explorador. La conexión estática ya está creada. Escriba algún texto en el control de proveedor y tenga en cuenta que el texto se muestra en el control de consumidor. Haga clic en el **detalles del proveedor** botón para mostrar algunos de los valores de propiedad que se obtiene accesibles a través del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longitud del valor de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> es cero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto que funciona como punto de conexión de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor de una conexión.</summary>
        <value>Un objeto <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> asociado al control proveedor de una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno de los pasos necesarios para crear una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles consiste en crear puntos de conexión para cada control. El punto de conexión del proveedor es un objeto que contiene la información sobre cómo conectar con el control que actúa como un proveedor. En el código de origen del proveedor, uno de los métodos debe identificarse con el `ConnectionProvider` atributo. El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> que es asociado con un proveedor de control contiene detalles sobre el método y el atributo, incluido un identificador para el método, un nombre para mostrar para su uso en la interfaz de usuario (UI), y el tipo de instancia de la interfaz que el método puede devolver a un control de consumidor. Conjunto de información sobre el proveedor, el método para establecer conexiones y el tipo de interfaz que proporciona, constituye un punto de conexión del proveedor.  
  
 De forma predeterminada, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> puede conectarse a solo uno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto a la vez. Un consumidor puede tener varios métodos identificados como puntos de conexión del consumidor posibles, pero un consumidor sólo puede participar en una conexión como un consumidor (por lo tanto, solo uno de sus puntos de conexión de consumidor puede estar activo) a la vez. En cambio, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> puede conectarse a cualquier número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos de forma predeterminada. Por ejemplo, un control de proveedor que proporciona un código postal podría estar conectado a varios controles de consumidor que usar un código postal para crear distintos tipos de datos en función del código postal, como los datos del tiempo, noticias y así sucesivamente. Este comportamiento predeterminado puede cambiarse mediante el reemplazo de la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> propiedad en el <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de los dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que actúan como consumidor y el proveedor para la conexión y una interfaz utilizada para los puntos de conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es el código de la página Web que hospeda los controles y se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad. En el `Button1_Click` método, todos los objetos necesarios para formar una conexión se crean, incluso un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Tenga en cuenta la llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Los distintos objetos creados se pasan a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear la conexión. En el `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad y se muestran algunos detalles de la conexión de punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, use la **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Use la **conectar controles de elemento Web** botón o la interfaz de usuario, para crear una conexión entre los dos controles de conexión proporcionada. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que muestra la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del objeto que actúa como punto de conexión del proveedor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador de un objeto de punto de conexión del proveedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para una conexión estática declarada en el marcado de una página Web, los desarrolladores pueden especificar qué punto de conexión del proveedor que se usará para la conexión asignando un valor a la `ProviderConnectionPointID` del atributo en el `<asp:webpartconnection>` elemento. Si no se asigna un valor para el atributo, el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> se utiliza el valor de propiedad.  
  
 Cuando crea conexiones dinámicas (mediante programación), normalmente no debería establecerse el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad. Simplemente puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, pasándole el proveedor y la conexión del proveedor de objetos (junto con los parámetros necesarios) de punto y ese método determina el identificador correcto que se utilizará para el punto de conexión del proveedor. De forma similar, cuando se desconecta, puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método sin necesidad de especificar el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valor de propiedad.  
  
> [!NOTE]
>  Se puede determinar el identificador del punto de conexión de un proveedor de servicios cuando se designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor como un proveedor. Debe identificar un método de devolución de llamada en el proveedor que proporcione una instancia de una interfaz que contiene los datos a un consumidor. Para identificar el método, márquelo con el `ConnectionProvider` atributo de código. Al agregar este atributo, puede agregar un parámetro de valor de cadena opcional que actúa como un identificador para el proveedor <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Si proporciona un valor para el parámetro opcional del identificador, ese valor se convierte en el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad para la conexión. Si no proporciona un valor de identificador, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control asigna un identificador predeterminado cuando se crea el objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de la página, con el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el necesario `ProviderConnectionPointID` atributo. Un segundo método para crear la conexión aparece en la `Button1_Click` (método), donde el código crea una nueva conexión, utilizando el punto de conexión (y el identificador) definido en el control de proveedor. A continuación, en la `Button2_Click` método, el código tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control de proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Mediante el **modo de presentación** desplegable control de lista, cambiar la página al modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón. Use la **conectar controles de elemento Web** botón para volver a crear una conexión entre los dos controles. Haga clic en el **ConnectionPoint detalles** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valor de propiedad. El valor se escribe en una etiqueta debajo de los controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de propiedad de una conexión que hace referencia al identificador del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que actúa como proveedor en dicha conexión.</summary>
        <value>Una cadena que contiene el identificador del control proveedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valor de propiedad es necesaria cuando se crea una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si no se asigna un valor a la propiedad, se produce una excepción cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control intenta activar la conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que una conexión se declara en el marcado de la página, con el `<StaticConnections>` y `<asp:WebPartsConnection>` elementos. La declaración de conexión incluye el necesario `ProviderID` atributo. Un segundo método para crear la conexión aparece en el `Button1_Click` método, donde el código crea una nueva conexión, utilizando el punto de conexión definido en el control de consumidor. A continuación, en la `Button2_Click` método, el código tiene acceso al valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propiedad y lo muestra en una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, ya existe una conexión debido a la conexión estática declarada en la página. Escriba algún texto en el control de proveedor y tenga en cuenta que se muestra en el consumidor debido a la conexión. A continuación, desconecte los controles. Para ello, utilice la **modo de presentación** control de lista desplegable para cambiar la página modo de conexión. Haga clic en el menú de verbos (representado por la flecha hacia abajo en la barra de título) en uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y haga clic en el verbo conectar. Haga clic en el **desconexión** botón y los controles que están desconectadas. A continuación, use la **conectar controles de elemento Web** botón para volver a crear una conexión entre los dos controles. Haga clic en el **detalles del consumidor** botón para ejecutar el código que tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valor de propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reemplaza el método <see cref="M:System.Object.ToString" /> heredado y devuelve un nombre de tipo abreviado para el objeto de conexión.</summary>
        <returns>Una cadena que contiene el nombre de tipo abreviado (incompleto) de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza principalmente por comodidad diseñadores de controles. Mejora la aparecen de los objetos de conexión en la vista Diseño utilizando el nombre de tipo más corto, en lugar de un nombre de tipo completo. Sin embargo, se puede llamar al método en cualquier punto del código donde desea conocer el nombre de tipo de un objeto de conexión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método para devolver el nombre de tipo corto de un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 El ejemplo de código consta de tres partes:  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte del ejemplo de código es el código fuente de la interfaz y los controles consumidor y proveedor. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo de código es la página Web. En la parte superior es un `Register` directiva que hace referencia al código fuente para los dos que se compilan dinámicamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La conexión estática se declara dentro de la `<StaticConnections>` elemento de la página. El `Button1_Click` llamadas al método el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método para escribir el nombre de tipo de la conexión a una etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Cargar la página en un explorador. La conexión estática ya está creada. Escriba algún texto en el control de proveedor y tenga en cuenta que el texto se muestra en el control de consumidor. Haga clic en el **detalles de la conexión** botón para ejecutar la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que se utiliza para transformar datos entre dos puntos de conexión que de otra forma serían incompatibles en una conexión de elementos Web.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En una conexión de elementos Web, hay dos maneras en que pueden conectarse los controles proveedor y consumidor de la conexión. Puedan conectarse directamente a través de sus respectivas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objetos y un tipo de interfaz que se entiende por ambos controles. O bien, si no son compatibles, pueden conectarse indirectamente, mediante una <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que transforma una instancia de la interfaz de un proveedor en un tipo entendido por un consumidor.  
  
 Cuando se necesita un transformador como parte de una conexión, el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propiedad proporciona una referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto. Puede agregar un transformador para una conexión mediante declaración en el marcado de una página Web, agregando una etiqueta para un convertidor personalizado (o uno de los convertidores de él proporcionadas con el conjunto de controles de elementos Web) en el `<asp:WebPartConnection>` elemento. También puede agregar un transformador mediante programación, creando una instancia del mismo en el código y llamando a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para crear la conexión, pasándole el objeto de la clase transformer junto con los otros parámetros necesarios.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que el conjunto de controles de elementos Web utiliza internamente.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> que contiene objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propiedad nunca está pensada para su uso por los desarrolladores. Para obtener acceso a la clase transformer asociada a una conexión, los programadores deben utilizar siempre el <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propiedad.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propiedad se utiliza internamente por el control de elementos Web establecido en permitir que los desarrolladores de página declarar elementos de la clase transformer en las `<asp:webpartconnection>` elemento en el marcado de una página Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>