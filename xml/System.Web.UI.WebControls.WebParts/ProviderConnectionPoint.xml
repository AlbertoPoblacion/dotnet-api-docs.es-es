<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="77bc2e4454c903d6f8a37939bf1e818d61170a9d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39946418" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define un objeto de punto de conexión que permite a un control de servidor que actúa como proveedor establecer una conexión con un consumidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cada conexión de elementos Web entre dos controles de servidor, cada control debe tener (entre otros requisitos) un objeto de punto de conexión asociado que le permite conectarse a otro control y proporcionar o consumir datos, dependiendo de si el control se designa como el proveedor o el usuario para la conexión. Un <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> en general, objeto contiene los detalles de cómo un control puede conectarse a otro control y el tipo de datos que puede compartir. Para un control que actúa como proveedor en una conexión, el punto de conexión debe ser un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto. Para obtener más información sobre las conexiones de elementos Web y puntos de conexión, vea los temas enumerados en la sección Vea también.  
  
 Para crear un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> de objeto, se requieren varios pasos:  
  
1.  Crear una interfaz. Cuando un proveedor comparte datos con un consumidor, lo hace mediante la obtención de una instancia de una interfaz y devolver esa instancia a un consumidor.  
  
2.  Implemente la interfaz en un proveedor. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor (cualquier tipo de control de servidor en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> se puede usar la zona) que será el proveedor debe implementar la interfaz creada en el primer paso.  
  
3.  Identificar un método de devolución de llamada. Un método en el proveedor debe identificarse como el método de devolución de llamada para establecer una conexión. Este método devuelve una instancia de la interfaz implementada a un consumidor. El enfoque de elementos Web para identificar un método de devolución de llamada en el proveedor consiste en Agregar un `ConnectionProvider` atributo de metadatos (definido por el <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> clase) para el método que devuelve la instancia de interfaz. Cuando se agrega el atributo, el único parámetro necesario es un nombre para mostrar que se usará para el punto de conexión del proveedor. Los parámetros opcionales se pueden agregar también, por ejemplo, un identificador para el punto de conexión.  
  
 Después de un control se ha equipado para que actúe como un proveedor, el control puede participar en conexiones (suponiendo que un control consumidor del mismo modo está equipado y disponible). Para crear una conexión declarativa estática en el marcado de una página Web, los desarrolladores pueden usar el `<asp:webpartconnection>` elemento. Si el `ConnectionProvider` atributo en el código fuente de proveedor que identifica el método de devolución de llamada especifica un identificador para el punto de conexión y, después, ese valor se debe asignar a la `ProviderConnectionPointID` atributo el `<asp:webpartconnection>` elemento en una página. Una razón que un desarrollador puede especificar un identificador para un punto de conexión del proveedor es si hay varios puntos de conexión en el control proveedor. Si no se especifica un identificador para el punto de conexión del proveedor en el control proveedor, no tiene un valor que se asignará a la `ProviderConnectionPointID` atributo en la página, porque la conexión se creará usando un valor predeterminado que se obtuvo el <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Para crear una conexión en el código, los desarrolladores deben crear un nuevo <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método y pasarle el identificador del control proveedor, junto con el identificador o índice del definido <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto en el control proveedor. El valor devuelto <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto, junto con una referencia al control proveedor, una referencia al control consumidor y su correspondiente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> de objetos, son todos los pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear un nuevo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 Aunque los desarrolladores pueden usar puntos de conexión del proveedor como parte del establecimiento de conexiones de forma declarativa o mediante programación, los usuarios también pueden interactuar con puntos de conexión del proveedor para establecer conexiones a través de la interfaz de usuario (UI). Si los desarrolladores declaran un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control en una página Web, proporciona una interfaz de usuario de tiempo de ejecución para que los usuarios crear conexiones. Si los usuarios elegir el control consumidor como punto de partida para establecer la conexión, haga clic en su verbo conectar (también podrían elegir el proveedor; no hay ninguna diferencia en la conexión resultante), en la interfaz de usuario verá un control de lista desplegable con el nombre para mostrar del punto de conexión de proveedor disponible (o puntos si hay varios). Los usuarios deben seleccionar un punto de conexión del proveedor para crear una conexión.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto asocia directamente con un control proveedor específico y almacena los detalles sobre una conexión en las propiedades que hereda de la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> clase. Por ejemplo, en el modo heredado <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propiedad, un punto de conexión del proveedor mantiene el tipo de interfaz devuelto por el proveedor. Si el proveedor y consumidor en una conexión que ambos funcionan con el mismo tipo de interfaz, los controles son compatibles y pueden formar una conexión directa. Si el proveedor y el consumidor no pueden trabajar con el mismo tipo de interfaz, son incompatibles y se debe usar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que se va a trasladar el punto de conexión de proveedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> valor en un tipo que el consumidor puede trabajar con. Otra propiedad heredada importante es la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> al crear conexiones de punto de propiedad, que proporciona un nombre descriptivo para mostrar en la interfaz de usuario para que los usuarios elegir una conexión de proveedor. El nombre para mostrar es el parámetro necesario cuando los desarrolladores agregan un `ConnectionProvider` al método de devolución de llamada en un control proveedor. Heredadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propiedad también es útil, como se indicó anteriormente, porque proporciona un identificador único para un punto de conexión del proveedor en caso de que un proveedor tiene varios puntos de conexión. Un proveedor puede tener varios <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objetos definidos en ella y, en este caso, cuando los desarrolladores agregan el `ConnectionProvider` atributo a un método, debe especificar un valor de identificador para distinguir cada punto de conexión. Otra propiedad heredada importante es la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propiedad, que indica si un punto de conexión del proveedor puede conectarse simultáneamente a varios consumidores. Este valor de propiedad es `true` de forma predeterminada para los puntos de conexión del proveedor (mientras que el valor predeterminado es `false` para puntos de conexión del consumidor).  
  
 El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> clase agrega varios métodos únicos a los miembros que hereda de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> clase. El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método recupera una instancia de la interfaz que el método de devolución de llamada se devolverá a los consumidores. El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> método recupera las interfaces de consumidor adicionales que forman parte de una conexión existente, pero no se las interfaces que se usan para establecer la conexión.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra maneras sencillas de crear una conexión mediante declaración, mediante programación o a través de la interfaz de usuario en cada caso de decisiones de un punto de conexión del proveedor.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que le permite cambiar los elementos Web en una página.  
  
-   Código fuente de una interfaz y dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla que actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx, póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` la directiva para este control de usuario, que es la parte superior de la página Web que hospeda. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de presentación en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles. El archivo de código fuente contiene una interfaz sencilla denominada `IZipCode`. También hay un <xref:System.Web.UI.WebControls.WebParts.WebPart> clase denominada `ZipCodeWebPart` que implementa la interfaz y actúa como el control proveedor. Su `ProvideIZipCode` es el método de devolución de llamada que implementa el único miembro de la interfaz. El método simplemente devuelve una instancia de la interfaz. Tenga en cuenta que el método se marca con un `ConnectionProvider` atributo en sus metadatos. Este es el mecanismo para identificar el método como método de devolución de llamada para el punto de conexión del proveedor. El otro <xref:System.Web.UI.WebControls.WebParts.WebPart> clase se denomina `WeatherWebPart`, y actúa como consumidor de la conexión. Esta clase tiene un método denominado `GetZipCode` que obtiene una instancia de la `IZipCode` interfaz desde el control proveedor. Tenga en cuenta que este método está marcado como método de punto de conexión del consumidor con un `ConnectionConsumer` atributo en sus metadatos. Este es el mecanismo para identificar el método de punto de conexión en el control consumidor.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: desarrollo y el uso de un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. En la parte superior son `Register` las directivas para registrar los controles personalizados que forman la conexión y el control de usuario que permite a los usuarios cambiar los modos de presentación en la página. La propia conexión se crea mediante declaración en el `<staticconnections>` elemento en la página. Esto muestra una manera de crear una conexión--tenga en cuenta la `ProviderConnectionPointID` atributo el `<asp:webpartconnection>` elemento. También puede crear la conexión mediante programación; el código para hacerlo está en el `Button1_Click` método. En este caso, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto se crea y, a continuación, pasa a un método que crea la conexión real. Si la conexión se crea de forma declarativa o mediante programación, siempre se deben especificar puntos de conexión para el proveedor y el consumidor. El `Button2_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> de objetos para el proveedor y el consumidor y escribe algunos de sus valores de propiedad en una etiqueta en la página.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el **detalles del punto de conexión** botón. Aparece información sobre los puntos de conexión de proveedor y consumidor establecidos en la conexión declarativa. A continuación, use el **modo de presentación** control de lista desplegable para cambiar la página en modo de conexión. En el menú de verbos de la **ZIP Code Consumer** <xref:System.Web.UI.WebControls.WebParts.WebPart> control (representado por una flecha hacia abajo en la barra de título), haga clic en el verbo conectar. La conexión aparece en la interfaz de usuario, se crea automáticamente el `<asp:connectionszone>` control declarado en la página. Esta es otra manera de crear una conexión (a través de la interfaz de usuario), junto con los métodos declarativos y programáticos descritos anteriormente. Haga clic en el **desconexión** botón para terminar la conexión estática existente. Haga clic en el **crear una conexión a un proveedor** vínculo. La interfaz de usuario ahora muestra un control de lista desplegable que muestra el nombre de presentación del punto de conexión de proveedor. Seleccione el punto de conexión en la lista desplegable y, a continuación, haga clic en **Connect** para completar la conexión. A continuación, haga clic en **desconexión** nuevo. A continuación, haga clic en el **conexión dinámica** botón para crear una conexión mediante programación. Use la **modo de presentación** control para devolver la página al modo de exploración. Haga clic en el **detalles del punto de conexión** botón nuevo, para indicar una vez más detalles sobre el objeto de punto de conexión de proveedor.  
  
 El ejemplo haya demostrado estableciendo una conexión y uso de un punto de conexión del proveedor de tres maneras: una conexión estática declarada en el marcado de página Web; una conexión creada en el código que usa un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto; y una conexión creada por un usuario a través de la interfaz de usuario de conexión.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">El método del control proveedor que devuelve una instancia de interfaz a los consumidores para establecer una conexión.</param>
        <param name="interfaceType">Control <see cref="T:System.Type" /> de la interfaz que el proveedor proporciona a los consumidores.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> del control proveedor al que se asocia el punto de conexión del proveedor.</param>
        <param name="displayName">Un nombre descriptivo para mostrar del punto de conexión del proveedor que se muestra a los usuarios en la interfaz de usuario de conexión.</param>
        <param name="id">Un identificador único para el punto de conexión del proveedor.</param>
        <param name="allowsMultipleConnections">Un valor booleano que indica si el punto de conexión del proveedor puede tener varias conexiones simultáneas con consumidores.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor para la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> clase simplemente llama al constructor base, transfiere los distintos parámetros e inicializa la clase base.  
  
 El constructor de clase base comprueba un número de parámetros para un punto de conexión y puede producir varias excepciones. Para obtener una lista de posibles excepciones, vea la sección excepciones.  
  
 Puede llamar a la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor para crear su propia instancia de la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> clase. Sin embargo, en casos donde son simplemente estableciendo una conexión y no extender la clase, debe llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método devuelva un objeto de punto de conexión existente de un proveedor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo derivar la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> clase para crear un punto de conexión del proveedor personalizado.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un archivo de código fuente que contiene un proveedor <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, un consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> control y una personalizada <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto.  
  
-   Una página Web que hospeda los controles en una conexión estática.  
  
-   Explicación de cómo ejecutar el código de ejemplo.  
  
 La primera parte del ejemplo de código es el origen para el proveedor y consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y personalizada <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> clase, denominada `TableProviderConnectionPoint`. Tenga en cuenta que el constructor de la `TableProviderConnectionPoint` clase llama al constructor base, pasando los parámetros necesarios como se indica en la sección de parámetros. Tenga en cuenta también que en el `TableProviderWebPart` (clase), el `GetConnectionInterface` método se especifica como el método de devolución de llamada para las conexiones y el `ConnectionProvider` declara un atributo personalizado `TableProviderConnectionPoint` como un parámetro. Esto demuestra cómo crear un punto de conexión del proveedor personalizado y, a continuación, asociarla a un control proveedor. En este ejemplo se supone que el código fuente se compila dinámicamente, por lo que debe colocar el archivo de código fuente en una subcarpeta App_Code de la aplicación Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La segunda parte del ejemplo de código es la página Web que hospeda los controles personalizados en una conexión de elementos Web estático. En la parte superior de la página es una `Register` directiva para declarar un prefijo y espacio de nombres para los controles personalizados. La conexión se declara mediante un `<asp:webpartconnection>` controles de elemento y el proveedor y el consumidor se declaran dentro de un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Cargue la página en un explorador. La conexión entre los controles ya existe y el consumidor muestra los datos del proveedor, ya que la conexión se ha declarado como una conexión estática en la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> es <see langword="null" />.  
  
\- o - 
 <paramref name="interfaceType" /> es <see langword="null" />.  
  
\- o - 
 <paramref name="controlType" /> es <see langword="null" />.  
  
\- o - 
 <paramref name="displayName" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> no es del mismo tipo que el control proveedor (o una clase válida derivada de él).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control que actúa como proveedor en una conexión de elementos Web.</param>
        <summary>Invoca al método de devolución de llamada en un control proveedor que obtiene una instancia de la interfaz que devuelve a los consumidores.</summary>
        <returns>
          <see cref="T:System.Object" /> que es una instancia de la interfaz que un proveedor devuelve a los consumidores para establecer una conexión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve un objeto desde el control proveedor que es una instancia de la interfaz utilizada para establecer una conexión. El tipo del objeto será el tipo de la interfaz implementada. Por ejemplo, dos interfaces que se implementan para las conexiones de elementos Web son el conjunto de controles <xref:System.Web.UI.WebControls.WebParts.IWebPartField> y <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Cuando el <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> se llama al método en un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> de objeto, si el proveedor asociado implementa una de estas interfaces, el objeto devuelto será del mismo tipo.  
  
 El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> llama al método <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objetos cuando se activa una conexión. Se trata de un paso crítico que realmente inicia una conexión y comienza el proceso que permite que dos controles compartir datos.  
  
 El control consumidor en una conexión debe ser capaz de trabajar con el mismo tipo de interfaz que el proveedor. Si no es así, los controles son incompatibles y un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto se debe usar para establecer una conexión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control que actúa como proveedor en una conexión de elementos Web.</param>
        <summary>Obtiene una colección opcional de interfaces secundarias compatibles con el punto de conexión del proveedor.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> de interfaces adicionales proporcionadas por el control que actúa como proveedor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un objeto de punto de conexión de proveedor siempre tiene una interfaz predeterminada que se usa para establecer una conexión con los consumidores. Una instancia de la interfaz predeterminada que se recupera mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método en un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objeto.  
  
 Sin embargo, algunos controles proveedor implementarán varias interfaces para proporcionar a los consumidores como parte de una conexión. Estas interfaces, que no son el valor predeterminado que se utilizan para establecer una conexión, se denominan interfaces secundarias. El <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> método proporciona una manera para devolver una colección de referencias a las interfaces secundarias, al igual que el <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> método devuelve una referencia a la interfaz predeterminada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> método en el <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> clase no contiene ninguna implementación; devuelve una colección vacía de interfaces secundarias. Para implementar este método, debe heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> clase e invalidar este método, devolverá un conjunto específico de interfaces secundarias.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>