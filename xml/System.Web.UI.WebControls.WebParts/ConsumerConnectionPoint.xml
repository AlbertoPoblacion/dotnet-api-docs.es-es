<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a906fef29cb08b4b1a7448d724be44cee8213f6c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define un objeto de punto de conexión que permite a un control de servidor que actúa como consumidor establecer una conexión con un proveedor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cada conexión de elementos Web entre dos controles de servidor, cada control debe tener (entre otros requisitos) un objeto de punto de conexión asociado que le permite conectarse a otro control y proporcionar o consumir datos, dependiendo de si el control se designa como el proveedor o el usuario para la conexión. Un <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objeto contiene por lo general los detalles de cómo un control puede conectarse a otro control y el tipo de datos que puede compartir. Para un control que actúa como consumidor en una conexión, su punto de conexión debe ser un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto. Para obtener más información sobre las conexiones de elementos Web y puntos de conexión, lea los temas enumerados en la sección Vea también.  
  
 Para crear un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> de objeto, se requieren varios pasos:  
  
1.  Permitir que un control de consumidor hacer referencia a una instancia de interfaz. A <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor (cualquier tipo de control de servidor que se agregará a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona puede utilizarse) debe poder consumir datos desde una instancia de la interfaz específica. El control no necesita implementar la interfaz; sólo el proveedor debe implementarla. El consumidor puede trabajar con el tipo exacto de interfaz atendido por un proveedor de o, si no es así, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto puede utilizarse para transformar los datos de tipo de interfaz del proveedor a un tipo que se entiende por el consumidor. Una forma habitual para habilitar a un consumidor es declarar un campo privado para que contenga una referencia al tipo de interfaz deseado.  
  
2.  Identificar un método de devolución de llamada. Un método en el consumidor debe identificarse como el método de devolución de llamada para establecer una conexión con el proveedor. Este método recupera una instancia de la interfaz que el proveedor implementa y asigna al campo (por ejemplo) privado se crea en el primer paso. El enfoque de elementos Web para identificar un método de devolución de llamada en el consumidor consiste en Agregar un `ConnectionConsumer` atributo de metadatos (definido por el <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> clase) para el método que recibe la instancia de interfaz. Cuando se agrega el atributo, el único parámetro necesario es un nombre para mostrar que se utilizará para el punto de conexión del consumidor. Parámetros opcionales también se pueden agregar, como un identificador.  
  
3.  Proceso y los datos de la instancia de la interfaz de salida. Realizar cualquier procesamiento interno según sea necesario en los datos y, a continuación, normalmente un control consumidor representará los datos a la página. Una forma habitual de hacerlo consiste en reemplazar el control <xref:System.Web.UI.Control.OnPreRender%2A> método.  
  
    > [!NOTE]
    >  Durante una solicitud sincrónica, un consumidor debe solicitar datos directamente desde el proveedor durante o inmediatamente después de la <xref:System.Web.UI.Control.PreRender> eventos. Durante una solicitud asincrónica, si el método de devolución de llamada del proveedor no se llama en cualquier momento durante la representación, puede asumir el desarrollador, lo que no se envió ningún dato al consumidor.  
  
 Después de que se ha equipado un control para que actúe como un consumidor, el control puede participar en las conexiones (suponiendo que un control de proveedor también está equipado y disponible). Para crear una conexión declarativa estática en el marcado de una página Web, los desarrolladores pueden usar el `<asp:webpartconnection>` elemento. Si el `ConnectionConsumer` atributo en el código fuente de consumidor que identifica el método de devolución de llamada especifica un identificador para el punto de conexión, a continuación, ese valor debe asignarse a la `ConsumerConnectionPointID` de atributo en el `<asp:webpartconnection>` elemento en una página. Una razón que un desarrollador puede especificar un identificador para un punto de conexión del consumidor es si hay varios puntos de conexión definidos en el control de consumidor. Si no se especifica un identificador para el punto de conexión del consumidor en el control de consumidor, no tiene un valor que se asignará a la `ConsumerConnectionPointID` atributo en la página, porque la conexión se creará usando un valor predeterminado que se obtienen de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Para crear una conexión en el código, los programadores deben crear una nueva <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método y pasar a la el identificador del control de consumidor, junto con el Id. de índice o de las personalizaciones definidas <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto en el control de consumidor. El valor devuelto <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto, junto con una referencia al control consumidor, una referencia para el control de proveedor y su correspondiente <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> de objetos, son todos los pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método para crear un nuevo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objeto.  
  
 Aunque los desarrolladores pueden usar puntos de conexión del consumidor como parte del establecimiento de conexiones mediante declaración o mediante programación, los usuarios también pueden interactuar con los puntos de conexión del consumidor para establecer conexiones a través de la interfaz de usuario (UI). Si los desarrolladores declaran un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control en una página Web, proporciona una interfaz de usuario de tiempo de ejecución para que los usuarios crear conexiones. Si los usuarios eligen el control proveedor como punto de partida para establecer la conexión haciendo clic en su verbo conectar (también podrían elegir el consumidor, no hay ninguna diferencia en la conexión resultante), en la interfaz de usuario verán un control de lista desplegable con la Mostrar nombres de los disponibles consumidor conexión punto (o puntos, si hay varias) que el proveedor puede enviar los datos. Los usuarios deben seleccionar un punto de conexión del consumidor para establecer una conexión.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto asocia directamente con un control consumidor específico y guarda los detalles sobre una conexión en las propiedades que hereda de la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> clase. Por ejemplo, en el heredados <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propiedad, un punto de conexión del consumidor mantiene el tipo de interfaz que utiliza. Si el proveedor y el consumidor de una conexión de ambos entiende el tipo de interfaz, los controles son compatibles y capaces de formar una conexión directa. Si el proveedor y el consumidor no pueden trabajar con el mismo tipo de interfaz, son incompatibles y deben utilizar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto que se va a traducir el punto de conexión de proveedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propiedad en un tipo que el consumidor pueda trabajar con. Otra propiedad heredada importante es la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> punto de propiedad, que proporciona un nombre descriptivo para mostrar en la interfaz de usuario a los usuarios elegir una conexión del consumidor al crear conexiones. El nombre para mostrar es el parámetro necesario cuando los desarrolladores agregan un `ConnectionConsumer` atributo al método de devolución de llamada en un control de consumidor. Los heredados <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propiedad también es útil, como se mencionó anteriormente, porque proporciona un identificador único para un punto de conexión del consumidor en caso de que un consumidor tiene varios puntos de conexión. Un consumidor puede tener varios <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos definidos en ella y, en este caso, cuando los desarrolladores agregan el `ConnectionConsumer` atributo a un método, debe especificar un valor de identificador para distinguir cada punto de conexión. Otra propiedad heredada importante es la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propiedad, que indica si un punto de conexión del consumidor puede conectarse simultáneamente a varios proveedores. Este valor de propiedad es `false` predeterminada para los puntos de conexión del consumidor (mientras que el valor predeterminado es `true` para los puntos de conexión del proveedor).  
  
 El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase agrega varios métodos únicos a los miembros que hereda de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> clase. El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> método invoca el método de devolución de llamada del consumidor propio definido para recuperar la instancia de la interfaz del proveedor. El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> método devuelve un valor booleano que indica si el punto de conexión es capaz de establecer conexiones, en función del estado actual del control consumidor asociado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra varias maneras sencillas de crear una conexión mediante declaración, mediante programación o a través de la interfaz de usuario, en cada caso de decisiones de un punto de conexión del consumidor.  
  
 El ejemplo consta de cuatro partes:  
  
-   Modo de presentación de un control de usuario que permite cambiar los elementos Web en una página.  
  
-   El código para una interfaz y dos fuente <xref:System.Web.UI.WebControls.WebParts.WebPart> controla actúa como el proveedor y el consumidor de una conexión.  
  
-   Una página Web para hospedar todos los controles y ejecutar el ejemplo de código.  
  
-   Explicación de cómo ejecutar la página de ejemplo.  
  
 La primera parte de este ejemplo de código es el control de usuario que permite a los usuarios cambiar los modos de presentación en una página Web. Guarde el siguiente código fuente en un archivo .ascx y póngale el nombre de archivo que se asigna a la `Src` atributo de la `Register` directiva para este control de usuario, que esté cerca de la parte superior de la página Web que hospeda. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La segunda parte del ejemplo de código es el código fuente de la interfaz y los controles. El archivo de código fuente contiene una interfaz simple denominada `IZipCode`. También hay un <xref:System.Web.UI.WebControls.WebParts.WebPart> clase denominada `ZipCodeWebPart` que implementa la interfaz y actúa como el control de proveedor. El otro <xref:System.Web.UI.WebControls.WebParts.WebPart> clase se denomina `WeatherWebPart`, y actúa como el consumidor de la conexión. Esta clase tiene un método denominado `GetZipCode` que obtiene una instancia de la `IZipCode` interfaz desde el control de proveedor. Tenga en cuenta que este método está marcado como método de punto de conexión del consumidor con un `ConnectionConsumer` atributo en sus metadatos. Este es el mecanismo para identificar el método de punto de conexión en el control de consumidor.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Cerca de la parte superior están `Register` las directivas para registrar los controles personalizados que forman la conexión y el control de usuario que permite a los usuarios cambiar los modos de presentación en la página. La propia conexión se crea mediante declaración en el `<staticconnections>` elemento de la página. Esto muestra una manera de crear una conexión: tenga en cuenta el `ConsumerConnectionPointID` de atributo en el `<asp:webpartconnection>` elemento. También puede crear la conexión mediante programación; el código para hacer que se encuentra en la `Button1_Click` método. En este caso, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto se crea y, a continuación, pasa a un método que crea la conexión real. Si la conexión se crea mediante declaración o mediante programación, los puntos de conexión siempre deben especificarse para el proveedor y el consumidor. El `Button2_Click` método tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> de objetos para el proveedor y el consumidor y escribe algunos de sus valores de propiedad a una etiqueta en la página.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el **detalles del punto de conexión** botón. Muestra información sobre los puntos de conexión de proveedor y el consumidor establecidos en la conexión declarativa. A continuación, use la **modo de presentación** control de lista desplegable para cambiar la página en modo de conexión. En el menú de verbos de los **ZIP Code Provider** <xref:System.Web.UI.WebControls.WebParts.WebPart> control (representado por una flecha hacia abajo en la barra de título), haga clic en el verbo conectar. La conexión aparece en la interfaz de usuario, creados automáticamente por el `<asp:connectionszone>` control declarado en la página. Esta es otra manera de crear una conexión (a través de la interfaz de usuario), junto con los métodos declarativos y de programación que se analizaron anteriormente. Haga clic en el **desconexión** botón para terminar la conexión estática existente. Haga clic en el **crear una conexión a un consumidor** vínculo. La interfaz de usuario ahora muestra un control de lista desplegable que muestra el nombre de presentación del punto de conexión de consumidor. Seleccione el punto de conexión en la lista desplegable y, a continuación, haga clic en **conectar** para completar la conexión. A continuación, haga clic en **desconexión** nuevo. Haga clic en el **conexión dinámica** botón para crear una conexión mediante programación. Use la **modo de presentación** control para devolver la página al modo de exploración. Haga clic en el **detalles del punto de conexión** botón nuevo, para indicar los detalles sobre el objeto de punto de conexión de consumidor una vez más.  
  
 En el ejemplo se ha mostrado estableciendo una conexión y usando un punto de conexión del consumidor de tres maneras: una conexión estática se declara en el marcado de la página Web; una conexión creada en el código que usa un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto y una conexión creada por un usuario a través de la interfaz de usuario de conexión.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Método del control consumidor que devuelve una instancia de interfaz a los consumidores para establecer una conexión.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> de la interfaz que el consumidor recibe de un proveedor.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> del control consumidor al que se asocia el punto de conexión del consumidor.</param>
        <param name="displayName">Nombre descriptivo del punto de conexión del consumidor que se muestra a los usuarios en la interfaz de usuario de conexión.</param>
        <param name="id">Identificador único para el punto de conexión del consumidor.</param>
        <param name="allowsMultipleConnections">Valor booleano que indica si el punto de conexión del consumidor puede tener varias conexiones simultáneas con proveedores.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor para la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase simplemente llama al constructor base, transfiere los diferentes parámetros e inicializa la clase base.  
  
 El constructor de clase base comprueba un número de parámetros para un punto de conexión y puede producir varias excepciones. Para obtener una lista de posibles excepciones, vea la sección excepciones.  
  
 Puede llamar a la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor para crear su propia instancia de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase. Sin embargo, en casos donde son simplemente establecer una conexión y no esté ampliando la clase, debe llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método para devolver un objeto de punto de conexión de un proveedor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo se deriva de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase para crear un punto de conexión del proveedor personalizado.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un archivo de código fuente que contiene un proveedor <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, un consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> control y un personalizado <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto.  
  
-   Una página Web que hospeda los controles en una conexión estática.  
  
-   Explicación de cómo ejecutar el código de ejemplo.  
  
 La primera parte del ejemplo de código es el origen para el proveedor y el consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y personalizado <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase, denominada `TableConsumerConnectionPoint`. Tenga en cuenta que el constructor de la `TableConsumerConnectionPoint` clase llama al constructor base, pasando los parámetros necesarios tal como se indica en la sección de parámetros. Tenga en cuenta también que, en la `TableConsumer` (clase), el `SetConnectionInterface` método se especifica como el método de devolución de llamada para las conexiones y el `ConnectionConsumer` atributo declara personalizado `TableConsumerConnectionPoint` como un parámetro. Esto muestra cómo crear un punto de conexión del consumidor personalizado y, a continuación, asociarla a un control de consumidor. En este ejemplo se da por supuesto que el código fuente se compila dinámicamente, por lo que se debe colocar el archivo de código fuente en una subcarpeta App_Code de la aplicación Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La segunda parte del ejemplo de código es la página Web que hospeda los controles personalizados en una conexión de elementos Web estático. En la parte superior de la página es una `Register` directiva para declarar un prefijo y el espacio de nombres para los controles personalizados. La conexión se declara mediante un `<asp:webpartconnection>` controles de elemento y el proveedor y el consumidor se declaran dentro de un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Cargar la página en un explorador. La conexión entre los controles ya existe y el consumidor muestra los datos desde el proveedor, porque la conexión se ha declarado como una conexión estática en la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> es <see langword="null" />.  \- o bien - <paramref name="interfaceType" /> es <see langword="null" />.  \- o bien - <paramref name="controlType" /> es <see langword="null" />.  \- o bien - <paramref name="displayName" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> no es el mismo tipo que el control consumidor (o una clase válida derivada de él).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Control consumidor asociado a un punto de conexión del consumidor.</param>
        <param name="data">Instancia de interfaz devuelta desde un control proveedor.</param>
        <summary>Invoca el método de devolución de llamada en un control consumidor y recupera la instancia de interfaz de un control proveedor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método recibe una instancia de la interfaz de un proveedor que contiene los datos para el control de consumidor.  
  
 El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> llama al método <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objetos cuando se activa una conexión. Se trata de un paso crítico que forma parte de iniciar una conexión y habilitación de dos controles que comparten datos.  
  
 El control consumidor de una conexión debe poder trabajar con el mismo tipo de interfaz que el proveedor. Si no es así, los controles son incompatibles y un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto debe utilizarse para establecer una conexión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Control consumidor asociado con <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">
          <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> de cualquier interfaz secundaria que participa en una conexión.</param>
        <summary>Determina si un punto de conexión del consumidor es capaz en la actualidad de establecer una conexión.</summary>
        <returns>
          <see langword="true" /> si un punto de conexión puede establecer en la actualidad una conexión; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> método tal como se implementa siempre devuelve `true` en todos los casos para el <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase. La finalidad de este método es hacer que compruebe el estado de `control` y `secondaryInterfaces` en ciertos puntos críticos para determinar si un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objeto es actualmente capaz de crear una conexión.  
  
 Puede haber escenarios donde `control` está en un estado que haría imposible formar una conexión, o donde `secondaryInterfaces` debe existir antes de que se puede formar una conexión. En tales casos, los desarrolladores pueden heredar de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> clase e invalidar el <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> método, proporcionando una implementación personalizada para determinar si el punto de conexión ha preparado para admitir las conexiones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>