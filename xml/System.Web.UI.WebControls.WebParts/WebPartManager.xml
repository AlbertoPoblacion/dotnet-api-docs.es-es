<Type Name="WebPartManager" FullName="System.Web.UI.WebControls.WebParts.WebPartManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="447b59226991f146bb5bc23c2a9103a7bf6ed612" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59350163" /></Metadata><TypeSignature Language="C#" Value="public class WebPartManager : System.Web.UI.Control, System.Web.UI.INamingContainer, System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPartManager extends System.Web.UI.Control implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
  <TypeSignature Language="VB.NET" Value="Public Class WebPartManager&#xA;Inherits Control&#xA;Implements INamingContainer, IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartManager : System::Web::UI::Control, System::Web::UI::INamingContainer, System::Web::UI::WebControls::WebParts::IPersonalizable" />
  <TypeSignature Language="F#" Value="type WebPartManager = class&#xA;    inherit Control&#xA;    interface INamingContainer&#xA;    interface IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.WebParts.IPersonalizable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ViewStateModeById</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Actúa como clase central del conjunto de controles de elementos Web y administra todos los controles de elementos Web, la funcionalidad y los eventos que se producen en una página Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control actúa como el concentrador o centro de control de una aplicación de elementos Web. Debe haber una y sólo una--<xref:System.Web.UI.WebControls.WebParts.WebPartManager> instancia del control en todas las páginas que utiliza controles de elementos Web. Al igual que con la mayoría de los aspectos de las aplicaciones de elementos Web, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control solo funciona con los usuarios autenticados. Además, su funcionalidad se basa casi completamente con los controles de servidor que residen en zonas de elementos Web que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebZone> clase. Los controles de servidor que residen en una página fuera de estas zonas pueden tener muy poca funcionalidad de elementos Web o la interacción con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Como el centro de la funcionalidad de elementos Web en una página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control lleva a cabo los tipos de tareas que se describen en la tabla siguiente.  
  
|Categoría de tarea|Lo que hace el control|  
|-------------------|---------------------------|  
|Seguimiento de los controles de elementos Web|Realiza un seguimiento de muchos tipos diferentes de controles en una página que proporcionan características de elementos Web, incluidos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, las conexiones, las zonas y otros.|  
|Agregar y quitar controles de elementos Web|Proporciona los métodos para agregar, eliminar y cerrar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles en una página.|  
|Administrar conexiones|Crea conexiones entre los controles y supervisa las conexiones, así como los procesos de agregarlos y quitarlos.|  
|Personalizar páginas y controles|Permite a los usuarios mover controles a ubicaciones diferentes en una página e inicia las vistas en el que los usuarios pueden editar la apariencia, propiedades y comportamiento de los controles. Mantiene la configuración de personalización específicos del usuario en cada página.|  
|Alternar entre diferentes vistas de página|Cambia una página entre diferentes vistas especializadas de la página, para que los usuarios pueden llevar a cabo ciertas tareas, como cambiar el diseño de página o los controles de edición.|  
|Provocar eventos de ciclo de vida de elementos Web|Define, genera y permite a los desarrolladores para controlar los eventos de ciclo de vida de los controles de elementos Web, como cuando los controles se agregan, mover, conectado o eliminar.|  
|Habilitar la importación y exportación de controles|Exporta secuencias XML que contienen el estado de las propiedades de <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y permite a los usuarios importar los archivos cómodamente cuando personalizan controles complejos en otras páginas o sitios.|  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase tiene un gran conjunto de propiedades. Coherente con la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> función de seguimiento de otros controles, tiene un número de propiedades que hacen referencia a colecciones de controles de elementos Web u otros objetos especiales de elementos Web. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedades son todas las colecciones usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para su seguimiento y otros tareas de administración.  
  
 Otro grupo de propiedades contiene advertencias personalizables que se aplican en ciertos escenarios que se producen en una aplicación de elementos Web. Estos incluyen el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A>y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedades.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase reemplaza algunas de sus propiedades heredadas base, que son usadas por muchos controles de servidor Web. Estos incluyen el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedades.  
  
 Por último, hay un grupo de propiedades útiles para tener acceso al estado actual de la aplicación. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad indica el modo de presentación actual que está en la página. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> propiedad indica si se permite un control para representar el script del lado cliente, que es relevante en situaciones donde los usuarios pueden tener exploradores con distintas capacidades o tener secuencias de comandos ha desactivado. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad es útil para hacer referencia a una clase de utilidad que contiene las llamadas a un número de métodos importantes de elementos Web que se usan en casos de extensibilidad. Si se ocultan las llamadas a estos métodos en una clase independiente (el <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> se simplifica la API de la clase. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad proporciona acceso a los objetos de personalización que almacenan la configuración de personalización de los usuarios y conservar esos datos en un almacenamiento permanente. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad indica qué <xref:System.Web.UI.WebControls.WebParts.WebPart> control en una página está seleccionado actualmente por el usuario o la aplicación. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad indica si los datos de personalización personalizados en un <xref:System.Web.UI.WebControls.WebParts.WebPart> control ha cambiado.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control contiene cinco modos de presentación integrados o vistas de una página Web. Los desarrolladores pueden extender esta característica, creación de modos de presentación personalizados mediante la extensión de tipos, como la <xref:System.Web.UI.WebControls.WebParts.WebZone> clase o el <xref:System.Web.UI.WebControls.WebParts.ToolZone> clase. Los usuarios pueden cambiar una página en los distintos modos de presentación, siempre que el tipo adecuado de controles que corresponden a un modo de presentación determinado están presentes en una página.  
  
> [!NOTE]
>  Es posible ampliar esta característica para que los usuarios pueden cambiar en un modo de presentación personalizado sin necesidad de una zona correspondiente en la página. Sin embargo, el comportamiento predeterminado es que los modos de presentación se corresponden con las zonas.  
  
 Los modos de presentación estándar están representados por los campos públicos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase. En la tabla siguiente se resume los campos y los modos de presentación hacen referencia. El modo de presentación actual de una página, como se mencionó anteriormente, siempre hace referencia en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad y el conjunto de modos de presentación que es posible en una página concreta, dada el tipo de las zonas que están presentes en la página, se encuentra en la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
|Campo|Detalles del modo de presentación|  
|-----------|--------------------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>|La vista de usuario normal de una página Web; el valor predeterminado y modo de presentación más comunes.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>|La vista en la que los usuarios pueden reorganizar o eliminar los controles para cambiar el diseño de página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>|La vista en el que una interfaz de usuario (UI) de edición, pasa a ser visible; los usuarios pueden editar la apariencia, propiedades y comportamiento de los controles que están visibles en el modo de exploración normal.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>|La vista en la que se hace visible; un catálogo de la interfaz de usuario los usuarios pueden agregar controles a una página de catálogos de controles disponibles.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>|La vista en el que una interfaz de usuario de conexión se vuelve visible; los usuarios pueden conectar, administrar o desconectar las conexiones entre los controles.|  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también contiene un número de eventos que son fundamentales en el ciclo de vida de páginas Web Parts y controles. Estos eventos proporcionan un control preciso sobre el comportamiento de los controles de elementos Web mediante programación. Mayoría de los métodos relacionados directamente con <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (u otros controles de servidor o de usuario que se colocan en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas para que puedan comportarse como <xref:System.Web.UI.WebControls.WebParts.WebPart> controles). Sin embargo, algunos eventos que pertenecen al estado de la página o las conexiones en la página. En la tabla siguiente se enumera los eventos disponibles y se resume sus propósitos.  
  
> [!NOTE]
>  En todos los casos en la tabla siguiente, la palabra "control" hace referencia a un <xref:System.Web.UI.WebControls.WebParts.WebPart> control o cualquier control de servidor que se encuentra en una zona y se encapsula con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto en tiempo de ejecución.  
  
|evento|Descripción|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>|Se produce justo antes de que se agrega un control a una página para comprobar que está autorizado.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>|Se produce después de que se han activado todas las conexiones en una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>|Se produce justo antes del proceso de activación de todas las conexiones en una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>|Se produce después de que ha cambiado el modo de presentación actual de una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>|Se produce justo antes del proceso de cambiar el modo de presentación de una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>|Se produce después de que se ha cancelado la selección de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>|Se produce justo antes del proceso de cancelar la selección de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>|Se produce después de agregar un control a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>|Se produce justo antes del proceso de agregar un control a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>|Se produce después de que se ha cerrado un control (se quitan de una página).|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>|Se produce justo antes del proceso de cierre de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>|Se produce después de eliminar permanentemente una instancia de un control dinámico (uno que se ha creado mediante programación o agregado desde un catálogo).|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>|Se produce justo antes del proceso de eliminación de un control dinámico.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>|Se produce después de mover un control dentro de su zona o a otra zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>|Se produce justo antes del proceso de mover un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>|Se produce después de que dos controles seleccionados para participar en una conexión establecida la conexión.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>|Se produce justo antes del proceso de conectar dos controles.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>|Se produce después de haberse desconectados dos controles conectados.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>|Se produce justo antes del proceso de desconectar dos controles.|  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene varios métodos para administrar páginas de elementos Web. Un conjunto grande de los métodos, no se muestran aquí son métodos cuyos nombres toman la forma on*EventName*. Estos métodos normalmente genera su evento asociado y proporcionar el evento con un controlador de tipo <xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler>. La mayoría de estos métodos puede reemplazarse por los desarrolladores que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase. Además, los desarrolladores de páginas pueden proporcionar controladores personalizados para los eventos asociados con estos métodos. Por ejemplo, en el caso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento, un desarrollador de la página puede agregar un `OnWebPartAdded` atributo a la `<asp:webpartmanager>` elemento en el marcado de una página Web y, a continuación, asigne el nombre de un método personalizado para el atributo para proporcionar un control personalizado para el evento. El atributo corresponde a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> método y este patrón básico de control funciona para la mayoría de los eventos de elementos Web y sus métodos asociados de eventos.  
  
 Además, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene métodos concretos para la tarea de administrar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (y los controles de servidor o de usuario usados como <xref:System.Web.UI.WebControls.WebParts.WebPart> controles). Estos métodos incluyen <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>.  
  
 Está especializado en otro conjunto de métodos para las conexiones. Esto incluye los métodos como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 Por último, algunas <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos centran en la funcionalidad de personalización. Entre estas se incluyen <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A>.  
  
 Para obtener más información sobre otros <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos que son accesibles a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad, consulte la documentación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El control de usuario tiene un control de lista desplegable que muestra los posibles modos de presentación en una página, dados los controles de elementos Web que están presentes en la página. En la página Web para este ejemplo de código, se declara este control de usuario justo debajo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento de marcado de la página y hay un `Register` la directiva en la parte superior de la página Web para registrar el control. Para obtener información detallada acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/DisplayModeMenuVB.ascx#6)]  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. La página también contiene código en línea que controla los eventos relacionados con la conexión para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar; puede ver el efecto de este código como conectar y desconectar controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente para los controles. Tenga en cuenta que hay una interfaz denominada `IZipCode`, y esta interfaz se implementa en el `ZipCodeWebPart` clase. Esta clase tiene un método de devolución de llamada especial denominado `ProvideIZipCode` que actúa como un proveedor. El otro tipo, denominado `WeatherWebPart`, también se implementa con un método especial denominado `GetIZipCode`, lo que permite el control para que actúe como un consumidor del otro control.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código se da por supuesto que ha compilado el código fuente en un ensamblado y el `Register` directiva en la página Web hace referencia al nombre de ensamblado. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/ZipCodeComponent.vb#2)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Muestra una celda que tiene un control de lista desplegable. Seleccione **Control meteorológico** en la lista desplegable y, a continuación, haga clic en **Connect** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, utilice el **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Puede escribir un código postal y el control consumidor se actualizará con el valor que especifique. Dado que el `ZipCode` propiedad marcada con el `Personalizable` atributo en el código fuente, este valor de propiedad se conservará entre sesiones del explorador, ahorrando así el valor especificado por el usuario. Un control consumidor más sofisticado podría tomar la información de código postal, buscar información meteorológica según el código y mostrarlo en un usuario.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>El <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control está diseñado para ampliarse. Dado que es de manera central a las aplicaciones de elementos Web, cuando desee extender algún tipo específico o un control en el conjunto de controles de elementos Web, en muchos casos, también debe extender el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase porque es probable que tenga alguna propiedad o método que es necesario para realizar  el tipo personalizado funcionan en el contexto de una aplicación de elementos Web. Documentación de referencia de los elementos Web (consulte <see cref="N:System.Web.UI.WebControls.WebParts" />), cuando se describe cómo extender una de elementos Web escribe, con frecuencia menciona lo que debe hacerse para ampliar la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase así o se muestra cómo ampliarla en un ejemplo de código.</para></block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.%23ctor%2A> constructor inicializa varias variables importantes utilizadas por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Una asignación que afecta directamente a todas las páginas de elementos Web es el hecho de que el modo de presentación de página predeterminado se establece en modo de exploración (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateConnections">
      <MemberSignature Language="C#" Value="protected virtual void ActivateConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ActivateConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ActivateConnections ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ActivateConnections();" />
      <MemberSignature Language="F#" Value="abstract member ActivateConnections : unit -&gt; unit&#xA;override this.ActivateConnections : unit -&gt; unit" Usage="webPartManager.ActivateConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activa todas las conexiones de una página Web que están actualmente inactivas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método en cada solicitud a una página para activar las conexiones existentes entre <xref:System.Web.UI.WebControls.WebParts.WebPart> y otros controles de servidor que residen en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas. En algunos casos, por ejemplo, si hay un conflicto en las conexiones que se está activadas, este método a su vez llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método para finalizar la conexión problemática. Durante el proceso de desconexión del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> provoca el evento. Normalmente los desarrolladores pueden cancelar este evento, pero en el caso donde esto es un conflicto entre las conexiones no se puede cancelar, porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control necesita resolver el conflicto con el fin de finalizar el proceso de activación de conexiones. Para obtener más información, consulte <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart AddWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPart AddWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPart ^ AddWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="member this.AddWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.AddWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart"><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o control de servidor o de usuario) que se va a agregar a una página web o que se va a abrir en una página.</param>
        <param name="zone">Zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> a la que se va a agregar <paramref name="webPart" />.</param>
        <param name="zoneIndex">Entero que representa la posición ordinal que <paramref name="webPart" /> ocupa en <paramref name="zone" /> respecto a otros controles en <paramref name="zone" />.</param>
        <summary>Proporciona el método de programación estándar para agregar controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> a una página Web.</summary>
        <returns>Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que se ha agregado a la página.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método se utiliza tanto para agregar nuevos dinámicos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles a una página y para volver a abrir controles estáticos o dinámicos que anteriormente se han cerrado en una página. Cuando se llama al método para agregar un nuevo control, realmente crea una copia del control al que hace referencia en el `webPart` parámetro. Se genera un nuevo identificador para la copia del control, por lo que deben hacer referencia a los desarrolladores la <xref:System.Web.UI.WebControls.WebParts.WebPart> control devuelto desde el método para obtener el nuevo valor de identificador. Cuando se llama al método para volver a abrir un control previamente cerrado, devuelve una referencia directa al control al que hace referencia el `webPart` parámetro.  
  
> [!IMPORTANT]
>  Siempre debe usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método, en lugar de <xref:System.Web.UI.ControlCollection.Add%2A> método de la colección de controles que se hace referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=nameWithType> propiedad va a agregar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles mediante programación a la página, porque usa el <xref:System.Web.UI.ControlCollection.Add%2A> método produce una excepción. Para agregar un control que no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (en otras palabras, un control de servidor que se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control en tiempo de ejecución), primero debe llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método para crear el control y, a continuación, llame a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método para agregar el control. Para ver una demostración de este enfoque, vea la sección ejemplo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> para agregar un control de servidor mediante programación a una página. El marcado de página contiene un valor vacío `<asp:webpartzone>` elemento y un `<asp:webpartmanager>` elemento. La primera vez el **Agregar calendario** se hace clic en botón, el código en caso de que crea el controlador de un <xref:System.Web.UI.WebControls.Calendar> controlar y lo agrega a una zona como un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto, llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.  
  
O bien 
 <paramref name="zone" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="zone" /> no está registrado en la colección de zonas del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.  
  
O bien 
 <paramref name="webPart" /> ya está en <paramref name="zone" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de<paramref name="zoneIndex" /> es menor que cero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AuthorizeWebPart">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AuthorizeWebPart As WebPartAuthorizationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventHandler ^ AuthorizeWebPart;" />
      <MemberSignature Language="F#" Value="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " Usage="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se llama al método <see cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" /> para determinar si se puede agregar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de servidor a una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento se produce siempre que un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se agrega a una página. Hay una serie de escenarios comunes donde se puede agregar un control a una página. Para obtener una descripción completa de estos, consulte la sección Comentarios para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método. Cuando se agrega un control, debe comprobarse para ver si su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> se ha establecido la propiedad y, si es así, si el control está autorizado para agregarse a la página.  
  
 Los desarrolladores pueden crear controladores de eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos, para proporcionar filtrado para los controles. Si un control <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor de propiedad no cumple los criterios en el código de controlador de eventos, el control no se agrega a la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer un controlador de eventos personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, que reemplaza automáticamente el valor predeterminado <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método.  
  
 El código en el `mgr1_AuthorizeWebPart` método comprueba si los controles de la página tienen sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en valores `user` y, si es así, devuelve `true`, lo que significa que serán autorizados y se agrega a la página. Se supone que el valor predeterminado consiste en permitir a los usuarios ver los controles con una página en el ámbito de personalización de usuario. Sin embargo, tenga en cuenta que en el ejemplo de los controles tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor de propiedad se establece en `admin`. Los desarrolladores podrían colocar este filtro en un control especializado que se diseñó solo a los usuarios administrativos ver. Este control se producirá un error en la comprobación de autorización durante la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos y no se mostrarán. Tenga en cuenta que los controles que no tienen la propiedad se muestran también; se supone que no para formar parte de un escenario de filtrado porque sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> no se establecen propiedades.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AvailableTransformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableTransformers As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ AvailableTransformers { System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableTransformers : System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que están disponibles para su uso al crear conexiones de elementos Web entre los controles de servidor.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection" /> que contiene un conjunto de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A> método para crear la colección. De forma predeterminada, lee los transformadores disponibles desde el archivo de configuración de la aplicación.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Introducción a las conexiones de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartConnecting (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartConnecting(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartConnecting(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartConnecting webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control para el que se forma la conexión.</param>
        <summary>Inicia el proceso de conectar dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> existe un método para que el proceso de formar conexiones entre los controles puede realizarse en fases distintas, lo que proporciona a los desarrolladores más control sobre el proceso de conexión. El método realiza un conjunto de comprobaciones iniciales para asegurarse de que `webPart` está en un estado donde legítimamente se puede formar una conexión. Si `webPart` pasa todas las comprobaciones, a continuación, se establece como el control seleccionado actualmente (vea la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad), y puede continuar el proceso de conexión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El modo de presentación actual de la página no es <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="webPart" /> está cerrado.  
  
O bien 
 <paramref name="webPart" /> no forma parte de la colección <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  
  
O bien 
 <paramref name="webPart" /> es igual al control <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />.</exception>
        <block subset="none" type="overrides"><para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregar un controlador personalizado adicional; o bien, puede personalizar completamente el proceso de inicio de una conexión entre controles. Por ejemplo, es posible que desee comprobar que determinados datos estén disponibles antes de crear la conexión.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartEditing (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartEditing(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartEditing(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartEditing webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control que se va a editar.</param>
        <summary>Inicia el proceso de editar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> existe un método para que el proceso de los controles de edición puede realizarse en fases distintas, lo que proporciona a los desarrolladores más control sobre el proceso. El método realiza un conjunto de comprobaciones iniciales para asegurarse de que `webPart` está en un estado donde se puede editar. Si `webPart` pasa todas las comprobaciones, a continuación, se establece como el control seleccionado actualmente (vea la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad), y puede continuar el proceso de edición.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El modo de presentación actual de la página no es <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="webPart" /> está cerrado.  
  
O bien 
 <paramref name="webPart" /> no forma parte de la colección <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  
  
O bien 
 <paramref name="webPart" /> es igual al control <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BrowseDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BrowseDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ BrowseDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable BrowseDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el modo de presentación predeterminado para páginas que contienen controles de elementos Web. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Se trata de un objeto estático, puede hacer referencia a él directamente a través del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios exploran simplemente como lo harían en una página Web normal, la página permanece en modo de exploración. Si los usuarios desean personalizar el diseño, controles, apariencia o comportamiento de una página, es preciso que cambie la página en uno de los modos de presentación especializadas disponibles a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos, que en este caso son exploración y diseño. Tenga en cuenta que, en el `Page_PreRender` método, el código comprueba si el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>. Si es así, `Label1` estará visible y si no, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/CS/wpmgrBrowseDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/VB/wpmgrBrowseDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta la etiqueta en la página que indica que está en modo de exploración. Utilice el control de lista desplegable para cambiar la página al modo de diseño. Tenga en cuenta que, debido al código en el `Page_PreRender` ahora se oculta el método, la etiqueta.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Comprueba los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que participarán en una conexión para determinar si son capaces de conectarse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método se utiliza para determinar si dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles se pueden conectar. El método se utiliza normalmente como una comprobación condicional antes de llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método comprueba una serie de criterios que deben cumplirse antes de que dos controles pueden formar una conexión. En la lista siguiente se resume el criterio principal para crear una conexión. Si se cumplen todos estos criterios (más algunas condiciones internas adicionales), el método devuelve `true`, lo que significa que se pueden conectar los controles:  
  
-   Los controles proveedor y consumidor no pueden ser `null`, y ambos deben estar contenidos en la colección de controles al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
-   El proveedor y el consumidor no pueden ser el mismo control. En otras palabras un <xref:System.Web.UI.WebControls.WebParts.WebPart> control no se puede conectar a sí mismo.  
  
-   El <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objetos (puntos de conexión) para el proveedor y el consumidor no pueden ser `null`.  
  
-   No se puede cerrar el proveedor y el consumidor (ningún control <xref:System.Web.UI.WebControls.WebParts.WebPart.IsClosed%2A> propiedad puede ser `true`).  
  
-   El <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propiedad del control de punto de conexión debe coincidir con el tipo del control consumidor y proveedor.  
  
-   Los puntos de conexión deben habilitarse (sus <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> métodos deben devolver `true`).  
  
-   Cada punto de conexión no debe intentar formar más conexiones que lo especificado en su propio <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propiedad.  
  
-   Si un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto (transformador) es necesaria para conectar controles incompatibles, no puede ser `null`. Sin embargo, si los controles ya son compatibles, debe ser el transformador `null`.  
  
-   Debe hacer referencia el transformador (si se usa) en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A> colección.  
  
-   El transformador (si se utiliza) debe tener interfaces que son compatibles con el proveedor y el consumidor para que pueda transformar datos entre los dos controles. Las interfaces secundarias del consumidor y proveedor también deben ser compatibles.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">Control que proporciona datos a <paramref name="consumer" /> cuando se conectan los controles.</param>
        <param name="providerConnectionPoint">Clase <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> que permite a <paramref name="provider" /> participar en una conexión.</param>
        <param name="consumer">Control que recibe datos de <paramref name="provider" /> cuando se conectan los controles.</param>
        <param name="consumerConnectionPoint">Clase <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> que actúa como método de devolución de llamada para que <paramref name="consumer" /> pueda participar en una conexión.</param>
        <summary>Comprueba los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que participarán en una conexión para determinar si son capaces de conectarse, cuando los controles consumidor y proveedor tienen interfaces compatibles y no se necesita un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</summary>
        <returns>Valor booleano que indica si <paramref name="provider" /> y <paramref name="consumer" /> se pueden conectar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para conectar `provider` y `consumer` cuando ambos controles tienen conexión compatibles, los tipos de punto para que un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto no es necesario. Desea usar este método para comprobar que se pueden conectar dos controles antes de llamar a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> para crear una conexión mediante programación.  
  
 Esta sobrecarga utiliza la misma implementación que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> sobrecarga del método, con la única excepción es que esta sobrecarga no requiere un transformador.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo usar este método.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, un `<asp:webpartmanager>` elemento y algún código de control de eventos que se crea una conexión con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si la conexión puede realizarse y, si es así, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A>propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente para los controles. Contiene una interfaz y dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, uno que actúa como un proveedor y el otro como un consumidor. Ya que tienen puntos de conexión compatibles (ambos reconocen el `IZipCode` interfaz), un transformador no es necesaria para realizar la conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/ZipCodeComponent.vb#2)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool&#xA;override this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">Control que proporciona datos a <paramref name="consumer" /> cuando se conectan los controles.</param>
        <param name="providerConnectionPoint">Clase <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> que actúa como método de devolución de llamada para que <paramref name="provider" /> pueda participar en una conexión.</param>
        <param name="consumer">Control que recibe datos de <paramref name="provider" /> cuando se conectan los controles.</param>
        <param name="consumerConnectionPoint">Clase <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> que actúa como método de devolución de llamada para que <paramref name="consumer" /> pueda participar en una conexión.</param>
        <param name="transformer">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que permite conectar un <paramref name="provider" /> y un <paramref name="consumer" /> incompatibles.</param>
        <summary>Comprueba los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que van a participar en una conexión para determinar si pueden conectarse y utiliza un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> para crear la conexión entre un consumidor y un proveedor incompatibles.</summary>
        <returns>Valor booleano que indica si <paramref name="provider" /> y <paramref name="consumer" /> pueden formar una conexión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para conectar `provider` y `consumer` cuando ambos controles tienen conexión incompatibles, los tipos de punto para que un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto es necesario. Desea usar este método para comprobar que se pueden conectar dos controles antes de llamar a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> para crear una conexión mediante programación.  
  
 Esta sobrecarga utiliza la misma implementación que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> sobrecarga del método, con la única excepción es que esta sobrecarga requiere un transformador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CatalogDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ CatalogDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable CatalogDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el modo de presentación utilizado para agregar controles de servidor de un catálogo de controles a una página Web. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Se trata de un objeto estático, puede hacer referencia a él directamente a través del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de una instancia del control.  
  
 Cuando los usuarios desean agregar controles a una página, si hay disponible un catálogo de controles de servidor, puede cambiar la página para <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> (modo de catálogo), y aparece la interfaz de usuario (UI) de catálogo. La interfaz de usuario para un catálogo de elementos Web proporciona un <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> control de zona. Los desarrolladores agregan esta zona a la página en tiempo de diseño y, a continuación, agregar controles de servidor a la zona, para que los usuarios podrán agregar esos controles a sus páginas en tiempo de ejecución. Después de que el desarrollador ha agregado estos controles, modo de catálogo se convierte en un modo de presentación compatibles en la página porque existen los controles necesarios habilitar el modo de catálogo.  
  
 Cuando un usuario cambia una página de catálogo modo, la zona y todos los controles de servidor que se agregaron a ella se hacen visibles, y el usuario puede seleccionar los controles desde el catálogo para agregar a la página, o quitar controles de la página. Después de han agregado los controles a la página, que aparecen en el modo de exploración normal y se actualiza la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración, diseño y catálogo. El modo de catálogo está disponible porque el `<asp:CatalogZone>` elemento y sus elementos secundarios en la página Web. Tenga en cuenta que, en el `Page_PreRender` método, el código comprueba si el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>. Si es así, `Label1` estará visible y si no, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/CS/wpmgrCatalogDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/VB/wpmgrCatalogDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página al modo de catálogo. Tenga en cuenta que, debido al código en el `Page_PreRender` método, ahora está visible la etiqueta. Puede seleccionar el control en el catálogo y agregarlo a cualquiera de las dos zonas en la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="CheckRenderClientScript">
      <MemberSignature Language="C#" Value="protected virtual bool CheckRenderClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckRenderClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CheckRenderClientScript () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckRenderClientScript();" />
      <MemberSignature Language="F#" Value="abstract member CheckRenderClientScript : unit -&gt; bool&#xA;override this.CheckRenderClientScript : unit -&gt; bool" Usage="webPartManager.CheckRenderClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comprueba las funciones del explorador que realiza la solicitud y el valor de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" /> para determinar si se va a representar script de cliente.</summary>
        <returns>Valor booleano que indica si se va a representar script de cliente.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CloseProviderWarning">
      <MemberSignature Language="C#" Value="public virtual string CloseProviderWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseProviderWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CloseProviderWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseProviderWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CloseProviderWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una advertencia que se muestra cuando un usuario cierra un control que actúa como proveedor de otros controles en una conexión.</summary>
        <value>Cadena que contiene el mensaje de advertencia. El valor predeterminado es un mensaje específico de la referencia cultural suministrado por .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario cierra un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, normalmente no se muestra ningún mensaje. Para obtener más información sobre lo que significa cerrar un control, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método.  
  
 Sin embargo, cuando un control está conectado a otro control y está actuando como un proveedor de datos para el otro control, se muestra un mensaje de advertencia predeterminado cuando un usuario intenta cerrar el control. El mensaje indica que los usuarios que un control proveedor está a punto de cerrar, lo que significa que los controles conectados a este proveedor como consumidores ya no tendrá ningún dato para consumir. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad permite a los desarrolladores personalizar el mensaje de advertencia que se muestra al usuario.  
  
 Si un desarrollador de páginas asigna un valor de cadena vacía o null para esta propiedad, no se mostrará ningún cuadro de mensaje de advertencia cuando un usuario cierra un <xref:System.Web.UI.WebControls.WebParts.WebPart> control que es un proveedor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad para mostrar una advertencia personalizada a los usuarios.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar y un `<asp:webpartmanager>` elemento.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El código siguiente contiene solo la parte de la página Web del ejemplo. También necesitará el control de usuario personalizado y el código fuente para los controles personalizados mencionados anteriormente. Obtener estos dos elementos de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases.  
  
 El siguiente código de página Web muestra cómo asignar un mensaje de advertencia personalizado a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad en marcado declarativo en la `<asp:webpartmanager>` elemento.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario (UI) de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Muestra una celda que tiene un control de lista desplegable. Seleccione **Control meteorológico** en la lista desplegable y haga clic en **Connect** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, utilice el **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Por último, haga clic en el menú de verbos para el **código postal** control (que es el control proveedor en este caso) y seleccione **cerrar**. Un mensaje personalizado que se asigna a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> se muestra la propiedad.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CloseWebPart">
      <MemberSignature Language="C#" Value="public void CloseWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CloseWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.CloseWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.CloseWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor que se cierra en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</param>
        <summary>Cierra un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> de manera que no se representa en una página Web, pero se puede volver a abrir.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método quita un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de otro servidor para que no se representa en la página Web que contenía originalmente. El control cerrado se agrega a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> object, que mantiene una referencia al control cerrado y hace posible que el control debe restaurarse en la página. Una forma cerrada <xref:System.Web.UI.WebControls.WebParts.WebPart> control sigue apareciendo en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
 Cerrar un control es diferente de eliminarlo. Los controles cerrados siguen estando disponibles para restaurarse en una página, pero una instancia del control eliminado se quita de forma permanente y nunca se puede restaurar. Independientemente de si un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor es estático (declarado en el marcado de una página) o dinámico (agregado a la página mediante programación o por un usuario de un catálogo de elementos Web), puede cerrar y volver a abrir en una página.  
  
 Normalmente, los usuarios pueden cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control haciendo clic en el menú de verbos y seleccionando el verbo de cierre. También se puede cerrar un control llamando directamente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método y pasa una referencia a `webPart`.  
  
 En una página donde <xref:System.Web.UI.WebControls.WebParts.WebPart> controles se han cerrado, si un desarrollador declara un `<asp:catalogzone>` elemento y dentro de ella, agrega un `<asp:pagecatalogpart>` elemento, proporciona una interfaz de usuario simple (UI) para que los usuarios restaurar controles cerrados a la página en tiempo de ejecución. Los usuarios pueden cambiar la página en modo de presentación de catálogo y los controles cerrados aparecerá en el catálogo de la página. Los usuarios pueden seleccionar los controles cerrados y agregarlos a la página en cualquier posición deseen y, a continuación, los controles seleccionados se restauran en la página y se procesa con normalidad.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> se llama al método, genera varios eventos: <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> (si hay varios controles), y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> (si no hay controles conectados). Normalmente, los desarrolladores pueden cancelar estos eventos, pero en algunos casos no es posible cancelar ellos. Para obtener más información, consulte la documentación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación de página.  
  
-   Personalizada <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Una página Web.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo de código es personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo usa el enfoque de compilación dinámica; Por tanto, no hay ningún `Assembly` atributo en el `Register` la directiva para este control en la parte superior de la página Web. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/textdisplaywebpart.vb#3)]  
  
 La tercera parte del ejemplo de código es la página Web. La página contiene un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, con un <`asp:pagecatalogpart>` elemento declarado dentro de ella. Esto es lo que va a contener cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar y permitir que los usuarios agregarlo a la página. El `Button1_Click` método se llama directamente el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método para cerrar personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, aunque un usuario también puede cerrar el control a través del menú de verbos.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/closeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/closeWebPartVB.aspx#1)]  
  
 Después de cargar la página en un explorador, cierre personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control haciendo clic en el menú de verbos (el símbolo de flecha) en el encabezado del control y, en **cerrar**. Ahora cambie la página al modo de catálogo seleccionando **catálogo** en el **modo de presentación** control de lista desplegable. Catálogo de la página aparece con el control cerrado. Active la casilla situada junto al control cerrado, haga clic en **agregar** para agregarlo a la página y, a continuación, haga clic en **cerrar** para devolver la página modo de exploración. El control se restaura en la página. Ahora cerrarlo de nuevo, esta vez haciendo clic en el **cerrar WebPart** botón.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="webPart" /> no está en la colección de <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  
  
O bien 
 <paramref name="webPart" /> es un control compartido y ya lo ha cerrado otro usuario.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowClose" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ConnectDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ ConnectDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable ConnectDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el modo de presentación que se utiliza para mostrar una interfaz de usuario especial que permite a los usuarios administrar las conexiones entre controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Se trata de un objeto estático, puede hacer referencia a él directamente a través del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de una instancia del control.  
  
 Cuando los usuarios quieren administrar las conexiones entre <xref:System.Web.UI.WebControls.WebParts.WebPart> a los controles de una página Web, si un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> zona se ha declarado en la página, puede cambiar la página en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo. El modo de conexión, muestra una interfaz de usuario especial para administrar las conexiones, lo que incluye la capacidad de conectar o desconectar controles y editar los detalles de las conexiones existentes.  
  
 Si desea proporcionar a los usuarios la capacidad para administrar las conexiones con la interfaz de usuario proporcionada por el conjunto de controles de elementos Web, debe declarar un `<asp:connectionszone>` elemento en el marcado de una página. A diferencia de los elementos para los demás tipos de <xref:System.Web.UI.WebControls.WebParts.WebZone> zonas, no es necesario agregar otras etiquetas dentro de este elemento; simplemente se declara el elemento por sí mismo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un archivo de código fuente que contiene una interfaz y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que pueden formar una conexión.  
  
-   Una página Web que proporciona un interfaz de usuario de conexión y se explica cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo.  
  
-   Explicación de cómo ejecutar el ejemplo.  
  
 La primera parte del ejemplo de código es un archivo de origen que contiene una interfaz y dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que están diseñados para que se pueden conectar. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código usa el enfoque de compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo es una página Web que hospeda los controles personalizados. En el servidor `<script>` las etiquetas en la página son varios métodos que rellenan una lista desplegable con los modos de presentación disponibles en la página. Un usuario puede seleccionar desde la lista desplegable para cambiar el modo de presentación de la página. Uno de los modos de presentación disponibles es conectar el modo de presentación, porque un `<asp:connectionszone>` elemento se declara en el marcado de la página. Tenga en cuenta que este elemento no contiene otros elementos secundarios; sólo existe para habilitar la administración de conexiones de la interfaz de usuario para los usuarios.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo aparece en este ejemplo en dos lugares. Primero, en el `Page_Init` método, el modo de conexión se agrega a la lista desplegable de modos de presentación, como el código recorre la colección que se hace referenciada en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. Segundo, el `Page_PreRender` método comprueba el modo de presentación actual en la página, y si el modo actual es <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>, se muestra un mensaje en un <xref:System.Web.UI.WebControls.Label> control.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ConnectDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ConnectDisplayModeVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en la lista desplegable y seleccione **Connect** para cambiar la página al modo de conexión. Observe que aparece un mensaje indicando que la página está en modo de presentación de conexión. Ahora haga clic en el menú de verbos (un símbolo de flecha) en la barra de título de uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y, a continuación, haga clic en **Connect** en el menú de verbos. Después de la conexión se muestra la interfaz de usuario, haga clic en el vínculo para crear una conexión. Use la lista desplegable dentro de la conexión de la interfaz de usuario que aparece, seleccione el otro control que participa en la conexión y haga clic en el **Connect** botón. Establecer la conexión. Haga clic en el **cerrar** botón y, a continuación, utilice la lista desplegable en la parte superior de la página para devolver la página para examinar el modo de presentación.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="Connections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ Connections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a la colección de todas las conexiones actuales en una página Web.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene un conjunto de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad proporciona una manera de obtener acceso al conjunto actual de conexiones en una página. La propia colección es de solo lectura y los desarrolladores que deseen manipular una conexión específica de la colección deben usar <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y programático de los <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El código siguiente contiene solo la parte de la página Web del ejemplo. También necesitará el control de usuario personalizado y el código fuente para los controles personalizados mencionados anteriormente. Obtener estos dos elementos de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases.  
  
 El código de la página Web siguiente muestra cómo usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad mediante programación para obtener el recuento de conexiones actuales en una página. Tenga en cuenta que en el `<script>` sección de etiqueta, el código para controlar dos eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar los accesos a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad para obtener el recuento.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después, se muestra la interfaz de usuario (UI) de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Muestra una celda que tiene un control de lista desplegable. Seleccione **Control meteorológico** en la lista desplegable y haga clic en **Connect** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, utilice el **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Tenga en cuenta que una etiqueta ahora muestra el número de conexiones y el número de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si se devuelve para el modo de conectar y desconectar los dos controles, cuando vuelva a examinar el modo, se debe actualizar el contenido de la etiqueta y no debería haber ninguna conexión.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivated">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivated;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivated : EventHandler " Usage="member this.ConnectionsActivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que todas las conexiones de elementos Web actuales de una página están conectados y, además, han empezado a compartir activamente datos entre los controles consumidor y proveedor que participan en cada conexión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ciclo de vida de las conexiones, este evento se produce después de una página completa su proceso de carga. También se produce después de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento, que solo indica que el <xref:System.Web.UI.WebControls.WebParts.WebPart> o han conectado correctamente los controles de servidor implicados en una conexión específica. En un caso donde hay varias conexiones en una página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> método indica que todas las conexiones de elementos Web válidas en una página están activas y pueden compartir datos. Sabiendo que todas las conexiones están activas, los desarrolladores pueden llevar a cabo cualquier número de tareas, como notificar a los usuarios del estado de todas las conexiones, notificar a los controles de consumidor para procesar y mostrar los datos de sus proveedores y así sucesivamente.  
  
 Este evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> método, que genera el evento y permite a los desarrolladores crear controladores personalizados para el evento.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnConnectionsActivated` atributo a la `<asp:webpartmanager>` los elementos de la página y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivating">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivating As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivating;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivating : EventHandler " Usage="member this.ConnectionsActivating : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce durante el proceso de activar todas las conexiones de elementos Web establecidas en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ciclo de vida de las conexiones, este evento se produce cuando una página está finalizando su proceso de carga, justo antes del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método. Es diferente de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> eventos, lo que implica una conexión determinada entre <xref:System.Web.UI.WebControls.WebParts.WebPart> u otros controles de servidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento tiene lugar cuando se han conectado de todas las conexiones posibles en una página y están a punto de activarse.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método, que genera el evento. Los desarrolladores de controles que deseen ampliar el tipo de conexiones que se pueden agregar a una página que podrían invalidar protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método y activar tipos adicionales de conexiones.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnConnectionsActivating` atributo a la `<asp:webpartmanager>` los elementos de la página y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una conexión entre dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que residen en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> (u otros controles de servidor capaces de formar conexiones).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método forms una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar. Antes de llamar a este método para crear una conexión, también puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método en una comprobación condicional para garantizar que los controles cumplen los requisitos para formar una conexión.  
  
> [!NOTE]
>  También es posible crear una conexión entre dos controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. En general, los dos controles deben hallarse en controles de servidor personalizados (por ejemplo, los controles que heredan de <xref:System.Web.UI.WebControls.WebControl> o controles de servidor ASP.NET existentes) para que se podrían agregar los miembros necesarios. Los controles también tendría que cumplen los requisitos especificados aquí.  
  
 Cualquier tipo de escenario de conexión entre dos controles debe cumplir los requisitos siguientes para poder conectarse:  
  
-   Cada control se encuentra en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona (no tiene que ser la misma zona).  
  
-   Como se implementa en el conjunto de controles de elementos Web, el control proveedor de una conexión implementa una interfaz como un método público que actúa como una devolución de llamada al proveedor y tiene un `ConnectionProvider` atributo de metadatos en el método para identificarla como una conexión de proveedor punto. Dado que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método que recupera puntos de conexión del proveedor es virtual, un derivado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene que utilizar necesariamente el mismo atributo de metadatos.  
  
-   Como se implementa en el conjunto de controles de elementos Web, el control consumidor en una conexión también tiene un método especial que le permite obtener una referencia a la interfaz que se expone en el método de devolución de llamada del proveedor y el consumidor tiene un `ConnectionConsumer` atributo de metadatos en Seleccione el método para identificarla como una conexión del consumidor. Dado que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método que recupera puntos de conexión del consumidor es virtual, un derivado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene que utilizar necesariamente el mismo atributo de metadatos.  
  
-   Los métodos de devolución de llamada deben ser compatibles, en que el consumidor puede utilizar el tipo de interfaz proporcionada en el método de devolución de llamada del proveedor (lo que significa que el consumidor y el proveedor pueden compartir datos directamente), o el desarrollador debe usar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto transformar los datos del proveedor en un formulario que el consumidor puede utilizar.  
  
    > [!IMPORTANT]
    >  Cuando no necesite un transformador, utilice la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> sobrecarga del método. Cuando necesite un transformador, use el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> sobrecarga del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que tiene el rol de suministrar datos a otro control conectado.</param>
        <param name="providerConnectionPoint">Método que actúa como método de devolución de llamada para la conexión. Tal como está implementado en el conjunto de controles de elementos Web, éste es un método público de <paramref name="provider" /> que está marcado con un atributo de metadatos <see langword="ConnectionProvider" />.</param>
        <param name="consumer">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que tiene el rol de recibir los datos de <paramref name="provider" /> y procesarlos o mostrarlos.</param>
        <param name="consumerConnectionPoint">Método que conecta con <paramref name="providerConnectionPoint" /> para recibir los datos de la conexión. Tal como está implementado en el conjunto de controles de elementos Web, éste es un método público de <paramref name="consumer" /> que está marcado con un atributo de metadatos <see langword="ConnectionConsumer" />.</param>
        <summary>Crea una conexión entre dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> utilizando sólo las referencias a los controles y sus objetos <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> especificados.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> que contiene la diversa información sobre el proveedor y el consumidor necesaria para establecer una conexión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga se utiliza para conectar controles cuando sus puntos de conexión son suficientemente compatibles que puedan conectarse sin utilizar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto. Cuando se llama a esta sobrecarga del método, simplemente pasa la llamada a la otra versión sobrecargada del método y pasa `null` para el parámetro que requiera un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Al intentar conectar dos controles mediante programación, puede usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método en una comprobación condicional para determinar si los controles se pueden conectar directamente.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo usar este método para crear una conexión mediante programación. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Este ejemplo, necesitará el código fuente para el control de usuario que le permite cambiar los modos de presentación en la página y el código fuente para dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 El código de la página Web que hospeda los dos controles se indica a continuación. La página usa `Register` directivas en la parte superior para declarar el control de usuario y los controles personalizados. Los controles personalizados, a continuación, hace referencia mediante declaración dentro un `<asp:webpartzone>` elemento. El código que controla la `Button1_Click` método crea una conexión entre los controles mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el **conectar controles WebPart** botón para formar la conexión. A continuación, puede escribir algunos datos en el cuadro de texto y haga clic en el **escriba código postal de 5 dígitos** botón para mostrar que se conectan los controles y se actualizan los datos introducidos en el primer control en el segundo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La colección del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> de colecciones dinámicas es de sólo lectura.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection&#xA;override this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que tiene el rol de suministrar datos a otro control conectado.</param>
        <param name="providerConnectionPoint">Método público de <paramref name="provider" /> que se marca con un atributo de metadatos <see langword="ConnectionProvider" /> y actúa como método de devolución de llamada para la conexión.</param>
        <param name="consumer">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que tiene el rol de recibir datos de <paramref name="provider" /> o <paramref name="transformer" />, y procesarlos o mostrarlos.</param>
        <param name="consumerConnectionPoint">Método público de <paramref name="consumer" /> que está marcado con un atributo de metadatos <see langword="ConnectionConsumer" /> y conecta con <paramref name="providerConnectionPoint" /> para recibir los datos de la conexión.</param>
        <param name="transformer">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> que habilita una conexión entre dos controles convirtiendo los datos de <paramref name="provider" /> en un formato que <paramref name="consumer" /> puede procesar.</param>
        <summary>Crea una conexión entre dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> utilizando las referencias a los controles, sus objetos <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> especificados y un objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> que contiene información sobre el proveedor, consumidor y transformador necesarios para una conexión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga se utiliza para conectar controles cuando sus puntos de conexión son incompatibles. La incompatibilidad se produce cuando `consumer` implementa una interfaz diferente que `provider` como punto de conexión. El transformador convierte los datos en un tipo que pueda entender `consumer`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Las conexiones ya se han activado en <see cref="E:System.Web.UI.Control.PreRender" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.UI.ControlCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de todos los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, de servidor o de usuario contenidos en zonas <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> de una página Web y administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <value>Colección <see cref="T:System.Web.UI.ControlCollection" /> que contiene todos los controles administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A> propiedad no hace referencia a los otros controles que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, como los distintos controles, de zona <xref:System.Web.UI.WebControls.WebParts.EditorPart> o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles y otros.  
  
 Esta propiedad se utiliza por el conjunto de controles de elementos Web y, en la mayoría de las situaciones de desarrollo que no está pensado para ser llamado desde el código. Por esta razón, aunque la propiedad es pública, se oculta de IntelliSense. Los desarrolladores que desean tener acceso a la colección de <xref:System.Web.UI.WebControls.WebParts.WebPart> u otros controles de servidor administrados por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control debe utilizar su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CopyWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPart CopyWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart CopyWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ CopyWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.CopyWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor que se va a copiar.</param>
        <summary>Las utiliza el conjunto de controles de elementos Web para crear una copia de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de servidor para el fin de agregar el control a una página Web.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que se agrega una página.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método directamente desde el código. Este método se llama internamente en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control como parte del proceso de agregar un nuevo dinámico <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor a una página. Un control dinámico se agrega a una página mediante programación o a través de la interfaz de usuario de elementos Web (UI), por ejemplo cuando un usuario agrega un control de un catálogo de controles, en lugar de un control estático, que se declara directamente en el marcado de una página.  
  
> [!NOTE]
>  El método puede invalidarse en una clase derivada si desean que los desarrolladores habilitar el método controlar los escenarios de copia de control adicional. Para obtener más información, consulte la sección Notas para los herederos.  
  
 Cuando se agrega un nuevo control dinámico, si es un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método devuelve una nueva instancia del control. Si el control que se agrega es algún otro tipo de control de servidor (por ejemplo, un control de usuario, un control personalizado o un control de ASP.NET), el control ya habrá están encapsulado con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto por el conjunto de controles de elementos Web. Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método encuentra un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control, devuelve una nueva instancia de la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control con una nueva instancia de que el control secundario incluido dentro de él.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método crea una nueva copia de un control para devolver, también restablece los valores de todas las propiedades en sus valores predeterminados. Tenga en cuenta que, si desea conservar los valores de las propiedades personalizables y tienen ellos se copian en la nueva instancia del control, se debe llamar el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A> método así. El último paso lleva a cabo la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> es llamar al método el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A> método para obtener un nuevo identificador para el control.  
  
> [!NOTE]
>  Dado que el método obtiene un nuevo identificador para un control copiado, no debe confiar en que hacen referencia a un control dinámico que se agrega a una página por su identificador original. En su lugar, debe hacer referencia a la nueva instancia del control devuelta por el método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>El método se declara como <see langword="virtual" /> para que los desarrolladores, podrían heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase, invalide el método y se proporciona para escenarios adicionales en el que pueda crear copias de los controles. Por ejemplo, el método podría recibir opcionalmente como entrada un control que se ha serializado en un archivo XML. El método se pudo deserializar el XML (si existe) y, a continuación, llamar al método base para controlar los casos existentes y devolver una nueva instancia de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateAvailableTransformers">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAvailableTransformers () As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ CreateAvailableTransformers();" />
      <MemberSignature Language="F#" Value="abstract member CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection&#xA;override this.CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="webPartManager.CreateAvailableTransformers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un conjunto de transformadores especificados en el archivo de configuración de un sitio Web y los agrega a la colección de transformadores a los que hace referencia la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />.</summary>
        <returns>Colección de los transformadores especificados en el archivo de configuración de un sitio web.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Este método se puede invalidar para agregar transformadores adicionales que se pueden usar la aplicación. Por ejemplo, se puede escribir el método para recuperar una lista de transformadores disponibles de un servicio Web.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override sealed System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="webPartManager.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve la colección de todos los controles administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> en una página Web. Esta clase no puede heredarse.</summary>
        <returns>Colección <see cref="T:System.Web.UI.ControlCollection" /> que está compuesta por todos los controles de elementos Web administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Dado que este método está protegido y sellado, es visible para las clases que heredan de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase, pero no se puede invalidar.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateDisplayModes">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDisplayModes () As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ CreateDisplayModes();" />
      <MemberSignature Language="F#" Value="abstract member CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&#xA;override this.CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="webPartManager.CreateDisplayModes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea el conjunto de todos los posibles modos de presentación para una aplicación de elementos Web.</summary>
        <returns>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> que contiene todos los modos de presentación que se admiten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método crea la lista de todos los posibles modos de presentación, no solo los modos de presentación admitidos en una página concreta. Para obtener más información acerca de los modos de presentación compatibles, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
 De forma predeterminada, el conjunto de controles de elementos Web crea el conjunto siguiente de modos de presentación que se usará en las páginas de elementos Web:  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>  
  
 Los desarrolladores pueden crear modos de presentación personalizados, con o sin que la acompaña zonas personalizadas que derivan de la <xref:System.Web.UI.WebControls.WebParts.WebZone> o <xref:System.Web.UI.WebControls.WebParts.ToolZone> clases. Para crear un modo de presentación personalizado, debe heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (clase), y para agregar el modo de presentación como un modo admitido en una página, debe heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase e invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> método.  
  
 Al agregar modos de presentación mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A> método, debe agregarlos en el orden que desee que aparezcan en los controles de interfaz de usuario (como un <xref:System.Web.UI.WebControls.ListBox> control) que proporcionan a los usuarios los posibles modos de presentación en una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A>.  
  
 El ejemplo de código tiene cinco partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que hospeda los demás controles.  
  
-   Un control de usuario que reside en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona en la página Web y le permite escribir y mostrar texto en una etiqueta.  
  
-   Un archivo de código fuente que contiene dos controles. Uno es un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y el otro es un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto va a agregar a los modos de presentación de la página predeterminada.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es la página Web. Contiene dos <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controles, controles de usuario y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Tenga en cuenta el `Register` directivas en la parte superior de la página para hacer referencia a los controles de usuario y el espacio de nombres para los controles compilados.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/createDisplayModeCS.aspx#1)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/createDisplayModeVB.aspx#1)]  
  
 La tercera parte del ejemplo es el control de usuario para escribir y mostrar texto. Usa un <xref:System.Web.UI.WebControls.MultiView> control para crear varias vistas de la interfaz de usuario. Aparece una vista con el `Button1` button, el otro sin. Tenga en cuenta que en invalidado `OnPreRender` método, el código comprueba si la página está actualmente en modo de presentación personalizado y, si es así, muestra la primera vista del control de usuario, que incluye el botón. Si la página no está en modo de presentación personalizado, por ejemplo, si la página está en modo de exploración o de diseño, se oculta el botón.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/TextDisplaycs.ascx#2)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/TextDisplayvb.ascx#2)]  
  
 La cuarta parte del ejemplo es el archivo de origen para las dos clases personalizadas. Tenga en cuenta que personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase invalida el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> método y que llama primero al método base para agregar todos los modos de presentación predeterminada y, a continuación, agrega el modo de presentación personalizado. La clase de modo de presentación personalizado `InLineEditDisplayMode`, simplemente se hereda de <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>, Establece el nombre del modo de presentación en el constructor y reemplaza un número de propiedades base para establecer las características de la presentación personalizada.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/CustomDisplayMode.cs#3)]
 [!code-vb[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/CustomDisplayMode.vb#3)]  
  
 Para ejecutar el ejemplo de código, cargue la página en un explorador. Tenga en cuenta que la página está actualmente en modo de exploración, y no hay ningún botón está visible. Mediante el **modo de presentación** desplegable lista de control, cambie a la página de **presentación de edición en línea** modo y observe que ahora el `Button1` botón está visible en el control de usuario inferior. Agregue texto y haga clic en el botón para actualizar el control. Tenga en cuenta que la presentación de página se devuelve al modo de exploración, ahora se muestra el texto que especificó, y el botón está oculto de nuevo porque la página ya no está en modo de presentación personalizado.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0">Tutorial: Cambiar los modos de presentación en una página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicConnectionID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicConnectionID ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicConnectionID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicConnectionID () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicConnectionID();" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicConnectionID : unit -&gt; string&#xA;override this.CreateDynamicConnectionID : unit -&gt; string" Usage="webPartManager.CreateDynamicConnectionID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene un valor único que sirve como id. de una conexión dinámica.</summary>
        <returns>Cadena que contiene un id. único para una conexión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> método genera un valor GUID y lo convierte en una cadena para que actúe como el identificador único para una conexión. El método se llama cada vez que se crea una conexión dinámica.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los programadores pueden invalidar este método en una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase para cambiar la implementación para generar un identificador único.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicWebPartID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicWebPartID (Type webPartType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicWebPartID(class System.Type webPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicWebPartID (webPartType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicWebPartID(Type ^ webPartType);" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicWebPartID : Type -&gt; string&#xA;override this.CreateDynamicWebPartID : Type -&gt; string" Usage="webPartManager.CreateDynamicWebPartID webPartType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPartType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="webPartType">Clase <see cref="T:System.Type" /> del control para el que se genera un id.</param>
        <summary>Genera un id. único para un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dinámico.</summary>
        <returns>Cadena que contiene el id. único de un control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Web.UI.WebControls.WebParts.WebPart> se agregan controles a una página Web, pueden ser estática (lo que significa que el control se declara en el marcado de página) o dinámicos (lo que significa que se agregan mediante programación). En cualquier situación donde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control es crear nuevos controles dinámicos para agregar a la página, llama a este método para generar un identificador único.  
  
 El método es virtual para que los desarrolladores pueden reemplazar si desean proporcionar una implementación personalizada para generar el identificador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPartType" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateErrorWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart (string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateErrorWebPart (originalID As String, originalTypeName As String, originalPath As String, genericWebPartID As String, errorMessage As String) As ErrorWebPart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::ErrorWebPart ^ CreateErrorWebPart(System::String ^ originalID, System::String ^ originalTypeName, System::String ^ originalPath, System::String ^ genericWebPartID, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart&#xA;override this.CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart" Usage="webPartManager.CreateErrorWebPart (originalID, originalTypeName, originalPath, genericWebPartID, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ErrorWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalID" Type="System.String" />
        <Parameter Name="originalTypeName" Type="System.String" />
        <Parameter Name="originalPath" Type="System.String" />
        <Parameter Name="genericWebPartID" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="originalID">Cadena que es el id. del control que ha causado el error. Si un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> está relacionado con el error, el id. será el id. de su control de servidor secundario.</param>
        <param name="originalTypeName">Cadena que es el nombre <see cref="T:System.Type" /> del control que presentó el error. Si un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> está relacionado con el error, el nombre de tipo será el tipo de su control de servidor secundario.</param>
        <param name="originalPath">Cadena que contiene la ruta de acceso a un control de usuario si un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> que contiene un control de usuario secundario está relacionado con el error.</param>
        <param name="genericWebPartID">Cadena que devuelve el id. de un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> si ese tipo de control estuviera relacionado con el error al cargar o crear un control.</param>
        <param name="errorMessage">Cadena que contiene el mensaje de error para mostrar en la página.</param>
        <summary>Crea un control especial que se inserta en una página y se muestra a los usuarios finales cuando, por algún motivo, se produce un error al intentar cargar o crear un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> que se inserta en una página en lugar de un control que no se pudo cargar o crear.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> método se llama cuando el control de elementos Web conjunto intenta cargar o crear una instancia de una dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor y se produce un error por algún motivo. El método crea un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> objeto, le asigna un mensaje de error y lo devuelve. El <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> control se inserta en lugar del control que no se pudo, y su mensaje de error se muestra en la página.  
  
 No se puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> método directamente desde el código. Sin embargo, puede heredar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase y ampliar el método. Para obtener más información, vea la sección Notas a los herederos.  
  
 Los usuarios finales pueden trabajar con un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> control en una página de gran parte como harían que una normal <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para quitar el mensaje de error, puede cerrar el control haciendo clic en el verbo de cierre, momento en que el control se agregará a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> objeto, como cualquier otro control cerrado. Si elimina un usuario final una <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> también se eliminarán el control, el control de servidor que no se pudo cargar desde la página.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si desea personalizar la información que se devuelve en el <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> control, puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" /> método, llame al método base, asignar valores diferentes a los parámetros pasados al método base y, a continuación, devolver el resultante<see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />control. Por ejemplo, si no desea que los usuarios finales vean la <paramref name="originalPath" /> valor (que se mostraría en la ruta de acceso del directorio virtual de un control de usuario), al llamar al método base podría pasar una cadena vacía ("") para ese parámetro.  
  
También puede personalizar el comportamiento de la <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> propio, control heredando de él. Por ejemplo, es posible que desee invalidar su <see cref="P:System.Web.UI.WebControls.WebParts.Part.Title" /> o <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowMinimize" /> propiedad.</para></block>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersonalization">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreatePersonalization () As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ CreatePersonalization();" />
      <MemberSignature Language="F#" Value="abstract member CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization&#xA;override this.CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="webPartManager.CreatePersonalization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un objeto de personalización que contiene los datos de personalización de un usuario para la página Web actual.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> que contiene los datos de personalización de un usuario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A> método devuelve un objeto que contiene y administra la configuración de personalización del usuario para la página actual. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control administra este objeto.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z36h8be9(v=vs.100)">Información general de personalización de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="CreateWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::GenericWebPart ^ CreateWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart&#xA;override this.CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.CreateWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control de servidor que no es un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</param>
        <summary>Ajusta un control de servidor que no es un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> con un objeto <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> para que el control pueda tener la funcionalidad de los elementos Web.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> que ajusta un <paramref name="control" /> y le permite funcionar como un verdadero control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método es el mecanismo principal para habilitar los controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles para realizar en la misma funcionalidad que un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control) y, por tanto, participar totalmente en aplicaciones de elementos Web. Con este método, los desarrolladores enormemente expandir el número de controles de servidor que se pueden usar en una aplicación de elementos Web, ya que prácticamente cualquier tipo de control de servidor, se pueden usar controles ASP.NET estándar, los controles de usuario y controles personalizados--.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también utiliza este método en otros dos escenarios para ajustar los controles de servidor con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto. Cuando los usuarios agregar controles de servidor a una página mediante el <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, si el control importado no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> se llama al método. Además, cuando se declaran los controles de servidor en formato de persistencia dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en una página Web, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> se llama al método para todos los controles que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 Cuando se agrega un control de servidor a una zona mediante programación, un enfoque típico consiste en usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método para ajustar el control con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto y, a continuación, llame a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método para agregar el control a la colección de todos los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de la página, que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método. En el `Button2_Click method`, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método se llama para encapsular un <xref:System.Web.UI.WebControls.Calendar> controlar con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto antes de agregarlo a la zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Se puede invalidar este método para utilizar un derivado <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> clase en su lugar de la clase base proporcionada con los elementos Web de conjunto de controles.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteWarning">
      <MemberSignature Language="C#" Value="public virtual string DeleteWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DeleteWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un mensaje de advertencia personalizado que se muestra a los usuarios finales cuando eliminan un control.</summary>
        <value>Cadena que contiene el texto del mensaje de advertencia. El valor predeterminado es un mensaje de advertencia adaptado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario elimina un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, normalmente se muestra un mensaje de advertencia de forma predeterminada. Advierte al usuario que, cuando se elimina esta instancia de un control, la eliminación es permanente. El desarrollador de páginas puede proporcionar a los usuarios una manera de agregar una nueva instancia del control a la página (como a través de un catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, o mediante programación), pero se quita la instancia actual de un control que se elimina de forma permanente. El cuadro de diálogo que muestra la advertencia incluye un botón para el usuario cancelar la eliminación, si lo desea.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad permite a los desarrolladores establecer el mensaje de advertencia que se muestra al usuario.  
  
 Si un desarrollador de páginas asigna una cadena vacía ("") se mostrará el valor a esta propiedad, ningún cuadro de diálogo de mensaje de advertencia cuando un usuario elimina un <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad no se muestra en el caso de estático <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y controles de servidor. Controles estáticos son controles de servidor que se declaran dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en el marcado de una página Web. Dado que tales controles son estáticos, no pueden eliminarse, por lo que el mensaje de advertencia de eliminación nunca se muestra en ese caso. Un usuario pueden cerrar controles estáticos, pero se agrega un control cerrado en el catálogo de la página, desde el que se puede agregar a la página por un usuario, mientras que un control eliminado no puede recuperarse.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad mediante declaración y mediante programación.  
  
 Hay cuatro partes en el ejemplo de código:  
  
-   Un control de usuario que le permite cambiar los modos de presentación de página.  
  
-   Personalizada <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Una página Web.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo de código es personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo usa el enfoque de compilación dinámica; Por tanto, no hay ningún `Assembly` atributo en el `Register` la directiva para este control en la parte superior de la página Web. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/textdisplaywebpart.vb#3)]  
  
 La tercera parte del ejemplo de código es la página Web. La página contiene un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona con personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control declarado en la zona, para que un usuario puede agregarlo a la página en tiempo de ejecución. Tenga en cuenta que se pueden eliminar controles dinámicos solo (controles que se agregan a una página mediante programación o desde un catálogo como este) desde una página. Controles estáticos (controles que se declaran dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en el marcado de una página) puede cerrado, pero nunca se eliminan. El `<asp:webpartmanager>` elemento declara un valor personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad utilizando el `DeleteWarning` atributo. El `Button1_Click` método asigna otro valor personalizado a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/deleteWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/deleteWarningVB.aspx#1)]  
  
 Después de cargar la página en un explorador, deberá agregar el <xref:System.Web.UI.WebControls.WebParts.WebPart> control a la página. Mediante el **modo de presentación** control de lista desplegable, modo de selección del catálogo. Cuando aparezca el catálogo, active la casilla situada junto al control personalizado, haga clic en **agregar** para agregarlo a la página y, a continuación, haga clic en **cerrar** para devolver la página modo de exploración. Ahora que el control está visible, puede eliminarlo. Mediante el **modo de presentación** control nuevo, cambie la página al modo de diseño (no se puede eliminar controles mientras la página está en modo de exploración). Haga clic en el menú de verbos (el símbolo de flecha) en el encabezado de la <xref:System.Web.UI.WebControls.WebParts.WebPart> control y seleccione **eliminar**. La advertencia que se establece en el `DeleteWarning` atributo aparece. Haga clic en **Cancelar**. Ahora haga clic en el botón rotulado **cambio Eliminar advertencia**, que cambia el valor de propiedad mediante programación. En el menú de verbos en el control, seleccione **eliminar** nuevo y tenga en cuenta que esta vez aparece otro mensaje de advertencia.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteWebPart">
      <MemberSignature Language="C#" Value="public void DeleteWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.DeleteWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DeleteWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control de servidor que se va a eliminar.</param>
        <summary>Quita permanentemente una instancia dinámica de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> de una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> método quita permanentemente el control representado por la `webPart` parámetro desde una página. A diferencia de un control cerrado, que se agrega a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar y se pueden agregar a la página, una instancia del control eliminado nunca se puede agregar a la página.  
  
> [!NOTE]
>  Tal como está implementado por el control de elementos Web establecido, la capacidad de los usuarios eliminar una dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> control depende del usuario y el ámbito de personalización en el que el control se agregó a una página. Si el control se agrega cuando la página está en el ámbito compartido (por un usuario con permisos), el control no puede eliminarse por usuarios individuales cuando la página está en el ámbito de usuario.  
  
 Controles dinámicos solo se pueden eliminar. Controles dinámicos se agregan a una página mediante programación o a los usuarios agregar controles de un catálogo. Controles estáticos se agregan a una página mediante declaración en el formato de marcado o persistencia. Dado que las etiquetas declarativas están permanentemente presentes en el marcado, nunca se pueden eliminar controles estáticos, pero se pueden cerrar y volver a abrir.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>. La primera vez el **Agregar calendario** se hace clic en botón, el código en caso de que crea el controlador de un <xref:System.Web.UI.WebControls.Calendar> controlar y lo agrega a una zona como un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto. Dado que el control se agrega mediante programación, es un control dinámico y, por lo tanto, se puede eliminar. Cuando un usuario hace clic en el **Eliminar calendario** botón, el código garantiza que existe el control y, a continuación, elimina mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DesignDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DesignDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DesignDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable DesignDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el modo de presentación utilizado para cambiar el diseño de páginas Web que contienen controles de elementos Web. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Se trata de un objeto estático, puede hacer referencia a él directamente a través del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios desean cambiar el diseño de la página moviendo los controles a zonas diferentes o dentro de las zonas actuales, debe cambiar primero la página para <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> (modo de diseño). En el modo de diseño, aparece la interfaz de usuario (UI) para las distintas zonas y los usuarios, a continuación, pueden arrastrar los controles para cambiar el diseño.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración y diseño. Tenga en cuenta que, en el `Page_PreRender` método, el código comprueba si el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>. Si es así, `Label1` estará visible y si no, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/CS/wpmgrDesignDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/VB/wpmgrDesignDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página al modo de diseño. Tenga en cuenta que, debido al código en el `Page_PreRender` método, ahora está visible la etiqueta.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebPart">
      <MemberSignature Language="C#" Value="protected virtual void DisconnectWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DisconnectWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DisconnectWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DisconnectWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que se va a desconectar.</param>
        <summary>Quita un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor que se cierra o elimina de cualquier conexión en la que esté participando.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> se llama al método internamente por el control de elementos Web establecido cuando un control está cerrado en una página o se elimina de una página. En este escenario, se llama al método para quitar el control de las conexiones cuando participe como consumidor o proveedor. Si se quita el control de cualquier conexión, este método también llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar las conexiones en el que `webPart` participó.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> se llama al método, genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos. Normalmente se puede cancelar este evento, pero en dos casos no se puede cancelar. Un caso se produce durante las solicitudes a la página, cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método. Si hay un conflicto entre las conexiones existentes, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> se invocará el método para cerrar una de las conexiones en conflicto y, en esta instancia la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos no se puede cancelar, porque se debe resolver el conflicto.  
  
 El otro caso se produce cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o se cierra o elimina el control de servidor que está conectado actualmente. En este caso, como el control se quita de la página, las necesidades de su conexión al terminar, por lo tanto, por diseño no es posible cancelar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento interrumpir el proceso de finalización de una conexión. Para obtener más información, vea el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>. Usar dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, la página Web le permite crear una conexión entre los controles, haga clic en un botón, mientras que otro botón permite desconectar los controles. Si cierra uno de los controles mientras la página está en modo de exploración y los controles están conectados, un reemplazo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método desconecta el control cerrado, termina la conexión y muestra un mensaje.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Un archivo de código fuente que contiene personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte es el archivo que contiene el código fuente para dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se conectará y personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. En este ejemplo utiliza la compilación dinámica, por lo que el `Register` directiva que hace referencia a estos componentes en la página Web se declara como corresponda en la parte superior de la página Web. Para ver un tutorial que muestra las opciones de compilación, véase [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 En el código fuente, tenga en cuenta el control heredado `MyWebPartManager` que invalida el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método. Este método comprueba cada conexión de una página para ver si el control que se va a cerrar participa en la conexión y, si es así, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar la conexión. Esto es idéntico a la implementación base del método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. El método invalidado, a continuación, personaliza la implementación base escribiendo un mensaje a la página.  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que la parte superior, contiene `Register` las directivas para registrar el control de usuario y el ensamblado compilado de forma dinámica con el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La página tiene dos métodos principales. El `Button1_Click` método crea una conexión entre los controles, mientras el `Button2_Click` método desconecta los controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página, haga clic en el **Connect** botón para conectar los controles. A continuación, haga clic en el menú de verbos en uno de los controles (la flecha hacia abajo en el encabezado del control) y seleccione **cerrar** desde el menú de verbos. Al intentar cerrar el control, se llama al método reemplazado, se finaliza la conexión y el mensaje se escribe en la página. Si desea restablecer la página para restaurar el control cerrado y experimentar con otras opciones, haga clic en el **restablecer el estado de usuario** vínculo para quitar los datos de personalización y restaurar el estado original de la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebParts">
      <MemberSignature Language="C#" Value="public virtual void DisconnectWebParts (System.Web.UI.WebControls.WebParts.WebPartConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisconnectWebParts(class System.Web.UI.WebControls.WebParts.WebPartConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DisconnectWebParts (connection As WebPartConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DisconnectWebParts(System::Web::UI::WebControls::WebParts::WebPartConnection ^ connection);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit&#xA;override this.DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit" Usage="webPartManager.DisconnectWebParts connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> que representa la conexión entre controles de servidor.</param>
        <summary>Realiza el proceso de desconectar controles de servidor que se conectan en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método lleva a cabo el proceso completo de la finalización de una conexión entre <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor, cuando se le pasa el `connection` parámetro.  
  
 Este método se usa para desconectar controles cuando se coloca un `<asp:connectionszone>` elemento en una página Web, para proporcionar una interfaz de usuario (UI) para administrar las conexiones. Cuando una página está en modo de presentación de conexión (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>) y existe una conexión actual, los usuarios hacer clic en un botón que llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar la conexión.  
  
 También puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método directamente desde el código, si desea desconectar controles mediante programación y sin tener que agregar un `<asp:connectionszone>` elemento a una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>. Usar dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, la página Web le permite crear una conexión entre los controles, haga clic en un botón, mientras que otro botón permite desconectar los controles.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Un archivo de código fuente que contiene personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte es un archivo que contiene el código fuente para dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se conectará. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. En este ejemplo utiliza la compilación dinámica, por lo que el `Register` directiva que hace referencia a estos componentes en la página Web se declara como corresponda en la parte superior de la página Web. Para ver un tutorial que muestra las opciones de compilación, véase [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que la parte superior, contiene `Register` las directivas para registrar el control de usuario y el ensamblado compilado de forma dinámica con el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La página tiene dos métodos principales. El `Button1_Click` método crea una conexión entre los controles y el `Button2_Click` método desconecta los controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página, haga clic en el **Connect** botón para conectar los controles. Si escriba algún texto en el control de cuadro de texto y, a continuación, haga clic en el **ENTRAR** botón, se mostrará el texto en el control conectado (que podría no mostrarse si los controles se han desconectado). Si hace clic en el **desconexión** botón, se desconectarán los controles. Puede comprobar el estado de conexión de los controles mediante el **modo de presentación** control de lista desplegable para cambiar la página en **Connect** modo. Después, haga clic en el menú de verbos (representado por una flecha) en la barra de título de uno de los controles y seleccione el **Connect** elemento. Se muestra el interfaz de usuario de conexión; está disponible porque no hay un `<asp:connectionszone>` elemento declarado en la página. También puede conectar y desconectar los controles de esta interfaz de usuario.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connection" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connection" /> no está incluido en <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> o <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> es de solo lectura.  
  
O bien 
 <paramref name="connection" /> ya se ha desconectado de <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />.  
  
O bien 
 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" /> es de solo lectura.  
  
O bien 
 <paramref name="connection" /> ya se ha desconectado de <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <block subset="none" type="overrides"><para>Puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" /> método si desea cambiar la implementación predeterminada de desconexión <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controles. Si se invalida el método y simplemente desea agregar alguna implementación para el método existente, puede llamar al método base antes de ejecutar su propio código.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DisplayMode As WebPartDisplayMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DisplayMode { System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ get(); void set(System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modo de presentación activo para una página Web que contiene controles de elementos Web.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> que determina el modo de presentación de una página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una página que contiene controles de elementos Web siempre está en uno de varios modos de presentación posibles. Para obtener más información acerca de los modos de presentación, consulte [Web Parts Page Display Modes](https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4).  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase crea los modos de presentación para una página Web. Con la base de <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (clase), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control crea varios objetos de modo de presentación estándar que se pueden usar en las páginas que contienen controles de elementos Web. Estos modos de presentación estándar se describen en la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> información general de clases.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también administra los modos de presentación para las páginas que usan los controles de elementos Web. Mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control mantiene una referencia al modo de presentación actual en una página. También puede usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad para cambiar una página de distintos modos de visualización. Para obtener un ejemplo de cómo cambiar los modos de presentación en una página que utiliza controles de elementos Web, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Como parte de la administración en el modo de presentación, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> también proporciona el control de eventos y controladores de eventos relativos a modos de visualización, como el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> método y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> método. Estos métodos proporcionan un mecanismo para personalizar el comportamiento de una página e incluso para agregar un modo de presentación personalizado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad. Después de cargar la página en un explorador, puede usar los botones de la parte inferior de la página para cambiar los modos de presentación. La página está en modo de exploración de forma predeterminada cuando se carga. Si cambia al modo de diseño, puede arrastrar los controles de servidor de una zona a otra, u organizar dos controles dentro de una zona. Si cambia al modo de edición, haga clic en el menú de verbos en el encabezado de cualquiera de los controles de servidor, seleccionados **editar**y editar el control mediante la interfaz de usuario edición (IU) proporcionada.  
  
> [!NOTE]
>  Cambiar entre modos de presentación en una aplicación de elementos Web es muy común, y desea proporcionar una manera coherente y reutilizable para hacer esto en todas las páginas que contienen controles de elementos Web. Para un ejemplo de un control de usuario que los cambios de modos de presentación y que se puede reutilizar en muchas páginas, vea [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/CS/wpmgrDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/VB/wpmgrDisplayModevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> que se asigna a la propiedad es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> que se asigna a la propiedad no es ninguno de los modos de presentación compatibles.  
  
O bien 
El objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> que se asigna a la propiedad está deshabilitado.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
        <related type="Article" href="https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0">Tutorial: Cambiar los modos de presentación en una página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanged As WebPartDisplayModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventHandler ^ DisplayModeChanged;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " Usage="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que el modo de presentación actual en una página de elementos Web ha cambiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modos de presentación son una parte integral de aplicaciones de elementos Web. Cuando los usuarios cambiar a un modo de presentación diferente en una página Web, la página a menudo tendrá un aspecto muy diferente, dependiendo del propósito del nuevo modo de presentación. Después de que ha cambiado un modo de presentación, es posible que desee realizar determinados cambios en la interfaz de usuario (IU), como ocultar o mostrar determinados controles, cambiar la apariencia de los elementos seleccionados de la interfaz de usuario y así sucesivamente.  
  
> [!NOTE]
>  Para obtener más información sobre los modos de presentación, consulte [Web Parts Page Display Modes](https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Para obtener más información sobre el consumo de eventos, vea [Cómo: Consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanging As WebPartDisplayModeCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventHandler ^ DisplayModeChanging;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " Usage="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que un usuario haga clic en una página Web en un verbo que comienza el proceso de cambiar a un modo de presentación diferente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modos de presentación son una parte integral de aplicaciones de elementos Web. Cuando los usuarios cambiar a un modo de presentación diferente en una página Web, la página a menudo tendrá un aspecto muy diferente, dependiendo del propósito del nuevo modo de presentación. Después de que un usuario inicia el proceso de cambiar a un nuevo modo de presentación, haga clic en un verbo, desea realizar determinados cambios en la interfaz de usuario (UI) mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A> propiedad para determinar cuál será el nuevo modo de presentación y, a continuación, cambiar la interfaz de usuario distintos los elementos según corresponda. Una forma útil de hacerlo es invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> método para personalizar la interfaz de usuario.  
  
> [!NOTE]
>  Para obtener más información sobre los modos de presentación, consulte [Web Parts Page Display Modes](https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Para obtener más información sobre el consumo de eventos, vea [Cómo: Consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ DisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de sólo lectura de todos los modos de presentación asociados a un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> que contiene el conjunto de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> asociados al control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> referencias de propiedad todos asociados modos de visualización, en contraposición con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad, que hace referencia a solo los modos de presentación que están disponibles (compatible) en la página actual.  
  
 Dos de los modos de presentación proporcionado, la exploración y el diseño, siempre se admiten en una página. Los otros tres modos de presentación, edición, catálogo y las conexiones, solo se admiten cuando una página tiene el tipo correspondiente de la zona necesaria para un determinado modo de presentación para que funcione. Por ejemplo, si la página no contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona, el modo de presentación de edición aparecería en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad, pero no aparecería en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad. El código usa esta propiedad para rellenar la lista con todos los modos de presentación disponibles en el conjunto de controles de elementos Web, incluso aquellos que no se admiten en la página actual. En este caso, el catálogo y conectar pantalla no se admiten los modos, porque sus correspondientes necesarios zonas no están en la página.  
  
 Mostrar de los otros tres modos: exploración, diseño y edición--se admiten en la página. Editar modo es compatible porque la página contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> de zona, al examinar y siempre se admiten los modos de diseño.  
  
 Después de cargar la página en un explorador, puede utilizar el control de lista desplegable para cambiar la página de modo de exploración al modo de diseño y, a continuación, al modo de edición. En modo de edición, puede haga clic en el menú de verbos de la lista desplegable en el encabezado de uno de los controles de servidor y seleccione **editar** para editar el control. Tenga en cuenta que si selecciona **catálogo** o **Connect** en la lista desplegable, se genera una página de error.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/CS/wpmgrDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/VB/wpmgrDisplayModesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
        <related type="Article" href="https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0">Tutorial: Cambiar los modos de presentación en una página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="DynamicConnections">
      <MemberSignature Language="C#" Value="protected internal System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property DynamicConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ DynamicConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de todas las conexiones dinámicas que actualmente existen en una página Web.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene referencias a todas las conexiones dinámicas en una página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las conexiones dinámicas son conexiones que se crean mediante programación, en lugar de estáticamente. Si los declara en el marcado de una página de formularios Web Forms, se crean conexiones estáticas. Las conexiones dinámicas se crean mediante programación o cuando un usuario crea una conexión mediante la interfaz de usuario (UI) de conexión.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> colección, aunque es de solo lectura y no se puede cambiar su contenido, proporcionan acceso mediante programación a cada objeto de conexión dinámica.  
  
> [!NOTE]
>  Para realizar operaciones comunes como conectar o desconectar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, los desarrolladores deben usar los métodos públicos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase, como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, en lugar de intentar modificar directamente la conexión los objetos de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> colección.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EditDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EditDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ EditDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable EditDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el modo de presentación en el que los usuarios finales pueden editar y modificar controles de servidor. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Se trata de un objeto estático, puede hacer referencia a él directamente a través del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios desean editar o modificar un control de servidor, debe cambiar primero la página para <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> (modo de edición). En segundo lugar, deben seleccionar un control de servidor específico para editar, haga clic en el verbo de edición en el menú de verbos de encabezado de ese control. Después de que el control está en modo de edición, aparece la interfaz de usuario (UI) de edición para editar el control seleccionado.  
  
 Para habilitar el modo de edición en una página, la página debe contener al menos un <xref:System.Web.UI.WebControls.WebParts.EditorZone> controles de zona que incluye uno o varios de la edición proporcionado, como el <xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart> control o controles de edición personalizados.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración, diseño y edición. Para admitir la edición, un `<asp:EditorZone>` elemento está en la página. Tenga en cuenta que, en el `Page_PreRender` método, el código comprueba si el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>. Si es así, `Label1` estará visible y si no, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/CS/wpmgrEditDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/VB/wpmgrEditDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página modo de edición. Tenga en cuenta que, debido al código en el `Page_PreRender` método, ahora está visible la etiqueta. Haga clic en el **editar** verbo en el menú de verbos en uno de los controles, para habilitar la edición de ese control concreto.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public virtual bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si el scripting de cliente está habilitado en la página Web que contiene un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <value>Valor booleano que indica si puede ejecutarse script de cliente en la página. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> propiedad proporciona una manera para que los desarrolladores deshabilitar scripts de cliente. Es posible que desee deshabilitar scripting por motivos de seguridad de cliente, o para asegurarse de que todos los usuarios de una página tendrán una experiencia de usuario similar, incluso si usan diferentes exploradores.  
  
 Puede deshabilitar mediante la adición de scripting del lado cliente un `EnableClientScript` atributo a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento en una página Web, como se muestra en la siguiente línea de código declarativo:  
  
 `<asp:webpartmanager id="manager" runat="server"`  
  
 `EnableClientScript="false" />`  
  
 Además, los desarrolladores podrían eliminar esta propiedad al heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase y la configuración predeterminada de valor a `false`.  
  
 El conjunto de controles de elementos Web usa para proporcionar algunas de cliente de la interfaz de usuario (UI) y características de personalización de script de cliente. Si deshabilita el cliente de secuencias de comandos, elementos Web controles siguen funcionando, pero algunas características están deshabilitadas. Se deshabilita la capacidad de arrastrar controles a distintas zonas, junto con la capacidad de representar los verbos en un menú de verbos de la lista desplegable en la barra de título de un control (los verbos en su lugar se muestran como vínculos en la barra de título del control).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableTheming : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica que el uso de temas está habilitado en una página Web.</summary>
        <value>Valor booleano que indica si los temas están habilitados. <see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control reemplaza a la base de <xref:System.Web.UI.Control.EnableTheming%2A> propiedad para asegurarse de que siempre devuelve un valor de `true`. Esto se hace porque los elementos Web de conjunto de controles requiere el uso de temas para representar los elementos Web de controles que son controles secundarios de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y que conforman la interfaz de usuario (UI) de una página Web. Por ejemplo, los temas se utilizan para representar las distintas zonas, y parte de los controles que residen en las zonas, incluidos los distintos tipos de controles (controles que heredan de la <xref:System.Web.UI.WebControls.WebParts.Part> clase), servidor personalizado, controles de servidor ASP.NET y controles de usuario controles.  
  
 Aunque invalidado <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A> propiedad se implementa como una propiedad de lectura/escritura según su propiedad base, no se puede establecer la propiedad, porque por diseño, siempre debe devolver un valor de `true`. Si se intenta establecer la propiedad, un <xref:System.NotSupportedException> es una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se ha intentado establecer el valor de propiedad.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EndWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartConnecting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartConnecting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartConnecting ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartConnecting();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartConnecting : unit -&gt; unit&#xA;override this.EndWebPartConnecting : unit -&gt; unit" Usage="webPartManager.EndWebPartConnecting " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza el proceso de conectar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> a otro control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> método termina el proceso de conectar un <xref:System.Web.UI.WebControls.WebParts.WebPart> a otro control. Es el equivalente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> método garantiza que el objeto de personalización al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es modificable, que es necesario porque formar una conexión es en sí mismo un tipo de personalización. A continuación, este método garantiza que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> objeto no es `null`y finalmente llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El control al que hace referencia la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> tiene el valor <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregar un controlador personalizado adicional, o bien, puede personalizar completamente todo el proceso de realización de una conexión entre controles.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EndWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartEditing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartEditing ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartEditing();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartEditing : unit -&gt; unit&#xA;override this.EndWebPartEditing : unit -&gt; unit" Usage="webPartManager.EndWebPartEditing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completa el proceso de editar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método finaliza el proceso de editar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Es el equivalente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método garantiza que el objeto de personalización al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es modificable, que es necesario porque un control de edición es un proceso que requiere cambios de personalización. A continuación, este método garantiza que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> objeto no es `null`, de modo que actualmente seleccionado <xref:System.Web.UI.WebControls.WebParts.WebPart> control puede cambiar y, por último, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El control al que hace referencia la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> tiene el valor <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregar un controlador personalizado adicional, o bien, puede personalizar completamente todo el proceso de finalización de la edición de un control. Por ejemplo, en el método de invalidación, podría llamar primero al método base y, a continuación, agregue algún código que determina qué cambios de edición se realizaron y muestra la lista de cambios al usuario final como una confirmación.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExportSensitiveDataWarning">
      <MemberSignature Language="C#" Value="public virtual string ExportSensitiveDataWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExportSensitiveDataWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ExportSensitiveDataWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ExportSensitiveDataWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExportSensitiveDataWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto de un mensaje de advertencia que se muestra cuando un usuario intenta exportar datos de estado confidenciales desde un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <value>Cadena que contiene el mensaje de advertencia. El mensaje predeterminado es un valor específico de la referencia cultural suministrado por .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario intenta exportar datos de estado confidenciales desde un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, si cualquiera de los datos exportados procede de un miembro que se ha marcado como confidencial en el código fuente, se muestra un mensaje de advertencia al usuario en un cuadro de mensaje que indica que se está exportando los datos confidenciales y proporcionar una oportunidad de cancelar la exportación. Los programadores pueden marcar los datos de un miembro específico como confidenciales estableciendo el `isSensitive` parámetro de la `[Personalizable]` atributo `true` del miembro. Para obtener más información acerca de este atributo y los parámetros, vea el <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute> clase.  
  
> [!IMPORTANT]
>  Cuando se usa la característica de exportación de elementos Web, potencialmente se pudo exportar información confidencial a usuarios no autorizados. Para obtener más información sobre cómo protegerse contra esta amenaza, consulte [proteger las páginas Web Parts](https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 Cada vez que los usuarios a realizar la exportación, se muestra el mensaje predeterminado. Sin embargo, asignando un valor para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedad, puede proporcionar un mensaje de advertencia personalizado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedad.  
  
 El código de la siguiente página Web utiliza un estándar <xref:System.Web.UI.WebControls.BulletedList> y lo coloca en una zona. El control se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control en tiempo de ejecución, lo que le permite actuar como un verdadero <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que el control exportable, un `ExportMode` atributo se agrega a la `<asp:bulletedlist>` elemento y el valor del atributo se establece en <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All>, lo que significa que esos datos confidenciales y no confidenciales se puede exportar. Tenga en cuenta también que en el `<asp:webpartmanager>` elemento, el `ExportSensitiveDataWarning` atributo tiene asignado un valor personalizado.  
  
 Tenga en cuenta que para que funcione el ejemplo de código, hay un valor que debe agregar en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. Dentro de la `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el marcado siguiente.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/CS/wpmgrExportSensitiveWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/VB/wpmgrExportSensitiveWarningVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el menú de verbos (representado por una flecha hacia abajo) en la barra de título del control que contiene los vínculos. En el menú de verbos, seleccione **exportar**y observe que aparece un cuadro de mensaje con la advertencia personalizada. Si desea continuar con la exportación, haga clic en **Aceptar**, que le permitirá guardar una copia local de un archivo de descripción XML con todos los datos sobre el control.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExportWebPart">
      <MemberSignature Language="C#" Value="public virtual void ExportWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExportWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit&#xA;override this.ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit" Usage="webPartManager.ExportWebPart (webPart, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="webPart">Control del que se exportarán los datos.</param>
        <param name="writer">Objeto <see cref="T:System.Xml.XmlWriter" /> que escribe los datos exportados de <paramref name="webPart" /> en un archivo de descripción XML.</param>
        <summary>Crea un archivo de descripción XML que contiene los datos de estado y de propiedades correspondientes a un control de servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método ensambla distintos datos de estado y de propiedades de `webPart` en un archivo XML. Los datos incluyen información sobre el control, incluida su ensamblado, los datos de estado y los datos de la propiedad. El usuario que inicia la exportación puede guardar el archivo XML en el disco en el equipo local o la red. Otros usuarios, a continuación, pueden importar el archivo de descripción a otra página o sitio Web y los datos de estado y de propiedades se aplican a una instancia diferente de `webPart`. Esto proporciona un mecanismo rápido y cómodo para los usuarios compartir y reutilizar sus valores en los controles de servidor, y también proporciona a los desarrolladores un medio para controlar la apariencia y comportamiento de los controles importados y exportados.  
  
 Las propiedades de `webPart` no se exportan de forma predeterminada. Para habilitar la exportación de una propiedad, debe marcarla con el `[Personalizable]` atributo en el código fuente. Opcionalmente, también puede marcar una propiedad exportable como que contienen datos confidenciales, estableciendo el `isSensitive` parámetro de la `[Personalizable]` atributo `true`. De forma predeterminada, `isSensitive` es `false`. Los desarrolladores pueden establecer el parámetro `true` para indicar que los datos son confidenciales.  
  
 Para habilitar `webPart` para exportarse, un desarrollador establece su <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> como valor de la propiedad <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All> (que incluye todas las propiedades confidenciales y personalizables), o a <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>, que exporta todo excepto las propiedades confidenciales .  
  
> [!IMPORTANT]
>  Lo que permite a los usuarios para exportar datos de los controles y para importar datos en otros controles, conlleva algunos riesgos de seguridad. Los desarrolladores deben usar el enfoque descrito anteriormente para proteger datos confidenciales y, si desean evitar el riesgo de exponer los datos, no debe habilitar exportación en `webPart` en absoluto. Para obtener más información sobre problemas de seguridad de elementos Web, consulte [proteger las páginas Web Parts](https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.  
  
O bien 
 <paramref name="writer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="webPart" /> no está incluido en la colección de controles a la que se hace referencia en <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  
  
O bien 
La propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" /> de <paramref name="webPart" /> está establecida en un valor de <see cref="F:System.Web.UI.WebControls.WebParts.WebPartExportMode.None" />, que significa que la exportación está deshabilitada para <paramref name="webPart" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
        <related type="Article" href="https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2">Protección de Web de páginas de elementos</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="webPartManager.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se reemplaza para evitar que el foco se establezca en el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />, porque no tiene ninguna interfaz de usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Focus%2A> invalidaciones de la base de los métodos <xref:System.Web.UI.Control.Focus%2A?displayProperty=nameWithType> método y produce una excepción si un autor de llamada llama al método. Dado que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene ninguna interfaz de usuario y nunca está visible para los usuarios, nunca puede permitir que el foco debe establecerse en sí mismo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Un llamador intenta llamar al método <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" />, que no se admite en un control que no tiene ninguna interfaz de usuario.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConsumerConnectionPointCollection ^ GetConsumerConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection&#xA;override this.GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" Usage="webPartManager.GetConsumerConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control de servidor que actúa como consumidor en una conexión.</param>
        <summary>Recupera la colección de objetos <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> que pueden actuar como puntos de conexión de un control de servidor que, a su vez, actúa como consumidor en una conexión de elementos Web.</summary>
        <returns>Colección <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" /> que contiene todos los puntos de conexión en el consumidor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una conexión de elementos Web siempre implica exactamente dos controles: uno que actúa como proveedor de datos, el otro actúa como consumidor de datos. Cada control debe tener uno o varios métodos que se definen como puntos de conexión. En el caso de un control consumidor, sus puntos de conexión son <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos. Recuperar los puntos de conexión del consumidor es un paso necesario para formar una conexión de elementos Web.  
  
 Un consumidor siempre debe tener al menos un punto de conexión para poder establecer una conexión. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método comprueba si un control consumidor y recupera una colección de todos sus puntos de conexión. Si un <xref:System.Web.UI.WebControls.WebParts.WebPart> control no tiene ningún punto de conexión, el método devuelve una colección vacía.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, vea el tema [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad. Tenga en cuenta que el <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection> objeto que se recupera utilizando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método, a continuación, se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método para determinar si se puede crear una conexión entre los dos controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente para los controles. Puede obtener este código e instrucciones para compilarlo en la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases.  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador más adelante, esta conexión estática ya estará establecida y no será necesario volver a crear cada vez que carga la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentWebPartManager">
      <MemberSignature Language="C#" Value="public static System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::WebControls::WebParts::WebPartManager ^ GetCurrentWebPartManager(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrentWebPartManager : System.Web.UI.Page -&gt; System.Web.UI.WebControls.WebParts.WebPartManager" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Página Web que contiene una instancia de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</param>
        <summary>Recupera una referencia a la instancia actual del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> en una página.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> que hace referencia a la instancia actual del control en una página.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método es útil en contextos donde van a recuperar una referencia a la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Un escenario común donde esto podría ocurrir es si está escribiendo un control personalizado que no se conoce durante el desarrollo de lo que el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> será el control en su página.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método es estático, por lo que puede llamar directamente sin necesidad de una instancia de un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Algunos controles de elementos Web controlan de conjunto, por ejemplo, <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, tienen un <xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A> propiedad que se puede recuperar una referencia a la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Por lo tanto, cuando se trabaja con estos controles, debe usar esta propiedad para recuperar una referencia.  
  
 Si se está codificando en un contexto donde se conoce el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, como escribir código en línea dentro de una página Web, resulta más sencillo y más eficaz para hacer referencia directamente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control mediante su identificador.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A>. El ejemplo tiene dos partes: un control de servidor personalizado y una página Web que hospeda el control.  
  
 Personalizado <xref:System.Web.UI.WebControls.Label> control usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método para recuperar el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control en la página actual y, a continuación, muestra el identificador.  
  
 [!code-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/MyManagerIDLabel.cs#2)]
 [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/MyManagerIDLabel.vb#2)]  
  
 En el ejemplo de código siguiente se proporciona la página Web que hospeda el control en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/getCurrentWPManagerCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/getcurrentWPManagervb.aspx#1)]  
  
 Después de cargar la página en un explorador, tenga en cuenta que el identificador del elemento actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control se muestra dentro de personalizado <xref:System.Web.UI.WebControls.Label> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayTitle">
      <MemberSignature Language="C#" Value="protected internal virtual string GetDisplayTitle (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetDisplayTitle(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetDisplayTitle(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string&#xA;override this.GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetDisplayTitle webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control para el que el método devuelve el valor de <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />.</param>
        <summary>Obtiene una cadena que contiene el valor de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> en un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <returns>Cadena que contiene el valor calculado de <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> para <paramref name="webPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtiene el valor calculado de la <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> propiedad `webPart`. Cuando los desarrolladores asignan un valor para el <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> propiedad de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, este método genera el valor para mostrar como título. El valor calculado para controles sin título consta de un número a una cadena, con el número de secuencia de un control dentro de la zona actual.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="webPart" /> no está en la colección de <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.</exception>
        <block subset="none" type="overrides"><para>Este método se puede invalidar para cambiar cómo se calcula el título de presentación predeterminado.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />
      </Docs>
    </Member>
    <Member MemberName="GetExportUrl">
      <MemberSignature Language="C#" Value="public string GetExportUrl (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetExportUrl(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetExportUrl(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.GetExportUrl : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetExportUrl webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que se va a exportar.</param>
        <summary>Obtiene la ruta de acceso virtual relativa y la cadena de consulta que forman parte de la solicitud cuando un usuario intenta exportar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <returns>Cadena que contiene la ruta de acceso virtual relativa y la cadena de consulta que forman juntos la solicitud para exportar un control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> método es una ruta de acceso virtual relativa a la ubicación del servidor de la página que contiene el control, más el valor de cadena de consulta anexada que forma la solicitud de exportación se envía al servidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> método codifica la cadena antes de permitir que la solicitud que se envíen, para protegerse contra ataques de scripts malintencionados.  
  
> [!NOTE]
>  Para obtener más información acerca de cómo proteger las aplicaciones de elementos Web, consulte [proteger las páginas Web Parts](https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::GenericWebPart ^ GetGenericWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetGenericWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.GetGenericWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control de servidor que existe en una clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> y se ajusta en tiempo de ejecución como un control secundario de <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />.</param>
        <summary>Obtiene una referencia a la instancia del control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> que contiene un control de servidor.</summary>
        <returns>Control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> que ajusta <paramref name="control" /> como un control secundario. El método devuelve <see langword="null" /> si <paramref name="control" /> no está incluido en un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En general, existen dos categorías de controles que los desarrolladores se colocan en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas para participar en aplicaciones de elementos Web: <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase base y otros controles de servidor, que pueden ser estándares Los controles de ASP.NET, controles personalizados o controles de usuario. Cuando cualquiera de estos controles se colocan en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, toma la funcionalidad de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> control tiene inherentemente esta funcionalidad, pero no otros tipos de controles de servidor. Para habilitar los otros controles de servidor para que actúe como <xref:System.Web.UI.WebControls.WebParts.WebPart> controla cuando se colocan en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, ASP.NET se ajusta con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control. Dado que el <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control hereda directamente de la <xref:System.Web.UI.WebControls.WebParts.WebPart> (clase), proporciona sus controles secundarios con características de elementos Web es true.  
  
 A menudo en tiempo de ejecución, quizá desee obtener una referencia a los desarrolladores de páginas la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control que contiene uno de los controles de servidor en una zona. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método les permite recuperar una referencia a la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método. El ejemplo de código contiene un <xref:System.Web.UI.WebControls.Calendar> control declarados dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona. El `Button1_Click` método primero imprime el Id. de la <xref:System.Web.UI.WebControls.Calendar> control a una etiqueta y, a continuación, usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método para recuperar una referencia a la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> que contiene el calendario. El identificador de la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control y el identificador de su control secundario (que es el <xref:System.Web.UI.WebControls.Calendar> control), se imprimen en una segunda etiqueta.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/CS/getGenericWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/VB/getGenericWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetProviderConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ProviderConnectionPointCollection ^ GetProviderConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection&#xA;override this.GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" Usage="webPartManager.GetProviderConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control de servidor que actúa como proveedor en una conexión.</param>
        <summary>Recupera la colección de objetos <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> que pueden actuar como puntos de conexión de un control de servidor que, a su vez, actúa como proveedor en una conexión de elementos Web.</summary>
        <returns>Colección <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" /> que contiene todos los puntos de conexión en el proveedor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una conexión de elementos Web siempre implica exactamente dos controles: uno que actúa como proveedor de datos, el otro actúa como consumidor de datos. Cada control debe tener uno o varios métodos que se definen como puntos de conexión. En el caso de un control proveedor, sus puntos de conexión son <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objetos.  
  
 Un proveedor siempre debe tener al menos un punto de conexión para poder establecer una conexión. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método comprueba si un control proveedor y recupera una colección de todos sus puntos de conexión. Recuperación de los puntos de conexión del proveedor es un paso necesario para formar una conexión de elementos Web.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 El ejemplo consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad. Tenga en cuenta que el <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection> objeto que se recupera utilizando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método, a continuación, se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método para determinar si se puede crear una conexión entre los dos controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente para los controles. Puede obtener este código e instrucciones para compilarlo en la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases.  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador más adelante, esta conexión estática ya estará establecida y no será necesario volver a crear cada vez que carga la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ImportWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPart ImportWebPart (System.Xml.XmlReader reader, out string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart ImportWebPart(class System.Xml.XmlReader reader, [out] string&amp; errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportWebPart (reader As XmlReader, ByRef errorMessage As String) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ ImportWebPart(System::Xml::XmlReader ^ reader, [Runtime::InteropServices::Out] System::String ^ % errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.ImportWebPart (reader, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="errorMessage" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">Objeto <see cref="T:System.Xml.XmlReader" /> que lee los datos de estado y de propiedades del archivo de descripción XML que se importa.</param>
        <param name="errorMessage">Objeto <see cref="T:System.String" /> que se muestra al usuario si se encuentra un error durante la importación.</param>
        <summary>Importa un archivo de descripción XML que contiene datos de estado y de propiedades de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> y aplica los datos al control.</summary>
        <returns>Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o un control de servidor ajustado por un control <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> que, por tanto, se trata como un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />) al que se hace referencia en el archivo de descripción XML importado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método importa un archivo de descripción XML que se creó el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método para un control de servidor. No es el control de servidor real que se importa, pero solo el archivo de descripción que contiene datos de estado y de propiedades sobre el control. El control y el ensamblado al que hace referencia en el archivo de descripción ya deben estar disponibles en el servidor donde un usuario intenta importar el archivo de descripción.  
  
 Para habilitar la importación de un control, un desarrollador debe agregar un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control en la página donde se habilitará la importación. Dentro de la zona, un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> se debe agregar el control. Este control proporciona un cuadro de diálogo que permite a los usuarios examinar y busque el archivo de descripción para importar.  
  
 Después de que un usuario busca un archivo de descripción y comienza la importación, se lee el archivo de descripción por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método. Si no hay ningún error y si no se encuentran el ensamblado y el control, el control de servidor se agrega al catálogo dentro de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control y los diversos datos de propiedad y el estado especificados en el archivo de descripción se aplican al control. El usuario, a continuación, puede seleccionar el control y agregarlo a la página.  
  
> [!IMPORTANT]
>  Al igual que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método tiene algunos posibles riesgos de seguridad. Dado que implica la importación de datos en un sitio Web, un usuario malintencionado podría intentar insertar datos incorrectos o código de script incluso en el archivo de descripción que se importa. A continuación, los datos no válidos podrían aparecer en una página o en una base de datos, o podría ejecutar el script insertado. Para obtener información general de los posibles riesgos asociados con la importación de archivos de descripción y formas de evitar los riesgos, consulte [proteger las páginas Web Parts](https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> es <see langword="null" />.</exception>
        <exception cref="T:System.IO.EndOfStreamException"><paramref name="reader" /> no pudo leer el archivo.  
  
O bien 
 <paramref name="reader" /> necesitó mostrar un mensaje de error de importación pero encontró uno en el archivo.  
  
O bien 
 <paramref name="reader" /> llegó el fin del archivo sin encontrar el elemento XML que contiene los datos exportados.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2">Protección de Web de páginas de elementos</related>
      </Docs>
    </Member>
    <Member MemberName="Internals">
      <MemberSignature Language="C#" Value="protected System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Internals As WebPartManagerInternals" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ Internals { System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Internals : System.Web.UI.WebControls.WebParts.WebPartManagerInternals" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManagerInternals</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a la clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />, que se utiliza para combinar y separar un conjunto de métodos implementados actualmente en la clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> y son muy útiles para los desarrolladores de controles.</summary>
        <value>Clase <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" /> a través de la que <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> se puede hacer referencia a los distintos métodos que se han separado en <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad expone las API para llamar a un conjunto de <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos que se usan principalmente en los casos de extensibilidad.  
  
 La manera diseñada para utilizar estos métodos internos es tener acceso a ellos a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad. Dado que la propiedad está protegida, solo puede tener acceso a él y llamar a los métodos en una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase heredando de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase.  
  
> [!NOTE]
>  Esta propiedad está oculta de IntelliSense en [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]. Sin embargo, en una derivada <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (clase), todavía puede acceder a la propiedad y sus diversos miembros.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAuthorized">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina si se puede agregar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor a una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parte de la flexibilidad de la característica de elementos Web es la capacidad de agregar controles de servidor a páginas Web en tiempo de ejecución. Hay una serie de escenarios comunes en los que un control de servidor (que puede ser un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control, un control de servidor personalizado, un control de usuario o un control de ASP.NET) se pueden agregar.  
  
 En los siguientes escenarios comunes, agregar controles de servidor a una página, los intentos de conjunto de control de elementos Web y la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método se llama para autorizar a ellos:  
  
-   Cuando se agrega un control de servidor mediante declaración en el marcado de una página Web en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona.  
  
-   Cuando se agrega mediante programación un control de servidor a una zona.  
  
-   Cuando un usuario importa un control de servidor en un catálogo de elementos Web de controles.  
  
-   Cuando un control de servidor se carga desde el almacén de datos de personalización.  
  
-   Cuando se agrega un control de servidor a un <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> control para que esté disponible en un catálogo de controles de servidor.  
  
 En cada escenario donde se agregan controles, la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método se llama para asegurarse de que se cumplen todos los criterios de autorización para permitir que un control que se va a agregar. Cuando un control está autorizado, se agrega normalmente como sería si se ha producido ningún escenario de filtrado. Cuando un control no está autorizado, el conjunto de controles de elementos Web puede responder de varias maneras, dependiendo del contexto. Puede producir un error silenciosamente el conjunto de controles agregar un elemento no autorizado (si no es necesario informar al usuario), puede mostrar un mensaje de error o puede agregar una instancia de la <xref:System.Web.UI.WebControls.WebParts.UnauthorizedWebPart> clase como un marcador de posición. Este objeto de marcador de posición no está visible en la página, pero está visible en el código fuente de página para indicar que se ha excluido un control no autorizado.  
  
 El factor determinante de si un control tiene autorización es el filtro de autorización. Un filtro de autorización es una característica en el conjunto de controles de elementos Web que permite a los desarrolladores excluir de una página de todos los controles que no cumplen los criterios especificados.  
  
 Para crear un escenario de filtrado, los desarrolladores deben hacer dos cosas. En primer lugar, debe asignar un valor de cadena (el valor puede ser arbitrario) a la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad de cada uno <xref:System.Web.UI.WebControls.WebParts.WebPart> control que va a usar en el escenario. También puede asignar un valor a esta propiedad para otros tipos de controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, porque si se colocan en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas, estos controles se encapsulan con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> hereda de control en tiempo de ejecución y este control el <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad.  
  
 El segundo paso es necesario para la creación de un escenario de filtrado es como reemplazo el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> método, o para crear un controlador de eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos. En estos métodos, un desarrollador puede comprobar la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad, y si el valor indica que el control no debe ser autorizado, el programador garantiza que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método devuelve un valor de `false`.  
  
> [!NOTE]
>  Para obtener ejemplos de código y una descripción de cómo configurar un escenario de filtrado personalizado que con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, consulte los temas de las sobrecargas del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public bool IsAuthorized (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAuthorized(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAuthorized(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.IsAuthorized : System.Web.UI.WebControls.WebParts.WebPart -&gt; bool" Usage="webPartManager.IsAuthorized webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor cuya autorización se comprueba.</param>
        <summary>Realiza los pasos iniciales para determinar si un control tiene autorización para ser agregado a una página.</summary>
        <returns>Valor booleano que indica si <paramref name="webPart" /> se puede agregar a una página.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> es el método inicial llamado por el control de elementos Web para comprobar la autorización para un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Acepta `webPart` como un parámetro y se iniciará un proceso que en última instancia, determina si el control se agregará a una página. Llame a este método desde el código directamente cuando se necesita determinar si un control determinado está autorizado.  
  
 Este método lleva a cabo las tareas iniciales de determinar si el control hereda de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase o es una <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> de control y, en caso afirmativo, qué tipo de control secundario contiene. Para finalizar la tarea de autorización, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecargar el método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> método desde el código para determinar si un control está autorizado para agregarse a una página.  
  
 El ejemplo de código consta de tres partes:  
  
-   Personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control que reemplaza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método.  
  
-   Una página Web que crea un filtro para un <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Explicación de cómo ejecutar el ejemplo de código.  
  
 Este ejemplo de código usa un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control que reemplaza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecargar el método para proporcionar un control personalizado de la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad. Este control busca un valor de propiedad `admin` y, si el valor está presente, se autoriza el control. Si un control tiene un valor diferente, no está autorizado; los controles sin el valor de propiedad están autorizados, ya que se supone no para formar parte del escenario de filtrado.  
  
 Para que poder ejecutar este ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código usa el método de compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 La segunda parte del ejemplo de código crea un filtro que puede excluir potencialmente un control. La siguiente página Web contiene tres controles de servidor ASP.NET en un `<asp:webpartzone>` elemento. Tenga en cuenta que los controles de la primeros y segundo tienen sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades se establecen en valores diferentes, y el tercero no asigna la propiedad. Se puede comprobar este valor de autorización en tiempo de ejecución y el control se puede agregar a la página si el filtro coincide con los criterios establecidos por el desarrollador. Observe también que en el `Page_Load` método, el código llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> método para determinar si cada uno de los controles está autorizado, y si es así, establece cada control <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. Dentro de la `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el marcado siguiente.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, tenga en cuenta que se muestra el primer control, dado que coincide con los criterios en el método invalidado. El segundo control no se agrega a la página, porque se excluye el filtro. También se agrega el tercer control porque no tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> conjunto de propiedades. Tenga en cuenta que si hace clic en el icono de menú de verbos en la barra de título de cada control, pueden tanto exportarse porque sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> asignados valores de propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> es <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Se llama a este método directamente desde el código. Si desea conseguir un mayor control mediante programación a través del proceso de autorización, puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" /> sobrecargar el método.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public virtual bool IsAuthorized (Type type, string path, string authorizationFilter, bool isShared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAuthorized(class System.Type type, string path, string authorizationFilter, bool isShared) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAuthorized(Type ^ type, System::String ^ path, System::String ^ authorizationFilter, bool isShared);" />
      <MemberSignature Language="F#" Value="abstract member IsAuthorized : Type * string * string * bool -&gt; bool&#xA;override this.IsAuthorized : Type * string * string * bool -&gt; bool" Usage="webPartManager.IsAuthorized (type, path, authorizationFilter, isShared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="authorizationFilter" Type="System.String" />
        <Parameter Name="isShared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Type" /> del control cuya autorización se está comprobando.</param>
        <param name="path">Ruta de acceso de la aplicación relativa al archivo de código fuente del control que se está autorizando, si el control es un control de usuario.</param>
        <param name="authorizationFilter">Valor de cadena arbitrario que se asigna a la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" /> de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que se utiliza para autorizar si un control se puede agregar a una página.</param>
        <param name="isShared">Indica si el control cuya autorización se está comprobando es un control compartido, lo que significa que estará visible para muchos o todos los usuarios de la aplicación y que el valor de su propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" /> está establecido en <see langword="true" />.</param>
        <summary>Realiza los pasos finales para determinar si un control tiene autorización para ser agregado a una página.</summary>
        <returns>Valor booleano que indica si un control tiene autorización para ser agregado a una página.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga del método lleva a cabo los pasos finales para determinar si un control está autorizado para agregarse a una página. Este método garantiza que `type` es un tipo válido y que `path` tiene un valor solo si el control que se está comprobando es un control de usuario. Después, llama a la crítica <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método, que genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método para determinar si un control está autorizado para agregarse a una página.  
  
 El primer paso es crear un filtro que potencialmente puede excluir un control. La siguiente página Web contiene tres controles de servidor ASP.NET en un `<asp:webpartzone>` elemento. Tenga en cuenta que los controles de la primeros y segundo tienen sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades se establecen en valores diferentes, y el tercero no asigna la propiedad. Se puede comprobar este valor de autorización en tiempo de ejecución y el control se puede agregar a la página si el filtro coincide con los criterios establecidos por el desarrollador.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 El segundo paso consiste en invalidar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> método y crear el control para los filtros de autorización personalizado. Tenga en cuenta que el código comprueba primero si la propiedad tiene un valor, por lo que cualquier control que no se asigna el <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad se agregarán automáticamente. Si un control tiene un filtro, el código devuelve `true` sólo si el valor de filtro es igual a `admin`. Este ejemplo muestra un mecanismo sencillo que puede usar para mostrar determinados controles a determinados usuarios, según su función. Aunque es un ejemplo completo utilizando roles fuera del ámbito de este tema, podría usar la misma lógica como el método invalidado en este ejemplo de código, salvo que se pudo comprobar si el usuario actual está en un rol que coincida con el valor de filtro de autorización y, a continuación, agregue el control solo para ese usuario. Esto permitiría crear páginas donde algunos usuarios verían todos los controles y otros usuarios verían sólo los controles seleccionados. Este es el aspecto que podría tener la lógica que comprueba el filtro si usa roles:  
  
```vb  
If Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter) Then  
  return True  
Else  
  return False  
End If  
```  
  
```csharp  
if(Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter))  
    return true;  
else  
    return false;  
```  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código usa el método de compilación dinámica. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 Después de cargar la página en un explorador, tenga en cuenta que se muestra el primer control, dado que coincide con los criterios en el método invalidado. El segundo control no se agrega a la página, porque su valor de filtro se excluye. Se agrega el tercer control porque no tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> conjunto de propiedades. Si cambia el valor de propiedad en el segundo control para coincidir con el del primer control y, a continuación, ejecute de nuevo la página, se agrega también el segundo control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="type" /> es un control de usuario y <paramref name="path" /> es <see langword="null" /> o una cadena vacía ("").  
  
O bien 
 <paramref name="type" /> no es un control de usuario y <paramref name="path" /> tiene un valor asignado a él.</exception>
        <block subset="none" type="overrides"><para>Este método puede reemplazarse por heredar la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase si desea proporcionar un control adicional al comprobar la autorización. Desea reemplazar el método para comprobar determinados valores el <paramref name="authorizationFilter" /> parámetro y según el valor, devuelven un valor booleano que determina si el control se agregará a una página.  
  
Para desarrolladores de páginas que también desean comprobar si hay filtros de autorización y proporcionar un control personalizado, hay una opción para hacerlo en línea en una página .aspx o en un archivo de código subyacente, sin tener que heredar de ninguna clase. Puede declarar un controlador de eventos alternativo en la página de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> método de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control. Para obtener más detalles y un ejemplo, vea el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> método.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsCustomPersonalizationStateDirty">
      <MemberSignature Language="C#" Value="protected virtual bool IsCustomPersonalizationStateDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsCustomPersonalizationStateDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsCustomPersonalizationStateDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCustomPersonalizationStateDirty : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se han realizado cambios de personalización que afectan a detalles de personalización de nivel de página administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <value>Valor booleano que indica si se han realizado cambios de personalización. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> internamente para realizar un seguimiento de si alguno de los datos de personalización de nivel de página que administra la propiedad ha cambiado. Los datos de personalización cambian cuando los usuarios llevan a cabo varias acciones de personalización en el nivel de página, como agregar o quitar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, conectar o desconectar controles, cambiar el diseño de la página moviendo los controles y otras acciones.  
  
> [!NOTE]
>  Los usuarios también pueden realizar la personalización en el nivel de control, lo que significa que realizan los cambios de personalización a un control específico, y los cambios afectan a solo ese control. Un ejemplo podría ser el control de edición y cambiar su color de fondo o su texto de título. Personalización de nivel de control no afecta a los datos de personalización de nivel de página que realiza el seguimiento el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, lo cual la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> no se cambia el valor de propiedad a `true` cuando se produce la personalización de nivel de control.  
  
 Aunque el método está protegido y no se puede tener acceso directamente a un llamador, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> puede tener acceso a la propiedad directamente por los autores de llamadas, y devuelve el valor de esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.PersonalizationState.IsDirty" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.PersonalizationState.SetDirty" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="webPartManager.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Contiene los datos de estado conservados que se van a cargar.</param>
        <summary>Carga los datos de estado del control que se guardaron de una solicitud de página anterior y tienen que restaurarse en una solicitud subsiguiente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A> método es útil para restaurar los datos de propiedad que se deben conservar entre devoluciones de datos de una página, incluso cuando el <xref:System.Web.UI.Control.EnableViewState%2A> propiedad está establecida en `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="savedState" /> no es un <see cref="P:System.Web.UI.PageStatePersister.ControlState" /> válido.</exception>
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void LoadCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.LoadCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state"><see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contiene los datos de estado que se van a cargar.</param>
        <summary>Almacena los datos de personalización a medida que se ha pasado el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> de los objetos de personalización que se utilizará más adelante durante el proceso de inicialización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> método proporciona datos de estado guardados en forma de un <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objeto. Finalmente, estos datos se usan para cargar los datos de personalización en los controles de elementos Web y realizar otras tareas de inicialización.  
  
> [!NOTE]
>  Este método se llama mediante una secuencia de métodos que comienza cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A> método inicialmente solicita asociado <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> objeto para proporcionar los datos de personalización para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 No se puede llamar a este método directamente desde el código. Sin embargo, se puede llamar directamente el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A> llama al método, que a su vez la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> método y devuelve los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="MediumPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MediumPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MediumPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MediumPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MediumPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MediumPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Security.PermissionSet" /> que solo permite el permiso <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> y el permiso <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" />.</summary>
        <value>Objeto <see cref="T:System.Security.PermissionSet" /> que solo permite el permiso <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> y el permiso <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.PermissionSet> objeto devuelto por esta propiedad se usa durante la importación para la deserialización del tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimalPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MinimalPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MinimalPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MinimalPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MinimalPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimalPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Security.PermissionSet" /> que solo permite el permiso <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> y el permiso <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />.</summary>
        <value>Obtiene un objeto <see cref="T:System.Security.PermissionSet" /> que solo permite el permiso <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> y el permiso <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.PermissionSet> objeto devuelto por esta propiedad se usa durante la importación para todo excepto la deserialización de tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveWebPart">
      <MemberSignature Language="C#" Value="public virtual void MoveWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MoveWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="abstract member MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit&#xA;override this.MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit" Usage="webPartManager.MoveWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor que se está moviendo.</param>
        <param name="zone">Zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> de destino a la que se desplaza <paramref name="webPart" />.</param>
        <param name="zoneIndex">Entero que indica el índice de <paramref name="webPart" /> respecto a otros controles en <paramref name="zone" />.</param>
        <summary>Mueve un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de servidor de una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> a otra o a una posición nueva dentro de la misma zona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método para mover `webPart` a una nueva ubicación en la misma zona o en otra zona. Puede llamar a este método directamente desde el código y también se invoca cuando un usuario mueve un control a una nueva posición mediante diversas opciones de la interfaz de usuario (UI) de elementos Web.  
  
 Una serie de condiciones que debe cumplirse antes de `webPart` se pueden mover, y la mayoría de ellos se indica mediante elementos que aparecen en la sección excepciones de este tema. Si `webPart` no contenía un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona para empezar, no se pueden mover a una zona.  
  
 Después de que se cumplen las condiciones, se produce la siguiente secuencia de acciones para mover `webPart`:  
  
1.  El método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> genera el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>.  
  
2.  `webPart` se quita de su zona actual (si es necesario) y se agrega a la nueva zona o la nueva posición dentro de su zona actual.  
  
3.  El método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> genera el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>.  
  
4.  El `zoneIndex` de cada <xref:System.Web.UI.WebControls.WebParts.WebPart> se restablece el control en el origen y el destino de las zonas para reflejar el control movido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método directamente desde el código para mover un <xref:System.Web.UI.WebControls.WebParts.WebPart> control de una zona a otra.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo ejecutar el ejemplo de código.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener más información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es una página Web que contiene dos zonas, cada uno de los cuales contiene dos controles de servidor. Cuando un usuario hace clic en el **mover WebPart** botón en la página, el código en el `Button1_Click` método mueve un control de la primera zona a una nueva posición en la segunda zona. Tenga en cuenta que el código debe llamar primero la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método para recuperar el <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto que encapsula el `list1` control. Esto es necesario porque el primer parámetro de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método requiere un <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, mientras que `list1` es un control de servidor ASP.NET.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/CS/MoveWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/VB/MoveWebPartVB.aspx#1)]  
  
 Una vez cargada la página, haga clic en el **mover WebPart** botón y tenga en cuenta que el control que contiene los vínculos se mueve a la posición central en la segunda zona. Este movimiento del control se logra mediante programación llamando a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método. También puede usar el **modo de presentación** control de lista desplegable para cambiar la página al modo de diseño y en modo de diseño, puede arrastrar los controles a zonas diferentes o en posiciones diferentes dentro de sus zonas. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> también llama al método el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> mueve el control para controlar este tipo iniciadas por el usuario.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="webPart" /> no está incluido en la colección <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.  
  
O bien 
 El valor del parámetro <paramref name="zone" /> no está incluido en la colección <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" /> del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.  
  
O bien 
La zona a la que hace referencia la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.Zone" /> del control <paramref name="webPart" /> es <see langword="null" />, lo que significa que <paramref name="webPart" /> no está incluido actualmente en una zona.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="webPart" /> o <paramref name="zone" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="zoneIndex" /> es menor que cero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnAuthorizeWebPart">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthorizeWebPart (System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthorizeWebPart(class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthorizeWebPart (e As WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthorizeWebPart(System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit&#xA;override this.OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit" Usage="webPartManager.OnAuthorizeWebPart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" /> que contiene datos de eventos.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" /> e invoca un controlador para el evento, si existe uno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> llama al método el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se comprueba la autorización para agregarse a una página. Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> se llama al método, genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos, y si hay un método de controlador para el evento, invoca el controlador.  
  
 El proceso de autorizar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles es una característica importante de elementos Web. Cada <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor que se agrega a una zona mediante la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control pasa por un proceso de autorización para determinar si se puede agregar el control. De forma predeterminada, el conjunto de controles de elementos Web no proporciona ningún criterio de filtrado para impedir que los controles que se agreguen a una zona. Pero el conjunto de controles proporcionan los mecanismos necesarios para los desarrolladores crear sus propios criterios de filtrado. Mediante el uso de estos mecanismos, puede crear escenarios de filtrado personalizados. Por ejemplo, podría crear un filtro para que, si un usuario está en un rol de administrador, ciertos controles se agregaría a una zona cuando se representa la página y, si el usuario está en un rol de usuario, no se agregarían esos controles.  
  
 Los mecanismos para controles de filtrado durante el proceso de autorización son el <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> métodos y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Para crear un escenario de filtrado, existen básicamente dos tareas. En primer lugar, asigne las cadenas para la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad de cada uno <xref:System.Web.UI.WebControls.WebParts.WebPart> control que desea filtrar. Estos valores de cadena pueden ser arbitrarios, pero deberían contener los criterios que desea filtrar. Por ejemplo, si deseara que un control determinado para agregarse a un solo si zona administrador el usuario está viendo la página y luego podría asignar un valor de cadena `admin` a la propiedad. A continuación, podría utilizar la característica de roles ASP.NET y agregar todos los usuarios de su sitio para varios roles como administrador, administrador y usuario. Cuando se carga una página, el código de filtrado podría comprobar qué rol de un usuario está en, compárelo con el valor de filtro de autorización en un control que se está comprobando y si (por ejemplo) en la que el usuario está en un rol de administrador y se ha establecido el control <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor a `admin`, se pudo agregar el control.  
  
 El segundo paso en la creación de un escenario de filtrado es escribir código para comprobar la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valores de propiedad <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y determinar si cada control tiene autorización antes de agregarlo a su zona. Hay dos opciones para colocar este código de filtrado. La primera opción es la opción preferida para los desarrolladores de páginas. Puede crear un método para controlar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento directamente en el código de script de servidor de página Web o en un archivo de separación de código. Asociar el método con el evento agregando el `OnAuthorizeWebPart` atributo a la etiqueta para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar en la página, como se muestra en el siguiente código de marcado de ejemplo.  
  
```  
<asp:webpartmanager id="manager1" runat="server"   
   OnAuthorizeWebPart="manager1_AuthorizeWebPart" />  
```  
  
 Todo el método personalizado tiene que hacer es comprobar cada <xref:System.Web.UI.WebControls.WebParts.WebPart> control para los criterios de filtrado y, a continuación, en función de los resultados, asignar un valor booleano para la <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A> propiedad de la <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs> objeto para indicar si el <xref:System.Web.UI.WebControls.WebParts.WebPart> control puede ser agregado. El código en la sección ejemplo muestra cómo hacerlo.  
  
 La segunda opción para colocar el código de filtrado es heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase e invalidar un método para comprobar los criterios de filtro. Los dos métodos que puede invalidar para hacer esto son la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> método o la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método. Aunque funcionan cualquiera de estos métodos, en la mayoría de los casos es preferible para invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, ya que le proporciona mayor control mediante programación sobre el proceso de autorización completa, mientras que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método hace solo una tarea específica , que consiste en generar el evento y compruebe si hay un controlador. Para obtener un ejemplo de código de un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase que invalide la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga del método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer un controlador de eventos personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos, para que el controlador pueda proporcionar código personalizado de filtrado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método. En este ejemplo sería una forma habitual para un desarrollador de páginas proporcionar un escenario de filtrado y la autorización de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se agregarán a una página.  
  
 En la página Web, tenga en cuenta que el `<asp:webpartmanager>` elemento tiene el `OnAuthorizeWebPart` atributo con el nombre del controlador de eventos asignado a él. El método comprueba si los controles de la página tienen sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en valores `admin` y, si es así, devuelve `true`, lo que significa que serán autorizados y se agrega a la página.  
  
> [!NOTE]
>  Tenga en cuenta que los controles que no tiene ningún valor asignado a la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad también se agregan, porque se supone que no forman parte de un escenario de filtrado. Esto sería un enfoque común en un escenario de filtrado: algunos controles de muestra está filtrados, y otros no sería, porque se supone que está disponible para todos los usuarios.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 Porque la configuración de los usuarios en roles está fuera del ámbito de este tema, este ejemplo de código no comprueba las funciones de usuario en el filtrado. Sin embargo, el escenario de filtrado de los controles según los roles de usuario es probable que sea uno de los usos más comunes de esta característica de filtrado. Si tiene roles en su sitio, y desea comprobar las funciones de usuario de este método para filtrar los controles, el método sería similar el siguiente bloque de código (en comparación con el enfoque más sencillo en el ejemplo de código anterior, que no utiliza funciones).  
  
```vb  
Protected Sub WebPartManager1_AuthorizeWebPart(ByVal sender _  
  As Object, ByVal e As WebPartAuthorizationEventArgs)  
  
  If String.IsNullOrEmpty(e.AuthorizationFilter) Then  
    If Roles.IsUserInRole(Page.User.Identity.Name, _  
      e.AuthorizationFilter) Then  
  
      e.IsAuthorized = True  
    Else  
      e.IsAuthorized = False  
    End If  
  End If  
  
End Sub  
```  
  
```csharp  
protected void mgr1_AuthorizeWebPart(object sender,   
  WebPartAuthorizationEventArgs e)  
{  
  if (!String.IsNullOrEmpty(e.AuthorizationFilter))  
  {  
    if(Roles.IsUserInRole(Page.User.Identity.Name, e.authorizationFilter))  
      e.IsAuthorized = true;  
    else  
      e.IsAuthorized = false;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivated : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivated : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" /> para indicar que una página y sus controles se han cargado, y que las conexiones de la página se han activado para empezar a compartir datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento después de una página ha finalizado el proceso de carga. El método proporciona una manera de agregar un controlador para el evento.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnConnectionsActivated` atributo a la `<asp:webpartmanager>` los elementos de una página y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" /> método en una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivating">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivating (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivating(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivating (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivating(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivating : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivating : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" /> para indicar que una página y sus controles se han cargado, y que el proceso de activar las conexiones puede comenzar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento, que proporciona a los desarrolladores con un mecanismo para personalizar mediante programación el proceso de activación de conexiones.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnConnectionsActivating` atributo a la `<asp:webpartmanager>` los elementos de una página y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" /> método en una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanged (System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanged(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanged (e As WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanged(System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" /> que contiene los datos de evento asociados a un modo de presentación que ha cambiado.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" /> para indicar que el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> ha completado el proceso de cambiar de un modo de presentación a otro en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> formar de método en su base simplemente genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> eventos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" /> método. Por ejemplo, después de un cambio de modo de presentación, es posible que desea cambiar la apariencia de la interfaz de usuario (IU), dependiendo de qué pantalla modo se encuentra en la <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs.OldDisplayMode" /> propiedad. O es posible que desee ocultar cierto contenido o mostrar un control determinado.  
  
Cuando se reemplaza el método, normalmente se debe llamar al método base como último paso del método reemplazado, para que el código personalizado se ejecuta primero y el evento se genera en último lugar, lo que indica que el cambio de modo completo.</para></block>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanging (System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanging(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanging (e As WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanging(System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos de evento asociados a un modo de presentación que está cambiando.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" /> para indicar que el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> está en el proceso de cambiar de un modo de presentación a otro en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> formar de método en su base simplemente genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging> eventos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" /> método. Por ejemplo, como un modo de presentación está cambiando, es posible que desee comprobar cuál será el nuevo modo de presentación (mediante el uso de la <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode" /> propiedad) y un cambio en la interfaz de usuario (UI) en función de cuál será el nuevo modo de presentación. Si tuviera un modo de presentación personalizado, puede hacer que ciertos controles visibles si el modo personalizado se va a ser el nuevo modo de presentación.  
  
Cuando se reemplaza este método, normalmente se debe llamar al método base como el primer paso del método reemplazado, por lo que se genera el evento para indicar que un modo de presentación está comenzando a cambiar. A continuación, el código personalizado puede realizar cambios en la interfaz de usuario (UI) antes de que realmente se muestra el nuevo modo de presentación.</para></block>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="webPartManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Provoca el evento <see cref="E:System.Web.UI.Control.Init" />, que es el primer evento en el ciclo de vida del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit%2A> método llama al método base, que genera el <xref:System.Web.UI.Control.Init> eventos del control y, a continuación, lleva a cabo varios pasos preparatorios, como asegurarse de que hay solo una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> en una página de control y la carga datos de personalización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Hay otro control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> en la página</exception>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="webPartManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.Control.PreRender" />, que tiene lugar justo antes de que se represente un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender%2A> método llama al método base, que genera el <xref:System.Web.UI.Control.PreRender> controla el evento para el control y, a continuación, registra varias secuencias de comandos de cliente que son necesarias en las páginas que contienen elementos Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanged (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanged(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanged (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanged(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />, que tiene lugar después de que se active o se desactive la selección de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> eventos, que normalmente es un punto en el tiempo, donde es posible que un desarrollador desea cambiar la apariencia de la interfaz de usuario (UI). Por ejemplo, cuando un nuevo <xref:System.Web.UI.WebControls.WebParts.WebPart> control está seleccionado, el conjunto de controles de elementos Web cambia la representación del control recién seleccionado. Después de borra la selección de un control, se devuelve la representación a su estado normal.  
  
 Después de que un usuario selecciona un determinado <xref:System.Web.UI.WebControls.WebParts.WebPart> control para la edición, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> se llama al método. Cuando el usuario termina de editar el control y lo cierra, con lo que se borra la selección del control, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> se llama al método nuevo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Hay varias opciones relacionadas con la <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> eventos, para permitir a los desarrolladores personalizar la representación que se produce cuando ha cambiado el control seleccionado. En código declarativo, dentro de la <see langword="&lt;asp:webpartmanager&gt;" /> elemento podría establecer el <see langword="OnSelectedWebPartChanged" /> de atributo y asignarle el nombre de un método personalizado. En el método personalizado, puede modificar la representación de los controles seleccionados cuando se produce el evento. Otra opción es heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar el método. Una tercera opción es personalizar la representación en el nivel de zona; Por ejemplo, puede heredar la <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> clase e invalidar sus <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)" /> método para personalizar la representación de controles activada y desactivada durante el proceso de edición.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanging (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanging(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanging (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanging(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />, que tiene lugar durante el proceso de cambiar el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que está activado actualmente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento, que se produce durante el proceso de cambiar qué <xref:System.Web.UI.WebControls.WebParts.WebPart> control está seleccionado actualmente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control usa este método y el evento asociado, para proporcionar una oportunidad de cancelar un proceso en el que está cambiando el control seleccionado. Por ejemplo, se llama al método dentro de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> método y también dentro del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método para proporcionar una manera de cancelar el proceso. Si un usuario hace clic en un control que se está editando el verbo de cancelación, el control ya no está seleccionado y no se guardan los cambios de edición, porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método hace posible cancelar los cambios de edición.  
  
> [!NOTE]
>  Del mismo modo se llama al método durante los métodos que inician y finalizan el proceso de conectar un <xref:System.Web.UI.WebControls.WebParts.WebPart> a otro control, para habilitar la cancelación de ese proceso.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> eventos agregando el `OnSelectedWebPartChanging` atributo a la `<asp:webpartmanager>` los elementos de marcado de página declarativo y asignación para el atributo del nombre de un método personalizado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="webPartManager.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento asociados a la eliminación del control.</param>
        <summary>Produce el evento base <see cref="E:System.Web.UI.Control.Unload" /> y quita la instancia de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> de una página Web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdded (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdded(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdded (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdded(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />, que tiene lugar después de que un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> se ha agregado a una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> se llama al método durante el proceso de agregar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de servidor que se agrega a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) a una página.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> eventos agregando el `OnWebPartAdded` atributo a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdding">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdding (System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdding(class System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdding (e As WebPartAddingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdding(System::Web::UI::WebControls::WebParts::WebPartAddingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit&#xA;override this.OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdding e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />, que tiene lugar durante el proceso de agregar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o un control de servidor o de usuario) a una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento para indicar que un control está en el proceso que se va a agregar. El método también proporciona la opción de cancelar el proceso de adición. Si el control se agrega correctamente, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartAdding` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosed (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosed(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosed (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosed(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" /> para señalar que un control se ha quitado de una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento para indicar que un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de servidor o usuario) se ha cerrado correctamente en una página.  
  
 Para cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control significa para quitarlo de una página para que no se procesa, y también para colocarlo en un especial que contiene el objeto denominado catálogo de página. Un catálogo de página, que corresponde a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar, mantiene las referencias a cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de cada página. Si un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control se declara en una página dentro de un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, los usuarios pueden cambiar la página al modo de presentación de catálogo y agregar a la página todos los controles que se hayan cerrado anteriormente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método proporciona una oportunidad para que los desarrolladores crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> eventos. Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnWebPartClosed` atributo a la `<asp:webpartmanager>` los elementos de una página y, a continuación, asignarle un nombre de método personalizado para el atributo. Es una tarea útil que un desarrollador podría llevar a cabo en este método mostrar un marcador de posición en lugar del control cerrado, completado con información sobre herramientas que indique a los usuarios cómo volver a agregar el control a la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosing (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosing(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosing (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosing(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />, que tiene lugar durante el proceso de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de servidor que se quita de una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento para indicar que un control está en el proceso que se cierra o se quita de una página. El método también proporciona la opción de cancelar el proceso de cierre. Si el control se quitó correctamente de la página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartClosing` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleted (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleted(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleted (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleted(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />, que tiene lugar después de que un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> se ha eliminado permanentemente de una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> se llama al método durante el proceso de eliminación de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de servidor que se agrega a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) desde una página.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> eventos agregando el `OnWebPartDeleted` atributo a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleting (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleting(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleting (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleting(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />, que indica que un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dinámico (o un control de usuario o de servidor incluido en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />) está en el proceso de eliminarse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> controles pueden eliminarse, y cuando se elimina un control, la instancia del control se quita permanentemente de una página y no se puede restaurar. Dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> controles son aquellos que se agregan mediante programación o desde un catálogo de elementos Web, en lugar de controles estáticos que se declaran en el marcado de una página Web.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento para indicar que un control se elimina permanentemente de su zona. El método también proporciona la oportunidad de cancelar el proceso de eliminación. Si el control se elimina correctamente en la página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartDeleting` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoved">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoved (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoved(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoved (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoved(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />, que tiene lugar después de que un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> se ha movido a una ubicación diferente en una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventos al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método, lo que garantiza que el proceso de mover un control está completado antes de que cualquier código en el evento se ejecuta el controlador.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento se produce cuando se mueve un control dentro de su zona actual o a otra zona, y no importa si el movimiento se realiza mediante programación o por el usuario arrastra el control.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventos agregando el `OnWebPartMoved` atributo a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoving">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoving (System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoving(class System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoving (e As WebPartMovingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoving(System::Web::UI::WebControls::WebParts::WebPartMovingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit&#xA;override this.OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoving e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />, que indica que un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de usuario o de servidor incluido en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> está en el proceso de moverse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento, que se produce cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o de otro control de servidor se mueve dentro de su zona o a otra zona. El método también proporciona la oportunidad de cancelar el proceso de mover. Si el movimiento se ha completado correctamente, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartMoving` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />, que tiene lugar después de que se ha establecido una conexión entre los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> método provoca el evento correspondiente al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método, lo que garantiza que se completan los pasos necesarios para conectar dos controles antes de ejecutar cualquier código en el controlador de eventos.  
  
 El método proporciona control mediante programación a través del proceso de creación de conexiones, y el evento asociado es un punto idóneo que se va a actualizar la interfaz de usuario (UI) o notificar a un usuario que se ha establecido una conexión.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> eventos agregando el `OnWebPartsConnected` atributo a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />, que tiene lugar durante el proceso de establecer una conexión entre dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o dos controles de servidor o de usuario en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento, que se produce cuando dos controles intentan establecer una conexión. El método proporciona la oportunidad de cancelar el intento de conexión. Si la conexión es correcta, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartsConnecting` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />, que tiene lugar después de que haya finalizado una conexión entre controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> método provoca el evento correspondiente al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método, que lleva a cabo el proceso de finalización de una conexión entre dos controles.  
  
 El método proporciona control mediante programación a través del proceso de finalización de una conexión, para que los desarrolladores pueden informar al usuario, realizar cambios en la interfaz de usuario (UI), o realizar otros cambios en la aplicación.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> eventos agregando el `OnWebPartsDisconnected` atributo a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> que contiene los datos del evento.</param>
        <summary>Produce el evento <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />, que indica que dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o dos controles de usuario o de servidor incluidos en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> están en el proceso de finalizar una conexión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> método que provoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento, que se produce cuando dos controles están finalizando una conexión. El método proporciona la oportunidad de cancelar el proceso de desconexión. Si la conexión se quita correctamente; el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado agregando el `OnWebPartsDisconnecting` atributo a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los desarrolladores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> método para personalizar el control de eventos.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Personalization">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Personalization As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ Personalization { System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Personalization : System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a un objeto que contiene los datos de personalización para una página Web.</summary>
        <value>Objeto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> que contiene datos de personalización.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad proporciona una manera de obtener acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> objeto que está asociado a una página a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Con esta propiedad, puede tener acceso a los diversos miembros del objeto de la personalización. Por ejemplo, puede usar el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> para cambiar el ámbito de personalización de la página de compartidas al ámbito de usuario, o viceversa. También puede averiguar el ámbito de personalización actual de la página, si la personalización está habilitada en la página, qué proveedor se utiliza para los datos de personalización y mucho más.  
  
 Tenga en cuenta que los datos al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es únicamente los datos de personalización de nivel de página que realiza el seguimiento de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Los datos de personalización específicos del control, como los valores de propiedades personalizables <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, es no forma parte de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad.  
  
> [!NOTE]
>  Para obtener más información sobre la personalización de elementos Web, consulte [Web Parts Personalization Overview](https://docs.microsoft.com/previous-versions/aspnet/z36h8be9(v=vs.100)).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad mediante programación.  
  
 La siguiente página Web permite al usuario especificar el modo de edición para editar determinados aspectos de la <xref:System.Web.UI.WebControls.Calendar> control. El **Alternar ámbito** botón cambia la página al usuario o ámbito de personalización compartida. El **del modo de edición** y **Browse Mode** botones cambian a la página en el modo de presentación adecuada. Tenga en cuenta que en el `<script>` etiqueta sección del archivo, dos de los métodos que controlan los eventos utilizan el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad para tener acceso a miembros útiles del objeto subyacente. En concreto, estos métodos usan el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> método y el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> propiedad del objeto que tiene acceso a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Personalization#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/CS/wpmgrPersonalizationCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Personalization#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/VB/wpmgrPersonalizationVB.aspx#1)]  
  
 Para que ejecutar el ejemplo de código, también debe habilitar un usuario o los usuarios personalizar páginas en el ámbito compartido. Agregar una entrada al archivo Web.config, en la `<system.web>` sección, parece que el marcado siguiente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow  
        users="[Replace the text and brackets with a user name or   
           group.]"  
        roles="admin"   
        verbs="enterSharedScope"  />  
    </authorization>  
  </personalization>  
</webParts>   
```  
  
 Después de cargar la página en un explorador, haga clic en el **Alternar ámbito** botón y observe que la página ahora indica el ámbito está compartido. Haga clic en **del modo de edición** para cambiar el modo de presentación, haga clic en el menú de verbos en el control visible y seleccione **editar** en el menú. Observe que aparece la interfaz de usuario (UI) para ambos controles de edición. Ahora haga clic en **Browse Mode** para volver a la exploración normal. Si la página indica que está en el ámbito compartido, haga clic en **Alternar ámbito** nuevo para asegurarse de que la página está en el ámbito de usuario. A continuación, siga los mismos pasos para editar el control de nuevo, pero tenga en cuenta que ahora en la interfaz de usuario de edición, el <xref:System.Web.UI.WebControls.WebParts.BehaviorEditorPart> control no aparece. Eso es porque este control solo funciona cuando la página está en el ámbito de personalización compartida.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z36h8be9(v=vs.100)">Información general de personalización de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScript">
      <MemberSignature Language="C#" Value="protected virtual void RegisterClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterClientScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterClientScript();" />
      <MemberSignature Language="F#" Value="abstract member RegisterClientScript : unit -&gt; unit&#xA;override this.RegisterClientScript : unit -&gt; unit" Usage="webPartManager.RegisterClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> emita script de cliente que se utiliza para las distintas características de personalización, como arrastrar controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> en una página Web.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="webPartManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> que recibe el contenido del control que se va a escribir en la página.</param>
        <summary>Se reemplaza para evitar que el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> represente cualquier contenido.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="webPartManager.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda los datos de estado para el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> a fin de que los datos se puedan restaurar en una solicitud futura a la página Web que contenga el control.</summary>
        <returns>Clase <see cref="T:System.Object" /> que contiene los datos de estado guardados del control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A> método guarda los datos de estado para las propiedades que deben conservarse en las devoluciones de página, incluso cuando el <xref:System.Web.UI.Control.EnableViewState%2A> propiedad está establecida en `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void SaveCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SaveCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SaveCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SaveCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.SaveCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state"><see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contiene los datos de estado que se van a cargar.</param>
        <summary>Guarda los datos de estado de personalización personalizados que mantiene el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />, para que se puedan volver a cargar cada vez que se vuelva a cargar la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A> método es fundamental en el proceso de personalización, ya que permite que la configuración de usuario personalizado que se almacenará para futuras sesiones del explorador y las visitas a una página. El método guarda los datos de estado de personalización personalizada, que incluye elementos como los siguientes: dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor que se han agregado a una página o eliminado desde una página; los controles que se han movido en una página; y las conexiones dinámicas que tienen se ha creado o eliminado.  
  
 No se puede llamar a este método directamente desde el código. Sin embargo, puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> método, que a su vez llama a este método para guardar los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los programadores pueden invalidar este método en una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase para personalizar el proceso de guardar los datos de personalización.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedWebPart As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ SelectedWebPart { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor que está seleccionado actualmente para edición o para crear una conexión con otro control.</summary>
        <value>Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que está seleccionado actualmente para edición o para formar una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad devuelve una referencia a un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor que está seleccionado actualmente para edición o para crear una conexión con otro control.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control proporciona varios métodos útiles y eventos para controlar el proceso de selección de un control. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> justo después de selecciona un control, pero antes de que se haga algún cambio, se produce el evento. Para llevar a cabo algunas acciones en el control después de seleccionarlo, invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método. Por ejemplo, es posible que desee cambiar la apariencia de un control que está seleccionado, pero no ha cambiado todavía, para resaltar visualmente qué control está seleccionado.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> evento tiene lugar inmediatamente después de que se cambió el control seleccionado. Para llevar a cabo algunas acciones en el control después de ha cambiado, invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanged As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ SelectedWebPartChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que la selección de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> ha cambiado y se ha movido a otro control en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se puede usar junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método para cambiar la interfaz de usuario (UI) de un control seleccionado. Por ejemplo, si el usuario cambia la página al modo de diseño (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>) y, a continuación, selecciona un <xref:System.Web.UI.WebControls.WebParts.WebPart> control con la intención de ello, arrástrelo a una nueva posición, es común para cambiar la representación del control seleccionado, por ejemplo cambiando el color de su borde o en segundo plano mientras está seleccionado.  
  
> [!NOTE]
>  Para obtener más información sobre el consumo de eventos, vea [Cómo: Consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanging As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ SelectedWebPartChanging;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce durante el proceso de cambiar qué control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor está seleccionado actualmente en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se puede usar junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método. Los desarrolladores de páginas pueden crear un controlador de eventos en su código agregando el `OnSelectedWebPartChanging` atributo a la `<asp:webpartmanager>` los elementos de una página y establecer el valor del atributo con el nombre de un método personalizado que controlará el evento.  
  
 Este evento se produce durante el proceso de comenzar o finalizar una conexión entre controles y cuándo comienza y termina una edición de un control. Para obtener más información, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método.  
  
 Normalmente, cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento se produce como resultado directo de una acción del usuario que cambia el control seleccionado, se puede cancelar el evento. Sin embargo, hay un escenario en el que no se puede cancelar el evento. Si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> se elimina el control, la <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario, sería huérfanos. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, no el usuario y deben determinar qué control está seleccionado actualmente y cuándo se debe cambiar la selección sin ninguna posibilidad de interrupción, por lo que puede completar el proceso de limpieza todos los controles. Por diseño, por lo tanto, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> método no se puede cancelar en este escenario. Para un evento relacionado que se puede cancelar, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SetPersonalizationDirty">
      <MemberSignature Language="C#" Value="protected void SetPersonalizationDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPersonalizationDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetPersonalizationDirty ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetPersonalizationDirty();" />
      <MemberSignature Language="F#" Value="member this.SetPersonalizationDirty : unit -&gt; unit" Usage="webPartManager.SetPersonalizationDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece un marcador que muestra que los datos de personalización del control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> personalizado han cambiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> método establece una marca que finalmente hace que los componentes de personalización en el control de elementos Web configurado para guardar los datos de personalización actualizados. Para obtener más información sobre los escenarios que pueden producir cambios en los datos de personalización registrados por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> método no se puede llamar directamente desde el código y no se puede reemplazar porque se utiliza internamente por el control de elementos Web que se establece como parte de la característica de personalización de elementos Web.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>El método puede llamarse mediante una derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase. Esto podría ser útil si desea personalizar la personalización de componentes de control de elementos Web establecido y, por tanto, necesitan controlar el proceso de establecer marcas para los datos de personalización.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedWebPart">
      <MemberSignature Language="C#" Value="protected void SetSelectedWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetSelectedWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetSelectedWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.SetSelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.SetSelectedWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">Control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor que se ha seleccionado.</param>
        <summary>Establece el valor de la propiedad <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> igual al control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o control de servidor actualmente seleccionado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> se llama al método durante los procesos que comienza o finalizan la edición del control especificado por el `webPart` parámetro y los que comenzar o finalizar una conexión que incluye `webPart`.  
  
 Al principio de los procesos de edición y conexión, `webPart` es el control que se ha seleccionado para editar o para especificar una conexión.  
  
 Al final de los procesos de edición y conexión, `null` se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> método, lo que resulta en el control seleccionado actualmente ya no está seleccionado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SkinID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una cadena vacía ("") para que no se pueda aplicar ninguna máscara al control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <value>Cadena vacía que evita que se asigne una máscara al control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A> invalidaciones de propiedad heredado <xref:System.Web.UI.Control.SkinID%2A?displayProperty=nameWithType> propiedad para evitar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, que es un control invisible, utilice máscaras. La implementación de la propiedad evita que una máscara que se asigna al devolver siempre una cadena vacía de la `get` descriptor de acceso y siempre produce una excepción si hay un intento para establecer un valor el `set` descriptor de acceso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se ha intentado establecer el valor de propiedad.</exception>
        <altmember cref="P:System.Web.UI.Control.SkinID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="StaticConnections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ StaticConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a la colección de todos los objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> de una página Web que se definen como conexiones estáticas.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene todas las conexiones estáticas de la página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad la usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para realizar un seguimiento y administrar todas las conexiones estáticas en una página. Una conexión estática, a diferencia de una conexión dinámica, no deben agregarse a una página cada vez que se representa la página.  
  
 La colección al que hace referencia esta propiedad contiene todas las conexiones estáticas que existen en la página, si se crean mediante programación o especificados con un `<asp:webpartconnection>` elemento de marcado de la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Un archivo de código fuente que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Una página Web que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El código siguiente contiene solo la parte de la página Web del ejemplo. También necesitará obtener las dos primeras partes del ejemplo: control de usuario personalizado y el código fuente de la interfaz--y controles personalizados de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Ese tema también explica las opciones para compilar el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 La tercera parte del ejemplo de código es la página Web. Contiene el marcado declarativo de la página `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **Connect** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **Connect**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador más adelante, esta conexión estática ya estará establecida y no será necesario volver a crear cada vez que carga la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SupportedDisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedDisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ SupportedDisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedDisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de sólo lectura de todos los modos de presentación que están disponibles en una página Web determinada.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> que contiene el conjunto de objetos <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> disponibles en una página Web concreta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad contiene sólo los modos de presentación que están realmente disponibles en una página, dados los tipos de controles de zona está presentes en la página.  
  
> [!NOTE]
>  Modos de presentación se pueden deshabilitar y, cuando se deshabilita un modo de presentación, no se agrega a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> colección, incluso cuando el tipo de zona que admita ese modo de presentación correspondiente está presente en la página.  
  
 Siempre se admiten el modo de exploración y el modo de diseño. Los modos de presentación que pueden variar son edición, catálogo y modos de conexión. Cada uno de estos modos de presentación está asociado con un tipo determinado de <xref:System.Web.UI.WebControls.WebParts.ToolZone> control. Es la presencia de esa zona especialmente con tipo en una página Web que hace que un determinado modo de presentación que se agregarán a la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. Por ejemplo, si una página Web contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona pero no un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> de zona, el modo de presentación de edición es uno de los modos compatibles en la página, pero no se admite el modo de presentación de catálogo.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad difiere el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad, que hace referencia a una colección que contiene todos los modos de presentación que están disponibles para el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, incluso aquellos que no se admiten en una página determinada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. El código usa esta propiedad para rellenar la lista con sólo los modos de presentación disponibles en la página Web actual.  
  
 Hay tres admite los modos de presentación en esta página: exploración, diseño y edición. Los dos primeros siempre están disponibles, y el modo de edición está disponible en este ejemplo de código porque la página contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> control. El catálogo y conectar pantalla no se muestran los modos, porque sus zonas correspondientes no están en esta página.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/CS/wpmgrSuppDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/VB/wpmgrSuppDisplayModesvb.aspx#1)]  
  
 Después de cargar la página en un explorador, puede utilizar el control de lista desplegable para cambiar la página de modo de exploración al modo de diseño y, a continuación, al modo de edición. En modo de edición, puede haga clic en el menú de verbos de la lista desplegable en el encabezado de uno de los controles de servidor y seleccione **editar** para editar el control.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4">Modos de presentación de página de elementos Web</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsDirty As Boolean Implements IPersonalizable.IsDirty" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::WebControls::WebParts::IPersonalizable::IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si los datos de estado de personalización administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> han cambiado en una página Web.</summary>
        <value>Valor booleano que indica si los datos de estado de personalización han cambiado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad proporciona una manera para que los llamadores determinar si el estado datos que se administran mediante la personalización del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control ha cambiado. Cuando los usuarios personalización el nivel de página de detalles, por ejemplo, cambiar el diseño, creación o eliminación de las conexiones y la adición o eliminación de controles, los datos de personalización administran por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar los cambios. Se trata de un método paso a través que devuelve a los llamadores el valor del elemento protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> propiedad, que los llamadores no puede tener acceso directamente.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad no indica si los valores de propiedad personalizable o las propiedades individuales que afectan a la apariencia del individuo <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, han cambiado. Personalización de nivel de control se realiza un seguimiento de cada control individualmente. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad sólo indica si los datos de personalización que se encuentra en el nivel de página y se administra mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control ha cambiado.  
  
 En la lista siguiente se describe algunos casos comunes de personalización que provocaría la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad para devolver un valor de `true`, lo que indica que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene algunos datos de personalización modificados:  
  
-   Cerrar estático <xref:System.Web.UI.WebControls.WebParts.WebPart> control (o control de servidor o usuario) en una página.  
  
-   Restaurar estático cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> control desde un catálogo a una página.  
  
-   Mover un control dentro de su zona o a otra zona.  
  
-   Agregar un control de un catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor, o agregar un control mediante programación.  
  
-   Creación de una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, ya sea mediante programación o mediante la interfaz de usuario (UI) de conexión.  
  
-   Eliminar una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, ya sea mediante programación o mediante la interfaz de usuario de conexión.  
  
 Para obtener acceso a este valor de propiedad, primero debe convertir el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> instancia del control a la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interfaz; se puede leer a continuación, el <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> valor de propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un uso sencillo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> instancias de propiedad para indicar alguna personalización página comunes que hacen que una <xref:System.Web.UI.WebControls.WebParts.WebPartManager> los datos de personalización del control para cambiar.  
  
 El ejemplo de código consta de cuatro partes:  
  
-   Un control de usuario que le permite cambiar los modos de presentación en una página que contiene controles de elementos Web.  
  
-   Un archivo de código fuente que contiene el código personalizado dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar y una interfaz.  
  
-   Una página Web que hospeda todos los controles.  
  
-   Explicación de cómo funciona el ejemplo de código.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> información general de clases. Para obtener información acerca de los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: Cambiar los modos de presentación en un servidor Web de elementos página](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es el archivo de origen con los controles personalizados y la interfaz. Tenga en cuenta que el `IZipCode` interfaz expone un método y que este método tal como se implementa en personalizado `ZipCodeWebPart` control actúa como un método de devolución de llamada para habilitar `ZipCodeWebPart` para que actúe como un proveedor en un escenario de conexión. El otro control, `WeatherWebPart`, control actúa como consumidor en una conexión; puede utilizar la interfaz determinada proporcionada por `ZipCodeWebPart`. En una aplicación real, `WeatherWebPart` podría utilizar un valor del código postal personalizado del proveedor y, a continuación, proporcionar información meteorológica gráfica a los usuarios.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica; por lo tanto, tenga en cuenta que el `Register` directiva para este componente en la parte superior de la página Web contiene sólo `TagPrefix` y `Namespace` atributos, sin un `Assembly` atributo. Para ver un tutorial que muestra cómo compilar, consulte [Tutorial: Control de servidor Web de desarrollo y el uso de un personalizado](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que contiene dos <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zonas con la primera de ellas que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. También hay un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, que contiene un estándar <xref:System.Web.UI.WebControls.Calendar> control que los usuarios pueden agregar a la página. El `<asp:connectionszone>` elemento proporciona una conexión de la interfaz de usuario para que los usuarios crear conexiones entre controles. En el `Page_PreRender` método, tenga en cuenta que comprueba para ver si los datos de personalización han cambiado y, si es así, actualiza el texto de `Label1`.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/wpmgrIsDirtyCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/wpmgrIsDirtyVB.aspx#1)]  
  
 Después de cargar la página en un explorador, pruebe a crear algunos de los escenarios mencionados en la sección Comentarios de este tema que cambiará los datos de personalización. Medida que se realizan varios cambios, cuando un cambio implica uno de los escenarios de personalización que se realiza un seguimiento el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, el texto de la `Label1` control se muestra para indicar que los datos de personalización ha cambiado. Por ejemplo, se puede:  
  
-   Crear una conexión entre controles al hacer clic en el **conectar controles WebPart** botón.  
  
-   Use la **modo de presentación** control de lista desplegable para cambiar la página al modo de catálogo y agregar el **mi calendario** control al segundo <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
-   Cambio de la página para examinar el modo, haga clic en el menú de verbos (se muestra con un símbolo de flecha en la barra de título) para la **mi calendario** control y seleccione **cerrar** para cerrarlo y agregarlo al catálogo de la página.  
  
-   Devolver la página al modo de catálogo y agregue el **mi calendario** control a la página.  
  
-   Use la **modo de presentación** controlar para cambiar al modo de diseño de la página y reorganice el diseño de los controles arrastrando uno o varios de ellos a otra zona o a una posición diferente en la misma zona.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.PersonalizationState" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Load">
      <MemberSignature Language="C#" Value="void IPersonalizable.Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Load (state As PersonalizationDictionary) Implements IPersonalizable.Load" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Load;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state"><see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contiene los datos de estado que se van a cargar.</param>
        <summary>Devuelve los datos de estado de personalización personalizados y anteriormente cargados que deben cargarse en el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es una implementación de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=nameWithType> método, que proporciona una forma para el control de elementos Web del conjunto que tengan acceso directo protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=nameWithType> método. Cuando se llama a este método, almacena los datos personalizados que administra el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y que se guardó previamente en el almacén de datos permanente para usarlo más adelante en el proceso de inicialización.  
  
> [!NOTE]
>  En la mayoría de los casos, no necesita código para desarrolladores de páginas y controles llamar a este método, porque se utiliza principalmente el conjunto como mecanismo para recuperar los datos de personalización de controles de elementos Web.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Un escenario en el que los desarrolladores usar este método es si está desarrollando un marco de trabajo de personalización personalizada para utilizarla en lugar de la que proporciona el conjunto de controles de elementos Web. En tales casos, los desarrolladores, podrían heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> método para devolver una implementación personalizada de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto. Personalizado <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto llamaría a la implementación de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en el momento adecuado para cargar datos de personalización.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Save">
      <MemberSignature Language="C#" Value="void IPersonalizable.Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (state As PersonalizationDictionary) Implements IPersonalizable.Save" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Save;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Objeto <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> que contiene los datos de estado que se van a guardar.</param>
        <summary>Guarda los datos de estado de personalización propios que son administrados por el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> método es una implementación de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=nameWithType> método, que proporciona una forma para el control de elementos Web del conjunto que tengan acceso directo protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=nameWithType> método. Cuando se llama a este método, guarda personalizadas en todos los datos que está administrados por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control en el almacén de datos permanente para una aplicación de elementos Web.  
  
> [!NOTE]
>  En la mayoría de los casos, no necesita código para desarrolladores de páginas y controles llamar a este método, porque se utiliza principalmente el conjunto como mecanismo para guardar los datos de personalización de controles de elementos Web.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Un escenario en el que los desarrolladores funcionaría con este método es si está desarrollando un marco de trabajo de personalización personalizada para utilizarla en lugar de la proporcionada por el conjunto de controles de elementos Web. En tales casos, los desarrolladores, podrían heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> método para devolver una implementación personalizada de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto. Personalizado <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto llamaría a la implementación de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en el momento adecuado para guardar los datos de personalización.</para></block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="webPartManager.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aplica los datos de estado de personalización al control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> y llama al método base para permitir el seguimiento de los cambios a los datos de estado de la vista en el control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los cambios a los datos de estado de vista se almacenan en un <xref:System.Web.UI.StateBag> de objetos y puede obtenerse a través del control <xref:System.Web.UI.Control.ViewState%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que permite que los controles secundarios sean visibles.</summary>
        <value>Valor booleano que indica si un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> y sus controles secundarios son visibles. <see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control reemplaza a la base de <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> propiedad para devolver siempre un valor de `true` para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad. Aunque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> propio control no está visible, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad debe establecerse en `true` para que todos sus controles secundarios sean visibles de forma predeterminada.  
  
 Si se intenta establecer el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad, siempre genera un error porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control ha invalidado el comportamiento de la propiedad base e impide que asignarle algún valor a la propiedad.  
  
 Esta propiedad no es enlazable en diseñadores visuales, pero es enlazable en tiempo de ejecución. Para obtener más información, vea <xref:System.ComponentModel.BindableAttribute>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se ha intentado asignar un valor a esta propiedad.</exception>
      </Docs>
    </Member>
    <Member MemberName="WebPartAdded">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdded As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartAdded;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de agregar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dinámico u otro control de servidor a una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> para indicar que el control se agregó correctamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento es útil para indicar que un control dinámico (un control agregado mediante programación, a diferencia de que se declara en el marcado de página) se agregó correctamente a una zona. Junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> método, el evento proporciona a los desarrolladores una manera de actualizar la interfaz de usuario (UI) o en caso contrario, notifique a los usuarios que se ha agregado correctamente un control.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartAdding">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdding As WebPartAddingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAddingEventHandler ^ WebPartAdding;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " Usage="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aparece durante el proceso de agregar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dinámico u otro control de servidor a una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> método una vez comenzado el proceso de agregar un control a una zona. Este evento proporciona una oportunidad para cancelar el proceso antes de que se completa. Si el proceso de adición es correcto, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar controladores personalizados para el evento agregando el `OnWebPartAdding` atributo a la `<asp:webpartmanager>` los elementos de una página y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartClosed">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosed As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartClosed;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aparece cuando un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o un control de usuario o de servidor) se quita de una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento indica que un control se ha cerrado correctamente, un usuario o mediante programación. Para cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control significa para quitarlo de una página para que no se procesa, y también para colocarlo en un especial que contiene el objeto denominado catálogo de página. Un catálogo de página, que corresponde a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar, mantiene las referencias a cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de cada página. Si un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control se declara en una página dentro de un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, los usuarios pueden cambiar de una página en modo de presentación de catálogo y agregar a una página de todos los controles que se hayan cerrado anteriormente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método, que genera el evento y proporciona un controlador para él.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnWebPartClosed` atributo a la `<asp:webpartmanager>` los elementos de una página y, a continuación, asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartClosing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosing As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartClosing;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aparece durante el proceso de quitar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o un control de usuario o de servidor) de una página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> método cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control está en proceso de cierre de un control. Si la eliminación del control se realiza correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento agregando el `OnWebPartClosed` atributo a la <`asp:webpartmanager>` los elementos de una página y asignarle un nombre de método personalizado para el atributo.  
  
 Normalmente, cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento se produce como resultado directo de cierre de un usuario un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, se puede cancelar el evento. Sin embargo, hay un escenario en el que no se puede cancelar el evento. Si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> se elimina el control, la <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario, sería huérfanos. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, no el usuario. Y cuándo el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control está en proceso que realiza la llamada la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método para cerrar cada control y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> provoca el evento, no se puede cancelar el evento (por diseño) porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> necesita para completar la tarea de limpieza todos los controles de la zona.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleted As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartDeleted;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de eliminar un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor de una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento es útil para indicar que un control dinámico (un control agregado mediante programación, a diferencia de que se declara en el marcado de página) se eliminó correctamente de una zona. Junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> método, el evento proporciona a los desarrolladores una manera de actualizar la interfaz de usuario (UI) o en caso contrario, notifique a los usuarios que un control se eliminó correctamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleting As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartDeleting;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aparece durante el proceso de eliminar permanentemente una instancia de un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dinámico u otro control de servidor de una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> método durante el proceso de eliminación de un control dinámico (uno que se ha agregado mediante programación o por el usuario a través de la interfaz de usuario de elementos Web). El evento proporciona una oportunidad para cancelar el proceso antes de que finalice. Si se ha completado correctamente el proceso de eliminación, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar controladores personalizados para el evento agregando el `OnWebPartDeleting` atributo a la `<asp:webpartmanager>` los elementos de una página y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartMoved">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoved As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartMoved;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de mover un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o un control de servidor a una ubicación diferente en una página Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se aplica a estático (declarado en el marcado de una página Web) y controles dinámicos. Está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> método. Dado que el evento se genera cuando se complete un movimiento, los desarrolladores pueden incluir un controlador de eventos para proporcionar alguna notificación a los usuarios, alguna validación u otras acciones. Para agregar un controlador de eventos, puede agregar un `OnWebPartMoved` atributo a la `<asp:webpartmanager>` los elementos de una página y asigne el nombre de un método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartMoving">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoving As WebPartMovingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartMovingEventHandler ^ WebPartMoving;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " Usage="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce durante el proceso de mover un control <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> u otro control de servidor contenido en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento se desencadena cuando una <xref:System.Web.UI.WebControls.WebParts.WebPart> o de otro control de servidor se mueve dentro de su propia zona o a otra zona. Esto puede ocurrir cuando un usuario arrastra un control y cuando hay un movimiento mediante programación.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> método y proporciona una oportunidad de cancelar el proceso de mover antes de que se completa. Si se ha completado el movimiento y el control se coloca en una nueva posición, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventos.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnWebPartMoving` atributo a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartCollection WebParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartCollection WebParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebParts As WebPartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartCollection ^ WebParts { System::Web::UI::WebControls::WebParts::WebPartCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebParts : System.Web.UI.WebControls.WebParts.WebPartCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a todos los controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> cuyo seguimiento efectúa el control <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> en una página Web.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection" /> que contiene referencias a un conjunto de controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad la usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para realizar un seguimiento de todos los <xref:System.Web.UI.WebControls.WebParts.WebPart> los controles que están dentro de <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas en la página. Aunque la colección es de solo lectura, puede tener acceso a individuales <xref:System.Web.UI.WebControls.WebParts.WebPart> controles mediante programación a través de la colección y realizar los cambios en ellos.  
  
> [!NOTE]
>  Es posible tener una <xref:System.Web.UI.WebControls.WebParts.WebPart> coloca el control en una página fuera de un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona, lo que resulta en el control no está realizando un seguimiento por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar o hace referencia en su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> colección. Sin embargo, hay pocas razones para usar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control fuera de una zona, ya que, a continuación, pierde su funcionalidad de elementos Web y actúa como un control de servidor normal.  
  
 Cualquier tipo de control que se puede colocar en una zona, si un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control, un control ASP.NET estándar, un control de usuario o un control de servidor personalizado, puede tratarse como un <xref:System.Web.UI.WebControls.WebParts.WebPart> control en tiempo de ejecución. Cuando un control que no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se coloca en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona en tiempo de ejecución ASP.NET ajusta el control con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto, para que el control puede comportarse como un verdadero <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Por lo tanto, mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control puede realizar un seguimiento de cualquier tipo de control de servidor, independientemente de si se deriva de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad mediante programación para el acceso individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Tenga en cuenta que en el marcado declarativo para la página Web, en el `<asp:webpartzone>` elemento hay son dos controles de servidor ASP.NET estándar. Aunque estas no heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase, porque se encuentran en una zona se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> de objetos en tiempo de ejecución y, por lo tanto, se incluirán en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad. También podría agregar personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, controles de usuario o servidor personalizado se controla en esta zona y se podrían administrar la misma manera.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_WebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/CS/wpmgrWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_WebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/VB/wpmgrWebPartsVB.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. Dentro de la `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el marcado siguiente.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, si hace clic en el **WebPart recuento** botón, el código usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad para devolver el recuento de los controles de la colección. Si hace clic en el **ocultar el título del calendario** botón, el código cambia el calendario para que se represente con sólo un borde y no un título.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsConnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de establecer una conexión concreta entre controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o controles de servidor o de usuario).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> método. El evento es útil porque una vez que sepa que una conexión está completa, es posible que desee informar al usuario del hecho o incluso cambiar la interfaz de usuario (UI) de la página. Por ejemplo, desea mostrar una imagen gráfica que sugiere una conexión correcta entre dos controles, o mostrar un mensaje breve y, a continuación, cambie el modo de presentación de página atrás para modo de exploración.  
  
 Los desarrolladores de páginas pueden asociar un controlador de eventos personalizado con este evento agregando el `OnWebPartsConnected` atributo a la `<asp:webpartmanager>` los elementos de la página y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsConnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aparece durante el proceso de crear una conexión entre controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (o controles de usuario o de servidor colocados en una zona <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> método, e indica que ha comenzado el proceso de conexión (por ejemplo, un usuario ha seleccionado un control y hace clic en un verbo de conexión), pero no se ha completado. El evento proporciona una oportunidad de cancelar una conexión antes de que se completa. Si la conexión se ha completado correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> eventos.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando el `OnWebPartsConnecting` atributo a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsDisconnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de finalizar una conexión entre dos controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o controles de servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> método. El evento es útil porque una vez que sepa que ha finalizado una conexión, puede ser conveniente informar al usuario, realizar algunas acciones de limpieza en el código o realizar otros cambios en la interfaz de usuario (UI).  
  
 Los desarrolladores de páginas pueden asociar un controlador de eventos personalizado con este evento agregando el `OnWebPartsDisConnected` atributo a la `<asp:webpartmanager>` los elementos de la página y asignarle un nombre de método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsDisconnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce durante el proceso de finalizar la conexión entre controles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> o controles de servidor previamente conectados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> método y señala el hecho de que un usuario ha hecho clic un verbo de desconexión o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> en caso contrario, se ha llamado al método. El evento proporciona una oportunidad para cancelar el proceso de finalización de una conexión antes de que se completa. Si la conexión se ha finalizado correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> eventos.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando el `OnWebPartsDisconnecting` atributo a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado para el atributo.  
  
 Normalmente, cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento se produce como resultado directo de una acción del usuario que finaliza una conexión, se puede cancelar el evento. Sin embargo, hay varios escenarios en los que no se puede cancelar el evento. Es el primer escenario, si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> se elimina el control, la <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario, sería huérfanos. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, no el usuario y también deben ser capaz de terminar las conexiones de los controles conectados sin ninguna posibilidad de interrupción, para que puede completar el proceso de limpieza y de cierre todos los controles. Por diseño, por lo tanto, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> método no se puede cancelar en este escenario. Para un evento relacionado que se puede cancelar, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> eventos.  
  
 El segundo escenario en el que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no se puede cancelar el evento es cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método (Esto llama durante cada solicitud a una página, por ejemplo), y no hay algún tipo de conflicto en las conexiones existentes en una página. Por ejemplo, quizás un usuario conecta el control x al control y, pero un usuario compartido conecta el control x al control z, y aún control x no está permitido para formar varias conexiones. En este caso, la configuración de un usuario individual para la conexión tiene prioridad y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control resuelve el conflicto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método y la finalización de la conexión entre x y z para un usuario concreto. Dado que esta desconexión es esencial para resolver el conflicto, por diseño, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos no se puede cancelar en este escenario.  
  
 El tercer escenario en el que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> método no se puede cancelar es cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor que está conectado actualmente se eliminó o se cierra. Dado que el control definitivamente se va a quitarse de la página, es una necesidad lógica para quitar la conexión. Por lo tanto, cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control invoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método, que a su vez desencadena el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no es de evento, por diseño no existe ninguna posibilidad de cancelar el evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Controles de elementos Web de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Zones">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Zones As WebPartZoneCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ Zones { System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Zones : System.Web.UI.WebControls.WebParts.WebPartZoneCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartZoneCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a una colección de todas las zonas <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> de una página Web.</summary>
        <value>Colección <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection" /> que hace referencia a un conjunto de zonas <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad la usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control realice un seguimiento el <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas en una página Web. Tenga en cuenta que la propiedad no hace referencia a todos los tipos de zonas; hace referencia a solo las zonas que se derivan de la <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> clase, incluidas <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zonas.  
  
 Aunque la colección al que hace referencia la propiedad es de solo lectura, puede usarlo para acceder a los objetos individuales de la colección y trabajar con ellos mediante programación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad mediante programación para el acceso individual <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> controles de zona. Tenga en cuenta que en el marcado declarativo para la página Web, hay dos `<asp:webpartzone>` elementos, que contiene un control de servidor. En el `<script>` sección de la página, el código utiliza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad para tener acceso a las zonas individuales, muestra todos los identificadores de zona y, a continuación, cambiar el color de fondo en la segunda zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Zones#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/CS/wpmgrzonescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Zones#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/VB/wpmgrzonesvb.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. Dentro de la `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el marcado siguiente.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, si hace clic en el **lista de identificadores de zona** botón, el código usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad para mostrar los identificadores de todas las zonas de la colección. Si hace clic en el **Cambiar zona BackColor** botón, el código cambia el color de fondo de la segunda zona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>